
tanwaR4S.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001448  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08001554  08001554  00011554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080015a0  080015a0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080015a0  080015a0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080015a0  080015a0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080015a0  080015a0  000115a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080015a4  080015a4  000115a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080015a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000390  2000000c  080015b4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000039c  080015b4  0002039c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cedf  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024bd  00000000  00000000  0002cf14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000800  00000000  00000000  0002f3d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b10  00000000  00000000  0002fbd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000443f  00000000  00000000  000306e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d18f  00000000  00000000  00034b27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086324  00000000  00000000  00041cb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c7fda  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001310  00000000  00000000  000c8030  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00006383  00000000  00000000  000c9340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800153c 	.word	0x0800153c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800153c 	.word	0x0800153c

0800014c <_ZN7IgniterC1EP12GPIO_TypeDeftS1_t>:
#include <Igniter.hh>

//(names of args start with '_' sign)
Igniter::Igniter(GPIO_TypeDef* _GPIO_PORT_IGNITER, uint16_t _PIN_IGNITER, GPIO_TypeDef* _IGN_GPIO_PORT_TEST_CON, uint16_t _IGN_PIN_TEST_CON){
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	603b      	str	r3, [r7, #0]
 8000158:	4613      	mov	r3, r2
 800015a:	80fb      	strh	r3, [r7, #6]
	GPIO_PORT_IGNITER = _GPIO_PORT_IGNITER;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	68ba      	ldr	r2, [r7, #8]
 8000160:	601a      	str	r2, [r3, #0]
	PIN_IGNITER = _PIN_IGNITER;
 8000162:	68fb      	ldr	r3, [r7, #12]
 8000164:	88fa      	ldrh	r2, [r7, #6]
 8000166:	809a      	strh	r2, [r3, #4]
	GPIO_PORT_TEST_CON = _IGN_GPIO_PORT_TEST_CON;
 8000168:	68fb      	ldr	r3, [r7, #12]
 800016a:	683a      	ldr	r2, [r7, #0]
 800016c:	609a      	str	r2, [r3, #8]
	PIN_TEST_CON = _IGN_PIN_TEST_CON;
 800016e:	68fb      	ldr	r3, [r7, #12]
 8000170:	8b3a      	ldrh	r2, [r7, #24]
 8000172:	819a      	strh	r2, [r3, #12]
}
 8000174:	68fb      	ldr	r3, [r7, #12]
 8000176:	4618      	mov	r0, r3
 8000178:	3714      	adds	r7, #20
 800017a:	46bd      	mov	sp, r7
 800017c:	bc80      	pop	{r7}
 800017e:	4770      	bx	lr

08000180 <_ZNK7Igniter12is_connectedEv>:

bool Igniter::is_connected() const{
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(GPIO_PORT_TEST_CON, PIN_TEST_CON) == GPIO_PIN_SET)
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	689a      	ldr	r2, [r3, #8]
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	899b      	ldrh	r3, [r3, #12]
 8000190:	4619      	mov	r1, r3
 8000192:	4610      	mov	r0, r2
 8000194:	f000 fcb2 	bl	8000afc <HAL_GPIO_ReadPin>
 8000198:	4603      	mov	r3, r0
 800019a:	2b01      	cmp	r3, #1
 800019c:	bf0c      	ite	eq
 800019e:	2301      	moveq	r3, #1
 80001a0:	2300      	movne	r3, #0
 80001a2:	b2db      	uxtb	r3, r3
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	d001      	beq.n	80001ac <_ZNK7Igniter12is_connectedEv+0x2c>
		return 1;
 80001a8:	2301      	movs	r3, #1
 80001aa:	e000      	b.n	80001ae <_ZNK7Igniter12is_connectedEv+0x2e>
	else
		return 0;
 80001ac:	2300      	movs	r3, #0
}
 80001ae:	4618      	mov	r0, r3
 80001b0:	3708      	adds	r7, #8
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bd80      	pop	{r7, pc}

080001b6 <_ZN7Igniter4FIREEv>:

void Igniter::FIRE(){
 80001b6:	b580      	push	{r7, lr}
 80001b8:	b082      	sub	sp, #8
 80001ba:	af00      	add	r7, sp, #0
 80001bc:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIO_PORT_IGNITER, PIN_IGNITER, GPIO_PIN_SET);
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	6818      	ldr	r0, [r3, #0]
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	889b      	ldrh	r3, [r3, #4]
 80001c6:	2201      	movs	r2, #1
 80001c8:	4619      	mov	r1, r3
 80001ca:	f000 fc9d 	bl	8000b08 <HAL_GPIO_WritePin>
}
 80001ce:	bf00      	nop
 80001d0:	3708      	adds	r7, #8
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bd80      	pop	{r7, pc}
	...

080001d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80001dc:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001de:	2400      	movs	r4, #0
 80001e0:	9404      	str	r4, [sp, #16]
 80001e2:	9405      	str	r4, [sp, #20]
 80001e4:	9406      	str	r4, [sp, #24]
 80001e6:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001e8:	4b2b      	ldr	r3, [pc, #172]	; (8000298 <MX_GPIO_Init+0xc0>)
 80001ea:	699a      	ldr	r2, [r3, #24]
 80001ec:	f042 0210 	orr.w	r2, r2, #16
 80001f0:	619a      	str	r2, [r3, #24]
 80001f2:	699a      	ldr	r2, [r3, #24]
 80001f4:	f002 0210 	and.w	r2, r2, #16
 80001f8:	9200      	str	r2, [sp, #0]
 80001fa:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001fc:	699a      	ldr	r2, [r3, #24]
 80001fe:	f042 0220 	orr.w	r2, r2, #32
 8000202:	619a      	str	r2, [r3, #24]
 8000204:	699a      	ldr	r2, [r3, #24]
 8000206:	f002 0220 	and.w	r2, r2, #32
 800020a:	9201      	str	r2, [sp, #4]
 800020c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800020e:	699a      	ldr	r2, [r3, #24]
 8000210:	f042 0204 	orr.w	r2, r2, #4
 8000214:	619a      	str	r2, [r3, #24]
 8000216:	699a      	ldr	r2, [r3, #24]
 8000218:	f002 0204 	and.w	r2, r2, #4
 800021c:	9202      	str	r2, [sp, #8]
 800021e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000220:	699a      	ldr	r2, [r3, #24]
 8000222:	f042 0208 	orr.w	r2, r2, #8
 8000226:	619a      	str	r2, [r3, #24]
 8000228:	699b      	ldr	r3, [r3, #24]
 800022a:	f003 0308 	and.w	r3, r3, #8
 800022e:	9303      	str	r3, [sp, #12]
 8000230:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUILD_IN_LED_GPIO_Port, BUILD_IN_LED_Pin, GPIO_PIN_RESET);
 8000232:	4d1a      	ldr	r5, [pc, #104]	; (800029c <MX_GPIO_Init+0xc4>)
 8000234:	4622      	mov	r2, r4
 8000236:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800023a:	4628      	mov	r0, r5
 800023c:	f000 fc64 	bl	8000b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IGN_FIRE_GPIO_Port, IGN_FIRE_Pin, GPIO_PIN_RESET);
 8000240:	4e17      	ldr	r6, [pc, #92]	; (80002a0 <MX_GPIO_Init+0xc8>)
 8000242:	4622      	mov	r2, r4
 8000244:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000248:	4630      	mov	r0, r6
 800024a:	f000 fc5d 	bl	8000b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUILD_IN_LED_Pin;
 800024e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000252:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000254:	f04f 0801 	mov.w	r8, #1
 8000258:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800025c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800025e:	2702      	movs	r7, #2
 8000260:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(BUILD_IN_LED_GPIO_Port, &GPIO_InitStruct);
 8000262:	a904      	add	r1, sp, #16
 8000264:	4628      	mov	r0, r5
 8000266:	f000 fb39 	bl	80008dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IGN_TEST_CON_Pin;
 800026a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800026e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000270:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000272:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(IGN_TEST_CON_GPIO_Port, &GPIO_InitStruct);
 8000274:	a904      	add	r1, sp, #16
 8000276:	4628      	mov	r0, r5
 8000278:	f000 fb30 	bl	80008dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IGN_FIRE_Pin;
 800027c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000280:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000282:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000286:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000288:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(IGN_FIRE_GPIO_Port, &GPIO_InitStruct);
 800028a:	a904      	add	r1, sp, #16
 800028c:	4630      	mov	r0, r6
 800028e:	f000 fb25 	bl	80008dc <HAL_GPIO_Init>

}
 8000292:	b008      	add	sp, #32
 8000294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000298:	40021000 	.word	0x40021000
 800029c:	40011000 	.word	0x40011000
 80002a0:	40010800 	.word	0x40010800

080002a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b090      	sub	sp, #64	; 0x40
 80002a8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002aa:	f000 fa85 	bl	80007b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002ae:	f000 f8c9 	bl	8000444 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002b2:	f7ff ff91 	bl	80001d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002b6:	f000 f965 	bl	8000584 <MX_USART2_UART_Init>
  MX_USB_PCD_Init();
 80002ba:	f000 fa03 	bl	80006c4 <MX_USB_PCD_Init>
  MX_USART3_UART_Init();
 80002be:	f000 f97b 	bl	80005b8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN WHILE */


///ADDED FOR BLUETOOTH///
 // HAL_GPIO_WritePin(Bluetooth_reset_GPIO_Port, Bluetooth_reset_Pin, SET);//ADDITIONAL PIN PC14 FOR RESET //
  HAL_Delay(1000);
 80002c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002c6:	f000 fa9b 	bl	8000800 <HAL_Delay>

  char data[40];
  //memset(buff ,0,sizeof(buff));
  // HAL_TIM_Base_Start_IT(&htim2);
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 80002ca:	4b55      	ldr	r3, [pc, #340]	; (8000420 <main+0x17c>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	68da      	ldr	r2, [r3, #12]
 80002d0:	4b53      	ldr	r3, [pc, #332]	; (8000420 <main+0x17c>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	f042 0220 	orr.w	r2, r2, #32
 80002d8:	60da      	str	r2, [r3, #12]
  /* USER CODE END 2 */

  /* USER CODE BEGIN WHILE */

  // INIT
  Igniter igniter(IGN_FIRE_GPIO_Port, IGN_FIRE_Pin, IGN_TEST_CON_GPIO_Port, IGN_TEST_CON_Pin);
 80002da:	4638      	mov	r0, r7
 80002dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002e0:	9300      	str	r3, [sp, #0]
 80002e2:	4b50      	ldr	r3, [pc, #320]	; (8000424 <main+0x180>)
 80002e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80002e8:	494f      	ldr	r1, [pc, #316]	; (8000428 <main+0x184>)
 80002ea:	f7ff ff2f 	bl	800014c <_ZN7IgniterC1EP12GPIO_TypeDeftS1_t>

  state = 0; //touch only for tests
 80002ee:	4b4f      	ldr	r3, [pc, #316]	; (800042c <main+0x188>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	701a      	strb	r2, [r3, #0]
  while (1)
  {
	  switch(state){
 80002f4:	4b4d      	ldr	r3, [pc, #308]	; (800042c <main+0x188>)
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	2b06      	cmp	r3, #6
 80002fa:	d8fb      	bhi.n	80002f4 <main+0x50>
 80002fc:	a201      	add	r2, pc, #4	; (adr r2, 8000304 <main+0x60>)
 80002fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000302:	bf00      	nop
 8000304:	08000321 	.word	0x08000321
 8000308:	08000353 	.word	0x08000353
 800030c:	0800036f 	.word	0x0800036f
 8000310:	080003a3 	.word	0x080003a3
 8000314:	080003e3 	.word	0x080003e3
 8000318:	080003eb 	.word	0x080003eb
 800031c:	08000407 	.word	0x08000407
		  case 0: //test state
			  if(igniter.is_connected()){
 8000320:	463b      	mov	r3, r7
 8000322:	4618      	mov	r0, r3
 8000324:	f7ff ff2c 	bl	8000180 <_ZNK7Igniter12is_connectedEv>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d004      	beq.n	8000338 <main+0x94>
   				  HAL_GPIO_TogglePin(BUILD_IN_LED_GPIO_Port, BUILD_IN_LED_Pin);
 800032e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000332:	483c      	ldr	r0, [pc, #240]	; (8000424 <main+0x180>)
 8000334:	f000 fbee 	bl	8000b14 <HAL_GPIO_TogglePin>
   			  }

   			  //place for random tests
   			  //Fill.test_open_close();
   			  //QD.test_open_close();
   			  HAL_Delay(1000);
 8000338:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800033c:	f000 fa60 	bl	8000800 <HAL_Delay>
   			  //state = 1;
   			  strcpy(data, "DINI");	//xd
 8000340:	f107 0310 	add.w	r3, r7, #16
 8000344:	4a3a      	ldr	r2, [pc, #232]	; (8000430 <main+0x18c>)
 8000346:	e892 0003 	ldmia.w	r2, {r0, r1}
 800034a:	6018      	str	r0, [r3, #0]
 800034c:	3304      	adds	r3, #4
 800034e:	7019      	strb	r1, [r3, #0]
   			  break;
 8000350:	e064      	b.n	800041c <main+0x178>
   		  case 1:	//IDLE
   			  if(strncmp(data, "DINI", 4) == 0){ // signal == init
 8000352:	f107 0310 	add.w	r3, r7, #16
 8000356:	2204      	movs	r2, #4
 8000358:	4935      	ldr	r1, [pc, #212]	; (8000430 <main+0x18c>)
 800035a:	4618      	mov	r0, r3
 800035c:	f001 f8dc 	bl	8001518 <strncmp>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d153      	bne.n	800040e <main+0x16a>
   				  //TODO: send ready
   				  state = 2;
 8000366:	4b31      	ldr	r3, [pc, #196]	; (800042c <main+0x188>)
 8000368:	2202      	movs	r2, #2
 800036a:	701a      	strb	r2, [r3, #0]
   			  }
   			  break;
 800036c:	e04f      	b.n	800040e <main+0x16a>
   		  case 2:	//ARMED(hard) DABR
   			  if(igniter.is_connected() && strncmp(data, "DARM", 4) == 0){ // signal == arm
 800036e:	463b      	mov	r3, r7
 8000370:	4618      	mov	r0, r3
 8000372:	f7ff ff05 	bl	8000180 <_ZNK7Igniter12is_connectedEv>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d00b      	beq.n	8000394 <main+0xf0>
 800037c:	f107 0310 	add.w	r3, r7, #16
 8000380:	2204      	movs	r2, #4
 8000382:	492c      	ldr	r1, [pc, #176]	; (8000434 <main+0x190>)
 8000384:	4618      	mov	r0, r3
 8000386:	f001 f8c7 	bl	8001518 <strncmp>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d101      	bne.n	8000394 <main+0xf0>
 8000390:	2301      	movs	r3, #1
 8000392:	e000      	b.n	8000396 <main+0xf2>
 8000394:	2300      	movs	r3, #0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d03b      	beq.n	8000412 <main+0x16e>
   			  	  state = 3;
 800039a:	4b24      	ldr	r3, [pc, #144]	; (800042c <main+0x188>)
 800039c:	2203      	movs	r2, #3
 800039e:	701a      	strb	r2, [r3, #0]
   			  }
   			  break;
 80003a0:	e037      	b.n	8000412 <main+0x16e>
   		  case 3:	//ARMED(soft)
   			  	  if(strncmp (data, "DSTA", 4) == 0){	//signal == fire
 80003a2:	f107 0310 	add.w	r3, r7, #16
 80003a6:	2204      	movs	r2, #4
 80003a8:	4923      	ldr	r1, [pc, #140]	; (8000438 <main+0x194>)
 80003aa:	4618      	mov	r0, r3
 80003ac:	f001 f8b4 	bl	8001518 <strncmp>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d107      	bne.n	80003c6 <main+0x122>
   			  		  igniter.FIRE();
 80003b6:	463b      	mov	r3, r7
 80003b8:	4618      	mov	r0, r3
 80003ba:	f7ff fefc 	bl	80001b6 <_ZN7Igniter4FIREEv>
   			  		  state = 5;
 80003be:	4b1b      	ldr	r3, [pc, #108]	; (800042c <main+0x188>)
 80003c0:	2205      	movs	r2, #5
 80003c2:	701a      	strb	r2, [r3, #0]
   			  	  }
   			  	  else if(strncmp (data, "DABR", 4) == 0){	//signal == abort
   			  		  state = 4;
   			  	  }
   			  break;
 80003c4:	e027      	b.n	8000416 <main+0x172>
   			  	  else if(strncmp (data, "DABR", 4) == 0){	//signal == abort
 80003c6:	f107 0310 	add.w	r3, r7, #16
 80003ca:	2204      	movs	r2, #4
 80003cc:	491b      	ldr	r1, [pc, #108]	; (800043c <main+0x198>)
 80003ce:	4618      	mov	r0, r3
 80003d0:	f001 f8a2 	bl	8001518 <strncmp>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d11d      	bne.n	8000416 <main+0x172>
   			  		  state = 4;
 80003da:	4b14      	ldr	r3, [pc, #80]	; (800042c <main+0x188>)
 80003dc:	2204      	movs	r2, #4
 80003de:	701a      	strb	r2, [r3, #0]
   			  break;
 80003e0:	e019      	b.n	8000416 <main+0x172>
   		  case 4:	//ABORT
   			  HAL_Delay(1000000);
 80003e2:	4817      	ldr	r0, [pc, #92]	; (8000440 <main+0x19c>)
 80003e4:	f000 fa0c 	bl	8000800 <HAL_Delay>
   			  break;
 80003e8:	e018      	b.n	800041c <main+0x178>
   		  case 5:	//FLIGHT
   			  //TODO: Send "fired" 	//n - times
   			 if( ! igniter.is_connected()){
 80003ea:	463b      	mov	r3, r7
 80003ec:	4618      	mov	r0, r3
 80003ee:	f7ff fec7 	bl	8000180 <_ZNK7Igniter12is_connectedEv>
 80003f2:	4603      	mov	r3, r0
 80003f4:	f083 0301 	eor.w	r3, r3, #1
 80003f8:	b2db      	uxtb	r3, r3
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d00d      	beq.n	800041a <main+0x176>
   				  state = 6;
 80003fe:	4b0b      	ldr	r3, [pc, #44]	; (800042c <main+0x188>)
 8000400:	2206      	movs	r2, #6
 8000402:	701a      	strb	r2, [r3, #0]
   			  }
   			  break;
 8000404:	e009      	b.n	800041a <main+0x176>
   		  case 6:	//END
   			  HAL_Delay(1000000);
 8000406:	480e      	ldr	r0, [pc, #56]	; (8000440 <main+0x19c>)
 8000408:	f000 f9fa 	bl	8000800 <HAL_Delay>
   			  break;
 800040c:	e006      	b.n	800041c <main+0x178>
   			  break;
 800040e:	bf00      	nop
 8000410:	e770      	b.n	80002f4 <main+0x50>
   			  break;
 8000412:	bf00      	nop
 8000414:	e76e      	b.n	80002f4 <main+0x50>
   			  break;
 8000416:	bf00      	nop
 8000418:	e76c      	b.n	80002f4 <main+0x50>
   			  break;
 800041a:	bf00      	nop
	  switch(state){
 800041c:	e76a      	b.n	80002f4 <main+0x50>
 800041e:	bf00      	nop
 8000420:	2000006c 	.word	0x2000006c
 8000424:	40011000 	.word	0x40011000
 8000428:	40010800 	.word	0x40010800
 800042c:	20000028 	.word	0x20000028
 8000430:	08001554 	.word	0x08001554
 8000434:	0800155c 	.word	0x0800155c
 8000438:	08001564 	.word	0x08001564
 800043c:	0800156c 	.word	0x0800156c
 8000440:	000f4240 	.word	0x000f4240

08000444 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b094      	sub	sp, #80	; 0x50
 8000448:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800044a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800044e:	2228      	movs	r2, #40	; 0x28
 8000450:	2100      	movs	r1, #0
 8000452:	4618      	mov	r0, r3
 8000454:	f001 f858 	bl	8001508 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000458:	f107 0314 	add.w	r3, r7, #20
 800045c:	2200      	movs	r2, #0
 800045e:	601a      	str	r2, [r3, #0]
 8000460:	605a      	str	r2, [r3, #4]
 8000462:	609a      	str	r2, [r3, #8]
 8000464:	60da      	str	r2, [r3, #12]
 8000466:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000468:	1d3b      	adds	r3, r7, #4
 800046a:	2200      	movs	r2, #0
 800046c:	601a      	str	r2, [r3, #0]
 800046e:	605a      	str	r2, [r3, #4]
 8000470:	609a      	str	r2, [r3, #8]
 8000472:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000474:	2301      	movs	r3, #1
 8000476:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000478:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800047c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800047e:	2300      	movs	r3, #0
 8000480:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000482:	2301      	movs	r3, #1
 8000484:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000486:	2302      	movs	r3, #2
 8000488:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800048a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800048e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000490:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000494:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000496:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800049a:	4618      	mov	r0, r3
 800049c:	f000 fbc4 	bl	8000c28 <HAL_RCC_OscConfig>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	bf14      	ite	ne
 80004a6:	2301      	movne	r3, #1
 80004a8:	2300      	moveq	r3, #0
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d001      	beq.n	80004b4 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 80004b0:	f000 f833 	bl	800051a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004b4:	230f      	movs	r3, #15
 80004b6:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004b8:	2302      	movs	r3, #2
 80004ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004bc:	2300      	movs	r3, #0
 80004be:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004c4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80004c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004ca:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004cc:	f107 0314 	add.w	r3, r7, #20
 80004d0:	2101      	movs	r1, #1
 80004d2:	4618      	mov	r0, r3
 80004d4:	f000 fdf4 	bl	80010c0 <HAL_RCC_ClockConfig>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	bf14      	ite	ne
 80004de:	2301      	movne	r3, #1
 80004e0:	2300      	moveq	r3, #0
 80004e2:	b2db      	uxtb	r3, r3
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <_Z18SystemClock_Configv+0xa8>
  {
    Error_Handler();
 80004e8:	f000 f817 	bl	800051a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80004ec:	2310      	movs	r3, #16
 80004ee:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80004f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80004f4:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004f6:	1d3b      	adds	r3, r7, #4
 80004f8:	4618      	mov	r0, r3
 80004fa:	f000 feb9 	bl	8001270 <HAL_RCCEx_PeriphCLKConfig>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	bf14      	ite	ne
 8000504:	2301      	movne	r3, #1
 8000506:	2300      	moveq	r3, #0
 8000508:	b2db      	uxtb	r3, r3
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <_Z18SystemClock_Configv+0xce>
  {
    Error_Handler();
 800050e:	f000 f804 	bl	800051a <Error_Handler>
  }
}
 8000512:	bf00      	nop
 8000514:	3750      	adds	r7, #80	; 0x50
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}

0800051a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800051a:	b480      	push	{r7}
 800051c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800051e:	b672      	cpsid	i
}
 8000520:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000522:	e7fe      	b.n	8000522 <Error_Handler+0x8>

08000524 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000524:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000526:	4b0e      	ldr	r3, [pc, #56]	; (8000560 <HAL_MspInit+0x3c>)
 8000528:	699a      	ldr	r2, [r3, #24]
 800052a:	f042 0201 	orr.w	r2, r2, #1
 800052e:	619a      	str	r2, [r3, #24]
 8000530:	699a      	ldr	r2, [r3, #24]
 8000532:	f002 0201 	and.w	r2, r2, #1
 8000536:	9200      	str	r2, [sp, #0]
 8000538:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800053a:	69da      	ldr	r2, [r3, #28]
 800053c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000540:	61da      	str	r2, [r3, #28]
 8000542:	69db      	ldr	r3, [r3, #28]
 8000544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000548:	9301      	str	r3, [sp, #4]
 800054a:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800054c:	4a05      	ldr	r2, [pc, #20]	; (8000564 <HAL_MspInit+0x40>)
 800054e:	6853      	ldr	r3, [r2, #4]
 8000550:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000554:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000558:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800055a:	b002      	add	sp, #8
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	40021000 	.word	0x40021000
 8000564:	40010000 	.word	0x40010000

08000568 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000568:	e7fe      	b.n	8000568 <NMI_Handler>

0800056a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800056a:	e7fe      	b.n	800056a <HardFault_Handler>

0800056c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800056c:	e7fe      	b.n	800056c <MemManage_Handler>

0800056e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800056e:	e7fe      	b.n	800056e <BusFault_Handler>

08000570 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000570:	e7fe      	b.n	8000570 <UsageFault_Handler>

08000572 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000572:	4770      	bx	lr

08000574 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000574:	4770      	bx	lr

08000576 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000576:	4770      	bx	lr

08000578 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000578:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800057a:	f000 f92f 	bl	80007dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800057e:	bd08      	pop	{r3, pc}

08000580 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000580:	4770      	bx	lr
	...

08000584 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000584:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000586:	480a      	ldr	r0, [pc, #40]	; (80005b0 <MX_USART2_UART_Init+0x2c>)
 8000588:	4b0a      	ldr	r3, [pc, #40]	; (80005b4 <MX_USART2_UART_Init+0x30>)
 800058a:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 800058c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000590:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000592:	2300      	movs	r3, #0
 8000594:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000596:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000598:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800059a:	220c      	movs	r2, #12
 800059c:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800059e:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005a0:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005a2:	f000 ff35 	bl	8001410 <HAL_UART_Init>
 80005a6:	b900      	cbnz	r0, 80005aa <MX_USART2_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005a8:	bd08      	pop	{r3, pc}
    Error_Handler();
 80005aa:	f7ff ffb6 	bl	800051a <Error_Handler>
}
 80005ae:	e7fb      	b.n	80005a8 <MX_USART2_UART_Init+0x24>
 80005b0:	2000006c 	.word	0x2000006c
 80005b4:	40004400 	.word	0x40004400

080005b8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80005b8:	b508      	push	{r3, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80005ba:	480a      	ldr	r0, [pc, #40]	; (80005e4 <MX_USART3_UART_Init+0x2c>)
 80005bc:	4b0a      	ldr	r3, [pc, #40]	; (80005e8 <MX_USART3_UART_Init+0x30>)
 80005be:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 80005c0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80005c4:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80005c6:	2300      	movs	r3, #0
 80005c8:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80005ca:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80005cc:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80005ce:	220c      	movs	r2, #12
 80005d0:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005d2:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80005d4:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80005d6:	f000 ff1b 	bl	8001410 <HAL_UART_Init>
 80005da:	b900      	cbnz	r0, 80005de <MX_USART3_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80005dc:	bd08      	pop	{r3, pc}
    Error_Handler();
 80005de:	f7ff ff9c 	bl	800051a <Error_Handler>
}
 80005e2:	e7fb      	b.n	80005dc <MX_USART3_UART_Init+0x24>
 80005e4:	2000002c 	.word	0x2000002c
 80005e8:	40004800 	.word	0x40004800

080005ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80005ec:	b510      	push	{r4, lr}
 80005ee:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f0:	2300      	movs	r3, #0
 80005f2:	9304      	str	r3, [sp, #16]
 80005f4:	9305      	str	r3, [sp, #20]
 80005f6:	9306      	str	r3, [sp, #24]
 80005f8:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART2)
 80005fa:	6803      	ldr	r3, [r0, #0]
 80005fc:	4a2c      	ldr	r2, [pc, #176]	; (80006b0 <HAL_UART_MspInit+0xc4>)
 80005fe:	4293      	cmp	r3, r2
 8000600:	d004      	beq.n	800060c <HAL_UART_MspInit+0x20>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 8000602:	4a2c      	ldr	r2, [pc, #176]	; (80006b4 <HAL_UART_MspInit+0xc8>)
 8000604:	4293      	cmp	r3, r2
 8000606:	d029      	beq.n	800065c <HAL_UART_MspInit+0x70>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000608:	b008      	add	sp, #32
 800060a:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 800060c:	4b2a      	ldr	r3, [pc, #168]	; (80006b8 <HAL_UART_MspInit+0xcc>)
 800060e:	69da      	ldr	r2, [r3, #28]
 8000610:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000614:	61da      	str	r2, [r3, #28]
 8000616:	69da      	ldr	r2, [r3, #28]
 8000618:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800061c:	9200      	str	r2, [sp, #0]
 800061e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000620:	699a      	ldr	r2, [r3, #24]
 8000622:	f042 0204 	orr.w	r2, r2, #4
 8000626:	619a      	str	r2, [r3, #24]
 8000628:	699b      	ldr	r3, [r3, #24]
 800062a:	f003 0304 	and.w	r3, r3, #4
 800062e:	9301      	str	r3, [sp, #4]
 8000630:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000632:	2304      	movs	r3, #4
 8000634:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000636:	2302      	movs	r3, #2
 8000638:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800063a:	2303      	movs	r3, #3
 800063c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800063e:	4c1f      	ldr	r4, [pc, #124]	; (80006bc <HAL_UART_MspInit+0xd0>)
 8000640:	a904      	add	r1, sp, #16
 8000642:	4620      	mov	r0, r4
 8000644:	f000 f94a 	bl	80008dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000648:	2308      	movs	r3, #8
 800064a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800064c:	2300      	movs	r3, #0
 800064e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000650:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000652:	a904      	add	r1, sp, #16
 8000654:	4620      	mov	r0, r4
 8000656:	f000 f941 	bl	80008dc <HAL_GPIO_Init>
 800065a:	e7d5      	b.n	8000608 <HAL_UART_MspInit+0x1c>
    __HAL_RCC_USART3_CLK_ENABLE();
 800065c:	4b16      	ldr	r3, [pc, #88]	; (80006b8 <HAL_UART_MspInit+0xcc>)
 800065e:	69da      	ldr	r2, [r3, #28]
 8000660:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000664:	61da      	str	r2, [r3, #28]
 8000666:	69da      	ldr	r2, [r3, #28]
 8000668:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800066c:	9202      	str	r2, [sp, #8]
 800066e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000670:	699a      	ldr	r2, [r3, #24]
 8000672:	f042 0208 	orr.w	r2, r2, #8
 8000676:	619a      	str	r2, [r3, #24]
 8000678:	699b      	ldr	r3, [r3, #24]
 800067a:	f003 0308 	and.w	r3, r3, #8
 800067e:	9303      	str	r3, [sp, #12]
 8000680:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000682:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000686:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000688:	2302      	movs	r3, #2
 800068a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800068c:	2303      	movs	r3, #3
 800068e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000690:	4c0b      	ldr	r4, [pc, #44]	; (80006c0 <HAL_UART_MspInit+0xd4>)
 8000692:	a904      	add	r1, sp, #16
 8000694:	4620      	mov	r0, r4
 8000696:	f000 f921 	bl	80008dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800069a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800069e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a0:	2300      	movs	r3, #0
 80006a2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a6:	a904      	add	r1, sp, #16
 80006a8:	4620      	mov	r0, r4
 80006aa:	f000 f917 	bl	80008dc <HAL_GPIO_Init>
}
 80006ae:	e7ab      	b.n	8000608 <HAL_UART_MspInit+0x1c>
 80006b0:	40004400 	.word	0x40004400
 80006b4:	40004800 	.word	0x40004800
 80006b8:	40021000 	.word	0x40021000
 80006bc:	40010800 	.word	0x40010800
 80006c0:	40010c00 	.word	0x40010c00

080006c4 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 80006c4:	b508      	push	{r3, lr}
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80006c6:	4809      	ldr	r0, [pc, #36]	; (80006ec <MX_USB_PCD_Init+0x28>)
 80006c8:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <MX_USB_PCD_Init+0x2c>)
 80006ca:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80006cc:	2308      	movs	r3, #8
 80006ce:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80006d0:	2302      	movs	r3, #2
 80006d2:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80006d4:	2300      	movs	r3, #0
 80006d6:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80006d8:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80006da:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80006dc:	f000 fa23 	bl	8000b26 <HAL_PCD_Init>
 80006e0:	b900      	cbnz	r0, 80006e4 <MX_USB_PCD_Init+0x20>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80006e2:	bd08      	pop	{r3, pc}
    Error_Handler();
 80006e4:	f7ff ff19 	bl	800051a <Error_Handler>
}
 80006e8:	e7fb      	b.n	80006e2 <MX_USB_PCD_Init+0x1e>
 80006ea:	bf00      	nop
 80006ec:	200000ac 	.word	0x200000ac
 80006f0:	40005c00 	.word	0x40005c00

080006f4 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{

  if(pcdHandle->Instance==USB)
 80006f4:	6802      	ldr	r2, [r0, #0]
 80006f6:	4b09      	ldr	r3, [pc, #36]	; (800071c <HAL_PCD_MspInit+0x28>)
 80006f8:	429a      	cmp	r2, r3
 80006fa:	d000      	beq.n	80006fe <HAL_PCD_MspInit+0xa>
 80006fc:	4770      	bx	lr
{
 80006fe:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000700:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8000704:	69da      	ldr	r2, [r3, #28]
 8000706:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800070a:	61da      	str	r2, [r3, #28]
 800070c:	69db      	ldr	r3, [r3, #28]
 800070e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000712:	9301      	str	r3, [sp, #4]
 8000714:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8000716:	b002      	add	sp, #8
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	40005c00 	.word	0x40005c00

08000720 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000720:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000722:	e003      	b.n	800072c <LoopCopyDataInit>

08000724 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000724:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000726:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000728:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800072a:	3104      	adds	r1, #4

0800072c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800072c:	480a      	ldr	r0, [pc, #40]	; (8000758 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800072e:	4b0b      	ldr	r3, [pc, #44]	; (800075c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000730:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000732:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000734:	d3f6      	bcc.n	8000724 <CopyDataInit>
  ldr r2, =_sbss
 8000736:	4a0a      	ldr	r2, [pc, #40]	; (8000760 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000738:	e002      	b.n	8000740 <LoopFillZerobss>

0800073a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800073a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800073c:	f842 3b04 	str.w	r3, [r2], #4

08000740 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000740:	4b08      	ldr	r3, [pc, #32]	; (8000764 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000742:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000744:	d3f9      	bcc.n	800073a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000746:	f7ff ff1b 	bl	8000580 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800074a:	f000 feb9 	bl	80014c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800074e:	f7ff fda9 	bl	80002a4 <main>
  bx lr
 8000752:	4770      	bx	lr
  ldr r3, =_sidata
 8000754:	080015a8 	.word	0x080015a8
  ldr r0, =_sdata
 8000758:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800075c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000760:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000764:	2000039c 	.word	0x2000039c

08000768 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000768:	e7fe      	b.n	8000768 <ADC1_2_IRQHandler>
	...

0800076c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800076c:	b510      	push	{r4, lr}
 800076e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000770:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <HAL_InitTick+0x40>)
 8000772:	7818      	ldrb	r0, [r3, #0]
 8000774:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000778:	fbb3 f3f0 	udiv	r3, r3, r0
 800077c:	4a0c      	ldr	r2, [pc, #48]	; (80007b0 <HAL_InitTick+0x44>)
 800077e:	6810      	ldr	r0, [r2, #0]
 8000780:	fbb0 f0f3 	udiv	r0, r0, r3
 8000784:	f000 f894 	bl	80008b0 <HAL_SYSTICK_Config>
 8000788:	b968      	cbnz	r0, 80007a6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800078a:	2c0f      	cmp	r4, #15
 800078c:	d901      	bls.n	8000792 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800078e:	2001      	movs	r0, #1
 8000790:	e00a      	b.n	80007a8 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000792:	2200      	movs	r2, #0
 8000794:	4621      	mov	r1, r4
 8000796:	f04f 30ff 	mov.w	r0, #4294967295
 800079a:	f000 f857 	bl	800084c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800079e:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <HAL_InitTick+0x48>)
 80007a0:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80007a2:	2000      	movs	r0, #0
 80007a4:	e000      	b.n	80007a8 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80007a6:	2001      	movs	r0, #1
}
 80007a8:	bd10      	pop	{r4, pc}
 80007aa:	bf00      	nop
 80007ac:	20000004 	.word	0x20000004
 80007b0:	20000000 	.word	0x20000000
 80007b4:	20000008 	.word	0x20000008

080007b8 <HAL_Init>:
{
 80007b8:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007ba:	4a07      	ldr	r2, [pc, #28]	; (80007d8 <HAL_Init+0x20>)
 80007bc:	6813      	ldr	r3, [r2, #0]
 80007be:	f043 0310 	orr.w	r3, r3, #16
 80007c2:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007c4:	2003      	movs	r0, #3
 80007c6:	f000 f82f 	bl	8000828 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80007ca:	2000      	movs	r0, #0
 80007cc:	f7ff ffce 	bl	800076c <HAL_InitTick>
  HAL_MspInit();
 80007d0:	f7ff fea8 	bl	8000524 <HAL_MspInit>
}
 80007d4:	2000      	movs	r0, #0
 80007d6:	bd08      	pop	{r3, pc}
 80007d8:	40022000 	.word	0x40022000

080007dc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80007dc:	4a03      	ldr	r2, [pc, #12]	; (80007ec <HAL_IncTick+0x10>)
 80007de:	6811      	ldr	r1, [r2, #0]
 80007e0:	4b03      	ldr	r3, [pc, #12]	; (80007f0 <HAL_IncTick+0x14>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	440b      	add	r3, r1
 80007e6:	6013      	str	r3, [r2, #0]
}
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	20000398 	.word	0x20000398
 80007f0:	20000004 	.word	0x20000004

080007f4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80007f4:	4b01      	ldr	r3, [pc, #4]	; (80007fc <HAL_GetTick+0x8>)
 80007f6:	6818      	ldr	r0, [r3, #0]
}
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	20000398 	.word	0x20000398

08000800 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000800:	b538      	push	{r3, r4, r5, lr}
 8000802:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000804:	f7ff fff6 	bl	80007f4 <HAL_GetTick>
 8000808:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800080a:	f1b4 3fff 	cmp.w	r4, #4294967295
 800080e:	d002      	beq.n	8000816 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000810:	4b04      	ldr	r3, [pc, #16]	; (8000824 <HAL_Delay+0x24>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000816:	f7ff ffed 	bl	80007f4 <HAL_GetTick>
 800081a:	1b40      	subs	r0, r0, r5
 800081c:	42a0      	cmp	r0, r4
 800081e:	d3fa      	bcc.n	8000816 <HAL_Delay+0x16>
  {
  }
}
 8000820:	bd38      	pop	{r3, r4, r5, pc}
 8000822:	bf00      	nop
 8000824:	20000004 	.word	0x20000004

08000828 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000828:	4907      	ldr	r1, [pc, #28]	; (8000848 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800082a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800082c:	0203      	lsls	r3, r0, #8
 800082e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000832:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000836:	0412      	lsls	r2, r2, #16
 8000838:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800083a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800083c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000840:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000844:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000846:	4770      	bx	lr
 8000848:	e000ed00 	.word	0xe000ed00

0800084c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800084c:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800084e:	4b16      	ldr	r3, [pc, #88]	; (80008a8 <HAL_NVIC_SetPriority+0x5c>)
 8000850:	68db      	ldr	r3, [r3, #12]
 8000852:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000856:	f1c3 0407 	rsb	r4, r3, #7
 800085a:	2c04      	cmp	r4, #4
 800085c:	bf28      	it	cs
 800085e:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000860:	1d1d      	adds	r5, r3, #4
 8000862:	2d06      	cmp	r5, #6
 8000864:	bf8c      	ite	hi
 8000866:	3b03      	subhi	r3, #3
 8000868:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800086a:	f04f 35ff 	mov.w	r5, #4294967295
 800086e:	fa05 f404 	lsl.w	r4, r5, r4
 8000872:	ea21 0104 	bic.w	r1, r1, r4
 8000876:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000878:	fa05 f303 	lsl.w	r3, r5, r3
 800087c:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000880:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8000882:	2800      	cmp	r0, #0
 8000884:	db09      	blt.n	800089a <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000886:	0109      	lsls	r1, r1, #4
 8000888:	b2c9      	uxtb	r1, r1
 800088a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800088e:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000892:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000896:	bc30      	pop	{r4, r5}
 8000898:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800089a:	f000 000f 	and.w	r0, r0, #15
 800089e:	0109      	lsls	r1, r1, #4
 80008a0:	b2c9      	uxtb	r1, r1
 80008a2:	4b02      	ldr	r3, [pc, #8]	; (80008ac <HAL_NVIC_SetPriority+0x60>)
 80008a4:	5419      	strb	r1, [r3, r0]
 80008a6:	e7f6      	b.n	8000896 <HAL_NVIC_SetPriority+0x4a>
 80008a8:	e000ed00 	.word	0xe000ed00
 80008ac:	e000ed14 	.word	0xe000ed14

080008b0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008b0:	3801      	subs	r0, #1
 80008b2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80008b6:	d20a      	bcs.n	80008ce <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008b8:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <HAL_SYSTICK_Config+0x24>)
 80008ba:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008bc:	4a06      	ldr	r2, [pc, #24]	; (80008d8 <HAL_SYSTICK_Config+0x28>)
 80008be:	21f0      	movs	r1, #240	; 0xf0
 80008c0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008c4:	2000      	movs	r0, #0
 80008c6:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008c8:	2207      	movs	r2, #7
 80008ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008cc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80008ce:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	e000e010 	.word	0xe000e010
 80008d8:	e000ed00 	.word	0xe000ed00

080008dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008e0:	b083      	sub	sp, #12
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008e2:	680f      	ldr	r7, [r1, #0]
 80008e4:	2f00      	cmp	r7, #0
 80008e6:	f000 80f8 	beq.w	8000ada <HAL_GPIO_Init+0x1fe>
  uint32_t config = 0x00u;
 80008ea:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 80008ec:	4613      	mov	r3, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80008ee:	f8df c200 	ldr.w	ip, [pc, #512]	; 8000af0 <HAL_GPIO_Init+0x214>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80008f2:	4d7b      	ldr	r5, [pc, #492]	; (8000ae0 <HAL_GPIO_Init+0x204>)
      switch (GPIO_Init->Mode)
 80008f4:	4e7b      	ldr	r6, [pc, #492]	; (8000ae4 <HAL_GPIO_Init+0x208>)
 80008f6:	f8df e1fc 	ldr.w	lr, [pc, #508]	; 8000af4 <HAL_GPIO_Init+0x218>
 80008fa:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 8000af8 <HAL_GPIO_Init+0x21c>
 80008fe:	e09a      	b.n	8000a36 <HAL_GPIO_Init+0x15a>
 8000900:	2200      	movs	r2, #0
 8000902:	e01e      	b.n	8000942 <HAL_GPIO_Init+0x66>
 8000904:	42b4      	cmp	r4, r6
 8000906:	d00c      	beq.n	8000922 <HAL_GPIO_Init+0x46>
 8000908:	d904      	bls.n	8000914 <HAL_GPIO_Init+0x38>
 800090a:	4574      	cmp	r4, lr
 800090c:	d009      	beq.n	8000922 <HAL_GPIO_Init+0x46>
 800090e:	4544      	cmp	r4, r8
 8000910:	d007      	beq.n	8000922 <HAL_GPIO_Init+0x46>
 8000912:	e016      	b.n	8000942 <HAL_GPIO_Init+0x66>
 8000914:	4f74      	ldr	r7, [pc, #464]	; (8000ae8 <HAL_GPIO_Init+0x20c>)
 8000916:	42bc      	cmp	r4, r7
 8000918:	d003      	beq.n	8000922 <HAL_GPIO_Init+0x46>
 800091a:	f507 2770 	add.w	r7, r7, #983040	; 0xf0000
 800091e:	42bc      	cmp	r4, r7
 8000920:	d10b      	bne.n	800093a <HAL_GPIO_Init+0x5e>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000922:	688a      	ldr	r2, [r1, #8]
 8000924:	2a00      	cmp	r2, #0
 8000926:	f000 80ca 	beq.w	8000abe <HAL_GPIO_Init+0x1e2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800092a:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 800092c:	bf0c      	ite	eq
 800092e:	f8c0 9010 	streq.w	r9, [r0, #16]
            GPIOx->BRR = ioposition;
 8000932:	f8c0 9014 	strne.w	r9, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000936:	2208      	movs	r2, #8
 8000938:	e003      	b.n	8000942 <HAL_GPIO_Init+0x66>
      switch (GPIO_Init->Mode)
 800093a:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 800093e:	42bc      	cmp	r4, r7
 8000940:	d0ef      	beq.n	8000922 <HAL_GPIO_Init+0x46>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000942:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8000946:	f200 80bc 	bhi.w	8000ac2 <HAL_GPIO_Init+0x1e6>
 800094a:	4607      	mov	r7, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800094c:	ea4f 0983 	mov.w	r9, r3, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000950:	683c      	ldr	r4, [r7, #0]
 8000952:	f04f 0b0f 	mov.w	fp, #15
 8000956:	fa0b fb09 	lsl.w	fp, fp, r9
 800095a:	ea24 040b 	bic.w	r4, r4, fp
 800095e:	fa02 f909 	lsl.w	r9, r2, r9
 8000962:	ea44 0409 	orr.w	r4, r4, r9
 8000966:	603c      	str	r4, [r7, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000968:	684c      	ldr	r4, [r1, #4]
 800096a:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 800096e:	d05d      	beq.n	8000a2c <HAL_GPIO_Init+0x150>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000970:	f8dc 4018 	ldr.w	r4, [ip, #24]
 8000974:	f044 0401 	orr.w	r4, r4, #1
 8000978:	f8cc 4018 	str.w	r4, [ip, #24]
 800097c:	f8dc 4018 	ldr.w	r4, [ip, #24]
 8000980:	f004 0401 	and.w	r4, r4, #1
 8000984:	9401      	str	r4, [sp, #4]
 8000986:	9c01      	ldr	r4, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8000988:	f023 0403 	bic.w	r4, r3, #3
 800098c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8000990:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 8000994:	f8d4 9008 	ldr.w	r9, [r4, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000998:	f003 0703 	and.w	r7, r3, #3
 800099c:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 80009a0:	270f      	movs	r7, #15
 80009a2:	fa07 f70b 	lsl.w	r7, r7, fp
 80009a6:	ea29 0907 	bic.w	r9, r9, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80009aa:	4f50      	ldr	r7, [pc, #320]	; (8000aec <HAL_GPIO_Init+0x210>)
 80009ac:	42b8      	cmp	r0, r7
 80009ae:	f000 808e 	beq.w	8000ace <HAL_GPIO_Init+0x1f2>
 80009b2:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80009b6:	42b8      	cmp	r0, r7
 80009b8:	f000 808b 	beq.w	8000ad2 <HAL_GPIO_Init+0x1f6>
 80009bc:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80009c0:	42b8      	cmp	r0, r7
 80009c2:	f000 8088 	beq.w	8000ad6 <HAL_GPIO_Init+0x1fa>
 80009c6:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80009ca:	42b8      	cmp	r0, r7
 80009cc:	bf0c      	ite	eq
 80009ce:	2703      	moveq	r7, #3
 80009d0:	2704      	movne	r7, #4
 80009d2:	fa07 f70b 	lsl.w	r7, r7, fp
 80009d6:	ea47 0709 	orr.w	r7, r7, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80009da:	60a7      	str	r7, [r4, #8]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009dc:	684c      	ldr	r4, [r1, #4]
 80009de:	f414 3f80 	tst.w	r4, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80009e2:	682c      	ldr	r4, [r5, #0]
 80009e4:	bf14      	ite	ne
 80009e6:	ea44 040a 	orrne.w	r4, r4, sl
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80009ea:	ea24 040a 	biceq.w	r4, r4, sl
 80009ee:	602c      	str	r4, [r5, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009f0:	684c      	ldr	r4, [r1, #4]
 80009f2:	f414 3f00 	tst.w	r4, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80009f6:	686c      	ldr	r4, [r5, #4]
 80009f8:	bf14      	ite	ne
 80009fa:	ea44 040a 	orrne.w	r4, r4, sl
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80009fe:	ea24 040a 	biceq.w	r4, r4, sl
 8000a02:	606c      	str	r4, [r5, #4]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a04:	684c      	ldr	r4, [r1, #4]
 8000a06:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a0a:	68ac      	ldr	r4, [r5, #8]
 8000a0c:	bf14      	ite	ne
 8000a0e:	ea44 040a 	orrne.w	r4, r4, sl
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a12:	ea24 040a 	biceq.w	r4, r4, sl
 8000a16:	60ac      	str	r4, [r5, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a18:	684c      	ldr	r4, [r1, #4]
 8000a1a:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a1e:	68ec      	ldr	r4, [r5, #12]
 8000a20:	bf14      	ite	ne
 8000a22:	ea44 040a 	orrne.w	r4, r4, sl
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a26:	ea24 040a 	biceq.w	r4, r4, sl
 8000a2a:	60ec      	str	r4, [r5, #12]
        }
      }
    }

	position++;
 8000a2c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a2e:	680f      	ldr	r7, [r1, #0]
 8000a30:	fa37 f403 	lsrs.w	r4, r7, r3
 8000a34:	d051      	beq.n	8000ada <HAL_GPIO_Init+0x1fe>
    ioposition = (0x01uL << position);
 8000a36:	f04f 0901 	mov.w	r9, #1
 8000a3a:	fa09 f903 	lsl.w	r9, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a3e:	ea09 0a07 	and.w	sl, r9, r7
    if (iocurrent == ioposition)
 8000a42:	ea39 0407 	bics.w	r4, r9, r7
 8000a46:	d1f1      	bne.n	8000a2c <HAL_GPIO_Init+0x150>
      switch (GPIO_Init->Mode)
 8000a48:	684c      	ldr	r4, [r1, #4]
 8000a4a:	2c12      	cmp	r4, #18
 8000a4c:	f63f af5a 	bhi.w	8000904 <HAL_GPIO_Init+0x28>
 8000a50:	2c12      	cmp	r4, #18
 8000a52:	f63f af76 	bhi.w	8000942 <HAL_GPIO_Init+0x66>
 8000a56:	a701      	add	r7, pc, #4	; (adr r7, 8000a5c <HAL_GPIO_Init+0x180>)
 8000a58:	f857 f024 	ldr.w	pc, [r7, r4, lsl #2]
 8000a5c:	08000923 	.word	0x08000923
 8000a60:	08000aa9 	.word	0x08000aa9
 8000a64:	08000ab3 	.word	0x08000ab3
 8000a68:	08000901 	.word	0x08000901
 8000a6c:	08000943 	.word	0x08000943
 8000a70:	08000943 	.word	0x08000943
 8000a74:	08000943 	.word	0x08000943
 8000a78:	08000943 	.word	0x08000943
 8000a7c:	08000943 	.word	0x08000943
 8000a80:	08000943 	.word	0x08000943
 8000a84:	08000943 	.word	0x08000943
 8000a88:	08000943 	.word	0x08000943
 8000a8c:	08000943 	.word	0x08000943
 8000a90:	08000943 	.word	0x08000943
 8000a94:	08000943 	.word	0x08000943
 8000a98:	08000943 	.word	0x08000943
 8000a9c:	08000943 	.word	0x08000943
 8000aa0:	08000aad 	.word	0x08000aad
 8000aa4:	08000ab9 	.word	0x08000ab9
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000aa8:	68ca      	ldr	r2, [r1, #12]
          break;
 8000aaa:	e74a      	b.n	8000942 <HAL_GPIO_Init+0x66>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000aac:	68ca      	ldr	r2, [r1, #12]
 8000aae:	3204      	adds	r2, #4
          break;
 8000ab0:	e747      	b.n	8000942 <HAL_GPIO_Init+0x66>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ab2:	68ca      	ldr	r2, [r1, #12]
 8000ab4:	3208      	adds	r2, #8
          break;
 8000ab6:	e744      	b.n	8000942 <HAL_GPIO_Init+0x66>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ab8:	68ca      	ldr	r2, [r1, #12]
 8000aba:	320c      	adds	r2, #12
          break;
 8000abc:	e741      	b.n	8000942 <HAL_GPIO_Init+0x66>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000abe:	2204      	movs	r2, #4
 8000ac0:	e73f      	b.n	8000942 <HAL_GPIO_Init+0x66>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ac2:	1d07      	adds	r7, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ac4:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8000ac8:	f1a9 0920 	sub.w	r9, r9, #32
 8000acc:	e740      	b.n	8000950 <HAL_GPIO_Init+0x74>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ace:	2700      	movs	r7, #0
 8000ad0:	e77f      	b.n	80009d2 <HAL_GPIO_Init+0xf6>
 8000ad2:	2701      	movs	r7, #1
 8000ad4:	e77d      	b.n	80009d2 <HAL_GPIO_Init+0xf6>
 8000ad6:	2702      	movs	r7, #2
 8000ad8:	e77b      	b.n	80009d2 <HAL_GPIO_Init+0xf6>
  }
}
 8000ada:	b003      	add	sp, #12
 8000adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ae0:	40010400 	.word	0x40010400
 8000ae4:	10220000 	.word	0x10220000
 8000ae8:	10120000 	.word	0x10120000
 8000aec:	40010800 	.word	0x40010800
 8000af0:	40021000 	.word	0x40021000
 8000af4:	10310000 	.word	0x10310000
 8000af8:	10320000 	.word	0x10320000

08000afc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000afc:	6883      	ldr	r3, [r0, #8]
 8000afe:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000b00:	bf14      	ite	ne
 8000b02:	2001      	movne	r0, #1
 8000b04:	2000      	moveq	r0, #0
 8000b06:	4770      	bx	lr

08000b08 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b08:	b10a      	cbz	r2, 8000b0e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b0a:	6101      	str	r1, [r0, #16]
 8000b0c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b0e:	0409      	lsls	r1, r1, #16
 8000b10:	6101      	str	r1, [r0, #16]
  }
}
 8000b12:	4770      	bx	lr

08000b14 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000b14:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b16:	ea01 0203 	and.w	r2, r1, r3
 8000b1a:	ea21 0103 	bic.w	r1, r1, r3
 8000b1e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000b22:	6101      	str	r1, [r0, #16]
}
 8000b24:	4770      	bx	lr

08000b26 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000b26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b28:	b087      	sub	sp, #28
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000b2a:	2800      	cmp	r0, #0
 8000b2c:	d07a      	beq.n	8000c24 <HAL_PCD_Init+0xfe>
 8000b2e:	4605      	mov	r5, r0

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000b30:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 8000b34:	b1db      	cbz	r3, 8000b6e <HAL_PCD_Init+0x48>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000b36:	2303      	movs	r3, #3
 8000b38:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000b3c:	6828      	ldr	r0, [r5, #0]
 8000b3e:	f000 fc9d 	bl	800147c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000b42:	462c      	mov	r4, r5
 8000b44:	f854 7b10 	ldr.w	r7, [r4], #16
 8000b48:	466e      	mov	r6, sp
 8000b4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b4c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000b4e:	6823      	ldr	r3, [r4, #0]
 8000b50:	6033      	str	r3, [r6, #0]
 8000b52:	1d2b      	adds	r3, r5, #4
 8000b54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b56:	4638      	mov	r0, r7
 8000b58:	f000 fc89 	bl	800146e <USB_CoreInit>
 8000b5c:	4604      	mov	r4, r0
 8000b5e:	b158      	cbz	r0, 8000b78 <HAL_PCD_Init+0x52>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000b60:	2302      	movs	r3, #2
 8000b62:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
    return HAL_ERROR;
 8000b66:	2401      	movs	r4, #1
  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8000b68:	4620      	mov	r0, r4
 8000b6a:	b007      	add	sp, #28
 8000b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8000b6e:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 8000b72:	f7ff fdbf 	bl	80006f4 <HAL_PCD_MspInit>
 8000b76:	e7de      	b.n	8000b36 <HAL_PCD_Init+0x10>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000b78:	2100      	movs	r1, #0
 8000b7a:	6828      	ldr	r0, [r5, #0]
 8000b7c:	f000 fc88 	bl	8001490 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b80:	6868      	ldr	r0, [r5, #4]
 8000b82:	b388      	cbz	r0, 8000be8 <HAL_PCD_Init+0xc2>
 8000b84:	4623      	mov	r3, r4
    hpcd->IN_ep[i].is_in = 1U;
 8000b86:	2601      	movs	r6, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000b88:	2100      	movs	r1, #0
    hpcd->IN_ep[i].is_in = 1U;
 8000b8a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8000b8e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8000b92:	f882 6029 	strb.w	r6, [r2, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 8000b96:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000b9a:	86d3      	strh	r3, [r2, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000b9c:	f882 102b 	strb.w	r1, [r2, #43]	; 0x2b
    hpcd->IN_ep[i].maxpacket = 0U;
 8000ba0:	6391      	str	r1, [r2, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000ba2:	63d1      	str	r1, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 8000ba4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8000ba8:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8000bac:	6411      	str	r1, [r2, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000bae:	3301      	adds	r3, #1
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	4283      	cmp	r3, r0
 8000bb4:	d3e9      	bcc.n	8000b8a <HAL_PCD_Init+0x64>
    hpcd->OUT_ep[i].is_in = 0U;
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8000bbc:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8000bc0:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 8000bc4:	f883 4168 	strb.w	r4, [r3, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000bc8:	f883 216b 	strb.w	r2, [r3, #363]	; 0x16b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000bcc:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000bd0:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000bd4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8000bd8:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8000bdc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000be0:	3401      	adds	r4, #1
 8000be2:	b2e4      	uxtb	r4, r4
 8000be4:	4284      	cmp	r4, r0
 8000be6:	d3e7      	bcc.n	8000bb8 <HAL_PCD_Init+0x92>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000be8:	462c      	mov	r4, r5
 8000bea:	f854 7b10 	ldr.w	r7, [r4], #16
 8000bee:	466e      	mov	r6, sp
 8000bf0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bf2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000bf4:	6823      	ldr	r3, [r4, #0]
 8000bf6:	6033      	str	r3, [r6, #0]
 8000bf8:	1d2b      	adds	r3, r5, #4
 8000bfa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bfc:	4638      	mov	r0, r7
 8000bfe:	f000 fc49 	bl	8001494 <USB_DevInit>
 8000c02:	4604      	mov	r4, r0
 8000c04:	b120      	cbz	r0, 8000c10 <HAL_PCD_Init+0xea>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000c06:	2302      	movs	r3, #2
 8000c08:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
    return HAL_ERROR;
 8000c0c:	2401      	movs	r4, #1
 8000c0e:	e7ab      	b.n	8000b68 <HAL_PCD_Init+0x42>
  hpcd->USB_Address = 0U;
 8000c10:	2300      	movs	r3, #0
 8000c12:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000c16:	2301      	movs	r3, #1
 8000c18:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000c1c:	6828      	ldr	r0, [r5, #0]
 8000c1e:	f000 fc4c 	bl	80014ba <USB_DevDisconnect>
  return HAL_OK;
 8000c22:	e7a1      	b.n	8000b68 <HAL_PCD_Init+0x42>
    return HAL_ERROR;
 8000c24:	2401      	movs	r4, #1
 8000c26:	e79f      	b.n	8000b68 <HAL_PCD_Init+0x42>

08000c28 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c28:	2800      	cmp	r0, #0
 8000c2a:	f000 8201 	beq.w	8001030 <HAL_RCC_OscConfig+0x408>
{
 8000c2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c36:	6803      	ldr	r3, [r0, #0]
 8000c38:	f013 0f01 	tst.w	r3, #1
 8000c3c:	d02c      	beq.n	8000c98 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c3e:	4baa      	ldr	r3, [pc, #680]	; (8000ee8 <HAL_RCC_OscConfig+0x2c0>)
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	f003 030c 	and.w	r3, r3, #12
 8000c46:	2b04      	cmp	r3, #4
 8000c48:	d01d      	beq.n	8000c86 <HAL_RCC_OscConfig+0x5e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c4a:	4ba7      	ldr	r3, [pc, #668]	; (8000ee8 <HAL_RCC_OscConfig+0x2c0>)
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	f003 030c 	and.w	r3, r3, #12
 8000c52:	2b08      	cmp	r3, #8
 8000c54:	d012      	beq.n	8000c7c <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c56:	6863      	ldr	r3, [r4, #4]
 8000c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c5c:	d041      	beq.n	8000ce2 <HAL_RCC_OscConfig+0xba>
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d155      	bne.n	8000d0e <HAL_RCC_OscConfig+0xe6>
 8000c62:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000c66:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	e037      	b.n	8000cec <HAL_RCC_OscConfig+0xc4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c7c:	4b9a      	ldr	r3, [pc, #616]	; (8000ee8 <HAL_RCC_OscConfig+0x2c0>)
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000c84:	d0e7      	beq.n	8000c56 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c86:	4b98      	ldr	r3, [pc, #608]	; (8000ee8 <HAL_RCC_OscConfig+0x2c0>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000c8e:	d003      	beq.n	8000c98 <HAL_RCC_OscConfig+0x70>
 8000c90:	6863      	ldr	r3, [r4, #4]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f000 81ce 	beq.w	8001034 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c98:	6823      	ldr	r3, [r4, #0]
 8000c9a:	f013 0f02 	tst.w	r3, #2
 8000c9e:	d075      	beq.n	8000d8c <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ca0:	4b91      	ldr	r3, [pc, #580]	; (8000ee8 <HAL_RCC_OscConfig+0x2c0>)
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	f013 0f0c 	tst.w	r3, #12
 8000ca8:	d05f      	beq.n	8000d6a <HAL_RCC_OscConfig+0x142>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000caa:	4b8f      	ldr	r3, [pc, #572]	; (8000ee8 <HAL_RCC_OscConfig+0x2c0>)
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	f003 030c 	and.w	r3, r3, #12
 8000cb2:	2b08      	cmp	r3, #8
 8000cb4:	d054      	beq.n	8000d60 <HAL_RCC_OscConfig+0x138>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000cb6:	6923      	ldr	r3, [r4, #16]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	f000 8089 	beq.w	8000dd0 <HAL_RCC_OscConfig+0x1a8>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cbe:	4b8b      	ldr	r3, [pc, #556]	; (8000eec <HAL_RCC_OscConfig+0x2c4>)
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cc4:	f7ff fd96 	bl	80007f4 <HAL_GetTick>
 8000cc8:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cca:	4e87      	ldr	r6, [pc, #540]	; (8000ee8 <HAL_RCC_OscConfig+0x2c0>)
 8000ccc:	6833      	ldr	r3, [r6, #0]
 8000cce:	f013 0f02 	tst.w	r3, #2
 8000cd2:	d174      	bne.n	8000dbe <HAL_RCC_OscConfig+0x196>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000cd4:	f7ff fd8e 	bl	80007f4 <HAL_GetTick>
 8000cd8:	1b40      	subs	r0, r0, r5
 8000cda:	2802      	cmp	r0, #2
 8000cdc:	d9f6      	bls.n	8000ccc <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_TIMEOUT;
 8000cde:	2003      	movs	r0, #3
 8000ce0:	e1ad      	b.n	800103e <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ce2:	4a81      	ldr	r2, [pc, #516]	; (8000ee8 <HAL_RCC_OscConfig+0x2c0>)
 8000ce4:	6813      	ldr	r3, [r2, #0]
 8000ce6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cea:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000cec:	6863      	ldr	r3, [r4, #4]
 8000cee:	b343      	cbz	r3, 8000d42 <HAL_RCC_OscConfig+0x11a>
        tickstart = HAL_GetTick();
 8000cf0:	f7ff fd80 	bl	80007f4 <HAL_GetTick>
 8000cf4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cf6:	4e7c      	ldr	r6, [pc, #496]	; (8000ee8 <HAL_RCC_OscConfig+0x2c0>)
 8000cf8:	6833      	ldr	r3, [r6, #0]
 8000cfa:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000cfe:	d1cb      	bne.n	8000c98 <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d00:	f7ff fd78 	bl	80007f4 <HAL_GetTick>
 8000d04:	1b40      	subs	r0, r0, r5
 8000d06:	2864      	cmp	r0, #100	; 0x64
 8000d08:	d9f6      	bls.n	8000cf8 <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 8000d0a:	2003      	movs	r0, #3
 8000d0c:	e197      	b.n	800103e <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d0e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d12:	d009      	beq.n	8000d28 <HAL_RCC_OscConfig+0x100>
 8000d14:	4b74      	ldr	r3, [pc, #464]	; (8000ee8 <HAL_RCC_OscConfig+0x2c0>)
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	e7e1      	b.n	8000cec <HAL_RCC_OscConfig+0xc4>
 8000d28:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000d2c:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	e7d4      	b.n	8000cec <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 8000d42:	f7ff fd57 	bl	80007f4 <HAL_GetTick>
 8000d46:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d48:	4e67      	ldr	r6, [pc, #412]	; (8000ee8 <HAL_RCC_OscConfig+0x2c0>)
 8000d4a:	6833      	ldr	r3, [r6, #0]
 8000d4c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000d50:	d0a2      	beq.n	8000c98 <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d52:	f7ff fd4f 	bl	80007f4 <HAL_GetTick>
 8000d56:	1b40      	subs	r0, r0, r5
 8000d58:	2864      	cmp	r0, #100	; 0x64
 8000d5a:	d9f6      	bls.n	8000d4a <HAL_RCC_OscConfig+0x122>
            return HAL_TIMEOUT;
 8000d5c:	2003      	movs	r0, #3
 8000d5e:	e16e      	b.n	800103e <HAL_RCC_OscConfig+0x416>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d60:	4b61      	ldr	r3, [pc, #388]	; (8000ee8 <HAL_RCC_OscConfig+0x2c0>)
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000d68:	d1a5      	bne.n	8000cb6 <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d6a:	4b5f      	ldr	r3, [pc, #380]	; (8000ee8 <HAL_RCC_OscConfig+0x2c0>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f013 0f02 	tst.w	r3, #2
 8000d72:	d003      	beq.n	8000d7c <HAL_RCC_OscConfig+0x154>
 8000d74:	6923      	ldr	r3, [r4, #16]
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	f040 815e 	bne.w	8001038 <HAL_RCC_OscConfig+0x410>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d7c:	4a5a      	ldr	r2, [pc, #360]	; (8000ee8 <HAL_RCC_OscConfig+0x2c0>)
 8000d7e:	6813      	ldr	r3, [r2, #0]
 8000d80:	6961      	ldr	r1, [r4, #20]
 8000d82:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000d86:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000d8a:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d8c:	6823      	ldr	r3, [r4, #0]
 8000d8e:	f013 0f08 	tst.w	r3, #8
 8000d92:	d03c      	beq.n	8000e0e <HAL_RCC_OscConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d94:	69a3      	ldr	r3, [r4, #24]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d04f      	beq.n	8000e3a <HAL_RCC_OscConfig+0x212>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d9a:	4b55      	ldr	r3, [pc, #340]	; (8000ef0 <HAL_RCC_OscConfig+0x2c8>)
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000da0:	f7ff fd28 	bl	80007f4 <HAL_GetTick>
 8000da4:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000da6:	4e50      	ldr	r6, [pc, #320]	; (8000ee8 <HAL_RCC_OscConfig+0x2c0>)
 8000da8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8000daa:	f013 0f02 	tst.w	r3, #2
 8000dae:	d121      	bne.n	8000df4 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000db0:	f7ff fd20 	bl	80007f4 <HAL_GetTick>
 8000db4:	1b40      	subs	r0, r0, r5
 8000db6:	2802      	cmp	r0, #2
 8000db8:	d9f6      	bls.n	8000da8 <HAL_RCC_OscConfig+0x180>
        {
          return HAL_TIMEOUT;
 8000dba:	2003      	movs	r0, #3
 8000dbc:	e13f      	b.n	800103e <HAL_RCC_OscConfig+0x416>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dbe:	4a4a      	ldr	r2, [pc, #296]	; (8000ee8 <HAL_RCC_OscConfig+0x2c0>)
 8000dc0:	6813      	ldr	r3, [r2, #0]
 8000dc2:	6961      	ldr	r1, [r4, #20]
 8000dc4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000dc8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000dcc:	6013      	str	r3, [r2, #0]
 8000dce:	e7dd      	b.n	8000d8c <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8000dd0:	4b46      	ldr	r3, [pc, #280]	; (8000eec <HAL_RCC_OscConfig+0x2c4>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000dd6:	f7ff fd0d 	bl	80007f4 <HAL_GetTick>
 8000dda:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ddc:	4e42      	ldr	r6, [pc, #264]	; (8000ee8 <HAL_RCC_OscConfig+0x2c0>)
 8000dde:	6833      	ldr	r3, [r6, #0]
 8000de0:	f013 0f02 	tst.w	r3, #2
 8000de4:	d0d2      	beq.n	8000d8c <HAL_RCC_OscConfig+0x164>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000de6:	f7ff fd05 	bl	80007f4 <HAL_GetTick>
 8000dea:	1b40      	subs	r0, r0, r5
 8000dec:	2802      	cmp	r0, #2
 8000dee:	d9f6      	bls.n	8000dde <HAL_RCC_OscConfig+0x1b6>
            return HAL_TIMEOUT;
 8000df0:	2003      	movs	r0, #3
 8000df2:	e124      	b.n	800103e <HAL_RCC_OscConfig+0x416>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000df4:	4b3f      	ldr	r3, [pc, #252]	; (8000ef4 <HAL_RCC_OscConfig+0x2cc>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a3f      	ldr	r2, [pc, #252]	; (8000ef8 <HAL_RCC_OscConfig+0x2d0>)
 8000dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8000dfe:	0a5b      	lsrs	r3, r3, #9
 8000e00:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8000e02:	bf00      	nop
  }
  while (Delay --);
 8000e04:	9b01      	ldr	r3, [sp, #4]
 8000e06:	1e5a      	subs	r2, r3, #1
 8000e08:	9201      	str	r2, [sp, #4]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d1f9      	bne.n	8000e02 <HAL_RCC_OscConfig+0x1da>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e0e:	6823      	ldr	r3, [r4, #0]
 8000e10:	f013 0f04 	tst.w	r3, #4
 8000e14:	f000 809c 	beq.w	8000f50 <HAL_RCC_OscConfig+0x328>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e18:	4b33      	ldr	r3, [pc, #204]	; (8000ee8 <HAL_RCC_OscConfig+0x2c0>)
 8000e1a:	69db      	ldr	r3, [r3, #28]
 8000e1c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000e20:	d11d      	bne.n	8000e5e <HAL_RCC_OscConfig+0x236>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e22:	4b31      	ldr	r3, [pc, #196]	; (8000ee8 <HAL_RCC_OscConfig+0x2c0>)
 8000e24:	69da      	ldr	r2, [r3, #28]
 8000e26:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e2a:	61da      	str	r2, [r3, #28]
 8000e2c:	69db      	ldr	r3, [r3, #28]
 8000e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e32:	9300      	str	r3, [sp, #0]
 8000e34:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 8000e36:	2501      	movs	r5, #1
 8000e38:	e012      	b.n	8000e60 <HAL_RCC_OscConfig+0x238>
      __HAL_RCC_LSI_DISABLE();
 8000e3a:	4b2d      	ldr	r3, [pc, #180]	; (8000ef0 <HAL_RCC_OscConfig+0x2c8>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000e40:	f7ff fcd8 	bl	80007f4 <HAL_GetTick>
 8000e44:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e46:	4e28      	ldr	r6, [pc, #160]	; (8000ee8 <HAL_RCC_OscConfig+0x2c0>)
 8000e48:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8000e4a:	f013 0f02 	tst.w	r3, #2
 8000e4e:	d0de      	beq.n	8000e0e <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e50:	f7ff fcd0 	bl	80007f4 <HAL_GetTick>
 8000e54:	1b40      	subs	r0, r0, r5
 8000e56:	2802      	cmp	r0, #2
 8000e58:	d9f6      	bls.n	8000e48 <HAL_RCC_OscConfig+0x220>
          return HAL_TIMEOUT;
 8000e5a:	2003      	movs	r0, #3
 8000e5c:	e0ef      	b.n	800103e <HAL_RCC_OscConfig+0x416>
    FlagStatus       pwrclkchanged = RESET;
 8000e5e:	2500      	movs	r5, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e60:	4b26      	ldr	r3, [pc, #152]	; (8000efc <HAL_RCC_OscConfig+0x2d4>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000e68:	d011      	beq.n	8000e8e <HAL_RCC_OscConfig+0x266>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e6a:	68e3      	ldr	r3, [r4, #12]
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d022      	beq.n	8000eb6 <HAL_RCC_OscConfig+0x28e>
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d145      	bne.n	8000f00 <HAL_RCC_OscConfig+0x2d8>
 8000e74:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000e78:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000e7c:	6a1a      	ldr	r2, [r3, #32]
 8000e7e:	f022 0201 	bic.w	r2, r2, #1
 8000e82:	621a      	str	r2, [r3, #32]
 8000e84:	6a1a      	ldr	r2, [r3, #32]
 8000e86:	f022 0204 	bic.w	r2, r2, #4
 8000e8a:	621a      	str	r2, [r3, #32]
 8000e8c:	e018      	b.n	8000ec0 <HAL_RCC_OscConfig+0x298>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e8e:	4a1b      	ldr	r2, [pc, #108]	; (8000efc <HAL_RCC_OscConfig+0x2d4>)
 8000e90:	6813      	ldr	r3, [r2, #0]
 8000e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e96:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000e98:	f7ff fcac 	bl	80007f4 <HAL_GetTick>
 8000e9c:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e9e:	4f17      	ldr	r7, [pc, #92]	; (8000efc <HAL_RCC_OscConfig+0x2d4>)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000ea6:	d1e0      	bne.n	8000e6a <HAL_RCC_OscConfig+0x242>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ea8:	f7ff fca4 	bl	80007f4 <HAL_GetTick>
 8000eac:	1b80      	subs	r0, r0, r6
 8000eae:	2864      	cmp	r0, #100	; 0x64
 8000eb0:	d9f6      	bls.n	8000ea0 <HAL_RCC_OscConfig+0x278>
          return HAL_TIMEOUT;
 8000eb2:	2003      	movs	r0, #3
 8000eb4:	e0c3      	b.n	800103e <HAL_RCC_OscConfig+0x416>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000eb6:	4a0c      	ldr	r2, [pc, #48]	; (8000ee8 <HAL_RCC_OscConfig+0x2c0>)
 8000eb8:	6a13      	ldr	r3, [r2, #32]
 8000eba:	f043 0301 	orr.w	r3, r3, #1
 8000ebe:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ec0:	68e3      	ldr	r3, [r4, #12]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d032      	beq.n	8000f2c <HAL_RCC_OscConfig+0x304>
      tickstart = HAL_GetTick();
 8000ec6:	f7ff fc95 	bl	80007f4 <HAL_GetTick>
 8000eca:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ecc:	4f06      	ldr	r7, [pc, #24]	; (8000ee8 <HAL_RCC_OscConfig+0x2c0>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ece:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ed2:	6a3b      	ldr	r3, [r7, #32]
 8000ed4:	f013 0f02 	tst.w	r3, #2
 8000ed8:	d139      	bne.n	8000f4e <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000eda:	f7ff fc8b 	bl	80007f4 <HAL_GetTick>
 8000ede:	1b80      	subs	r0, r0, r6
 8000ee0:	4540      	cmp	r0, r8
 8000ee2:	d9f6      	bls.n	8000ed2 <HAL_RCC_OscConfig+0x2aa>
          return HAL_TIMEOUT;
 8000ee4:	2003      	movs	r0, #3
 8000ee6:	e0aa      	b.n	800103e <HAL_RCC_OscConfig+0x416>
 8000ee8:	40021000 	.word	0x40021000
 8000eec:	42420000 	.word	0x42420000
 8000ef0:	42420480 	.word	0x42420480
 8000ef4:	20000000 	.word	0x20000000
 8000ef8:	10624dd3 	.word	0x10624dd3
 8000efc:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f00:	2b05      	cmp	r3, #5
 8000f02:	d009      	beq.n	8000f18 <HAL_RCC_OscConfig+0x2f0>
 8000f04:	4b51      	ldr	r3, [pc, #324]	; (800104c <HAL_RCC_OscConfig+0x424>)
 8000f06:	6a1a      	ldr	r2, [r3, #32]
 8000f08:	f022 0201 	bic.w	r2, r2, #1
 8000f0c:	621a      	str	r2, [r3, #32]
 8000f0e:	6a1a      	ldr	r2, [r3, #32]
 8000f10:	f022 0204 	bic.w	r2, r2, #4
 8000f14:	621a      	str	r2, [r3, #32]
 8000f16:	e7d3      	b.n	8000ec0 <HAL_RCC_OscConfig+0x298>
 8000f18:	4b4c      	ldr	r3, [pc, #304]	; (800104c <HAL_RCC_OscConfig+0x424>)
 8000f1a:	6a1a      	ldr	r2, [r3, #32]
 8000f1c:	f042 0204 	orr.w	r2, r2, #4
 8000f20:	621a      	str	r2, [r3, #32]
 8000f22:	6a1a      	ldr	r2, [r3, #32]
 8000f24:	f042 0201 	orr.w	r2, r2, #1
 8000f28:	621a      	str	r2, [r3, #32]
 8000f2a:	e7c9      	b.n	8000ec0 <HAL_RCC_OscConfig+0x298>
      tickstart = HAL_GetTick();
 8000f2c:	f7ff fc62 	bl	80007f4 <HAL_GetTick>
 8000f30:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f32:	4f46      	ldr	r7, [pc, #280]	; (800104c <HAL_RCC_OscConfig+0x424>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f34:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f38:	6a3b      	ldr	r3, [r7, #32]
 8000f3a:	f013 0f02 	tst.w	r3, #2
 8000f3e:	d006      	beq.n	8000f4e <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f40:	f7ff fc58 	bl	80007f4 <HAL_GetTick>
 8000f44:	1b80      	subs	r0, r0, r6
 8000f46:	4540      	cmp	r0, r8
 8000f48:	d9f6      	bls.n	8000f38 <HAL_RCC_OscConfig+0x310>
          return HAL_TIMEOUT;
 8000f4a:	2003      	movs	r0, #3
 8000f4c:	e077      	b.n	800103e <HAL_RCC_OscConfig+0x416>
    if (pwrclkchanged == SET)
 8000f4e:	b9e5      	cbnz	r5, 8000f8a <HAL_RCC_OscConfig+0x362>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f50:	69e3      	ldr	r3, [r4, #28]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d072      	beq.n	800103c <HAL_RCC_OscConfig+0x414>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f56:	4a3d      	ldr	r2, [pc, #244]	; (800104c <HAL_RCC_OscConfig+0x424>)
 8000f58:	6852      	ldr	r2, [r2, #4]
 8000f5a:	f002 020c 	and.w	r2, r2, #12
 8000f5e:	2a08      	cmp	r2, #8
 8000f60:	d056      	beq.n	8001010 <HAL_RCC_OscConfig+0x3e8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d017      	beq.n	8000f96 <HAL_RCC_OscConfig+0x36e>
        __HAL_RCC_PLL_DISABLE();
 8000f66:	4b3a      	ldr	r3, [pc, #232]	; (8001050 <HAL_RCC_OscConfig+0x428>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f6c:	f7ff fc42 	bl	80007f4 <HAL_GetTick>
 8000f70:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f72:	4d36      	ldr	r5, [pc, #216]	; (800104c <HAL_RCC_OscConfig+0x424>)
 8000f74:	682b      	ldr	r3, [r5, #0]
 8000f76:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000f7a:	d047      	beq.n	800100c <HAL_RCC_OscConfig+0x3e4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f7c:	f7ff fc3a 	bl	80007f4 <HAL_GetTick>
 8000f80:	1b00      	subs	r0, r0, r4
 8000f82:	2802      	cmp	r0, #2
 8000f84:	d9f6      	bls.n	8000f74 <HAL_RCC_OscConfig+0x34c>
            return HAL_TIMEOUT;
 8000f86:	2003      	movs	r0, #3
 8000f88:	e059      	b.n	800103e <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f8a:	4a30      	ldr	r2, [pc, #192]	; (800104c <HAL_RCC_OscConfig+0x424>)
 8000f8c:	69d3      	ldr	r3, [r2, #28]
 8000f8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f92:	61d3      	str	r3, [r2, #28]
 8000f94:	e7dc      	b.n	8000f50 <HAL_RCC_OscConfig+0x328>
        __HAL_RCC_PLL_DISABLE();
 8000f96:	4b2e      	ldr	r3, [pc, #184]	; (8001050 <HAL_RCC_OscConfig+0x428>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f9c:	f7ff fc2a 	bl	80007f4 <HAL_GetTick>
 8000fa0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fa2:	4e2a      	ldr	r6, [pc, #168]	; (800104c <HAL_RCC_OscConfig+0x424>)
 8000fa4:	6833      	ldr	r3, [r6, #0]
 8000fa6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000faa:	d006      	beq.n	8000fba <HAL_RCC_OscConfig+0x392>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fac:	f7ff fc22 	bl	80007f4 <HAL_GetTick>
 8000fb0:	1b40      	subs	r0, r0, r5
 8000fb2:	2802      	cmp	r0, #2
 8000fb4:	d9f6      	bls.n	8000fa4 <HAL_RCC_OscConfig+0x37c>
            return HAL_TIMEOUT;
 8000fb6:	2003      	movs	r0, #3
 8000fb8:	e041      	b.n	800103e <HAL_RCC_OscConfig+0x416>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000fba:	6a23      	ldr	r3, [r4, #32]
 8000fbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fc0:	d01a      	beq.n	8000ff8 <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fc2:	4922      	ldr	r1, [pc, #136]	; (800104c <HAL_RCC_OscConfig+0x424>)
 8000fc4:	684a      	ldr	r2, [r1, #4]
 8000fc6:	6a23      	ldr	r3, [r4, #32]
 8000fc8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000fca:	4303      	orrs	r3, r0
 8000fcc:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8000fd4:	4b1e      	ldr	r3, [pc, #120]	; (8001050 <HAL_RCC_OscConfig+0x428>)
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000fda:	f7ff fc0b 	bl	80007f4 <HAL_GetTick>
 8000fde:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fe0:	4d1a      	ldr	r5, [pc, #104]	; (800104c <HAL_RCC_OscConfig+0x424>)
 8000fe2:	682b      	ldr	r3, [r5, #0]
 8000fe4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000fe8:	d10e      	bne.n	8001008 <HAL_RCC_OscConfig+0x3e0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fea:	f7ff fc03 	bl	80007f4 <HAL_GetTick>
 8000fee:	1b00      	subs	r0, r0, r4
 8000ff0:	2802      	cmp	r0, #2
 8000ff2:	d9f6      	bls.n	8000fe2 <HAL_RCC_OscConfig+0x3ba>
            return HAL_TIMEOUT;
 8000ff4:	2003      	movs	r0, #3
 8000ff6:	e022      	b.n	800103e <HAL_RCC_OscConfig+0x416>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000ff8:	4a14      	ldr	r2, [pc, #80]	; (800104c <HAL_RCC_OscConfig+0x424>)
 8000ffa:	6853      	ldr	r3, [r2, #4]
 8000ffc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001000:	68a1      	ldr	r1, [r4, #8]
 8001002:	430b      	orrs	r3, r1
 8001004:	6053      	str	r3, [r2, #4]
 8001006:	e7dc      	b.n	8000fc2 <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 8001008:	2000      	movs	r0, #0
 800100a:	e018      	b.n	800103e <HAL_RCC_OscConfig+0x416>
 800100c:	2000      	movs	r0, #0
 800100e:	e016      	b.n	800103e <HAL_RCC_OscConfig+0x416>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001010:	2b01      	cmp	r3, #1
 8001012:	d017      	beq.n	8001044 <HAL_RCC_OscConfig+0x41c>
        pll_config = RCC->CFGR;
 8001014:	4b0d      	ldr	r3, [pc, #52]	; (800104c <HAL_RCC_OscConfig+0x424>)
 8001016:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001018:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 800101c:	6a22      	ldr	r2, [r4, #32]
 800101e:	4291      	cmp	r1, r2
 8001020:	d112      	bne.n	8001048 <HAL_RCC_OscConfig+0x420>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001022:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001026:	6a60      	ldr	r0, [r4, #36]	; 0x24
        return HAL_ERROR;
 8001028:	1a18      	subs	r0, r3, r0
 800102a:	bf18      	it	ne
 800102c:	2001      	movne	r0, #1
 800102e:	e006      	b.n	800103e <HAL_RCC_OscConfig+0x416>
    return HAL_ERROR;
 8001030:	2001      	movs	r0, #1
}
 8001032:	4770      	bx	lr
        return HAL_ERROR;
 8001034:	2001      	movs	r0, #1
 8001036:	e002      	b.n	800103e <HAL_RCC_OscConfig+0x416>
        return HAL_ERROR;
 8001038:	2001      	movs	r0, #1
 800103a:	e000      	b.n	800103e <HAL_RCC_OscConfig+0x416>
  return HAL_OK;
 800103c:	2000      	movs	r0, #0
}
 800103e:	b002      	add	sp, #8
 8001040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 8001044:	2001      	movs	r0, #1
 8001046:	e7fa      	b.n	800103e <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
 8001048:	2001      	movs	r0, #1
 800104a:	e7f8      	b.n	800103e <HAL_RCC_OscConfig+0x416>
 800104c:	40021000 	.word	0x40021000
 8001050:	42420060 	.word	0x42420060

08001054 <HAL_RCC_GetSysClockFreq>:
{
 8001054:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001056:	4b16      	ldr	r3, [pc, #88]	; (80010b0 <HAL_RCC_GetSysClockFreq+0x5c>)
 8001058:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800105a:	f10d 0c18 	add.w	ip, sp, #24
 800105e:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001062:	f240 2301 	movw	r3, #513	; 0x201
 8001066:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 800106a:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <HAL_RCC_GetSysClockFreq+0x60>)
 800106c:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800106e:	f003 020c 	and.w	r2, r3, #12
 8001072:	2a08      	cmp	r2, #8
 8001074:	d002      	beq.n	800107c <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 8001076:	4810      	ldr	r0, [pc, #64]	; (80010b8 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8001078:	b006      	add	sp, #24
 800107a:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800107c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001080:	4462      	add	r2, ip
 8001082:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001086:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800108a:	d00c      	beq.n	80010a6 <HAL_RCC_GetSysClockFreq+0x52>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800108c:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <HAL_RCC_GetSysClockFreq+0x60>)
 800108e:	685b      	ldr	r3, [r3, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001090:	4809      	ldr	r0, [pc, #36]	; (80010b8 <HAL_RCC_GetSysClockFreq+0x64>)
 8001092:	fb00 f002 	mul.w	r0, r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001096:	f3c3 4340 	ubfx	r3, r3, #17, #1
 800109a:	4463      	add	r3, ip
 800109c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80010a0:	fbb0 f0f3 	udiv	r0, r0, r3
 80010a4:	e7e8      	b.n	8001078 <HAL_RCC_GetSysClockFreq+0x24>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80010a6:	4805      	ldr	r0, [pc, #20]	; (80010bc <HAL_RCC_GetSysClockFreq+0x68>)
 80010a8:	fb00 f002 	mul.w	r0, r0, r2
 80010ac:	e7e4      	b.n	8001078 <HAL_RCC_GetSysClockFreq+0x24>
 80010ae:	bf00      	nop
 80010b0:	0800158c 	.word	0x0800158c
 80010b4:	40021000 	.word	0x40021000
 80010b8:	007a1200 	.word	0x007a1200
 80010bc:	003d0900 	.word	0x003d0900

080010c0 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80010c0:	2800      	cmp	r0, #0
 80010c2:	f000 80a2 	beq.w	800120a <HAL_RCC_ClockConfig+0x14a>
{
 80010c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010ca:	460d      	mov	r5, r1
 80010cc:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010ce:	4b53      	ldr	r3, [pc, #332]	; (800121c <HAL_RCC_ClockConfig+0x15c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 0307 	and.w	r3, r3, #7
 80010d6:	428b      	cmp	r3, r1
 80010d8:	d20b      	bcs.n	80010f2 <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010da:	4a50      	ldr	r2, [pc, #320]	; (800121c <HAL_RCC_ClockConfig+0x15c>)
 80010dc:	6813      	ldr	r3, [r2, #0]
 80010de:	f023 0307 	bic.w	r3, r3, #7
 80010e2:	430b      	orrs	r3, r1
 80010e4:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010e6:	6813      	ldr	r3, [r2, #0]
 80010e8:	f003 0307 	and.w	r3, r3, #7
 80010ec:	428b      	cmp	r3, r1
 80010ee:	f040 808e 	bne.w	800120e <HAL_RCC_ClockConfig+0x14e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010f2:	6823      	ldr	r3, [r4, #0]
 80010f4:	f013 0f02 	tst.w	r3, #2
 80010f8:	d017      	beq.n	800112a <HAL_RCC_ClockConfig+0x6a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010fa:	f013 0f04 	tst.w	r3, #4
 80010fe:	d004      	beq.n	800110a <HAL_RCC_ClockConfig+0x4a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001100:	4a47      	ldr	r2, [pc, #284]	; (8001220 <HAL_RCC_ClockConfig+0x160>)
 8001102:	6853      	ldr	r3, [r2, #4]
 8001104:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001108:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800110a:	6823      	ldr	r3, [r4, #0]
 800110c:	f013 0f08 	tst.w	r3, #8
 8001110:	d004      	beq.n	800111c <HAL_RCC_ClockConfig+0x5c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001112:	4a43      	ldr	r2, [pc, #268]	; (8001220 <HAL_RCC_ClockConfig+0x160>)
 8001114:	6853      	ldr	r3, [r2, #4]
 8001116:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800111a:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800111c:	4a40      	ldr	r2, [pc, #256]	; (8001220 <HAL_RCC_ClockConfig+0x160>)
 800111e:	6853      	ldr	r3, [r2, #4]
 8001120:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001124:	68a1      	ldr	r1, [r4, #8]
 8001126:	430b      	orrs	r3, r1
 8001128:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800112a:	6823      	ldr	r3, [r4, #0]
 800112c:	f013 0f01 	tst.w	r3, #1
 8001130:	d031      	beq.n	8001196 <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001132:	6862      	ldr	r2, [r4, #4]
 8001134:	2a01      	cmp	r2, #1
 8001136:	d020      	beq.n	800117a <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001138:	2a02      	cmp	r2, #2
 800113a:	d025      	beq.n	8001188 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800113c:	4b38      	ldr	r3, [pc, #224]	; (8001220 <HAL_RCC_ClockConfig+0x160>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f013 0f02 	tst.w	r3, #2
 8001144:	d065      	beq.n	8001212 <HAL_RCC_ClockConfig+0x152>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001146:	4936      	ldr	r1, [pc, #216]	; (8001220 <HAL_RCC_ClockConfig+0x160>)
 8001148:	684b      	ldr	r3, [r1, #4]
 800114a:	f023 0303 	bic.w	r3, r3, #3
 800114e:	4313      	orrs	r3, r2
 8001150:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8001152:	f7ff fb4f 	bl	80007f4 <HAL_GetTick>
 8001156:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001158:	4f31      	ldr	r7, [pc, #196]	; (8001220 <HAL_RCC_ClockConfig+0x160>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800115a:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f003 030c 	and.w	r3, r3, #12
 8001164:	6862      	ldr	r2, [r4, #4]
 8001166:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800116a:	d014      	beq.n	8001196 <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800116c:	f7ff fb42 	bl	80007f4 <HAL_GetTick>
 8001170:	1b80      	subs	r0, r0, r6
 8001172:	4540      	cmp	r0, r8
 8001174:	d9f3      	bls.n	800115e <HAL_RCC_ClockConfig+0x9e>
        return HAL_TIMEOUT;
 8001176:	2003      	movs	r0, #3
 8001178:	e045      	b.n	8001206 <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800117a:	4b29      	ldr	r3, [pc, #164]	; (8001220 <HAL_RCC_ClockConfig+0x160>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001182:	d1e0      	bne.n	8001146 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8001184:	2001      	movs	r0, #1
 8001186:	e03e      	b.n	8001206 <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001188:	4b25      	ldr	r3, [pc, #148]	; (8001220 <HAL_RCC_ClockConfig+0x160>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001190:	d1d9      	bne.n	8001146 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8001192:	2001      	movs	r0, #1
 8001194:	e037      	b.n	8001206 <HAL_RCC_ClockConfig+0x146>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001196:	4b21      	ldr	r3, [pc, #132]	; (800121c <HAL_RCC_ClockConfig+0x15c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	42ab      	cmp	r3, r5
 80011a0:	d90a      	bls.n	80011b8 <HAL_RCC_ClockConfig+0xf8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011a2:	4a1e      	ldr	r2, [pc, #120]	; (800121c <HAL_RCC_ClockConfig+0x15c>)
 80011a4:	6813      	ldr	r3, [r2, #0]
 80011a6:	f023 0307 	bic.w	r3, r3, #7
 80011aa:	432b      	orrs	r3, r5
 80011ac:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011ae:	6813      	ldr	r3, [r2, #0]
 80011b0:	f003 0307 	and.w	r3, r3, #7
 80011b4:	42ab      	cmp	r3, r5
 80011b6:	d12e      	bne.n	8001216 <HAL_RCC_ClockConfig+0x156>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011b8:	6823      	ldr	r3, [r4, #0]
 80011ba:	f013 0f04 	tst.w	r3, #4
 80011be:	d006      	beq.n	80011ce <HAL_RCC_ClockConfig+0x10e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011c0:	4a17      	ldr	r2, [pc, #92]	; (8001220 <HAL_RCC_ClockConfig+0x160>)
 80011c2:	6853      	ldr	r3, [r2, #4]
 80011c4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80011c8:	68e1      	ldr	r1, [r4, #12]
 80011ca:	430b      	orrs	r3, r1
 80011cc:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011ce:	6823      	ldr	r3, [r4, #0]
 80011d0:	f013 0f08 	tst.w	r3, #8
 80011d4:	d007      	beq.n	80011e6 <HAL_RCC_ClockConfig+0x126>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80011d6:	4a12      	ldr	r2, [pc, #72]	; (8001220 <HAL_RCC_ClockConfig+0x160>)
 80011d8:	6853      	ldr	r3, [r2, #4]
 80011da:	6921      	ldr	r1, [r4, #16]
 80011dc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80011e0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80011e4:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80011e6:	f7ff ff35 	bl	8001054 <HAL_RCC_GetSysClockFreq>
 80011ea:	4b0d      	ldr	r3, [pc, #52]	; (8001220 <HAL_RCC_ClockConfig+0x160>)
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80011f2:	4a0c      	ldr	r2, [pc, #48]	; (8001224 <HAL_RCC_ClockConfig+0x164>)
 80011f4:	5cd3      	ldrb	r3, [r2, r3]
 80011f6:	40d8      	lsrs	r0, r3
 80011f8:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <HAL_RCC_ClockConfig+0x168>)
 80011fa:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80011fc:	4b0b      	ldr	r3, [pc, #44]	; (800122c <HAL_RCC_ClockConfig+0x16c>)
 80011fe:	6818      	ldr	r0, [r3, #0]
 8001200:	f7ff fab4 	bl	800076c <HAL_InitTick>
  return HAL_OK;
 8001204:	2000      	movs	r0, #0
}
 8001206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 800120a:	2001      	movs	r0, #1
}
 800120c:	4770      	bx	lr
    return HAL_ERROR;
 800120e:	2001      	movs	r0, #1
 8001210:	e7f9      	b.n	8001206 <HAL_RCC_ClockConfig+0x146>
        return HAL_ERROR;
 8001212:	2001      	movs	r0, #1
 8001214:	e7f7      	b.n	8001206 <HAL_RCC_ClockConfig+0x146>
    return HAL_ERROR;
 8001216:	2001      	movs	r0, #1
 8001218:	e7f5      	b.n	8001206 <HAL_RCC_ClockConfig+0x146>
 800121a:	bf00      	nop
 800121c:	40022000 	.word	0x40022000
 8001220:	40021000 	.word	0x40021000
 8001224:	08001574 	.word	0x08001574
 8001228:	20000000 	.word	0x20000000
 800122c:	20000008 	.word	0x20000008

08001230 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001230:	4b04      	ldr	r3, [pc, #16]	; (8001244 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001238:	4a03      	ldr	r2, [pc, #12]	; (8001248 <HAL_RCC_GetPCLK1Freq+0x18>)
 800123a:	5cd3      	ldrb	r3, [r2, r3]
 800123c:	4a03      	ldr	r2, [pc, #12]	; (800124c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800123e:	6810      	ldr	r0, [r2, #0]
}
 8001240:	40d8      	lsrs	r0, r3
 8001242:	4770      	bx	lr
 8001244:	40021000 	.word	0x40021000
 8001248:	08001584 	.word	0x08001584
 800124c:	20000000 	.word	0x20000000

08001250 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001250:	4b04      	ldr	r3, [pc, #16]	; (8001264 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001258:	4a03      	ldr	r2, [pc, #12]	; (8001268 <HAL_RCC_GetPCLK2Freq+0x18>)
 800125a:	5cd3      	ldrb	r3, [r2, r3]
 800125c:	4a03      	ldr	r2, [pc, #12]	; (800126c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800125e:	6810      	ldr	r0, [r2, #0]
}
 8001260:	40d8      	lsrs	r0, r3
 8001262:	4770      	bx	lr
 8001264:	40021000 	.word	0x40021000
 8001268:	08001584 	.word	0x08001584
 800126c:	20000000 	.word	0x20000000

08001270 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001274:	b082      	sub	sp, #8
 8001276:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001278:	6803      	ldr	r3, [r0, #0]
 800127a:	f013 0f01 	tst.w	r3, #1
 800127e:	d034      	beq.n	80012ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001280:	4b3e      	ldr	r3, [pc, #248]	; (800137c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001282:	69db      	ldr	r3, [r3, #28]
 8001284:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001288:	d147      	bne.n	800131a <HAL_RCCEx_PeriphCLKConfig+0xaa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800128a:	4b3c      	ldr	r3, [pc, #240]	; (800137c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800128c:	69da      	ldr	r2, [r3, #28]
 800128e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001292:	61da      	str	r2, [r3, #28]
 8001294:	69db      	ldr	r3, [r3, #28]
 8001296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800129a:	9301      	str	r3, [sp, #4]
 800129c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800129e:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012a0:	4b37      	ldr	r3, [pc, #220]	; (8001380 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80012a8:	d039      	beq.n	800131e <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80012aa:	4b34      	ldr	r3, [pc, #208]	; (800137c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80012ac:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80012ae:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80012b2:	d011      	beq.n	80012d8 <HAL_RCCEx_PeriphCLKConfig+0x68>
 80012b4:	6862      	ldr	r2, [r4, #4]
 80012b6:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d00c      	beq.n	80012d8 <HAL_RCCEx_PeriphCLKConfig+0x68>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80012be:	4a2f      	ldr	r2, [pc, #188]	; (800137c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80012c0:	6a13      	ldr	r3, [r2, #32]
 80012c2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80012c6:	492f      	ldr	r1, [pc, #188]	; (8001384 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80012c8:	2601      	movs	r6, #1
 80012ca:	600e      	str	r6, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80012cc:	2600      	movs	r6, #0
 80012ce:	600e      	str	r6, [r1, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80012d0:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80012d2:	f013 0f01 	tst.w	r3, #1
 80012d6:	d136      	bne.n	8001346 <HAL_RCCEx_PeriphCLKConfig+0xd6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80012d8:	4a28      	ldr	r2, [pc, #160]	; (800137c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80012da:	6a13      	ldr	r3, [r2, #32]
 80012dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80012e0:	6861      	ldr	r1, [r4, #4]
 80012e2:	430b      	orrs	r3, r1
 80012e4:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80012e6:	2d00      	cmp	r5, #0
 80012e8:	d13e      	bne.n	8001368 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80012ea:	6823      	ldr	r3, [r4, #0]
 80012ec:	f013 0f02 	tst.w	r3, #2
 80012f0:	d006      	beq.n	8001300 <HAL_RCCEx_PeriphCLKConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80012f2:	4a22      	ldr	r2, [pc, #136]	; (800137c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80012f4:	6853      	ldr	r3, [r2, #4]
 80012f6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80012fa:	68a1      	ldr	r1, [r4, #8]
 80012fc:	430b      	orrs	r3, r1
 80012fe:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001300:	6823      	ldr	r3, [r4, #0]
 8001302:	f013 0f10 	tst.w	r3, #16
 8001306:	d034      	beq.n	8001372 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001308:	4a1c      	ldr	r2, [pc, #112]	; (800137c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800130a:	6853      	ldr	r3, [r2, #4]
 800130c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001310:	68e1      	ldr	r1, [r4, #12]
 8001312:	430b      	orrs	r3, r1
 8001314:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001316:	2000      	movs	r0, #0
 8001318:	e02c      	b.n	8001374 <HAL_RCCEx_PeriphCLKConfig+0x104>
    FlagStatus       pwrclkchanged = RESET;
 800131a:	2500      	movs	r5, #0
 800131c:	e7c0      	b.n	80012a0 <HAL_RCCEx_PeriphCLKConfig+0x30>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800131e:	4a18      	ldr	r2, [pc, #96]	; (8001380 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8001320:	6813      	ldr	r3, [r2, #0]
 8001322:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001326:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001328:	f7ff fa64 	bl	80007f4 <HAL_GetTick>
 800132c:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800132e:	4f14      	ldr	r7, [pc, #80]	; (8001380 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001336:	d1b8      	bne.n	80012aa <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001338:	f7ff fa5c 	bl	80007f4 <HAL_GetTick>
 800133c:	1b80      	subs	r0, r0, r6
 800133e:	2864      	cmp	r0, #100	; 0x64
 8001340:	d9f6      	bls.n	8001330 <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 8001342:	2003      	movs	r0, #3
 8001344:	e016      	b.n	8001374 <HAL_RCCEx_PeriphCLKConfig+0x104>
        tickstart = HAL_GetTick();
 8001346:	f7ff fa55 	bl	80007f4 <HAL_GetTick>
 800134a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800134c:	4f0b      	ldr	r7, [pc, #44]	; (800137c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800134e:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001352:	6a3b      	ldr	r3, [r7, #32]
 8001354:	f013 0f02 	tst.w	r3, #2
 8001358:	d1be      	bne.n	80012d8 <HAL_RCCEx_PeriphCLKConfig+0x68>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800135a:	f7ff fa4b 	bl	80007f4 <HAL_GetTick>
 800135e:	1b80      	subs	r0, r0, r6
 8001360:	4540      	cmp	r0, r8
 8001362:	d9f6      	bls.n	8001352 <HAL_RCCEx_PeriphCLKConfig+0xe2>
            return HAL_TIMEOUT;
 8001364:	2003      	movs	r0, #3
 8001366:	e005      	b.n	8001374 <HAL_RCCEx_PeriphCLKConfig+0x104>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001368:	69d3      	ldr	r3, [r2, #28]
 800136a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800136e:	61d3      	str	r3, [r2, #28]
 8001370:	e7bb      	b.n	80012ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
  return HAL_OK;
 8001372:	2000      	movs	r0, #0
}
 8001374:	b002      	add	sp, #8
 8001376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800137a:	bf00      	nop
 800137c:	40021000 	.word	0x40021000
 8001380:	40007000 	.word	0x40007000
 8001384:	42420440 	.word	0x42420440

08001388 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001388:	b510      	push	{r4, lr}
 800138a:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800138c:	6802      	ldr	r2, [r0, #0]
 800138e:	6913      	ldr	r3, [r2, #16]
 8001390:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001394:	68c1      	ldr	r1, [r0, #12]
 8001396:	430b      	orrs	r3, r1
 8001398:	6113      	str	r3, [r2, #16]
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
  MODIFY_REG(huart->Instance->CR1,
 800139a:	6801      	ldr	r1, [r0, #0]
 800139c:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800139e:	6883      	ldr	r3, [r0, #8]
 80013a0:	6900      	ldr	r0, [r0, #16]
 80013a2:	4303      	orrs	r3, r0
 80013a4:	6960      	ldr	r0, [r4, #20]
 80013a6:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 80013a8:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 80013ac:	f022 020c 	bic.w	r2, r2, #12
 80013b0:	4313      	orrs	r3, r2
 80013b2:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80013b4:	6822      	ldr	r2, [r4, #0]
 80013b6:	6953      	ldr	r3, [r2, #20]
 80013b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80013bc:	69a1      	ldr	r1, [r4, #24]
 80013be:	430b      	orrs	r3, r1
 80013c0:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 80013c2:	6822      	ldr	r2, [r4, #0]
 80013c4:	4b10      	ldr	r3, [pc, #64]	; (8001408 <UART_SetConfig+0x80>)
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d01a      	beq.n	8001400 <UART_SetConfig+0x78>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80013ca:	f7ff ff31 	bl	8001230 <HAL_RCC_GetPCLK1Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80013ce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80013d2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80013d6:	6863      	ldr	r3, [r4, #4]
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	fbb0 f3f3 	udiv	r3, r0, r3
 80013de:	6824      	ldr	r4, [r4, #0]
 80013e0:	480a      	ldr	r0, [pc, #40]	; (800140c <UART_SetConfig+0x84>)
 80013e2:	fba0 2103 	umull	r2, r1, r0, r3
 80013e6:	0949      	lsrs	r1, r1, #5
 80013e8:	2264      	movs	r2, #100	; 0x64
 80013ea:	fb02 3311 	mls	r3, r2, r1, r3
 80013ee:	011b      	lsls	r3, r3, #4
 80013f0:	3332      	adds	r3, #50	; 0x32
 80013f2:	fba0 2303 	umull	r2, r3, r0, r3
 80013f6:	0109      	lsls	r1, r1, #4
 80013f8:	eb01 1353 	add.w	r3, r1, r3, lsr #5
 80013fc:	60a3      	str	r3, [r4, #8]
#endif /* USART_CR1_OVER8 */
}
 80013fe:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8001400:	f7ff ff26 	bl	8001250 <HAL_RCC_GetPCLK2Freq>
 8001404:	e7e3      	b.n	80013ce <UART_SetConfig+0x46>
 8001406:	bf00      	nop
 8001408:	40013800 	.word	0x40013800
 800140c:	51eb851f 	.word	0x51eb851f

08001410 <HAL_UART_Init>:
  if (huart == NULL)
 8001410:	b358      	cbz	r0, 800146a <HAL_UART_Init+0x5a>
{
 8001412:	b510      	push	{r4, lr}
 8001414:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8001416:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800141a:	b30b      	cbz	r3, 8001460 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800141c:	2324      	movs	r3, #36	; 0x24
 800141e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001422:	6822      	ldr	r2, [r4, #0]
 8001424:	68d3      	ldr	r3, [r2, #12]
 8001426:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800142a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800142c:	4620      	mov	r0, r4
 800142e:	f7ff ffab 	bl	8001388 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001432:	6822      	ldr	r2, [r4, #0]
 8001434:	6913      	ldr	r3, [r2, #16]
 8001436:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800143a:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800143c:	6822      	ldr	r2, [r4, #0]
 800143e:	6953      	ldr	r3, [r2, #20]
 8001440:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001444:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8001446:	6822      	ldr	r2, [r4, #0]
 8001448:	68d3      	ldr	r3, [r2, #12]
 800144a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800144e:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001450:	2000      	movs	r0, #0
 8001452:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001454:	2320      	movs	r3, #32
 8001456:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800145a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 800145e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001460:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001464:	f7ff f8c2 	bl	80005ec <HAL_UART_MspInit>
 8001468:	e7d8      	b.n	800141c <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800146a:	2001      	movs	r0, #1
}
 800146c:	4770      	bx	lr

0800146e <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800146e:	b084      	sub	sp, #16
 8001470:	a801      	add	r0, sp, #4
 8001472:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8001476:	2000      	movs	r0, #0
 8001478:	b004      	add	sp, #16
 800147a:	4770      	bx	lr

0800147c <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800147c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8001480:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001484:	045b      	lsls	r3, r3, #17
 8001486:	0c5b      	lsrs	r3, r3, #17
 8001488:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 800148c:	2000      	movs	r0, #0
 800148e:	4770      	bx	lr

08001490 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001490:	2000      	movs	r0, #0
 8001492:	4770      	bx	lr

08001494 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001494:	b084      	sub	sp, #16
 8001496:	b410      	push	{r4}
 8001498:	4604      	mov	r4, r0
 800149a:	a802      	add	r0, sp, #8
 800149c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80014a0:	2301      	movs	r3, #1
 80014a2:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80014a6:	2000      	movs	r0, #0
 80014a8:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80014ac:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80014b0:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50

  return HAL_OK;
}
 80014b4:	bc10      	pop	{r4}
 80014b6:	b004      	add	sp, #16
 80014b8:	4770      	bx	lr

080014ba <USB_DevDisconnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 80014ba:	2000      	movs	r0, #0
 80014bc:	4770      	bx	lr
	...

080014c0 <__libc_init_array>:
 80014c0:	b570      	push	{r4, r5, r6, lr}
 80014c2:	2600      	movs	r6, #0
 80014c4:	4d0c      	ldr	r5, [pc, #48]	; (80014f8 <__libc_init_array+0x38>)
 80014c6:	4c0d      	ldr	r4, [pc, #52]	; (80014fc <__libc_init_array+0x3c>)
 80014c8:	1b64      	subs	r4, r4, r5
 80014ca:	10a4      	asrs	r4, r4, #2
 80014cc:	42a6      	cmp	r6, r4
 80014ce:	d109      	bne.n	80014e4 <__libc_init_array+0x24>
 80014d0:	f000 f834 	bl	800153c <_init>
 80014d4:	2600      	movs	r6, #0
 80014d6:	4d0a      	ldr	r5, [pc, #40]	; (8001500 <__libc_init_array+0x40>)
 80014d8:	4c0a      	ldr	r4, [pc, #40]	; (8001504 <__libc_init_array+0x44>)
 80014da:	1b64      	subs	r4, r4, r5
 80014dc:	10a4      	asrs	r4, r4, #2
 80014de:	42a6      	cmp	r6, r4
 80014e0:	d105      	bne.n	80014ee <__libc_init_array+0x2e>
 80014e2:	bd70      	pop	{r4, r5, r6, pc}
 80014e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80014e8:	4798      	blx	r3
 80014ea:	3601      	adds	r6, #1
 80014ec:	e7ee      	b.n	80014cc <__libc_init_array+0xc>
 80014ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80014f2:	4798      	blx	r3
 80014f4:	3601      	adds	r6, #1
 80014f6:	e7f2      	b.n	80014de <__libc_init_array+0x1e>
 80014f8:	080015a0 	.word	0x080015a0
 80014fc:	080015a0 	.word	0x080015a0
 8001500:	080015a0 	.word	0x080015a0
 8001504:	080015a4 	.word	0x080015a4

08001508 <memset>:
 8001508:	4603      	mov	r3, r0
 800150a:	4402      	add	r2, r0
 800150c:	4293      	cmp	r3, r2
 800150e:	d100      	bne.n	8001512 <memset+0xa>
 8001510:	4770      	bx	lr
 8001512:	f803 1b01 	strb.w	r1, [r3], #1
 8001516:	e7f9      	b.n	800150c <memset+0x4>

08001518 <strncmp>:
 8001518:	b510      	push	{r4, lr}
 800151a:	b16a      	cbz	r2, 8001538 <strncmp+0x20>
 800151c:	3901      	subs	r1, #1
 800151e:	1884      	adds	r4, r0, r2
 8001520:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001524:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8001528:	4293      	cmp	r3, r2
 800152a:	d103      	bne.n	8001534 <strncmp+0x1c>
 800152c:	42a0      	cmp	r0, r4
 800152e:	d001      	beq.n	8001534 <strncmp+0x1c>
 8001530:	2b00      	cmp	r3, #0
 8001532:	d1f5      	bne.n	8001520 <strncmp+0x8>
 8001534:	1a98      	subs	r0, r3, r2
 8001536:	bd10      	pop	{r4, pc}
 8001538:	4610      	mov	r0, r2
 800153a:	e7fc      	b.n	8001536 <strncmp+0x1e>

0800153c <_init>:
 800153c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800153e:	bf00      	nop
 8001540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001542:	bc08      	pop	{r3}
 8001544:	469e      	mov	lr, r3
 8001546:	4770      	bx	lr

08001548 <_fini>:
 8001548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800154a:	bf00      	nop
 800154c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800154e:	bc08      	pop	{r3}
 8001550:	469e      	mov	lr, r3
 8001552:	4770      	bx	lr
