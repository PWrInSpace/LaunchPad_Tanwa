
tanwaR4S.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013b4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080014c0  080014c0  000114c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080014ec  080014ec  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080014ec  080014ec  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080014ec  080014ec  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080014ec  080014ec  000114ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080014f0  080014f0  000114f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080014f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ac  20000070  08001564  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000041c  08001564  0002041c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c1c4  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000230f  00000000  00000000  0002c25d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000648f  00000000  00000000  0002e56c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000800  00000000  00000000  00034a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b58  00000000  00000000  00035200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001e8d  00000000  00000000  00035d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cc6f  00000000  00000000  00037be5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008429e  00000000  00000000  00044854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000c8af2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001484  00000000  00000000  000c8b48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080014a8 	.word	0x080014a8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080014a8 	.word	0x080014a8

0800014c <igniter_init>:
#include "Igniter.h"

//make struct 'Igniter', fill it, return pointer to it    (names of args start with '_' sign)
Igniter* igniter_init(GPIO_TypeDef* _GPIO_PORT_IGNITER, uint16_t _PIN_IGNITER, GPIO_TypeDef* _GPIO_PORT_TEST_CON, uint16_t _PIN_TEST_CON){
 800014c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000150:	4680      	mov	r8, r0
 8000152:	460f      	mov	r7, r1
 8000154:	4616      	mov	r6, r2
 8000156:	461d      	mov	r5, r3

	Igniter* I = malloc(sizeof(Igniter));	 //allocate space for struct
 8000158:	2010      	movs	r0, #16
 800015a:	f001 f917 	bl	800138c <malloc>
	//fill whole struct
	I->GPIO_PORT_IGNITER = _GPIO_PORT_IGNITER;
 800015e:	f8c0 8000 	str.w	r8, [r0]
	I->PIN_IGNITER = _PIN_IGNITER;
 8000162:	8087      	strh	r7, [r0, #4]
	I->GPIO_PORT_TEST_CON = _GPIO_PORT_TEST_CON;
 8000164:	6086      	str	r6, [r0, #8]
	I->PIN_TEST_CON = _PIN_TEST_CON;
 8000166:	8185      	strh	r5, [r0, #12]
	return I;
}
 8000168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800016c <igniter_is_connected>:

bool igniter_is_connected(Igniter* Igniter){
 800016c:	b508      	push	{r3, lr}
	if(HAL_GPIO_ReadPin(Igniter->GPIO_PORT_TEST_CON, Igniter->PIN_TEST_CON) == 1)
 800016e:	8981      	ldrh	r1, [r0, #12]
 8000170:	6880      	ldr	r0, [r0, #8]
 8000172:	f000 fc05 	bl	8000980 <HAL_GPIO_ReadPin>
		return 1;
	else
		return 0;
}
 8000176:	2801      	cmp	r0, #1
 8000178:	bf14      	ite	ne
 800017a:	2000      	movne	r0, #0
 800017c:	2001      	moveq	r0, #1
 800017e:	bd08      	pop	{r3, pc}

08000180 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000180:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000184:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000186:	2400      	movs	r4, #0
 8000188:	9404      	str	r4, [sp, #16]
 800018a:	9405      	str	r4, [sp, #20]
 800018c:	9406      	str	r4, [sp, #24]
 800018e:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000190:	4b2a      	ldr	r3, [pc, #168]	; (800023c <MX_GPIO_Init+0xbc>)
 8000192:	699a      	ldr	r2, [r3, #24]
 8000194:	f042 0210 	orr.w	r2, r2, #16
 8000198:	619a      	str	r2, [r3, #24]
 800019a:	699a      	ldr	r2, [r3, #24]
 800019c:	f002 0210 	and.w	r2, r2, #16
 80001a0:	9200      	str	r2, [sp, #0]
 80001a2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001a4:	699a      	ldr	r2, [r3, #24]
 80001a6:	f042 0220 	orr.w	r2, r2, #32
 80001aa:	619a      	str	r2, [r3, #24]
 80001ac:	699a      	ldr	r2, [r3, #24]
 80001ae:	f002 0220 	and.w	r2, r2, #32
 80001b2:	9201      	str	r2, [sp, #4]
 80001b4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001b6:	699a      	ldr	r2, [r3, #24]
 80001b8:	f042 0204 	orr.w	r2, r2, #4
 80001bc:	619a      	str	r2, [r3, #24]
 80001be:	699a      	ldr	r2, [r3, #24]
 80001c0:	f002 0204 	and.w	r2, r2, #4
 80001c4:	9202      	str	r2, [sp, #8]
 80001c6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001c8:	699a      	ldr	r2, [r3, #24]
 80001ca:	f042 0208 	orr.w	r2, r2, #8
 80001ce:	619a      	str	r2, [r3, #24]
 80001d0:	699b      	ldr	r3, [r3, #24]
 80001d2:	f003 0308 	and.w	r3, r3, #8
 80001d6:	9303      	str	r3, [sp, #12]
 80001d8:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUILD_IN_LED_GPIO_Port, BUILD_IN_LED_Pin, GPIO_PIN_RESET);
 80001da:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8000248 <MX_GPIO_Init+0xc8>
 80001de:	4622      	mov	r2, r4
 80001e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001e4:	4648      	mov	r0, r9
 80001e6:	f000 fbd1 	bl	800098c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IGN_FIRE_GPIO_Port, IGN_FIRE_Pin, GPIO_PIN_RESET);
 80001ea:	4d15      	ldr	r5, [pc, #84]	; (8000240 <MX_GPIO_Init+0xc0>)
 80001ec:	4622      	mov	r2, r4
 80001ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001f2:	4628      	mov	r0, r5
 80001f4:	f000 fbca 	bl	800098c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUILD_IN_LED_Pin;
 80001f8:	f44f 5800 	mov.w	r8, #8192	; 0x2000
 80001fc:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000200:	2701      	movs	r7, #1
 8000202:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000204:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000206:	2602      	movs	r6, #2
 8000208:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(BUILD_IN_LED_GPIO_Port, &GPIO_InitStruct);
 800020a:	a904      	add	r1, sp, #16
 800020c:	4648      	mov	r0, r9
 800020e:	f000 faa7 	bl	8000760 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IGN_TEST_CON_Pin;
 8000212:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000216:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000218:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(IGN_TEST_CON_GPIO_Port, &GPIO_InitStruct);
 800021a:	a904      	add	r1, sp, #16
 800021c:	4809      	ldr	r0, [pc, #36]	; (8000244 <MX_GPIO_Init+0xc4>)
 800021e:	f000 fa9f 	bl	8000760 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IGN_FIRE_Pin;
 8000222:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000226:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000228:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800022a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800022c:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(IGN_FIRE_GPIO_Port, &GPIO_InitStruct);
 800022e:	a904      	add	r1, sp, #16
 8000230:	4628      	mov	r0, r5
 8000232:	f000 fa95 	bl	8000760 <HAL_GPIO_Init>

}
 8000236:	b009      	add	sp, #36	; 0x24
 8000238:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800023c:	40021000 	.word	0x40021000
 8000240:	40010800 	.word	0x40010800
 8000244:	40010c00 	.word	0x40010c00
 8000248:	40011000 	.word	0x40011000

0800024c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800024c:	b500      	push	{lr}
 800024e:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000250:	2300      	movs	r3, #0
 8000252:	930d      	str	r3, [sp, #52]	; 0x34
 8000254:	930f      	str	r3, [sp, #60]	; 0x3c
 8000256:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000258:	9305      	str	r3, [sp, #20]
 800025a:	9306      	str	r3, [sp, #24]
 800025c:	9307      	str	r3, [sp, #28]
 800025e:	9308      	str	r3, [sp, #32]
 8000260:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000262:	9301      	str	r3, [sp, #4]
 8000264:	9302      	str	r3, [sp, #8]
 8000266:	9303      	str	r3, [sp, #12]
 8000268:	9304      	str	r3, [sp, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800026a:	2101      	movs	r1, #1
 800026c:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800026e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000272:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000274:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000276:	910e      	str	r1, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000278:	2302      	movs	r3, #2
 800027a:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800027c:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800027e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000282:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000284:	a80a      	add	r0, sp, #40	; 0x28
 8000286:	f000 fc11 	bl	8000aac <HAL_RCC_OscConfig>
 800028a:	b9d0      	cbnz	r0, 80002c2 <SystemClock_Config+0x76>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800028c:	230f      	movs	r3, #15
 800028e:	9305      	str	r3, [sp, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000290:	2302      	movs	r3, #2
 8000292:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000294:	2300      	movs	r3, #0
 8000296:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000298:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800029c:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800029e:	9309      	str	r3, [sp, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002a0:	2101      	movs	r1, #1
 80002a2:	a805      	add	r0, sp, #20
 80002a4:	f000 fe4e 	bl	8000f44 <HAL_RCC_ClockConfig>
 80002a8:	b968      	cbnz	r0, 80002c6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80002aa:	2310      	movs	r3, #16
 80002ac:	9301      	str	r3, [sp, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80002ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80002b2:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002b4:	a801      	add	r0, sp, #4
 80002b6:	f000 ff1d 	bl	80010f4 <HAL_RCCEx_PeriphCLKConfig>
 80002ba:	b930      	cbnz	r0, 80002ca <SystemClock_Config+0x7e>
  {
    Error_Handler();
  }
}
 80002bc:	b015      	add	sp, #84	; 0x54
 80002be:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002c2:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002c4:	e7fe      	b.n	80002c4 <SystemClock_Config+0x78>
 80002c6:	b672      	cpsid	i
 80002c8:	e7fe      	b.n	80002c8 <SystemClock_Config+0x7c>
 80002ca:	b672      	cpsid	i
 80002cc:	e7fe      	b.n	80002cc <SystemClock_Config+0x80>
	...

080002d0 <main>:
{
 80002d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_Init();
 80002d2:	f000 f9b3 	bl	800063c <HAL_Init>
  SystemClock_Config();
 80002d6:	f7ff ffb9 	bl	800024c <SystemClock_Config>
  MX_GPIO_Init();
 80002da:	f7ff ff51 	bl	8000180 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002de:	f000 f893 	bl	8000408 <MX_USART2_UART_Init>
  MX_USB_PCD_Init();
 80002e2:	f000 f931 	bl	8000548 <MX_USB_PCD_Init>
  MX_USART3_UART_Init();
 80002e6:	f000 f8a9 	bl	800043c <MX_USART3_UART_Init>
  HAL_Delay(1000);
 80002ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002ee:	f000 f9c9 	bl	8000684 <HAL_Delay>
  memset(buff ,0,sizeof(buff));
 80002f2:	2400      	movs	r4, #0
 80002f4:	6024      	str	r4, [r4, #0]
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 80002f6:	4b25      	ldr	r3, [pc, #148]	; (800038c <main+0xbc>)
 80002f8:	681a      	ldr	r2, [r3, #0]
 80002fa:	68d3      	ldr	r3, [r2, #12]
 80002fc:	f043 0320 	orr.w	r3, r3, #32
 8000300:	60d3      	str	r3, [r2, #12]
  Igniter* Ignit = igniter_init(IGN_FIRE_GPIO_Port, IGN_FIRE_Pin, IGN_TEST_CON_GPIO_Port, IGN_TEST_CON_Pin);
 8000302:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000306:	4a22      	ldr	r2, [pc, #136]	; (8000390 <main+0xc0>)
 8000308:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800030c:	4821      	ldr	r0, [pc, #132]	; (8000394 <main+0xc4>)
 800030e:	f7ff ff1d 	bl	800014c <igniter_init>
 8000312:	4605      	mov	r5, r0
  state = 0; //touch only for tests
 8000314:	4b20      	ldr	r3, [pc, #128]	; (8000398 <main+0xc8>)
 8000316:	701c      	strb	r4, [r3, #0]
	  switch(state){
 8000318:	461c      	mov	r4, r3
			  HAL_Delay(1000000);
 800031a:	4e20      	ldr	r6, [pc, #128]	; (800039c <main+0xcc>)
				  HAL_GPIO_TogglePin(BUILD_IN_LED_GPIO_Port, BUILD_IN_LED_Pin);
 800031c:	4f20      	ldr	r7, [pc, #128]	; (80003a0 <main+0xd0>)
 800031e:	e007      	b.n	8000330 <main+0x60>
			  if(igniter_is_connected(Ignit)){
 8000320:	4628      	mov	r0, r5
 8000322:	f7ff ff23 	bl	800016c <igniter_is_connected>
 8000326:	b9b8      	cbnz	r0, 8000358 <main+0x88>
			  HAL_Delay(1000);
 8000328:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800032c:	f000 f9aa 	bl	8000684 <HAL_Delay>
	  switch(state){
 8000330:	7823      	ldrb	r3, [r4, #0]
 8000332:	2b06      	cmp	r3, #6
 8000334:	d8fd      	bhi.n	8000332 <main+0x62>
 8000336:	a201      	add	r2, pc, #4	; (adr r2, 800033c <main+0x6c>)
 8000338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800033c:	08000321 	.word	0x08000321
 8000340:	08000333 	.word	0x08000333
 8000344:	08000365 	.word	0x08000365
 8000348:	08000333 	.word	0x08000333
 800034c:	0800036d 	.word	0x0800036d
 8000350:	08000373 	.word	0x08000373
 8000354:	08000383 	.word	0x08000383
				  HAL_GPIO_TogglePin(BUILD_IN_LED_GPIO_Port, BUILD_IN_LED_Pin);
 8000358:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800035c:	4638      	mov	r0, r7
 800035e:	f000 fb1b 	bl	8000998 <HAL_GPIO_TogglePin>
 8000362:	e7e1      	b.n	8000328 <main+0x58>
			  if(igniter_is_connected(Ignit) && signal == 'h'){
 8000364:	4628      	mov	r0, r5
 8000366:	f7ff ff01 	bl	800016c <igniter_is_connected>
 800036a:	e7e1      	b.n	8000330 <main+0x60>
			  state = 2;
 800036c:	2302      	movs	r3, #2
 800036e:	7023      	strb	r3, [r4, #0]
			  break;
 8000370:	e7de      	b.n	8000330 <main+0x60>
			  if( ! igniter_is_connected(Ignit)){
 8000372:	4628      	mov	r0, r5
 8000374:	f7ff fefa 	bl	800016c <igniter_is_connected>
 8000378:	2800      	cmp	r0, #0
 800037a:	d1d9      	bne.n	8000330 <main+0x60>
				  state = 6;
 800037c:	2306      	movs	r3, #6
 800037e:	7023      	strb	r3, [r4, #0]
 8000380:	e7d6      	b.n	8000330 <main+0x60>
			  HAL_Delay(1000000);
 8000382:	4630      	mov	r0, r6
 8000384:	f000 f97e 	bl	8000684 <HAL_Delay>
			  break;
 8000388:	e7d2      	b.n	8000330 <main+0x60>
 800038a:	bf00      	nop
 800038c:	200000dc 	.word	0x200000dc
 8000390:	40010c00 	.word	0x40010c00
 8000394:	40010800 	.word	0x40010800
 8000398:	2000008c 	.word	0x2000008c
 800039c:	000f4240 	.word	0x000f4240
 80003a0:	40011000 	.word	0x40011000

080003a4 <Error_Handler>:
 80003a4:	b672      	cpsid	i
  while (1)
 80003a6:	e7fe      	b.n	80003a6 <Error_Handler+0x2>

080003a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003a8:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003aa:	4b0e      	ldr	r3, [pc, #56]	; (80003e4 <HAL_MspInit+0x3c>)
 80003ac:	699a      	ldr	r2, [r3, #24]
 80003ae:	f042 0201 	orr.w	r2, r2, #1
 80003b2:	619a      	str	r2, [r3, #24]
 80003b4:	699a      	ldr	r2, [r3, #24]
 80003b6:	f002 0201 	and.w	r2, r2, #1
 80003ba:	9200      	str	r2, [sp, #0]
 80003bc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003be:	69da      	ldr	r2, [r3, #28]
 80003c0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80003c4:	61da      	str	r2, [r3, #28]
 80003c6:	69db      	ldr	r3, [r3, #28]
 80003c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003cc:	9301      	str	r3, [sp, #4]
 80003ce:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003d0:	4a05      	ldr	r2, [pc, #20]	; (80003e8 <HAL_MspInit+0x40>)
 80003d2:	6853      	ldr	r3, [r2, #4]
 80003d4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003de:	b002      	add	sp, #8
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop
 80003e4:	40021000 	.word	0x40021000
 80003e8:	40010000 	.word	0x40010000

080003ec <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003ec:	e7fe      	b.n	80003ec <NMI_Handler>

080003ee <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003ee:	e7fe      	b.n	80003ee <HardFault_Handler>

080003f0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003f0:	e7fe      	b.n	80003f0 <MemManage_Handler>

080003f2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003f2:	e7fe      	b.n	80003f2 <BusFault_Handler>

080003f4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003f4:	e7fe      	b.n	80003f4 <UsageFault_Handler>

080003f6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003f6:	4770      	bx	lr

080003f8 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003f8:	4770      	bx	lr

080003fa <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003fa:	4770      	bx	lr

080003fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003fc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003fe:	f000 f92f 	bl	8000660 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000402:	bd08      	pop	{r3, pc}

08000404 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000404:	4770      	bx	lr
	...

08000408 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000408:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800040a:	480a      	ldr	r0, [pc, #40]	; (8000434 <MX_USART2_UART_Init+0x2c>)
 800040c:	4b0a      	ldr	r3, [pc, #40]	; (8000438 <MX_USART2_UART_Init+0x30>)
 800040e:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8000410:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000414:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000416:	2300      	movs	r3, #0
 8000418:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800041a:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800041c:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800041e:	220c      	movs	r2, #12
 8000420:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000422:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000424:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000426:	f000 ff35 	bl	8001294 <HAL_UART_Init>
 800042a:	b900      	cbnz	r0, 800042e <MX_USART2_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800042c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800042e:	f7ff ffb9 	bl	80003a4 <Error_Handler>
}
 8000432:	e7fb      	b.n	800042c <MX_USART2_UART_Init+0x24>
 8000434:	200000dc 	.word	0x200000dc
 8000438:	40004400 	.word	0x40004400

0800043c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800043c:	b508      	push	{r3, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800043e:	480a      	ldr	r0, [pc, #40]	; (8000468 <MX_USART3_UART_Init+0x2c>)
 8000440:	4b0a      	ldr	r3, [pc, #40]	; (800046c <MX_USART3_UART_Init+0x30>)
 8000442:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 8000444:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000448:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800044a:	2300      	movs	r3, #0
 800044c:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800044e:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000450:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000452:	220c      	movs	r2, #12
 8000454:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000456:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000458:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800045a:	f000 ff1b 	bl	8001294 <HAL_UART_Init>
 800045e:	b900      	cbnz	r0, 8000462 <MX_USART3_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000460:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000462:	f7ff ff9f 	bl	80003a4 <Error_Handler>
}
 8000466:	e7fb      	b.n	8000460 <MX_USART3_UART_Init+0x24>
 8000468:	2000009c 	.word	0x2000009c
 800046c:	40004800 	.word	0x40004800

08000470 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000470:	b510      	push	{r4, lr}
 8000472:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000474:	2300      	movs	r3, #0
 8000476:	9304      	str	r3, [sp, #16]
 8000478:	9305      	str	r3, [sp, #20]
 800047a:	9306      	str	r3, [sp, #24]
 800047c:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART2)
 800047e:	6803      	ldr	r3, [r0, #0]
 8000480:	4a2c      	ldr	r2, [pc, #176]	; (8000534 <HAL_UART_MspInit+0xc4>)
 8000482:	4293      	cmp	r3, r2
 8000484:	d004      	beq.n	8000490 <HAL_UART_MspInit+0x20>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 8000486:	4a2c      	ldr	r2, [pc, #176]	; (8000538 <HAL_UART_MspInit+0xc8>)
 8000488:	4293      	cmp	r3, r2
 800048a:	d029      	beq.n	80004e0 <HAL_UART_MspInit+0x70>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800048c:	b008      	add	sp, #32
 800048e:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8000490:	4b2a      	ldr	r3, [pc, #168]	; (800053c <HAL_UART_MspInit+0xcc>)
 8000492:	69da      	ldr	r2, [r3, #28]
 8000494:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000498:	61da      	str	r2, [r3, #28]
 800049a:	69da      	ldr	r2, [r3, #28]
 800049c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80004a0:	9200      	str	r2, [sp, #0]
 80004a2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a4:	699a      	ldr	r2, [r3, #24]
 80004a6:	f042 0204 	orr.w	r2, r2, #4
 80004aa:	619a      	str	r2, [r3, #24]
 80004ac:	699b      	ldr	r3, [r3, #24]
 80004ae:	f003 0304 	and.w	r3, r3, #4
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80004b6:	2304      	movs	r3, #4
 80004b8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004ba:	2302      	movs	r3, #2
 80004bc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004be:	2303      	movs	r3, #3
 80004c0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004c2:	4c1f      	ldr	r4, [pc, #124]	; (8000540 <HAL_UART_MspInit+0xd0>)
 80004c4:	a904      	add	r1, sp, #16
 80004c6:	4620      	mov	r0, r4
 80004c8:	f000 f94a 	bl	8000760 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80004cc:	2308      	movs	r3, #8
 80004ce:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004d0:	2300      	movs	r3, #0
 80004d2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d4:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d6:	a904      	add	r1, sp, #16
 80004d8:	4620      	mov	r0, r4
 80004da:	f000 f941 	bl	8000760 <HAL_GPIO_Init>
 80004de:	e7d5      	b.n	800048c <HAL_UART_MspInit+0x1c>
    __HAL_RCC_USART3_CLK_ENABLE();
 80004e0:	4b16      	ldr	r3, [pc, #88]	; (800053c <HAL_UART_MspInit+0xcc>)
 80004e2:	69da      	ldr	r2, [r3, #28]
 80004e4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80004e8:	61da      	str	r2, [r3, #28]
 80004ea:	69da      	ldr	r2, [r3, #28]
 80004ec:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80004f0:	9202      	str	r2, [sp, #8]
 80004f2:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004f4:	699a      	ldr	r2, [r3, #24]
 80004f6:	f042 0208 	orr.w	r2, r2, #8
 80004fa:	619a      	str	r2, [r3, #24]
 80004fc:	699b      	ldr	r3, [r3, #24]
 80004fe:	f003 0308 	and.w	r3, r3, #8
 8000502:	9303      	str	r3, [sp, #12]
 8000504:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000506:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800050a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800050c:	2302      	movs	r3, #2
 800050e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000510:	2303      	movs	r3, #3
 8000512:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000514:	4c0b      	ldr	r4, [pc, #44]	; (8000544 <HAL_UART_MspInit+0xd4>)
 8000516:	a904      	add	r1, sp, #16
 8000518:	4620      	mov	r0, r4
 800051a:	f000 f921 	bl	8000760 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800051e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000522:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000524:	2300      	movs	r3, #0
 8000526:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000528:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800052a:	a904      	add	r1, sp, #16
 800052c:	4620      	mov	r0, r4
 800052e:	f000 f917 	bl	8000760 <HAL_GPIO_Init>
}
 8000532:	e7ab      	b.n	800048c <HAL_UART_MspInit+0x1c>
 8000534:	40004400 	.word	0x40004400
 8000538:	40004800 	.word	0x40004800
 800053c:	40021000 	.word	0x40021000
 8000540:	40010800 	.word	0x40010800
 8000544:	40010c00 	.word	0x40010c00

08000548 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8000548:	b508      	push	{r3, lr}
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800054a:	4809      	ldr	r0, [pc, #36]	; (8000570 <MX_USB_PCD_Init+0x28>)
 800054c:	4b09      	ldr	r3, [pc, #36]	; (8000574 <MX_USB_PCD_Init+0x2c>)
 800054e:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000550:	2308      	movs	r3, #8
 8000552:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000554:	2302      	movs	r3, #2
 8000556:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000558:	2300      	movs	r3, #0
 800055a:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800055c:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800055e:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000560:	f000 fa23 	bl	80009aa <HAL_PCD_Init>
 8000564:	b900      	cbnz	r0, 8000568 <MX_USB_PCD_Init+0x20>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000566:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000568:	f7ff ff1c 	bl	80003a4 <Error_Handler>
}
 800056c:	e7fb      	b.n	8000566 <MX_USB_PCD_Init+0x1e>
 800056e:	bf00      	nop
 8000570:	2000011c 	.word	0x2000011c
 8000574:	40005c00 	.word	0x40005c00

08000578 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{

  if(pcdHandle->Instance==USB)
 8000578:	6802      	ldr	r2, [r0, #0]
 800057a:	4b09      	ldr	r3, [pc, #36]	; (80005a0 <HAL_PCD_MspInit+0x28>)
 800057c:	429a      	cmp	r2, r3
 800057e:	d000      	beq.n	8000582 <HAL_PCD_MspInit+0xa>
 8000580:	4770      	bx	lr
{
 8000582:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000584:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8000588:	69da      	ldr	r2, [r3, #28]
 800058a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800058e:	61da      	str	r2, [r3, #28]
 8000590:	69db      	ldr	r3, [r3, #28]
 8000592:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000596:	9301      	str	r3, [sp, #4]
 8000598:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800059a:	b002      	add	sp, #8
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	40005c00 	.word	0x40005c00

080005a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80005a4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80005a6:	e003      	b.n	80005b0 <LoopCopyDataInit>

080005a8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80005a8:	4b0b      	ldr	r3, [pc, #44]	; (80005d8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80005aa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80005ac:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80005ae:	3104      	adds	r1, #4

080005b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80005b0:	480a      	ldr	r0, [pc, #40]	; (80005dc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80005b2:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80005b4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80005b6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80005b8:	d3f6      	bcc.n	80005a8 <CopyDataInit>
  ldr r2, =_sbss
 80005ba:	4a0a      	ldr	r2, [pc, #40]	; (80005e4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80005bc:	e002      	b.n	80005c4 <LoopFillZerobss>

080005be <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80005be:	2300      	movs	r3, #0
  str r3, [r2], #4
 80005c0:	f842 3b04 	str.w	r3, [r2], #4

080005c4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80005c4:	4b08      	ldr	r3, [pc, #32]	; (80005e8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80005c6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80005c8:	d3f9      	bcc.n	80005be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005ca:	f7ff ff1b 	bl	8000404 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005ce:	f000 feb9 	bl	8001344 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005d2:	f7ff fe7d 	bl	80002d0 <main>
  bx lr
 80005d6:	4770      	bx	lr
  ldr r3, =_sidata
 80005d8:	080014f4 	.word	0x080014f4
  ldr r0, =_sdata
 80005dc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80005e0:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 80005e4:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80005e8:	2000041c 	.word	0x2000041c

080005ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005ec:	e7fe      	b.n	80005ec <ADC1_2_IRQHandler>
	...

080005f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005f0:	b510      	push	{r4, lr}
 80005f2:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005f4:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <HAL_InitTick+0x40>)
 80005f6:	7818      	ldrb	r0, [r3, #0]
 80005f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005fc:	fbb3 f3f0 	udiv	r3, r3, r0
 8000600:	4a0c      	ldr	r2, [pc, #48]	; (8000634 <HAL_InitTick+0x44>)
 8000602:	6810      	ldr	r0, [r2, #0]
 8000604:	fbb0 f0f3 	udiv	r0, r0, r3
 8000608:	f000 f894 	bl	8000734 <HAL_SYSTICK_Config>
 800060c:	b968      	cbnz	r0, 800062a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800060e:	2c0f      	cmp	r4, #15
 8000610:	d901      	bls.n	8000616 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000612:	2001      	movs	r0, #1
 8000614:	e00a      	b.n	800062c <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000616:	2200      	movs	r2, #0
 8000618:	4621      	mov	r1, r4
 800061a:	f04f 30ff 	mov.w	r0, #4294967295
 800061e:	f000 f857 	bl	80006d0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000622:	4b05      	ldr	r3, [pc, #20]	; (8000638 <HAL_InitTick+0x48>)
 8000624:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000626:	2000      	movs	r0, #0
 8000628:	e000      	b.n	800062c <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800062a:	2001      	movs	r0, #1
}
 800062c:	bd10      	pop	{r4, pc}
 800062e:	bf00      	nop
 8000630:	20000004 	.word	0x20000004
 8000634:	20000000 	.word	0x20000000
 8000638:	20000008 	.word	0x20000008

0800063c <HAL_Init>:
{
 800063c:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800063e:	4a07      	ldr	r2, [pc, #28]	; (800065c <HAL_Init+0x20>)
 8000640:	6813      	ldr	r3, [r2, #0]
 8000642:	f043 0310 	orr.w	r3, r3, #16
 8000646:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000648:	2003      	movs	r0, #3
 800064a:	f000 f82f 	bl	80006ac <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800064e:	2000      	movs	r0, #0
 8000650:	f7ff ffce 	bl	80005f0 <HAL_InitTick>
  HAL_MspInit();
 8000654:	f7ff fea8 	bl	80003a8 <HAL_MspInit>
}
 8000658:	2000      	movs	r0, #0
 800065a:	bd08      	pop	{r3, pc}
 800065c:	40022000 	.word	0x40022000

08000660 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000660:	4a03      	ldr	r2, [pc, #12]	; (8000670 <HAL_IncTick+0x10>)
 8000662:	6811      	ldr	r1, [r2, #0]
 8000664:	4b03      	ldr	r3, [pc, #12]	; (8000674 <HAL_IncTick+0x14>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	440b      	add	r3, r1
 800066a:	6013      	str	r3, [r2, #0]
}
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	20000408 	.word	0x20000408
 8000674:	20000004 	.word	0x20000004

08000678 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000678:	4b01      	ldr	r3, [pc, #4]	; (8000680 <HAL_GetTick+0x8>)
 800067a:	6818      	ldr	r0, [r3, #0]
}
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	20000408 	.word	0x20000408

08000684 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000684:	b538      	push	{r3, r4, r5, lr}
 8000686:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000688:	f7ff fff6 	bl	8000678 <HAL_GetTick>
 800068c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800068e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000692:	d002      	beq.n	800069a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000694:	4b04      	ldr	r3, [pc, #16]	; (80006a8 <HAL_Delay+0x24>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800069a:	f7ff ffed 	bl	8000678 <HAL_GetTick>
 800069e:	1b40      	subs	r0, r0, r5
 80006a0:	42a0      	cmp	r0, r4
 80006a2:	d3fa      	bcc.n	800069a <HAL_Delay+0x16>
  {
  }
}
 80006a4:	bd38      	pop	{r3, r4, r5, pc}
 80006a6:	bf00      	nop
 80006a8:	20000004 	.word	0x20000004

080006ac <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006ac:	4907      	ldr	r1, [pc, #28]	; (80006cc <HAL_NVIC_SetPriorityGrouping+0x20>)
 80006ae:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006b0:	0203      	lsls	r3, r0, #8
 80006b2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80006ba:	0412      	lsls	r2, r2, #16
 80006bc:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80006c8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80006ca:	4770      	bx	lr
 80006cc:	e000ed00 	.word	0xe000ed00

080006d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006d0:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006d2:	4b16      	ldr	r3, [pc, #88]	; (800072c <HAL_NVIC_SetPriority+0x5c>)
 80006d4:	68db      	ldr	r3, [r3, #12]
 80006d6:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006da:	f1c3 0407 	rsb	r4, r3, #7
 80006de:	2c04      	cmp	r4, #4
 80006e0:	bf28      	it	cs
 80006e2:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006e4:	1d1d      	adds	r5, r3, #4
 80006e6:	2d06      	cmp	r5, #6
 80006e8:	bf8c      	ite	hi
 80006ea:	3b03      	subhi	r3, #3
 80006ec:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006ee:	f04f 35ff 	mov.w	r5, #4294967295
 80006f2:	fa05 f404 	lsl.w	r4, r5, r4
 80006f6:	ea21 0104 	bic.w	r1, r1, r4
 80006fa:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006fc:	fa05 f303 	lsl.w	r3, r5, r3
 8000700:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000704:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8000706:	2800      	cmp	r0, #0
 8000708:	db09      	blt.n	800071e <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070a:	0109      	lsls	r1, r1, #4
 800070c:	b2c9      	uxtb	r1, r1
 800070e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000712:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000716:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800071a:	bc30      	pop	{r4, r5}
 800071c:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800071e:	f000 000f 	and.w	r0, r0, #15
 8000722:	0109      	lsls	r1, r1, #4
 8000724:	b2c9      	uxtb	r1, r1
 8000726:	4b02      	ldr	r3, [pc, #8]	; (8000730 <HAL_NVIC_SetPriority+0x60>)
 8000728:	5419      	strb	r1, [r3, r0]
 800072a:	e7f6      	b.n	800071a <HAL_NVIC_SetPriority+0x4a>
 800072c:	e000ed00 	.word	0xe000ed00
 8000730:	e000ed14 	.word	0xe000ed14

08000734 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000734:	3801      	subs	r0, #1
 8000736:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800073a:	d20a      	bcs.n	8000752 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <HAL_SYSTICK_Config+0x24>)
 800073e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000740:	4a06      	ldr	r2, [pc, #24]	; (800075c <HAL_SYSTICK_Config+0x28>)
 8000742:	21f0      	movs	r1, #240	; 0xf0
 8000744:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000748:	2000      	movs	r0, #0
 800074a:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800074c:	2207      	movs	r2, #7
 800074e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000750:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000752:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	e000e010 	.word	0xe000e010
 800075c:	e000ed00 	.word	0xe000ed00

08000760 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000764:	b083      	sub	sp, #12
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000766:	680f      	ldr	r7, [r1, #0]
 8000768:	2f00      	cmp	r7, #0
 800076a:	f000 80f8 	beq.w	800095e <HAL_GPIO_Init+0x1fe>
  uint32_t config = 0x00u;
 800076e:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8000770:	4613      	mov	r3, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000772:	f8df c200 	ldr.w	ip, [pc, #512]	; 8000974 <HAL_GPIO_Init+0x214>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000776:	4d7b      	ldr	r5, [pc, #492]	; (8000964 <HAL_GPIO_Init+0x204>)
      switch (GPIO_Init->Mode)
 8000778:	4e7b      	ldr	r6, [pc, #492]	; (8000968 <HAL_GPIO_Init+0x208>)
 800077a:	f8df e1fc 	ldr.w	lr, [pc, #508]	; 8000978 <HAL_GPIO_Init+0x218>
 800077e:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 800097c <HAL_GPIO_Init+0x21c>
 8000782:	e09a      	b.n	80008ba <HAL_GPIO_Init+0x15a>
 8000784:	2200      	movs	r2, #0
 8000786:	e01e      	b.n	80007c6 <HAL_GPIO_Init+0x66>
 8000788:	42b4      	cmp	r4, r6
 800078a:	d00c      	beq.n	80007a6 <HAL_GPIO_Init+0x46>
 800078c:	d904      	bls.n	8000798 <HAL_GPIO_Init+0x38>
 800078e:	4574      	cmp	r4, lr
 8000790:	d009      	beq.n	80007a6 <HAL_GPIO_Init+0x46>
 8000792:	4544      	cmp	r4, r8
 8000794:	d007      	beq.n	80007a6 <HAL_GPIO_Init+0x46>
 8000796:	e016      	b.n	80007c6 <HAL_GPIO_Init+0x66>
 8000798:	4f74      	ldr	r7, [pc, #464]	; (800096c <HAL_GPIO_Init+0x20c>)
 800079a:	42bc      	cmp	r4, r7
 800079c:	d003      	beq.n	80007a6 <HAL_GPIO_Init+0x46>
 800079e:	f507 2770 	add.w	r7, r7, #983040	; 0xf0000
 80007a2:	42bc      	cmp	r4, r7
 80007a4:	d10b      	bne.n	80007be <HAL_GPIO_Init+0x5e>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80007a6:	688a      	ldr	r2, [r1, #8]
 80007a8:	2a00      	cmp	r2, #0
 80007aa:	f000 80ca 	beq.w	8000942 <HAL_GPIO_Init+0x1e2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80007ae:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80007b0:	bf0c      	ite	eq
 80007b2:	f8c0 9010 	streq.w	r9, [r0, #16]
            GPIOx->BRR = ioposition;
 80007b6:	f8c0 9014 	strne.w	r9, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80007ba:	2208      	movs	r2, #8
 80007bc:	e003      	b.n	80007c6 <HAL_GPIO_Init+0x66>
      switch (GPIO_Init->Mode)
 80007be:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 80007c2:	42bc      	cmp	r4, r7
 80007c4:	d0ef      	beq.n	80007a6 <HAL_GPIO_Init+0x46>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80007c6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80007ca:	f200 80bc 	bhi.w	8000946 <HAL_GPIO_Init+0x1e6>
 80007ce:	4607      	mov	r7, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80007d0:	ea4f 0983 	mov.w	r9, r3, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80007d4:	683c      	ldr	r4, [r7, #0]
 80007d6:	f04f 0b0f 	mov.w	fp, #15
 80007da:	fa0b fb09 	lsl.w	fp, fp, r9
 80007de:	ea24 040b 	bic.w	r4, r4, fp
 80007e2:	fa02 f909 	lsl.w	r9, r2, r9
 80007e6:	ea44 0409 	orr.w	r4, r4, r9
 80007ea:	603c      	str	r4, [r7, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80007ec:	684c      	ldr	r4, [r1, #4]
 80007ee:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 80007f2:	d05d      	beq.n	80008b0 <HAL_GPIO_Init+0x150>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80007f4:	f8dc 4018 	ldr.w	r4, [ip, #24]
 80007f8:	f044 0401 	orr.w	r4, r4, #1
 80007fc:	f8cc 4018 	str.w	r4, [ip, #24]
 8000800:	f8dc 4018 	ldr.w	r4, [ip, #24]
 8000804:	f004 0401 	and.w	r4, r4, #1
 8000808:	9401      	str	r4, [sp, #4]
 800080a:	9c01      	ldr	r4, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 800080c:	f023 0403 	bic.w	r4, r3, #3
 8000810:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8000814:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 8000818:	f8d4 9008 	ldr.w	r9, [r4, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800081c:	f003 0703 	and.w	r7, r3, #3
 8000820:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 8000824:	270f      	movs	r7, #15
 8000826:	fa07 f70b 	lsl.w	r7, r7, fp
 800082a:	ea29 0907 	bic.w	r9, r9, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800082e:	4f50      	ldr	r7, [pc, #320]	; (8000970 <HAL_GPIO_Init+0x210>)
 8000830:	42b8      	cmp	r0, r7
 8000832:	f000 808e 	beq.w	8000952 <HAL_GPIO_Init+0x1f2>
 8000836:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800083a:	42b8      	cmp	r0, r7
 800083c:	f000 808b 	beq.w	8000956 <HAL_GPIO_Init+0x1f6>
 8000840:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000844:	42b8      	cmp	r0, r7
 8000846:	f000 8088 	beq.w	800095a <HAL_GPIO_Init+0x1fa>
 800084a:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800084e:	42b8      	cmp	r0, r7
 8000850:	bf0c      	ite	eq
 8000852:	2703      	moveq	r7, #3
 8000854:	2704      	movne	r7, #4
 8000856:	fa07 f70b 	lsl.w	r7, r7, fp
 800085a:	ea47 0709 	orr.w	r7, r7, r9
        AFIO->EXTICR[position >> 2u] = temp;
 800085e:	60a7      	str	r7, [r4, #8]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000860:	684c      	ldr	r4, [r1, #4]
 8000862:	f414 3f80 	tst.w	r4, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000866:	682c      	ldr	r4, [r5, #0]
 8000868:	bf14      	ite	ne
 800086a:	ea44 040a 	orrne.w	r4, r4, sl
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800086e:	ea24 040a 	biceq.w	r4, r4, sl
 8000872:	602c      	str	r4, [r5, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000874:	684c      	ldr	r4, [r1, #4]
 8000876:	f414 3f00 	tst.w	r4, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800087a:	686c      	ldr	r4, [r5, #4]
 800087c:	bf14      	ite	ne
 800087e:	ea44 040a 	orrne.w	r4, r4, sl
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000882:	ea24 040a 	biceq.w	r4, r4, sl
 8000886:	606c      	str	r4, [r5, #4]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000888:	684c      	ldr	r4, [r1, #4]
 800088a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 800088e:	68ac      	ldr	r4, [r5, #8]
 8000890:	bf14      	ite	ne
 8000892:	ea44 040a 	orrne.w	r4, r4, sl
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000896:	ea24 040a 	biceq.w	r4, r4, sl
 800089a:	60ac      	str	r4, [r5, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800089c:	684c      	ldr	r4, [r1, #4]
 800089e:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80008a2:	68ec      	ldr	r4, [r5, #12]
 80008a4:	bf14      	ite	ne
 80008a6:	ea44 040a 	orrne.w	r4, r4, sl
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80008aa:	ea24 040a 	biceq.w	r4, r4, sl
 80008ae:	60ec      	str	r4, [r5, #12]
        }
      }
    }

	position++;
 80008b0:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008b2:	680f      	ldr	r7, [r1, #0]
 80008b4:	fa37 f403 	lsrs.w	r4, r7, r3
 80008b8:	d051      	beq.n	800095e <HAL_GPIO_Init+0x1fe>
    ioposition = (0x01uL << position);
 80008ba:	f04f 0901 	mov.w	r9, #1
 80008be:	fa09 f903 	lsl.w	r9, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008c2:	ea09 0a07 	and.w	sl, r9, r7
    if (iocurrent == ioposition)
 80008c6:	ea39 0407 	bics.w	r4, r9, r7
 80008ca:	d1f1      	bne.n	80008b0 <HAL_GPIO_Init+0x150>
      switch (GPIO_Init->Mode)
 80008cc:	684c      	ldr	r4, [r1, #4]
 80008ce:	2c12      	cmp	r4, #18
 80008d0:	f63f af5a 	bhi.w	8000788 <HAL_GPIO_Init+0x28>
 80008d4:	2c12      	cmp	r4, #18
 80008d6:	f63f af76 	bhi.w	80007c6 <HAL_GPIO_Init+0x66>
 80008da:	a701      	add	r7, pc, #4	; (adr r7, 80008e0 <HAL_GPIO_Init+0x180>)
 80008dc:	f857 f024 	ldr.w	pc, [r7, r4, lsl #2]
 80008e0:	080007a7 	.word	0x080007a7
 80008e4:	0800092d 	.word	0x0800092d
 80008e8:	08000937 	.word	0x08000937
 80008ec:	08000785 	.word	0x08000785
 80008f0:	080007c7 	.word	0x080007c7
 80008f4:	080007c7 	.word	0x080007c7
 80008f8:	080007c7 	.word	0x080007c7
 80008fc:	080007c7 	.word	0x080007c7
 8000900:	080007c7 	.word	0x080007c7
 8000904:	080007c7 	.word	0x080007c7
 8000908:	080007c7 	.word	0x080007c7
 800090c:	080007c7 	.word	0x080007c7
 8000910:	080007c7 	.word	0x080007c7
 8000914:	080007c7 	.word	0x080007c7
 8000918:	080007c7 	.word	0x080007c7
 800091c:	080007c7 	.word	0x080007c7
 8000920:	080007c7 	.word	0x080007c7
 8000924:	08000931 	.word	0x08000931
 8000928:	0800093d 	.word	0x0800093d
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800092c:	68ca      	ldr	r2, [r1, #12]
          break;
 800092e:	e74a      	b.n	80007c6 <HAL_GPIO_Init+0x66>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000930:	68ca      	ldr	r2, [r1, #12]
 8000932:	3204      	adds	r2, #4
          break;
 8000934:	e747      	b.n	80007c6 <HAL_GPIO_Init+0x66>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000936:	68ca      	ldr	r2, [r1, #12]
 8000938:	3208      	adds	r2, #8
          break;
 800093a:	e744      	b.n	80007c6 <HAL_GPIO_Init+0x66>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800093c:	68ca      	ldr	r2, [r1, #12]
 800093e:	320c      	adds	r2, #12
          break;
 8000940:	e741      	b.n	80007c6 <HAL_GPIO_Init+0x66>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000942:	2204      	movs	r2, #4
 8000944:	e73f      	b.n	80007c6 <HAL_GPIO_Init+0x66>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000946:	1d07      	adds	r7, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000948:	ea4f 0983 	mov.w	r9, r3, lsl #2
 800094c:	f1a9 0920 	sub.w	r9, r9, #32
 8000950:	e740      	b.n	80007d4 <HAL_GPIO_Init+0x74>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000952:	2700      	movs	r7, #0
 8000954:	e77f      	b.n	8000856 <HAL_GPIO_Init+0xf6>
 8000956:	2701      	movs	r7, #1
 8000958:	e77d      	b.n	8000856 <HAL_GPIO_Init+0xf6>
 800095a:	2702      	movs	r7, #2
 800095c:	e77b      	b.n	8000856 <HAL_GPIO_Init+0xf6>
  }
}
 800095e:	b003      	add	sp, #12
 8000960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000964:	40010400 	.word	0x40010400
 8000968:	10220000 	.word	0x10220000
 800096c:	10120000 	.word	0x10120000
 8000970:	40010800 	.word	0x40010800
 8000974:	40021000 	.word	0x40021000
 8000978:	10310000 	.word	0x10310000
 800097c:	10320000 	.word	0x10320000

08000980 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000980:	6883      	ldr	r3, [r0, #8]
 8000982:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000984:	bf14      	ite	ne
 8000986:	2001      	movne	r0, #1
 8000988:	2000      	moveq	r0, #0
 800098a:	4770      	bx	lr

0800098c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800098c:	b10a      	cbz	r2, 8000992 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800098e:	6101      	str	r1, [r0, #16]
 8000990:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000992:	0409      	lsls	r1, r1, #16
 8000994:	6101      	str	r1, [r0, #16]
  }
}
 8000996:	4770      	bx	lr

08000998 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000998:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800099a:	ea01 0203 	and.w	r2, r1, r3
 800099e:	ea21 0103 	bic.w	r1, r1, r3
 80009a2:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80009a6:	6101      	str	r1, [r0, #16]
}
 80009a8:	4770      	bx	lr

080009aa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80009aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009ac:	b087      	sub	sp, #28
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80009ae:	2800      	cmp	r0, #0
 80009b0:	d07a      	beq.n	8000aa8 <HAL_PCD_Init+0xfe>
 80009b2:	4605      	mov	r5, r0

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80009b4:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 80009b8:	b1db      	cbz	r3, 80009f2 <HAL_PCD_Init+0x48>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80009ba:	2303      	movs	r3, #3
 80009bc:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80009c0:	6828      	ldr	r0, [r5, #0]
 80009c2:	f000 fc9d 	bl	8001300 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80009c6:	462c      	mov	r4, r5
 80009c8:	f854 7b10 	ldr.w	r7, [r4], #16
 80009cc:	466e      	mov	r6, sp
 80009ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009d0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80009d2:	6823      	ldr	r3, [r4, #0]
 80009d4:	6033      	str	r3, [r6, #0]
 80009d6:	1d2b      	adds	r3, r5, #4
 80009d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80009da:	4638      	mov	r0, r7
 80009dc:	f000 fc89 	bl	80012f2 <USB_CoreInit>
 80009e0:	4604      	mov	r4, r0
 80009e2:	b158      	cbz	r0, 80009fc <HAL_PCD_Init+0x52>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80009e4:	2302      	movs	r3, #2
 80009e6:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
    return HAL_ERROR;
 80009ea:	2401      	movs	r4, #1
  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 80009ec:	4620      	mov	r0, r4
 80009ee:	b007      	add	sp, #28
 80009f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 80009f2:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 80009f6:	f7ff fdbf 	bl	8000578 <HAL_PCD_MspInit>
 80009fa:	e7de      	b.n	80009ba <HAL_PCD_Init+0x10>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80009fc:	2100      	movs	r1, #0
 80009fe:	6828      	ldr	r0, [r5, #0]
 8000a00:	f000 fc88 	bl	8001314 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000a04:	6868      	ldr	r0, [r5, #4]
 8000a06:	b388      	cbz	r0, 8000a6c <HAL_PCD_Init+0xc2>
 8000a08:	4623      	mov	r3, r4
    hpcd->IN_ep[i].is_in = 1U;
 8000a0a:	2601      	movs	r6, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000a0c:	2100      	movs	r1, #0
    hpcd->IN_ep[i].is_in = 1U;
 8000a0e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8000a12:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8000a16:	f882 6029 	strb.w	r6, [r2, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 8000a1a:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000a1e:	86d3      	strh	r3, [r2, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000a20:	f882 102b 	strb.w	r1, [r2, #43]	; 0x2b
    hpcd->IN_ep[i].maxpacket = 0U;
 8000a24:	6391      	str	r1, [r2, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000a26:	63d1      	str	r1, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 8000a28:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8000a2c:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8000a30:	6411      	str	r1, [r2, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000a32:	3301      	adds	r3, #1
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	4283      	cmp	r3, r0
 8000a38:	d3e9      	bcc.n	8000a0e <HAL_PCD_Init+0x64>
    hpcd->OUT_ep[i].is_in = 0U;
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8000a40:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8000a44:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 8000a48:	f883 4168 	strb.w	r4, [r3, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000a4c:	f883 216b 	strb.w	r2, [r3, #363]	; 0x16b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000a50:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000a54:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000a58:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8000a5c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8000a60:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000a64:	3401      	adds	r4, #1
 8000a66:	b2e4      	uxtb	r4, r4
 8000a68:	4284      	cmp	r4, r0
 8000a6a:	d3e7      	bcc.n	8000a3c <HAL_PCD_Init+0x92>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000a6c:	462c      	mov	r4, r5
 8000a6e:	f854 7b10 	ldr.w	r7, [r4], #16
 8000a72:	466e      	mov	r6, sp
 8000a74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a76:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000a78:	6823      	ldr	r3, [r4, #0]
 8000a7a:	6033      	str	r3, [r6, #0]
 8000a7c:	1d2b      	adds	r3, r5, #4
 8000a7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a80:	4638      	mov	r0, r7
 8000a82:	f000 fc49 	bl	8001318 <USB_DevInit>
 8000a86:	4604      	mov	r4, r0
 8000a88:	b120      	cbz	r0, 8000a94 <HAL_PCD_Init+0xea>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
    return HAL_ERROR;
 8000a90:	2401      	movs	r4, #1
 8000a92:	e7ab      	b.n	80009ec <HAL_PCD_Init+0x42>
  hpcd->USB_Address = 0U;
 8000a94:	2300      	movs	r3, #0
 8000a96:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000aa0:	6828      	ldr	r0, [r5, #0]
 8000aa2:	f000 fc4c 	bl	800133e <USB_DevDisconnect>
  return HAL_OK;
 8000aa6:	e7a1      	b.n	80009ec <HAL_PCD_Init+0x42>
    return HAL_ERROR;
 8000aa8:	2401      	movs	r4, #1
 8000aaa:	e79f      	b.n	80009ec <HAL_PCD_Init+0x42>

08000aac <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000aac:	2800      	cmp	r0, #0
 8000aae:	f000 8201 	beq.w	8000eb4 <HAL_RCC_OscConfig+0x408>
{
 8000ab2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000aba:	6803      	ldr	r3, [r0, #0]
 8000abc:	f013 0f01 	tst.w	r3, #1
 8000ac0:	d02c      	beq.n	8000b1c <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ac2:	4baa      	ldr	r3, [pc, #680]	; (8000d6c <HAL_RCC_OscConfig+0x2c0>)
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	f003 030c 	and.w	r3, r3, #12
 8000aca:	2b04      	cmp	r3, #4
 8000acc:	d01d      	beq.n	8000b0a <HAL_RCC_OscConfig+0x5e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ace:	4ba7      	ldr	r3, [pc, #668]	; (8000d6c <HAL_RCC_OscConfig+0x2c0>)
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	f003 030c 	and.w	r3, r3, #12
 8000ad6:	2b08      	cmp	r3, #8
 8000ad8:	d012      	beq.n	8000b00 <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ada:	6863      	ldr	r3, [r4, #4]
 8000adc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ae0:	d041      	beq.n	8000b66 <HAL_RCC_OscConfig+0xba>
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d155      	bne.n	8000b92 <HAL_RCC_OscConfig+0xe6>
 8000ae6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000aea:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	e037      	b.n	8000b70 <HAL_RCC_OscConfig+0xc4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b00:	4b9a      	ldr	r3, [pc, #616]	; (8000d6c <HAL_RCC_OscConfig+0x2c0>)
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000b08:	d0e7      	beq.n	8000ada <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b0a:	4b98      	ldr	r3, [pc, #608]	; (8000d6c <HAL_RCC_OscConfig+0x2c0>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000b12:	d003      	beq.n	8000b1c <HAL_RCC_OscConfig+0x70>
 8000b14:	6863      	ldr	r3, [r4, #4]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	f000 81ce 	beq.w	8000eb8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b1c:	6823      	ldr	r3, [r4, #0]
 8000b1e:	f013 0f02 	tst.w	r3, #2
 8000b22:	d075      	beq.n	8000c10 <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b24:	4b91      	ldr	r3, [pc, #580]	; (8000d6c <HAL_RCC_OscConfig+0x2c0>)
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	f013 0f0c 	tst.w	r3, #12
 8000b2c:	d05f      	beq.n	8000bee <HAL_RCC_OscConfig+0x142>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000b2e:	4b8f      	ldr	r3, [pc, #572]	; (8000d6c <HAL_RCC_OscConfig+0x2c0>)
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	f003 030c 	and.w	r3, r3, #12
 8000b36:	2b08      	cmp	r3, #8
 8000b38:	d054      	beq.n	8000be4 <HAL_RCC_OscConfig+0x138>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b3a:	6923      	ldr	r3, [r4, #16]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	f000 8089 	beq.w	8000c54 <HAL_RCC_OscConfig+0x1a8>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000b42:	4b8b      	ldr	r3, [pc, #556]	; (8000d70 <HAL_RCC_OscConfig+0x2c4>)
 8000b44:	2201      	movs	r2, #1
 8000b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b48:	f7ff fd96 	bl	8000678 <HAL_GetTick>
 8000b4c:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b4e:	4e87      	ldr	r6, [pc, #540]	; (8000d6c <HAL_RCC_OscConfig+0x2c0>)
 8000b50:	6833      	ldr	r3, [r6, #0]
 8000b52:	f013 0f02 	tst.w	r3, #2
 8000b56:	d174      	bne.n	8000c42 <HAL_RCC_OscConfig+0x196>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000b58:	f7ff fd8e 	bl	8000678 <HAL_GetTick>
 8000b5c:	1b40      	subs	r0, r0, r5
 8000b5e:	2802      	cmp	r0, #2
 8000b60:	d9f6      	bls.n	8000b50 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_TIMEOUT;
 8000b62:	2003      	movs	r0, #3
 8000b64:	e1ad      	b.n	8000ec2 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b66:	4a81      	ldr	r2, [pc, #516]	; (8000d6c <HAL_RCC_OscConfig+0x2c0>)
 8000b68:	6813      	ldr	r3, [r2, #0]
 8000b6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b6e:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b70:	6863      	ldr	r3, [r4, #4]
 8000b72:	b343      	cbz	r3, 8000bc6 <HAL_RCC_OscConfig+0x11a>
        tickstart = HAL_GetTick();
 8000b74:	f7ff fd80 	bl	8000678 <HAL_GetTick>
 8000b78:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b7a:	4e7c      	ldr	r6, [pc, #496]	; (8000d6c <HAL_RCC_OscConfig+0x2c0>)
 8000b7c:	6833      	ldr	r3, [r6, #0]
 8000b7e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000b82:	d1cb      	bne.n	8000b1c <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b84:	f7ff fd78 	bl	8000678 <HAL_GetTick>
 8000b88:	1b40      	subs	r0, r0, r5
 8000b8a:	2864      	cmp	r0, #100	; 0x64
 8000b8c:	d9f6      	bls.n	8000b7c <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 8000b8e:	2003      	movs	r0, #3
 8000b90:	e197      	b.n	8000ec2 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b92:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b96:	d009      	beq.n	8000bac <HAL_RCC_OscConfig+0x100>
 8000b98:	4b74      	ldr	r3, [pc, #464]	; (8000d6c <HAL_RCC_OscConfig+0x2c0>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	e7e1      	b.n	8000b70 <HAL_RCC_OscConfig+0xc4>
 8000bac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000bb0:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	e7d4      	b.n	8000b70 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 8000bc6:	f7ff fd57 	bl	8000678 <HAL_GetTick>
 8000bca:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bcc:	4e67      	ldr	r6, [pc, #412]	; (8000d6c <HAL_RCC_OscConfig+0x2c0>)
 8000bce:	6833      	ldr	r3, [r6, #0]
 8000bd0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000bd4:	d0a2      	beq.n	8000b1c <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000bd6:	f7ff fd4f 	bl	8000678 <HAL_GetTick>
 8000bda:	1b40      	subs	r0, r0, r5
 8000bdc:	2864      	cmp	r0, #100	; 0x64
 8000bde:	d9f6      	bls.n	8000bce <HAL_RCC_OscConfig+0x122>
            return HAL_TIMEOUT;
 8000be0:	2003      	movs	r0, #3
 8000be2:	e16e      	b.n	8000ec2 <HAL_RCC_OscConfig+0x416>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000be4:	4b61      	ldr	r3, [pc, #388]	; (8000d6c <HAL_RCC_OscConfig+0x2c0>)
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000bec:	d1a5      	bne.n	8000b3a <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bee:	4b5f      	ldr	r3, [pc, #380]	; (8000d6c <HAL_RCC_OscConfig+0x2c0>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f013 0f02 	tst.w	r3, #2
 8000bf6:	d003      	beq.n	8000c00 <HAL_RCC_OscConfig+0x154>
 8000bf8:	6923      	ldr	r3, [r4, #16]
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	f040 815e 	bne.w	8000ebc <HAL_RCC_OscConfig+0x410>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c00:	4a5a      	ldr	r2, [pc, #360]	; (8000d6c <HAL_RCC_OscConfig+0x2c0>)
 8000c02:	6813      	ldr	r3, [r2, #0]
 8000c04:	6961      	ldr	r1, [r4, #20]
 8000c06:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000c0a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000c0e:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c10:	6823      	ldr	r3, [r4, #0]
 8000c12:	f013 0f08 	tst.w	r3, #8
 8000c16:	d03c      	beq.n	8000c92 <HAL_RCC_OscConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c18:	69a3      	ldr	r3, [r4, #24]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d04f      	beq.n	8000cbe <HAL_RCC_OscConfig+0x212>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c1e:	4b55      	ldr	r3, [pc, #340]	; (8000d74 <HAL_RCC_OscConfig+0x2c8>)
 8000c20:	2201      	movs	r2, #1
 8000c22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c24:	f7ff fd28 	bl	8000678 <HAL_GetTick>
 8000c28:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c2a:	4e50      	ldr	r6, [pc, #320]	; (8000d6c <HAL_RCC_OscConfig+0x2c0>)
 8000c2c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8000c2e:	f013 0f02 	tst.w	r3, #2
 8000c32:	d121      	bne.n	8000c78 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c34:	f7ff fd20 	bl	8000678 <HAL_GetTick>
 8000c38:	1b40      	subs	r0, r0, r5
 8000c3a:	2802      	cmp	r0, #2
 8000c3c:	d9f6      	bls.n	8000c2c <HAL_RCC_OscConfig+0x180>
        {
          return HAL_TIMEOUT;
 8000c3e:	2003      	movs	r0, #3
 8000c40:	e13f      	b.n	8000ec2 <HAL_RCC_OscConfig+0x416>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c42:	4a4a      	ldr	r2, [pc, #296]	; (8000d6c <HAL_RCC_OscConfig+0x2c0>)
 8000c44:	6813      	ldr	r3, [r2, #0]
 8000c46:	6961      	ldr	r1, [r4, #20]
 8000c48:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000c4c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000c50:	6013      	str	r3, [r2, #0]
 8000c52:	e7dd      	b.n	8000c10 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8000c54:	4b46      	ldr	r3, [pc, #280]	; (8000d70 <HAL_RCC_OscConfig+0x2c4>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000c5a:	f7ff fd0d 	bl	8000678 <HAL_GetTick>
 8000c5e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c60:	4e42      	ldr	r6, [pc, #264]	; (8000d6c <HAL_RCC_OscConfig+0x2c0>)
 8000c62:	6833      	ldr	r3, [r6, #0]
 8000c64:	f013 0f02 	tst.w	r3, #2
 8000c68:	d0d2      	beq.n	8000c10 <HAL_RCC_OscConfig+0x164>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c6a:	f7ff fd05 	bl	8000678 <HAL_GetTick>
 8000c6e:	1b40      	subs	r0, r0, r5
 8000c70:	2802      	cmp	r0, #2
 8000c72:	d9f6      	bls.n	8000c62 <HAL_RCC_OscConfig+0x1b6>
            return HAL_TIMEOUT;
 8000c74:	2003      	movs	r0, #3
 8000c76:	e124      	b.n	8000ec2 <HAL_RCC_OscConfig+0x416>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000c78:	4b3f      	ldr	r3, [pc, #252]	; (8000d78 <HAL_RCC_OscConfig+0x2cc>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a3f      	ldr	r2, [pc, #252]	; (8000d7c <HAL_RCC_OscConfig+0x2d0>)
 8000c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c82:	0a5b      	lsrs	r3, r3, #9
 8000c84:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8000c86:	bf00      	nop
  }
  while (Delay --);
 8000c88:	9b01      	ldr	r3, [sp, #4]
 8000c8a:	1e5a      	subs	r2, r3, #1
 8000c8c:	9201      	str	r2, [sp, #4]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d1f9      	bne.n	8000c86 <HAL_RCC_OscConfig+0x1da>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c92:	6823      	ldr	r3, [r4, #0]
 8000c94:	f013 0f04 	tst.w	r3, #4
 8000c98:	f000 809c 	beq.w	8000dd4 <HAL_RCC_OscConfig+0x328>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c9c:	4b33      	ldr	r3, [pc, #204]	; (8000d6c <HAL_RCC_OscConfig+0x2c0>)
 8000c9e:	69db      	ldr	r3, [r3, #28]
 8000ca0:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000ca4:	d11d      	bne.n	8000ce2 <HAL_RCC_OscConfig+0x236>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ca6:	4b31      	ldr	r3, [pc, #196]	; (8000d6c <HAL_RCC_OscConfig+0x2c0>)
 8000ca8:	69da      	ldr	r2, [r3, #28]
 8000caa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000cae:	61da      	str	r2, [r3, #28]
 8000cb0:	69db      	ldr	r3, [r3, #28]
 8000cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	9300      	str	r3, [sp, #0]
 8000cb8:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 8000cba:	2501      	movs	r5, #1
 8000cbc:	e012      	b.n	8000ce4 <HAL_RCC_OscConfig+0x238>
      __HAL_RCC_LSI_DISABLE();
 8000cbe:	4b2d      	ldr	r3, [pc, #180]	; (8000d74 <HAL_RCC_OscConfig+0x2c8>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000cc4:	f7ff fcd8 	bl	8000678 <HAL_GetTick>
 8000cc8:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cca:	4e28      	ldr	r6, [pc, #160]	; (8000d6c <HAL_RCC_OscConfig+0x2c0>)
 8000ccc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8000cce:	f013 0f02 	tst.w	r3, #2
 8000cd2:	d0de      	beq.n	8000c92 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000cd4:	f7ff fcd0 	bl	8000678 <HAL_GetTick>
 8000cd8:	1b40      	subs	r0, r0, r5
 8000cda:	2802      	cmp	r0, #2
 8000cdc:	d9f6      	bls.n	8000ccc <HAL_RCC_OscConfig+0x220>
          return HAL_TIMEOUT;
 8000cde:	2003      	movs	r0, #3
 8000ce0:	e0ef      	b.n	8000ec2 <HAL_RCC_OscConfig+0x416>
    FlagStatus       pwrclkchanged = RESET;
 8000ce2:	2500      	movs	r5, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ce4:	4b26      	ldr	r3, [pc, #152]	; (8000d80 <HAL_RCC_OscConfig+0x2d4>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000cec:	d011      	beq.n	8000d12 <HAL_RCC_OscConfig+0x266>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cee:	68e3      	ldr	r3, [r4, #12]
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d022      	beq.n	8000d3a <HAL_RCC_OscConfig+0x28e>
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d145      	bne.n	8000d84 <HAL_RCC_OscConfig+0x2d8>
 8000cf8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000cfc:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000d00:	6a1a      	ldr	r2, [r3, #32]
 8000d02:	f022 0201 	bic.w	r2, r2, #1
 8000d06:	621a      	str	r2, [r3, #32]
 8000d08:	6a1a      	ldr	r2, [r3, #32]
 8000d0a:	f022 0204 	bic.w	r2, r2, #4
 8000d0e:	621a      	str	r2, [r3, #32]
 8000d10:	e018      	b.n	8000d44 <HAL_RCC_OscConfig+0x298>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d12:	4a1b      	ldr	r2, [pc, #108]	; (8000d80 <HAL_RCC_OscConfig+0x2d4>)
 8000d14:	6813      	ldr	r3, [r2, #0]
 8000d16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d1a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000d1c:	f7ff fcac 	bl	8000678 <HAL_GetTick>
 8000d20:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d22:	4f17      	ldr	r7, [pc, #92]	; (8000d80 <HAL_RCC_OscConfig+0x2d4>)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000d2a:	d1e0      	bne.n	8000cee <HAL_RCC_OscConfig+0x242>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d2c:	f7ff fca4 	bl	8000678 <HAL_GetTick>
 8000d30:	1b80      	subs	r0, r0, r6
 8000d32:	2864      	cmp	r0, #100	; 0x64
 8000d34:	d9f6      	bls.n	8000d24 <HAL_RCC_OscConfig+0x278>
          return HAL_TIMEOUT;
 8000d36:	2003      	movs	r0, #3
 8000d38:	e0c3      	b.n	8000ec2 <HAL_RCC_OscConfig+0x416>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d3a:	4a0c      	ldr	r2, [pc, #48]	; (8000d6c <HAL_RCC_OscConfig+0x2c0>)
 8000d3c:	6a13      	ldr	r3, [r2, #32]
 8000d3e:	f043 0301 	orr.w	r3, r3, #1
 8000d42:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000d44:	68e3      	ldr	r3, [r4, #12]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d032      	beq.n	8000db0 <HAL_RCC_OscConfig+0x304>
      tickstart = HAL_GetTick();
 8000d4a:	f7ff fc95 	bl	8000678 <HAL_GetTick>
 8000d4e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d50:	4f06      	ldr	r7, [pc, #24]	; (8000d6c <HAL_RCC_OscConfig+0x2c0>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d52:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d56:	6a3b      	ldr	r3, [r7, #32]
 8000d58:	f013 0f02 	tst.w	r3, #2
 8000d5c:	d139      	bne.n	8000dd2 <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d5e:	f7ff fc8b 	bl	8000678 <HAL_GetTick>
 8000d62:	1b80      	subs	r0, r0, r6
 8000d64:	4540      	cmp	r0, r8
 8000d66:	d9f6      	bls.n	8000d56 <HAL_RCC_OscConfig+0x2aa>
          return HAL_TIMEOUT;
 8000d68:	2003      	movs	r0, #3
 8000d6a:	e0aa      	b.n	8000ec2 <HAL_RCC_OscConfig+0x416>
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	42420000 	.word	0x42420000
 8000d74:	42420480 	.word	0x42420480
 8000d78:	20000000 	.word	0x20000000
 8000d7c:	10624dd3 	.word	0x10624dd3
 8000d80:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d84:	2b05      	cmp	r3, #5
 8000d86:	d009      	beq.n	8000d9c <HAL_RCC_OscConfig+0x2f0>
 8000d88:	4b51      	ldr	r3, [pc, #324]	; (8000ed0 <HAL_RCC_OscConfig+0x424>)
 8000d8a:	6a1a      	ldr	r2, [r3, #32]
 8000d8c:	f022 0201 	bic.w	r2, r2, #1
 8000d90:	621a      	str	r2, [r3, #32]
 8000d92:	6a1a      	ldr	r2, [r3, #32]
 8000d94:	f022 0204 	bic.w	r2, r2, #4
 8000d98:	621a      	str	r2, [r3, #32]
 8000d9a:	e7d3      	b.n	8000d44 <HAL_RCC_OscConfig+0x298>
 8000d9c:	4b4c      	ldr	r3, [pc, #304]	; (8000ed0 <HAL_RCC_OscConfig+0x424>)
 8000d9e:	6a1a      	ldr	r2, [r3, #32]
 8000da0:	f042 0204 	orr.w	r2, r2, #4
 8000da4:	621a      	str	r2, [r3, #32]
 8000da6:	6a1a      	ldr	r2, [r3, #32]
 8000da8:	f042 0201 	orr.w	r2, r2, #1
 8000dac:	621a      	str	r2, [r3, #32]
 8000dae:	e7c9      	b.n	8000d44 <HAL_RCC_OscConfig+0x298>
      tickstart = HAL_GetTick();
 8000db0:	f7ff fc62 	bl	8000678 <HAL_GetTick>
 8000db4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000db6:	4f46      	ldr	r7, [pc, #280]	; (8000ed0 <HAL_RCC_OscConfig+0x424>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000db8:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000dbc:	6a3b      	ldr	r3, [r7, #32]
 8000dbe:	f013 0f02 	tst.w	r3, #2
 8000dc2:	d006      	beq.n	8000dd2 <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000dc4:	f7ff fc58 	bl	8000678 <HAL_GetTick>
 8000dc8:	1b80      	subs	r0, r0, r6
 8000dca:	4540      	cmp	r0, r8
 8000dcc:	d9f6      	bls.n	8000dbc <HAL_RCC_OscConfig+0x310>
          return HAL_TIMEOUT;
 8000dce:	2003      	movs	r0, #3
 8000dd0:	e077      	b.n	8000ec2 <HAL_RCC_OscConfig+0x416>
    if (pwrclkchanged == SET)
 8000dd2:	b9e5      	cbnz	r5, 8000e0e <HAL_RCC_OscConfig+0x362>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000dd4:	69e3      	ldr	r3, [r4, #28]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d072      	beq.n	8000ec0 <HAL_RCC_OscConfig+0x414>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000dda:	4a3d      	ldr	r2, [pc, #244]	; (8000ed0 <HAL_RCC_OscConfig+0x424>)
 8000ddc:	6852      	ldr	r2, [r2, #4]
 8000dde:	f002 020c 	and.w	r2, r2, #12
 8000de2:	2a08      	cmp	r2, #8
 8000de4:	d056      	beq.n	8000e94 <HAL_RCC_OscConfig+0x3e8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000de6:	2b02      	cmp	r3, #2
 8000de8:	d017      	beq.n	8000e1a <HAL_RCC_OscConfig+0x36e>
        __HAL_RCC_PLL_DISABLE();
 8000dea:	4b3a      	ldr	r3, [pc, #232]	; (8000ed4 <HAL_RCC_OscConfig+0x428>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000df0:	f7ff fc42 	bl	8000678 <HAL_GetTick>
 8000df4:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000df6:	4d36      	ldr	r5, [pc, #216]	; (8000ed0 <HAL_RCC_OscConfig+0x424>)
 8000df8:	682b      	ldr	r3, [r5, #0]
 8000dfa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000dfe:	d047      	beq.n	8000e90 <HAL_RCC_OscConfig+0x3e4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e00:	f7ff fc3a 	bl	8000678 <HAL_GetTick>
 8000e04:	1b00      	subs	r0, r0, r4
 8000e06:	2802      	cmp	r0, #2
 8000e08:	d9f6      	bls.n	8000df8 <HAL_RCC_OscConfig+0x34c>
            return HAL_TIMEOUT;
 8000e0a:	2003      	movs	r0, #3
 8000e0c:	e059      	b.n	8000ec2 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e0e:	4a30      	ldr	r2, [pc, #192]	; (8000ed0 <HAL_RCC_OscConfig+0x424>)
 8000e10:	69d3      	ldr	r3, [r2, #28]
 8000e12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e16:	61d3      	str	r3, [r2, #28]
 8000e18:	e7dc      	b.n	8000dd4 <HAL_RCC_OscConfig+0x328>
        __HAL_RCC_PLL_DISABLE();
 8000e1a:	4b2e      	ldr	r3, [pc, #184]	; (8000ed4 <HAL_RCC_OscConfig+0x428>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e20:	f7ff fc2a 	bl	8000678 <HAL_GetTick>
 8000e24:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e26:	4e2a      	ldr	r6, [pc, #168]	; (8000ed0 <HAL_RCC_OscConfig+0x424>)
 8000e28:	6833      	ldr	r3, [r6, #0]
 8000e2a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000e2e:	d006      	beq.n	8000e3e <HAL_RCC_OscConfig+0x392>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e30:	f7ff fc22 	bl	8000678 <HAL_GetTick>
 8000e34:	1b40      	subs	r0, r0, r5
 8000e36:	2802      	cmp	r0, #2
 8000e38:	d9f6      	bls.n	8000e28 <HAL_RCC_OscConfig+0x37c>
            return HAL_TIMEOUT;
 8000e3a:	2003      	movs	r0, #3
 8000e3c:	e041      	b.n	8000ec2 <HAL_RCC_OscConfig+0x416>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000e3e:	6a23      	ldr	r3, [r4, #32]
 8000e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e44:	d01a      	beq.n	8000e7c <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e46:	4922      	ldr	r1, [pc, #136]	; (8000ed0 <HAL_RCC_OscConfig+0x424>)
 8000e48:	684a      	ldr	r2, [r1, #4]
 8000e4a:	6a23      	ldr	r3, [r4, #32]
 8000e4c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000e4e:	4303      	orrs	r3, r0
 8000e50:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000e54:	4313      	orrs	r3, r2
 8000e56:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8000e58:	4b1e      	ldr	r3, [pc, #120]	; (8000ed4 <HAL_RCC_OscConfig+0x428>)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e5e:	f7ff fc0b 	bl	8000678 <HAL_GetTick>
 8000e62:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e64:	4d1a      	ldr	r5, [pc, #104]	; (8000ed0 <HAL_RCC_OscConfig+0x424>)
 8000e66:	682b      	ldr	r3, [r5, #0]
 8000e68:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000e6c:	d10e      	bne.n	8000e8c <HAL_RCC_OscConfig+0x3e0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e6e:	f7ff fc03 	bl	8000678 <HAL_GetTick>
 8000e72:	1b00      	subs	r0, r0, r4
 8000e74:	2802      	cmp	r0, #2
 8000e76:	d9f6      	bls.n	8000e66 <HAL_RCC_OscConfig+0x3ba>
            return HAL_TIMEOUT;
 8000e78:	2003      	movs	r0, #3
 8000e7a:	e022      	b.n	8000ec2 <HAL_RCC_OscConfig+0x416>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e7c:	4a14      	ldr	r2, [pc, #80]	; (8000ed0 <HAL_RCC_OscConfig+0x424>)
 8000e7e:	6853      	ldr	r3, [r2, #4]
 8000e80:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000e84:	68a1      	ldr	r1, [r4, #8]
 8000e86:	430b      	orrs	r3, r1
 8000e88:	6053      	str	r3, [r2, #4]
 8000e8a:	e7dc      	b.n	8000e46 <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	e018      	b.n	8000ec2 <HAL_RCC_OscConfig+0x416>
 8000e90:	2000      	movs	r0, #0
 8000e92:	e016      	b.n	8000ec2 <HAL_RCC_OscConfig+0x416>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d017      	beq.n	8000ec8 <HAL_RCC_OscConfig+0x41c>
        pll_config = RCC->CFGR;
 8000e98:	4b0d      	ldr	r3, [pc, #52]	; (8000ed0 <HAL_RCC_OscConfig+0x424>)
 8000e9a:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e9c:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8000ea0:	6a22      	ldr	r2, [r4, #32]
 8000ea2:	4291      	cmp	r1, r2
 8000ea4:	d112      	bne.n	8000ecc <HAL_RCC_OscConfig+0x420>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000ea6:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000eaa:	6a60      	ldr	r0, [r4, #36]	; 0x24
        return HAL_ERROR;
 8000eac:	1a18      	subs	r0, r3, r0
 8000eae:	bf18      	it	ne
 8000eb0:	2001      	movne	r0, #1
 8000eb2:	e006      	b.n	8000ec2 <HAL_RCC_OscConfig+0x416>
    return HAL_ERROR;
 8000eb4:	2001      	movs	r0, #1
}
 8000eb6:	4770      	bx	lr
        return HAL_ERROR;
 8000eb8:	2001      	movs	r0, #1
 8000eba:	e002      	b.n	8000ec2 <HAL_RCC_OscConfig+0x416>
        return HAL_ERROR;
 8000ebc:	2001      	movs	r0, #1
 8000ebe:	e000      	b.n	8000ec2 <HAL_RCC_OscConfig+0x416>
  return HAL_OK;
 8000ec0:	2000      	movs	r0, #0
}
 8000ec2:	b002      	add	sp, #8
 8000ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 8000ec8:	2001      	movs	r0, #1
 8000eca:	e7fa      	b.n	8000ec2 <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
 8000ecc:	2001      	movs	r0, #1
 8000ece:	e7f8      	b.n	8000ec2 <HAL_RCC_OscConfig+0x416>
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	42420060 	.word	0x42420060

08000ed8 <HAL_RCC_GetSysClockFreq>:
{
 8000ed8:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000eda:	4b16      	ldr	r3, [pc, #88]	; (8000f34 <HAL_RCC_GetSysClockFreq+0x5c>)
 8000edc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ede:	f10d 0c18 	add.w	ip, sp, #24
 8000ee2:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000ee6:	f240 2301 	movw	r3, #513	; 0x201
 8000eea:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8000eee:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <HAL_RCC_GetSysClockFreq+0x60>)
 8000ef0:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000ef2:	f003 020c 	and.w	r2, r3, #12
 8000ef6:	2a08      	cmp	r2, #8
 8000ef8:	d002      	beq.n	8000f00 <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 8000efa:	4810      	ldr	r0, [pc, #64]	; (8000f3c <HAL_RCC_GetSysClockFreq+0x64>)
}
 8000efc:	b006      	add	sp, #24
 8000efe:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000f00:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000f04:	4462      	add	r2, ip
 8000f06:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000f0a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000f0e:	d00c      	beq.n	8000f2a <HAL_RCC_GetSysClockFreq+0x52>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000f10:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <HAL_RCC_GetSysClockFreq+0x60>)
 8000f12:	685b      	ldr	r3, [r3, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000f14:	4809      	ldr	r0, [pc, #36]	; (8000f3c <HAL_RCC_GetSysClockFreq+0x64>)
 8000f16:	fb00 f002 	mul.w	r0, r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000f1a:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8000f1e:	4463      	add	r3, ip
 8000f20:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000f24:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f28:	e7e8      	b.n	8000efc <HAL_RCC_GetSysClockFreq+0x24>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000f2a:	4805      	ldr	r0, [pc, #20]	; (8000f40 <HAL_RCC_GetSysClockFreq+0x68>)
 8000f2c:	fb00 f002 	mul.w	r0, r0, r2
 8000f30:	e7e4      	b.n	8000efc <HAL_RCC_GetSysClockFreq+0x24>
 8000f32:	bf00      	nop
 8000f34:	080014d8 	.word	0x080014d8
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	007a1200 	.word	0x007a1200
 8000f40:	003d0900 	.word	0x003d0900

08000f44 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8000f44:	2800      	cmp	r0, #0
 8000f46:	f000 80a2 	beq.w	800108e <HAL_RCC_ClockConfig+0x14a>
{
 8000f4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f4e:	460d      	mov	r5, r1
 8000f50:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000f52:	4b53      	ldr	r3, [pc, #332]	; (80010a0 <HAL_RCC_ClockConfig+0x15c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f003 0307 	and.w	r3, r3, #7
 8000f5a:	428b      	cmp	r3, r1
 8000f5c:	d20b      	bcs.n	8000f76 <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f5e:	4a50      	ldr	r2, [pc, #320]	; (80010a0 <HAL_RCC_ClockConfig+0x15c>)
 8000f60:	6813      	ldr	r3, [r2, #0]
 8000f62:	f023 0307 	bic.w	r3, r3, #7
 8000f66:	430b      	orrs	r3, r1
 8000f68:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f6a:	6813      	ldr	r3, [r2, #0]
 8000f6c:	f003 0307 	and.w	r3, r3, #7
 8000f70:	428b      	cmp	r3, r1
 8000f72:	f040 808e 	bne.w	8001092 <HAL_RCC_ClockConfig+0x14e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f76:	6823      	ldr	r3, [r4, #0]
 8000f78:	f013 0f02 	tst.w	r3, #2
 8000f7c:	d017      	beq.n	8000fae <HAL_RCC_ClockConfig+0x6a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f7e:	f013 0f04 	tst.w	r3, #4
 8000f82:	d004      	beq.n	8000f8e <HAL_RCC_ClockConfig+0x4a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f84:	4a47      	ldr	r2, [pc, #284]	; (80010a4 <HAL_RCC_ClockConfig+0x160>)
 8000f86:	6853      	ldr	r3, [r2, #4]
 8000f88:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000f8c:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f8e:	6823      	ldr	r3, [r4, #0]
 8000f90:	f013 0f08 	tst.w	r3, #8
 8000f94:	d004      	beq.n	8000fa0 <HAL_RCC_ClockConfig+0x5c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f96:	4a43      	ldr	r2, [pc, #268]	; (80010a4 <HAL_RCC_ClockConfig+0x160>)
 8000f98:	6853      	ldr	r3, [r2, #4]
 8000f9a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000f9e:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000fa0:	4a40      	ldr	r2, [pc, #256]	; (80010a4 <HAL_RCC_ClockConfig+0x160>)
 8000fa2:	6853      	ldr	r3, [r2, #4]
 8000fa4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000fa8:	68a1      	ldr	r1, [r4, #8]
 8000faa:	430b      	orrs	r3, r1
 8000fac:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000fae:	6823      	ldr	r3, [r4, #0]
 8000fb0:	f013 0f01 	tst.w	r3, #1
 8000fb4:	d031      	beq.n	800101a <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fb6:	6862      	ldr	r2, [r4, #4]
 8000fb8:	2a01      	cmp	r2, #1
 8000fba:	d020      	beq.n	8000ffe <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000fbc:	2a02      	cmp	r2, #2
 8000fbe:	d025      	beq.n	800100c <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fc0:	4b38      	ldr	r3, [pc, #224]	; (80010a4 <HAL_RCC_ClockConfig+0x160>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f013 0f02 	tst.w	r3, #2
 8000fc8:	d065      	beq.n	8001096 <HAL_RCC_ClockConfig+0x152>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000fca:	4936      	ldr	r1, [pc, #216]	; (80010a4 <HAL_RCC_ClockConfig+0x160>)
 8000fcc:	684b      	ldr	r3, [r1, #4]
 8000fce:	f023 0303 	bic.w	r3, r3, #3
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8000fd6:	f7ff fb4f 	bl	8000678 <HAL_GetTick>
 8000fda:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000fdc:	4f31      	ldr	r7, [pc, #196]	; (80010a4 <HAL_RCC_ClockConfig+0x160>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fde:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	f003 030c 	and.w	r3, r3, #12
 8000fe8:	6862      	ldr	r2, [r4, #4]
 8000fea:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000fee:	d014      	beq.n	800101a <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ff0:	f7ff fb42 	bl	8000678 <HAL_GetTick>
 8000ff4:	1b80      	subs	r0, r0, r6
 8000ff6:	4540      	cmp	r0, r8
 8000ff8:	d9f3      	bls.n	8000fe2 <HAL_RCC_ClockConfig+0x9e>
        return HAL_TIMEOUT;
 8000ffa:	2003      	movs	r0, #3
 8000ffc:	e045      	b.n	800108a <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ffe:	4b29      	ldr	r3, [pc, #164]	; (80010a4 <HAL_RCC_ClockConfig+0x160>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001006:	d1e0      	bne.n	8000fca <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8001008:	2001      	movs	r0, #1
 800100a:	e03e      	b.n	800108a <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800100c:	4b25      	ldr	r3, [pc, #148]	; (80010a4 <HAL_RCC_ClockConfig+0x160>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001014:	d1d9      	bne.n	8000fca <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8001016:	2001      	movs	r0, #1
 8001018:	e037      	b.n	800108a <HAL_RCC_ClockConfig+0x146>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800101a:	4b21      	ldr	r3, [pc, #132]	; (80010a0 <HAL_RCC_ClockConfig+0x15c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f003 0307 	and.w	r3, r3, #7
 8001022:	42ab      	cmp	r3, r5
 8001024:	d90a      	bls.n	800103c <HAL_RCC_ClockConfig+0xf8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001026:	4a1e      	ldr	r2, [pc, #120]	; (80010a0 <HAL_RCC_ClockConfig+0x15c>)
 8001028:	6813      	ldr	r3, [r2, #0]
 800102a:	f023 0307 	bic.w	r3, r3, #7
 800102e:	432b      	orrs	r3, r5
 8001030:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001032:	6813      	ldr	r3, [r2, #0]
 8001034:	f003 0307 	and.w	r3, r3, #7
 8001038:	42ab      	cmp	r3, r5
 800103a:	d12e      	bne.n	800109a <HAL_RCC_ClockConfig+0x156>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800103c:	6823      	ldr	r3, [r4, #0]
 800103e:	f013 0f04 	tst.w	r3, #4
 8001042:	d006      	beq.n	8001052 <HAL_RCC_ClockConfig+0x10e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001044:	4a17      	ldr	r2, [pc, #92]	; (80010a4 <HAL_RCC_ClockConfig+0x160>)
 8001046:	6853      	ldr	r3, [r2, #4]
 8001048:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800104c:	68e1      	ldr	r1, [r4, #12]
 800104e:	430b      	orrs	r3, r1
 8001050:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001052:	6823      	ldr	r3, [r4, #0]
 8001054:	f013 0f08 	tst.w	r3, #8
 8001058:	d007      	beq.n	800106a <HAL_RCC_ClockConfig+0x126>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800105a:	4a12      	ldr	r2, [pc, #72]	; (80010a4 <HAL_RCC_ClockConfig+0x160>)
 800105c:	6853      	ldr	r3, [r2, #4]
 800105e:	6921      	ldr	r1, [r4, #16]
 8001060:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001064:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001068:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800106a:	f7ff ff35 	bl	8000ed8 <HAL_RCC_GetSysClockFreq>
 800106e:	4b0d      	ldr	r3, [pc, #52]	; (80010a4 <HAL_RCC_ClockConfig+0x160>)
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001076:	4a0c      	ldr	r2, [pc, #48]	; (80010a8 <HAL_RCC_ClockConfig+0x164>)
 8001078:	5cd3      	ldrb	r3, [r2, r3]
 800107a:	40d8      	lsrs	r0, r3
 800107c:	4b0b      	ldr	r3, [pc, #44]	; (80010ac <HAL_RCC_ClockConfig+0x168>)
 800107e:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001080:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <HAL_RCC_ClockConfig+0x16c>)
 8001082:	6818      	ldr	r0, [r3, #0]
 8001084:	f7ff fab4 	bl	80005f0 <HAL_InitTick>
  return HAL_OK;
 8001088:	2000      	movs	r0, #0
}
 800108a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 800108e:	2001      	movs	r0, #1
}
 8001090:	4770      	bx	lr
    return HAL_ERROR;
 8001092:	2001      	movs	r0, #1
 8001094:	e7f9      	b.n	800108a <HAL_RCC_ClockConfig+0x146>
        return HAL_ERROR;
 8001096:	2001      	movs	r0, #1
 8001098:	e7f7      	b.n	800108a <HAL_RCC_ClockConfig+0x146>
    return HAL_ERROR;
 800109a:	2001      	movs	r0, #1
 800109c:	e7f5      	b.n	800108a <HAL_RCC_ClockConfig+0x146>
 800109e:	bf00      	nop
 80010a0:	40022000 	.word	0x40022000
 80010a4:	40021000 	.word	0x40021000
 80010a8:	080014c0 	.word	0x080014c0
 80010ac:	20000000 	.word	0x20000000
 80010b0:	20000008 	.word	0x20000008

080010b4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80010b4:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <HAL_RCC_GetPCLK1Freq+0x14>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80010bc:	4a03      	ldr	r2, [pc, #12]	; (80010cc <HAL_RCC_GetPCLK1Freq+0x18>)
 80010be:	5cd3      	ldrb	r3, [r2, r3]
 80010c0:	4a03      	ldr	r2, [pc, #12]	; (80010d0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80010c2:	6810      	ldr	r0, [r2, #0]
}
 80010c4:	40d8      	lsrs	r0, r3
 80010c6:	4770      	bx	lr
 80010c8:	40021000 	.word	0x40021000
 80010cc:	080014d0 	.word	0x080014d0
 80010d0:	20000000 	.word	0x20000000

080010d4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80010d4:	4b04      	ldr	r3, [pc, #16]	; (80010e8 <HAL_RCC_GetPCLK2Freq+0x14>)
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80010dc:	4a03      	ldr	r2, [pc, #12]	; (80010ec <HAL_RCC_GetPCLK2Freq+0x18>)
 80010de:	5cd3      	ldrb	r3, [r2, r3]
 80010e0:	4a03      	ldr	r2, [pc, #12]	; (80010f0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80010e2:	6810      	ldr	r0, [r2, #0]
}
 80010e4:	40d8      	lsrs	r0, r3
 80010e6:	4770      	bx	lr
 80010e8:	40021000 	.word	0x40021000
 80010ec:	080014d0 	.word	0x080014d0
 80010f0:	20000000 	.word	0x20000000

080010f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80010f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010f8:	b082      	sub	sp, #8
 80010fa:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80010fc:	6803      	ldr	r3, [r0, #0]
 80010fe:	f013 0f01 	tst.w	r3, #1
 8001102:	d034      	beq.n	800116e <HAL_RCCEx_PeriphCLKConfig+0x7a>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001104:	4b3e      	ldr	r3, [pc, #248]	; (8001200 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001106:	69db      	ldr	r3, [r3, #28]
 8001108:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800110c:	d147      	bne.n	800119e <HAL_RCCEx_PeriphCLKConfig+0xaa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800110e:	4b3c      	ldr	r3, [pc, #240]	; (8001200 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001110:	69da      	ldr	r2, [r3, #28]
 8001112:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001116:	61da      	str	r2, [r3, #28]
 8001118:	69db      	ldr	r3, [r3, #28]
 800111a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800111e:	9301      	str	r3, [sp, #4]
 8001120:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001122:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001124:	4b37      	ldr	r3, [pc, #220]	; (8001204 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f413 7f80 	tst.w	r3, #256	; 0x100
 800112c:	d039      	beq.n	80011a2 <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800112e:	4b34      	ldr	r3, [pc, #208]	; (8001200 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001130:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001132:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001136:	d011      	beq.n	800115c <HAL_RCCEx_PeriphCLKConfig+0x68>
 8001138:	6862      	ldr	r2, [r4, #4]
 800113a:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800113e:	429a      	cmp	r2, r3
 8001140:	d00c      	beq.n	800115c <HAL_RCCEx_PeriphCLKConfig+0x68>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001142:	4a2f      	ldr	r2, [pc, #188]	; (8001200 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001144:	6a13      	ldr	r3, [r2, #32]
 8001146:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800114a:	492f      	ldr	r1, [pc, #188]	; (8001208 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 800114c:	2601      	movs	r6, #1
 800114e:	600e      	str	r6, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001150:	2600      	movs	r6, #0
 8001152:	600e      	str	r6, [r1, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001154:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001156:	f013 0f01 	tst.w	r3, #1
 800115a:	d136      	bne.n	80011ca <HAL_RCCEx_PeriphCLKConfig+0xd6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800115c:	4a28      	ldr	r2, [pc, #160]	; (8001200 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800115e:	6a13      	ldr	r3, [r2, #32]
 8001160:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001164:	6861      	ldr	r1, [r4, #4]
 8001166:	430b      	orrs	r3, r1
 8001168:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800116a:	2d00      	cmp	r5, #0
 800116c:	d13e      	bne.n	80011ec <HAL_RCCEx_PeriphCLKConfig+0xf8>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800116e:	6823      	ldr	r3, [r4, #0]
 8001170:	f013 0f02 	tst.w	r3, #2
 8001174:	d006      	beq.n	8001184 <HAL_RCCEx_PeriphCLKConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001176:	4a22      	ldr	r2, [pc, #136]	; (8001200 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001178:	6853      	ldr	r3, [r2, #4]
 800117a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800117e:	68a1      	ldr	r1, [r4, #8]
 8001180:	430b      	orrs	r3, r1
 8001182:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001184:	6823      	ldr	r3, [r4, #0]
 8001186:	f013 0f10 	tst.w	r3, #16
 800118a:	d034      	beq.n	80011f6 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800118c:	4a1c      	ldr	r2, [pc, #112]	; (8001200 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800118e:	6853      	ldr	r3, [r2, #4]
 8001190:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001194:	68e1      	ldr	r1, [r4, #12]
 8001196:	430b      	orrs	r3, r1
 8001198:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800119a:	2000      	movs	r0, #0
 800119c:	e02c      	b.n	80011f8 <HAL_RCCEx_PeriphCLKConfig+0x104>
    FlagStatus       pwrclkchanged = RESET;
 800119e:	2500      	movs	r5, #0
 80011a0:	e7c0      	b.n	8001124 <HAL_RCCEx_PeriphCLKConfig+0x30>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011a2:	4a18      	ldr	r2, [pc, #96]	; (8001204 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80011a4:	6813      	ldr	r3, [r2, #0]
 80011a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011aa:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80011ac:	f7ff fa64 	bl	8000678 <HAL_GetTick>
 80011b0:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011b2:	4f14      	ldr	r7, [pc, #80]	; (8001204 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80011ba:	d1b8      	bne.n	800112e <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011bc:	f7ff fa5c 	bl	8000678 <HAL_GetTick>
 80011c0:	1b80      	subs	r0, r0, r6
 80011c2:	2864      	cmp	r0, #100	; 0x64
 80011c4:	d9f6      	bls.n	80011b4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 80011c6:	2003      	movs	r0, #3
 80011c8:	e016      	b.n	80011f8 <HAL_RCCEx_PeriphCLKConfig+0x104>
        tickstart = HAL_GetTick();
 80011ca:	f7ff fa55 	bl	8000678 <HAL_GetTick>
 80011ce:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011d0:	4f0b      	ldr	r7, [pc, #44]	; (8001200 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011d2:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011d6:	6a3b      	ldr	r3, [r7, #32]
 80011d8:	f013 0f02 	tst.w	r3, #2
 80011dc:	d1be      	bne.n	800115c <HAL_RCCEx_PeriphCLKConfig+0x68>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011de:	f7ff fa4b 	bl	8000678 <HAL_GetTick>
 80011e2:	1b80      	subs	r0, r0, r6
 80011e4:	4540      	cmp	r0, r8
 80011e6:	d9f6      	bls.n	80011d6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
            return HAL_TIMEOUT;
 80011e8:	2003      	movs	r0, #3
 80011ea:	e005      	b.n	80011f8 <HAL_RCCEx_PeriphCLKConfig+0x104>
      __HAL_RCC_PWR_CLK_DISABLE();
 80011ec:	69d3      	ldr	r3, [r2, #28]
 80011ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011f2:	61d3      	str	r3, [r2, #28]
 80011f4:	e7bb      	b.n	800116e <HAL_RCCEx_PeriphCLKConfig+0x7a>
  return HAL_OK;
 80011f6:	2000      	movs	r0, #0
}
 80011f8:	b002      	add	sp, #8
 80011fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80011fe:	bf00      	nop
 8001200:	40021000 	.word	0x40021000
 8001204:	40007000 	.word	0x40007000
 8001208:	42420440 	.word	0x42420440

0800120c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800120c:	b510      	push	{r4, lr}
 800120e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001210:	6802      	ldr	r2, [r0, #0]
 8001212:	6913      	ldr	r3, [r2, #16]
 8001214:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001218:	68c1      	ldr	r1, [r0, #12]
 800121a:	430b      	orrs	r3, r1
 800121c:	6113      	str	r3, [r2, #16]
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
  MODIFY_REG(huart->Instance->CR1,
 800121e:	6801      	ldr	r1, [r0, #0]
 8001220:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001222:	6883      	ldr	r3, [r0, #8]
 8001224:	6900      	ldr	r0, [r0, #16]
 8001226:	4303      	orrs	r3, r0
 8001228:	6960      	ldr	r0, [r4, #20]
 800122a:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 800122c:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8001230:	f022 020c 	bic.w	r2, r2, #12
 8001234:	4313      	orrs	r3, r2
 8001236:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001238:	6822      	ldr	r2, [r4, #0]
 800123a:	6953      	ldr	r3, [r2, #20]
 800123c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001240:	69a1      	ldr	r1, [r4, #24]
 8001242:	430b      	orrs	r3, r1
 8001244:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 8001246:	6822      	ldr	r2, [r4, #0]
 8001248:	4b10      	ldr	r3, [pc, #64]	; (800128c <UART_SetConfig+0x80>)
 800124a:	429a      	cmp	r2, r3
 800124c:	d01a      	beq.n	8001284 <UART_SetConfig+0x78>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800124e:	f7ff ff31 	bl	80010b4 <HAL_RCC_GetPCLK1Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001252:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001256:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800125a:	6863      	ldr	r3, [r4, #4]
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001262:	6824      	ldr	r4, [r4, #0]
 8001264:	480a      	ldr	r0, [pc, #40]	; (8001290 <UART_SetConfig+0x84>)
 8001266:	fba0 2103 	umull	r2, r1, r0, r3
 800126a:	0949      	lsrs	r1, r1, #5
 800126c:	2264      	movs	r2, #100	; 0x64
 800126e:	fb02 3311 	mls	r3, r2, r1, r3
 8001272:	011b      	lsls	r3, r3, #4
 8001274:	3332      	adds	r3, #50	; 0x32
 8001276:	fba0 2303 	umull	r2, r3, r0, r3
 800127a:	0109      	lsls	r1, r1, #4
 800127c:	eb01 1353 	add.w	r3, r1, r3, lsr #5
 8001280:	60a3      	str	r3, [r4, #8]
#endif /* USART_CR1_OVER8 */
}
 8001282:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8001284:	f7ff ff26 	bl	80010d4 <HAL_RCC_GetPCLK2Freq>
 8001288:	e7e3      	b.n	8001252 <UART_SetConfig+0x46>
 800128a:	bf00      	nop
 800128c:	40013800 	.word	0x40013800
 8001290:	51eb851f 	.word	0x51eb851f

08001294 <HAL_UART_Init>:
  if (huart == NULL)
 8001294:	b358      	cbz	r0, 80012ee <HAL_UART_Init+0x5a>
{
 8001296:	b510      	push	{r4, lr}
 8001298:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800129a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800129e:	b30b      	cbz	r3, 80012e4 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80012a0:	2324      	movs	r3, #36	; 0x24
 80012a2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80012a6:	6822      	ldr	r2, [r4, #0]
 80012a8:	68d3      	ldr	r3, [r2, #12]
 80012aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80012ae:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80012b0:	4620      	mov	r0, r4
 80012b2:	f7ff ffab 	bl	800120c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80012b6:	6822      	ldr	r2, [r4, #0]
 80012b8:	6913      	ldr	r3, [r2, #16]
 80012ba:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80012be:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80012c0:	6822      	ldr	r2, [r4, #0]
 80012c2:	6953      	ldr	r3, [r2, #20]
 80012c4:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80012c8:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80012ca:	6822      	ldr	r2, [r4, #0]
 80012cc:	68d3      	ldr	r3, [r2, #12]
 80012ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012d2:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80012d4:	2000      	movs	r0, #0
 80012d6:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80012d8:	2320      	movs	r3, #32
 80012da:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80012de:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 80012e2:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80012e4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80012e8:	f7ff f8c2 	bl	8000470 <HAL_UART_MspInit>
 80012ec:	e7d8      	b.n	80012a0 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80012ee:	2001      	movs	r0, #1
}
 80012f0:	4770      	bx	lr

080012f2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80012f2:	b084      	sub	sp, #16
 80012f4:	a801      	add	r0, sp, #4
 80012f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 80012fa:	2000      	movs	r0, #0
 80012fc:	b004      	add	sp, #16
 80012fe:	4770      	bx	lr

08001300 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8001300:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8001304:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001308:	045b      	lsls	r3, r3, #17
 800130a:	0c5b      	lsrs	r3, r3, #17
 800130c:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8001310:	2000      	movs	r0, #0
 8001312:	4770      	bx	lr

08001314 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001314:	2000      	movs	r0, #0
 8001316:	4770      	bx	lr

08001318 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001318:	b084      	sub	sp, #16
 800131a:	b410      	push	{r4}
 800131c:	4604      	mov	r4, r0
 800131e:	a802      	add	r0, sp, #8
 8001320:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8001324:	2301      	movs	r3, #1
 8001326:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800132a:	2000      	movs	r0, #0
 800132c:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8001330:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8001334:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50

  return HAL_OK;
}
 8001338:	bc10      	pop	{r4}
 800133a:	b004      	add	sp, #16
 800133c:	4770      	bx	lr

0800133e <USB_DevDisconnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 800133e:	2000      	movs	r0, #0
 8001340:	4770      	bx	lr
	...

08001344 <__libc_init_array>:
 8001344:	b570      	push	{r4, r5, r6, lr}
 8001346:	2600      	movs	r6, #0
 8001348:	4d0c      	ldr	r5, [pc, #48]	; (800137c <__libc_init_array+0x38>)
 800134a:	4c0d      	ldr	r4, [pc, #52]	; (8001380 <__libc_init_array+0x3c>)
 800134c:	1b64      	subs	r4, r4, r5
 800134e:	10a4      	asrs	r4, r4, #2
 8001350:	42a6      	cmp	r6, r4
 8001352:	d109      	bne.n	8001368 <__libc_init_array+0x24>
 8001354:	f000 f8a8 	bl	80014a8 <_init>
 8001358:	2600      	movs	r6, #0
 800135a:	4d0a      	ldr	r5, [pc, #40]	; (8001384 <__libc_init_array+0x40>)
 800135c:	4c0a      	ldr	r4, [pc, #40]	; (8001388 <__libc_init_array+0x44>)
 800135e:	1b64      	subs	r4, r4, r5
 8001360:	10a4      	asrs	r4, r4, #2
 8001362:	42a6      	cmp	r6, r4
 8001364:	d105      	bne.n	8001372 <__libc_init_array+0x2e>
 8001366:	bd70      	pop	{r4, r5, r6, pc}
 8001368:	f855 3b04 	ldr.w	r3, [r5], #4
 800136c:	4798      	blx	r3
 800136e:	3601      	adds	r6, #1
 8001370:	e7ee      	b.n	8001350 <__libc_init_array+0xc>
 8001372:	f855 3b04 	ldr.w	r3, [r5], #4
 8001376:	4798      	blx	r3
 8001378:	3601      	adds	r6, #1
 800137a:	e7f2      	b.n	8001362 <__libc_init_array+0x1e>
 800137c:	080014ec 	.word	0x080014ec
 8001380:	080014ec 	.word	0x080014ec
 8001384:	080014ec 	.word	0x080014ec
 8001388:	080014f0 	.word	0x080014f0

0800138c <malloc>:
 800138c:	4b02      	ldr	r3, [pc, #8]	; (8001398 <malloc+0xc>)
 800138e:	4601      	mov	r1, r0
 8001390:	6818      	ldr	r0, [r3, #0]
 8001392:	f000 b803 	b.w	800139c <_malloc_r>
 8001396:	bf00      	nop
 8001398:	2000000c 	.word	0x2000000c

0800139c <_malloc_r>:
 800139c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800139e:	1ccd      	adds	r5, r1, #3
 80013a0:	f025 0503 	bic.w	r5, r5, #3
 80013a4:	3508      	adds	r5, #8
 80013a6:	2d0c      	cmp	r5, #12
 80013a8:	bf38      	it	cc
 80013aa:	250c      	movcc	r5, #12
 80013ac:	2d00      	cmp	r5, #0
 80013ae:	4606      	mov	r6, r0
 80013b0:	db01      	blt.n	80013b6 <_malloc_r+0x1a>
 80013b2:	42a9      	cmp	r1, r5
 80013b4:	d903      	bls.n	80013be <_malloc_r+0x22>
 80013b6:	230c      	movs	r3, #12
 80013b8:	6033      	str	r3, [r6, #0]
 80013ba:	2000      	movs	r0, #0
 80013bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013be:	f000 f857 	bl	8001470 <__malloc_lock>
 80013c2:	4921      	ldr	r1, [pc, #132]	; (8001448 <_malloc_r+0xac>)
 80013c4:	680a      	ldr	r2, [r1, #0]
 80013c6:	4614      	mov	r4, r2
 80013c8:	b99c      	cbnz	r4, 80013f2 <_malloc_r+0x56>
 80013ca:	4f20      	ldr	r7, [pc, #128]	; (800144c <_malloc_r+0xb0>)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	b923      	cbnz	r3, 80013da <_malloc_r+0x3e>
 80013d0:	4621      	mov	r1, r4
 80013d2:	4630      	mov	r0, r6
 80013d4:	f000 f83c 	bl	8001450 <_sbrk_r>
 80013d8:	6038      	str	r0, [r7, #0]
 80013da:	4629      	mov	r1, r5
 80013dc:	4630      	mov	r0, r6
 80013de:	f000 f837 	bl	8001450 <_sbrk_r>
 80013e2:	1c43      	adds	r3, r0, #1
 80013e4:	d123      	bne.n	800142e <_malloc_r+0x92>
 80013e6:	230c      	movs	r3, #12
 80013e8:	4630      	mov	r0, r6
 80013ea:	6033      	str	r3, [r6, #0]
 80013ec:	f000 f846 	bl	800147c <__malloc_unlock>
 80013f0:	e7e3      	b.n	80013ba <_malloc_r+0x1e>
 80013f2:	6823      	ldr	r3, [r4, #0]
 80013f4:	1b5b      	subs	r3, r3, r5
 80013f6:	d417      	bmi.n	8001428 <_malloc_r+0x8c>
 80013f8:	2b0b      	cmp	r3, #11
 80013fa:	d903      	bls.n	8001404 <_malloc_r+0x68>
 80013fc:	6023      	str	r3, [r4, #0]
 80013fe:	441c      	add	r4, r3
 8001400:	6025      	str	r5, [r4, #0]
 8001402:	e004      	b.n	800140e <_malloc_r+0x72>
 8001404:	6863      	ldr	r3, [r4, #4]
 8001406:	42a2      	cmp	r2, r4
 8001408:	bf0c      	ite	eq
 800140a:	600b      	streq	r3, [r1, #0]
 800140c:	6053      	strne	r3, [r2, #4]
 800140e:	4630      	mov	r0, r6
 8001410:	f000 f834 	bl	800147c <__malloc_unlock>
 8001414:	f104 000b 	add.w	r0, r4, #11
 8001418:	1d23      	adds	r3, r4, #4
 800141a:	f020 0007 	bic.w	r0, r0, #7
 800141e:	1ac2      	subs	r2, r0, r3
 8001420:	d0cc      	beq.n	80013bc <_malloc_r+0x20>
 8001422:	1a1b      	subs	r3, r3, r0
 8001424:	50a3      	str	r3, [r4, r2]
 8001426:	e7c9      	b.n	80013bc <_malloc_r+0x20>
 8001428:	4622      	mov	r2, r4
 800142a:	6864      	ldr	r4, [r4, #4]
 800142c:	e7cc      	b.n	80013c8 <_malloc_r+0x2c>
 800142e:	1cc4      	adds	r4, r0, #3
 8001430:	f024 0403 	bic.w	r4, r4, #3
 8001434:	42a0      	cmp	r0, r4
 8001436:	d0e3      	beq.n	8001400 <_malloc_r+0x64>
 8001438:	1a21      	subs	r1, r4, r0
 800143a:	4630      	mov	r0, r6
 800143c:	f000 f808 	bl	8001450 <_sbrk_r>
 8001440:	3001      	adds	r0, #1
 8001442:	d1dd      	bne.n	8001400 <_malloc_r+0x64>
 8001444:	e7cf      	b.n	80013e6 <_malloc_r+0x4a>
 8001446:	bf00      	nop
 8001448:	20000090 	.word	0x20000090
 800144c:	20000094 	.word	0x20000094

08001450 <_sbrk_r>:
 8001450:	b538      	push	{r3, r4, r5, lr}
 8001452:	2300      	movs	r3, #0
 8001454:	4d05      	ldr	r5, [pc, #20]	; (800146c <_sbrk_r+0x1c>)
 8001456:	4604      	mov	r4, r0
 8001458:	4608      	mov	r0, r1
 800145a:	602b      	str	r3, [r5, #0]
 800145c:	f000 f816 	bl	800148c <_sbrk>
 8001460:	1c43      	adds	r3, r0, #1
 8001462:	d102      	bne.n	800146a <_sbrk_r+0x1a>
 8001464:	682b      	ldr	r3, [r5, #0]
 8001466:	b103      	cbz	r3, 800146a <_sbrk_r+0x1a>
 8001468:	6023      	str	r3, [r4, #0]
 800146a:	bd38      	pop	{r3, r4, r5, pc}
 800146c:	2000040c 	.word	0x2000040c

08001470 <__malloc_lock>:
 8001470:	4801      	ldr	r0, [pc, #4]	; (8001478 <__malloc_lock+0x8>)
 8001472:	f000 b809 	b.w	8001488 <__retarget_lock_acquire_recursive>
 8001476:	bf00      	nop
 8001478:	20000414 	.word	0x20000414

0800147c <__malloc_unlock>:
 800147c:	4801      	ldr	r0, [pc, #4]	; (8001484 <__malloc_unlock+0x8>)
 800147e:	f000 b804 	b.w	800148a <__retarget_lock_release_recursive>
 8001482:	bf00      	nop
 8001484:	20000414 	.word	0x20000414

08001488 <__retarget_lock_acquire_recursive>:
 8001488:	4770      	bx	lr

0800148a <__retarget_lock_release_recursive>:
 800148a:	4770      	bx	lr

0800148c <_sbrk>:
 800148c:	4b04      	ldr	r3, [pc, #16]	; (80014a0 <_sbrk+0x14>)
 800148e:	4602      	mov	r2, r0
 8001490:	6819      	ldr	r1, [r3, #0]
 8001492:	b909      	cbnz	r1, 8001498 <_sbrk+0xc>
 8001494:	4903      	ldr	r1, [pc, #12]	; (80014a4 <_sbrk+0x18>)
 8001496:	6019      	str	r1, [r3, #0]
 8001498:	6818      	ldr	r0, [r3, #0]
 800149a:	4402      	add	r2, r0
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	4770      	bx	lr
 80014a0:	20000098 	.word	0x20000098
 80014a4:	20000420 	.word	0x20000420

080014a8 <_init>:
 80014a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014aa:	bf00      	nop
 80014ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014ae:	bc08      	pop	{r3}
 80014b0:	469e      	mov	lr, r3
 80014b2:	4770      	bx	lr

080014b4 <_fini>:
 80014b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014b6:	bf00      	nop
 80014b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014ba:	bc08      	pop	{r3}
 80014bc:	469e      	mov	lr, r3
 80014be:	4770      	bx	lr
