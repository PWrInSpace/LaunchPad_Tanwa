
tanwaR4S.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001dd8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08001ee4  08001ee4  00011ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f30  08001f30  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001f30  08001f30  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001f30  08001f30  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f30  08001f30  00011f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001f34  08001f34  00011f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001f38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000494  2000000c  08001f44  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a0  08001f44  000204a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f9be  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c36  00000000  00000000  0002f9f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000930  00000000  00000000  00032630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c80  00000000  00000000  00032f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000056b9  00000000  00000000  00033be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f266  00000000  00000000  00039299  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000877a8  00000000  00000000  000484ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cfca7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000016b8  00000000  00000000  000cfcfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000076cd  00000000  00000000  000d13b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001ecc 	.word	0x08001ecc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001ecc 	.word	0x08001ecc

0800014c <_ZN7IgniterC1EP12GPIO_TypeDeftS1_t>:
#include <Igniter.hh>

//(names of args start with '_' sign)
Igniter::Igniter(GPIO_TypeDef* _GPIO_PORT_IGNITER, uint16_t _PIN_IGNITER, GPIO_TypeDef* _IGN_GPIO_PORT_TEST_CON, uint16_t _IGN_PIN_TEST_CON){
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	603b      	str	r3, [r7, #0]
 8000158:	4613      	mov	r3, r2
 800015a:	80fb      	strh	r3, [r7, #6]
	GPIO_PORT_IGNITER = _GPIO_PORT_IGNITER;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	68ba      	ldr	r2, [r7, #8]
 8000160:	601a      	str	r2, [r3, #0]
	PIN_IGNITER = _PIN_IGNITER;
 8000162:	68fb      	ldr	r3, [r7, #12]
 8000164:	88fa      	ldrh	r2, [r7, #6]
 8000166:	809a      	strh	r2, [r3, #4]
	GPIO_PORT_TEST_CON = _IGN_GPIO_PORT_TEST_CON;
 8000168:	68fb      	ldr	r3, [r7, #12]
 800016a:	683a      	ldr	r2, [r7, #0]
 800016c:	609a      	str	r2, [r3, #8]
	PIN_TEST_CON = _IGN_PIN_TEST_CON;
 800016e:	68fb      	ldr	r3, [r7, #12]
 8000170:	8b3a      	ldrh	r2, [r7, #24]
 8000172:	819a      	strh	r2, [r3, #12]
}
 8000174:	68fb      	ldr	r3, [r7, #12]
 8000176:	4618      	mov	r0, r3
 8000178:	3714      	adds	r7, #20
 800017a:	46bd      	mov	sp, r7
 800017c:	bc80      	pop	{r7}
 800017e:	4770      	bx	lr

08000180 <_ZNK7Igniter12is_connectedEv>:

bool Igniter::is_connected() const{
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(GPIO_PORT_TEST_CON, PIN_TEST_CON) == GPIO_PIN_SET)
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	689a      	ldr	r2, [r3, #8]
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	899b      	ldrh	r3, [r3, #12]
 8000190:	4619      	mov	r1, r3
 8000192:	4610      	mov	r0, r2
 8000194:	f000 ff6c 	bl	8001070 <HAL_GPIO_ReadPin>
 8000198:	4603      	mov	r3, r0
 800019a:	2b01      	cmp	r3, #1
 800019c:	bf0c      	ite	eq
 800019e:	2301      	moveq	r3, #1
 80001a0:	2300      	movne	r3, #0
 80001a2:	b2db      	uxtb	r3, r3
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	d001      	beq.n	80001ac <_ZNK7Igniter12is_connectedEv+0x2c>
		return 1;
 80001a8:	2301      	movs	r3, #1
 80001aa:	e000      	b.n	80001ae <_ZNK7Igniter12is_connectedEv+0x2e>
	else
		return 0;
 80001ac:	2300      	movs	r3, #0
}
 80001ae:	4618      	mov	r0, r3
 80001b0:	3708      	adds	r7, #8
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bd80      	pop	{r7, pc}

080001b6 <_ZN7Igniter4FIREEv>:

void Igniter::FIRE(){
 80001b6:	b580      	push	{r7, lr}
 80001b8:	b082      	sub	sp, #8
 80001ba:	af00      	add	r7, sp, #0
 80001bc:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIO_PORT_IGNITER, PIN_IGNITER, GPIO_PIN_SET);
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	6818      	ldr	r0, [r3, #0]
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	889b      	ldrh	r3, [r3, #4]
 80001c6:	2201      	movs	r2, #1
 80001c8:	4619      	mov	r1, r3
 80001ca:	f000 ff57 	bl	800107c <HAL_GPIO_WritePin>
}
 80001ce:	bf00      	nop
 80001d0:	3708      	adds	r7, #8
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bd80      	pop	{r7, pc}
	...

080001d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80001dc:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001de:	2400      	movs	r4, #0
 80001e0:	9404      	str	r4, [sp, #16]
 80001e2:	9405      	str	r4, [sp, #20]
 80001e4:	9406      	str	r4, [sp, #24]
 80001e6:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001e8:	4b2b      	ldr	r3, [pc, #172]	; (8000298 <MX_GPIO_Init+0xc0>)
 80001ea:	699a      	ldr	r2, [r3, #24]
 80001ec:	f042 0210 	orr.w	r2, r2, #16
 80001f0:	619a      	str	r2, [r3, #24]
 80001f2:	699a      	ldr	r2, [r3, #24]
 80001f4:	f002 0210 	and.w	r2, r2, #16
 80001f8:	9200      	str	r2, [sp, #0]
 80001fa:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001fc:	699a      	ldr	r2, [r3, #24]
 80001fe:	f042 0220 	orr.w	r2, r2, #32
 8000202:	619a      	str	r2, [r3, #24]
 8000204:	699a      	ldr	r2, [r3, #24]
 8000206:	f002 0220 	and.w	r2, r2, #32
 800020a:	9201      	str	r2, [sp, #4]
 800020c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800020e:	699a      	ldr	r2, [r3, #24]
 8000210:	f042 0204 	orr.w	r2, r2, #4
 8000214:	619a      	str	r2, [r3, #24]
 8000216:	699a      	ldr	r2, [r3, #24]
 8000218:	f002 0204 	and.w	r2, r2, #4
 800021c:	9202      	str	r2, [sp, #8]
 800021e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000220:	699a      	ldr	r2, [r3, #24]
 8000222:	f042 0208 	orr.w	r2, r2, #8
 8000226:	619a      	str	r2, [r3, #24]
 8000228:	699b      	ldr	r3, [r3, #24]
 800022a:	f003 0308 	and.w	r3, r3, #8
 800022e:	9303      	str	r3, [sp, #12]
 8000230:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUILD_IN_LED_GPIO_Port, BUILD_IN_LED_Pin, GPIO_PIN_RESET);
 8000232:	4d1a      	ldr	r5, [pc, #104]	; (800029c <MX_GPIO_Init+0xc4>)
 8000234:	4622      	mov	r2, r4
 8000236:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800023a:	4628      	mov	r0, r5
 800023c:	f000 ff1e 	bl	800107c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IGN_FIRE_GPIO_Port, IGN_FIRE_Pin, GPIO_PIN_RESET);
 8000240:	4e17      	ldr	r6, [pc, #92]	; (80002a0 <MX_GPIO_Init+0xc8>)
 8000242:	4622      	mov	r2, r4
 8000244:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000248:	4630      	mov	r0, r6
 800024a:	f000 ff17 	bl	800107c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUILD_IN_LED_Pin;
 800024e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000252:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000254:	f04f 0801 	mov.w	r8, #1
 8000258:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800025c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800025e:	2702      	movs	r7, #2
 8000260:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(BUILD_IN_LED_GPIO_Port, &GPIO_InitStruct);
 8000262:	a904      	add	r1, sp, #16
 8000264:	4628      	mov	r0, r5
 8000266:	f000 fdf3 	bl	8000e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IGN_TEST_CON_Pin;
 800026a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800026e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000270:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000272:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(IGN_TEST_CON_GPIO_Port, &GPIO_InitStruct);
 8000274:	a904      	add	r1, sp, #16
 8000276:	4628      	mov	r0, r5
 8000278:	f000 fdea 	bl	8000e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IGN_FIRE_Pin;
 800027c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000280:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000282:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000286:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000288:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(IGN_FIRE_GPIO_Port, &GPIO_InitStruct);
 800028a:	a904      	add	r1, sp, #16
 800028c:	4630      	mov	r0, r6
 800028e:	f000 fddf 	bl	8000e50 <HAL_GPIO_Init>

}
 8000292:	b008      	add	sp, #32
 8000294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000298:	40021000 	.word	0x40021000
 800029c:	40011000 	.word	0x40011000
 80002a0:	40010800 	.word	0x40010800

080002a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b086      	sub	sp, #24
 80002a8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002aa:	f000 fba5 	bl	80009f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002ae:	f000 f8cf 	bl	8000450 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002b2:	f7ff ff91 	bl	80001d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002b6:	f000 f9cf 	bl	8000658 <MX_USART2_UART_Init>
  MX_USB_PCD_Init();
 80002ba:	f000 fab1 	bl	8000820 <MX_USB_PCD_Init>
  MX_USART3_UART_Init();
 80002be:	f000 f9e5 	bl	800068c <MX_USART3_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  __HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);
 80002c2:	4b58      	ldr	r3, [pc, #352]	; (8000424 <main+0x180>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	68da      	ldr	r2, [r3, #12]
 80002c8:	4b56      	ldr	r3, [pc, #344]	; (8000424 <main+0x180>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	f042 0210 	orr.w	r2, r2, #16
 80002d0:	60da      	str	r2, [r3, #12]
  HAL_UART_Receive_DMA(&huart2, (uint8_t*) xbee_rx.mess_loaded, DATA_LENGTH);
 80002d2:	2232      	movs	r2, #50	; 0x32
 80002d4:	4954      	ldr	r1, [pc, #336]	; (8000428 <main+0x184>)
 80002d6:	4853      	ldr	r0, [pc, #332]	; (8000424 <main+0x180>)
 80002d8:	f001 fb92 	bl	8001a00 <HAL_UART_Receive_DMA>



///ADDED FOR BLUETOOTH///
 // HAL_GPIO_WritePin(Bluetooth_reset_GPIO_Port, Bluetooth_reset_Pin, SET);//ADDITIONAL PIN PC14 FOR RESET //
  HAL_Delay(1000);
 80002dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002e0:	f000 fbae 	bl	8000a40 <HAL_Delay>

  //memset(buff ,0,sizeof(buff));
  // HAL_TIM_Base_Start_IT(&htim2);
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 80002e4:	4b4f      	ldr	r3, [pc, #316]	; (8000424 <main+0x180>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	68da      	ldr	r2, [r3, #12]
 80002ea:	4b4e      	ldr	r3, [pc, #312]	; (8000424 <main+0x180>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	f042 0220 	orr.w	r2, r2, #32
 80002f2:	60da      	str	r2, [r3, #12]
  /* USER CODE END 2 */

  /* USER CODE BEGIN WHILE */

  // INIT
  Igniter igniter(IGN_FIRE_GPIO_Port, IGN_FIRE_Pin, IGN_TEST_CON_GPIO_Port, IGN_TEST_CON_Pin);
 80002f4:	4638      	mov	r0, r7
 80002f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002fa:	9300      	str	r3, [sp, #0]
 80002fc:	4b4b      	ldr	r3, [pc, #300]	; (800042c <main+0x188>)
 80002fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000302:	494b      	ldr	r1, [pc, #300]	; (8000430 <main+0x18c>)
 8000304:	f7ff ff22 	bl	800014c <_ZN7IgniterC1EP12GPIO_TypeDeftS1_t>

  state = 0; //touch only for tests
 8000308:	4b4a      	ldr	r3, [pc, #296]	; (8000434 <main+0x190>)
 800030a:	2200      	movs	r2, #0
 800030c:	701a      	strb	r2, [r3, #0]
  while (1)
  {
	  switch(state){
 800030e:	4b49      	ldr	r3, [pc, #292]	; (8000434 <main+0x190>)
 8000310:	781b      	ldrb	r3, [r3, #0]
 8000312:	2b06      	cmp	r3, #6
 8000314:	d8fb      	bhi.n	800030e <main+0x6a>
 8000316:	a201      	add	r2, pc, #4	; (adr r2, 800031c <main+0x78>)
 8000318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800031c:	08000339 	.word	0x08000339
 8000320:	08000369 	.word	0x08000369
 8000324:	08000381 	.word	0x08000381
 8000328:	080003b1 	.word	0x080003b1
 800032c:	080003e9 	.word	0x080003e9
 8000330:	080003f1 	.word	0x080003f1
 8000334:	0800040d 	.word	0x0800040d
		  case 0: //test state
			  if(igniter.is_connected()){
 8000338:	463b      	mov	r3, r7
 800033a:	4618      	mov	r0, r3
 800033c:	f7ff ff20 	bl	8000180 <_ZNK7Igniter12is_connectedEv>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d004      	beq.n	8000350 <main+0xac>
   				  HAL_GPIO_TogglePin(BUILD_IN_LED_GPIO_Port, BUILD_IN_LED_Pin);
 8000346:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800034a:	4838      	ldr	r0, [pc, #224]	; (800042c <main+0x188>)
 800034c:	f000 fe9c 	bl	8001088 <HAL_GPIO_TogglePin>
   			  }

   			  //place for random tests
   			  //Fill.test_open_close();
   			  //QD.test_open_close();
   			  HAL_Delay(1000);
 8000350:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000354:	f000 fb74 	bl	8000a40 <HAL_Delay>
   			  //state = 1;
   			  strcpy(data, "DINI");	//xd
 8000358:	4b37      	ldr	r3, [pc, #220]	; (8000438 <main+0x194>)
 800035a:	4a38      	ldr	r2, [pc, #224]	; (800043c <main+0x198>)
 800035c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000360:	6018      	str	r0, [r3, #0]
 8000362:	3304      	adds	r3, #4
 8000364:	7019      	strb	r1, [r3, #0]
   			  break;
 8000366:	e05c      	b.n	8000422 <main+0x17e>
   		  case 1:	//IDLE
   			  if(strncmp(data, "DINI", 4) == 0){ // signal == init
 8000368:	2204      	movs	r2, #4
 800036a:	4934      	ldr	r1, [pc, #208]	; (800043c <main+0x198>)
 800036c:	4832      	ldr	r0, [pc, #200]	; (8000438 <main+0x194>)
 800036e:	f001 fd9b 	bl	8001ea8 <strncmp>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d14d      	bne.n	8000414 <main+0x170>
   				  //TODO: send ready
   				  state = 2;
 8000378:	4b2e      	ldr	r3, [pc, #184]	; (8000434 <main+0x190>)
 800037a:	2202      	movs	r2, #2
 800037c:	701a      	strb	r2, [r3, #0]
   			  }
   			  break;
 800037e:	e049      	b.n	8000414 <main+0x170>
   		  case 2:	//ARMED(hard) DABR
   			  if(igniter.is_connected() && strncmp(data, "DARM", 4) == 0){ // signal == arm
 8000380:	463b      	mov	r3, r7
 8000382:	4618      	mov	r0, r3
 8000384:	f7ff fefc 	bl	8000180 <_ZNK7Igniter12is_connectedEv>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d009      	beq.n	80003a2 <main+0xfe>
 800038e:	2204      	movs	r2, #4
 8000390:	492b      	ldr	r1, [pc, #172]	; (8000440 <main+0x19c>)
 8000392:	4829      	ldr	r0, [pc, #164]	; (8000438 <main+0x194>)
 8000394:	f001 fd88 	bl	8001ea8 <strncmp>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d101      	bne.n	80003a2 <main+0xfe>
 800039e:	2301      	movs	r3, #1
 80003a0:	e000      	b.n	80003a4 <main+0x100>
 80003a2:	2300      	movs	r3, #0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d037      	beq.n	8000418 <main+0x174>
   			  	  state = 3;
 80003a8:	4b22      	ldr	r3, [pc, #136]	; (8000434 <main+0x190>)
 80003aa:	2203      	movs	r2, #3
 80003ac:	701a      	strb	r2, [r3, #0]
   			  }
   			  break;
 80003ae:	e033      	b.n	8000418 <main+0x174>
   		  case 3:	//ARMED(soft)
   			  	  if(strncmp (data, "DSTA", 4) == 0){	//signal == fire
 80003b0:	2204      	movs	r2, #4
 80003b2:	4924      	ldr	r1, [pc, #144]	; (8000444 <main+0x1a0>)
 80003b4:	4820      	ldr	r0, [pc, #128]	; (8000438 <main+0x194>)
 80003b6:	f001 fd77 	bl	8001ea8 <strncmp>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d107      	bne.n	80003d0 <main+0x12c>
   			  		  igniter.FIRE();
 80003c0:	463b      	mov	r3, r7
 80003c2:	4618      	mov	r0, r3
 80003c4:	f7ff fef7 	bl	80001b6 <_ZN7Igniter4FIREEv>
   			  		  state = 5;
 80003c8:	4b1a      	ldr	r3, [pc, #104]	; (8000434 <main+0x190>)
 80003ca:	2205      	movs	r2, #5
 80003cc:	701a      	strb	r2, [r3, #0]
   			  	  }
   			  	  else if(strncmp (data, "DABR", 4) == 0){	//signal == abort
   			  		  state = 4;
   			  	  }
   			  break;
 80003ce:	e025      	b.n	800041c <main+0x178>
   			  	  else if(strncmp (data, "DABR", 4) == 0){	//signal == abort
 80003d0:	2204      	movs	r2, #4
 80003d2:	491d      	ldr	r1, [pc, #116]	; (8000448 <main+0x1a4>)
 80003d4:	4818      	ldr	r0, [pc, #96]	; (8000438 <main+0x194>)
 80003d6:	f001 fd67 	bl	8001ea8 <strncmp>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d11d      	bne.n	800041c <main+0x178>
   			  		  state = 4;
 80003e0:	4b14      	ldr	r3, [pc, #80]	; (8000434 <main+0x190>)
 80003e2:	2204      	movs	r2, #4
 80003e4:	701a      	strb	r2, [r3, #0]
   			  break;
 80003e6:	e019      	b.n	800041c <main+0x178>
   		  case 4:	//ABORT
   			  HAL_Delay(1000000);
 80003e8:	4818      	ldr	r0, [pc, #96]	; (800044c <main+0x1a8>)
 80003ea:	f000 fb29 	bl	8000a40 <HAL_Delay>
   			  break;
 80003ee:	e018      	b.n	8000422 <main+0x17e>
   		  case 5:	//FLIGHT
   			  //TODO: Send "fired" 	//n - times
   			 if( ! igniter.is_connected()){
 80003f0:	463b      	mov	r3, r7
 80003f2:	4618      	mov	r0, r3
 80003f4:	f7ff fec4 	bl	8000180 <_ZNK7Igniter12is_connectedEv>
 80003f8:	4603      	mov	r3, r0
 80003fa:	f083 0301 	eor.w	r3, r3, #1
 80003fe:	b2db      	uxtb	r3, r3
 8000400:	2b00      	cmp	r3, #0
 8000402:	d00d      	beq.n	8000420 <main+0x17c>
   				  state = 6;
 8000404:	4b0b      	ldr	r3, [pc, #44]	; (8000434 <main+0x190>)
 8000406:	2206      	movs	r2, #6
 8000408:	701a      	strb	r2, [r3, #0]
   			  }
   			  break;
 800040a:	e009      	b.n	8000420 <main+0x17c>
   		  case 6:	//END
   			  HAL_Delay(1000000);
 800040c:	480f      	ldr	r0, [pc, #60]	; (800044c <main+0x1a8>)
 800040e:	f000 fb17 	bl	8000a40 <HAL_Delay>
   			  break;
 8000412:	e006      	b.n	8000422 <main+0x17e>
   			  break;
 8000414:	bf00      	nop
 8000416:	e77a      	b.n	800030e <main+0x6a>
   			  break;
 8000418:	bf00      	nop
 800041a:	e778      	b.n	800030e <main+0x6a>
   			  break;
 800041c:	bf00      	nop
 800041e:	e776      	b.n	800030e <main+0x6a>
   			  break;
 8000420:	bf00      	nop
	  switch(state){
 8000422:	e774      	b.n	800030e <main+0x6a>
 8000424:	20000170 	.word	0x20000170
 8000428:	2000002c 	.word	0x2000002c
 800042c:	40011000 	.word	0x40011000
 8000430:	40010800 	.word	0x40010800
 8000434:	20000084 	.word	0x20000084
 8000438:	20000088 	.word	0x20000088
 800043c:	08001ee4 	.word	0x08001ee4
 8000440:	08001eec 	.word	0x08001eec
 8000444:	08001ef4 	.word	0x08001ef4
 8000448:	08001efc 	.word	0x08001efc
 800044c:	000f4240 	.word	0x000f4240

08000450 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b094      	sub	sp, #80	; 0x50
 8000454:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000456:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800045a:	2228      	movs	r2, #40	; 0x28
 800045c:	2100      	movs	r1, #0
 800045e:	4618      	mov	r0, r3
 8000460:	f001 fd12 	bl	8001e88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000464:	f107 0314 	add.w	r3, r7, #20
 8000468:	2200      	movs	r2, #0
 800046a:	601a      	str	r2, [r3, #0]
 800046c:	605a      	str	r2, [r3, #4]
 800046e:	609a      	str	r2, [r3, #8]
 8000470:	60da      	str	r2, [r3, #12]
 8000472:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000474:	1d3b      	adds	r3, r7, #4
 8000476:	2200      	movs	r2, #0
 8000478:	601a      	str	r2, [r3, #0]
 800047a:	605a      	str	r2, [r3, #4]
 800047c:	609a      	str	r2, [r3, #8]
 800047e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000480:	2301      	movs	r3, #1
 8000482:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000484:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000488:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800048a:	2300      	movs	r3, #0
 800048c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800048e:	2301      	movs	r3, #1
 8000490:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000492:	2302      	movs	r3, #2
 8000494:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000496:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800049a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800049c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80004a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004a6:	4618      	mov	r0, r3
 80004a8:	f000 fe78 	bl	800119c <HAL_RCC_OscConfig>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	bf14      	ite	ne
 80004b2:	2301      	movne	r3, #1
 80004b4:	2300      	moveq	r3, #0
 80004b6:	b2db      	uxtb	r3, r3
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d001      	beq.n	80004c0 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 80004bc:	f000 f86c 	bl	8000598 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004c0:	230f      	movs	r3, #15
 80004c2:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004c4:	2302      	movs	r3, #2
 80004c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004c8:	2300      	movs	r3, #0
 80004ca:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004d0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80004d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004d6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004d8:	f107 0314 	add.w	r3, r7, #20
 80004dc:	2101      	movs	r1, #1
 80004de:	4618      	mov	r0, r3
 80004e0:	f001 f8a8 	bl	8001634 <HAL_RCC_ClockConfig>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	bf14      	ite	ne
 80004ea:	2301      	movne	r3, #1
 80004ec:	2300      	moveq	r3, #0
 80004ee:	b2db      	uxtb	r3, r3
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d001      	beq.n	80004f8 <_Z18SystemClock_Configv+0xa8>
  {
    Error_Handler();
 80004f4:	f000 f850 	bl	8000598 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80004f8:	2310      	movs	r3, #16
 80004fa:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80004fc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000500:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000502:	1d3b      	adds	r3, r7, #4
 8000504:	4618      	mov	r0, r3
 8000506:	f001 f96d 	bl	80017e4 <HAL_RCCEx_PeriphCLKConfig>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	bf14      	ite	ne
 8000510:	2301      	movne	r3, #1
 8000512:	2300      	moveq	r3, #0
 8000514:	b2db      	uxtb	r3, r3
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <_Z18SystemClock_Configv+0xce>
  {
    Error_Handler();
 800051a:	f000 f83d 	bl	8000598 <Error_Handler>
  }
}
 800051e:	bf00      	nop
 8000520:	3750      	adds	r7, #80	; 0x50
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
	...

08000528 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000528:	b580      	push	{r7, lr}
 800052a:	b084      	sub	sp, #16
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a12      	ldr	r2, [pc, #72]	; (8000580 <HAL_UART_RxCpltCallback+0x58>)
 8000536:	4293      	cmp	r3, r2
 8000538:	d11d      	bne.n	8000576 <HAL_UART_RxCpltCallback+0x4e>
		__HAL_UART_CLEAR_IDLEFLAG(&huart2);
 800053a:	2300      	movs	r3, #0
 800053c:	60fb      	str	r3, [r7, #12]
 800053e:	4b11      	ldr	r3, [pc, #68]	; (8000584 <HAL_UART_RxCpltCallback+0x5c>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	60fb      	str	r3, [r7, #12]
 8000546:	4b0f      	ldr	r3, [pc, #60]	; (8000584 <HAL_UART_RxCpltCallback+0x5c>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	685b      	ldr	r3, [r3, #4]
 800054c:	60fb      	str	r3, [r7, #12]
 800054e:	68fb      	ldr	r3, [r7, #12]
		HAL_UART_DMAStop(&huart2);
 8000550:	480c      	ldr	r0, [pc, #48]	; (8000584 <HAL_UART_RxCpltCallback+0x5c>)
 8000552:	f001 faa9 	bl	8001aa8 <HAL_UART_DMAStop>

		xbee_receive(); //odebranie całej wiadomości
 8000556:	f000 f991 	bl	800087c <xbee_receive>
		if(xbee_rx.data_flag){  //jeżeli wiadomość była danymi to ta zmienna będzie miała wartość 1
 800055a:	4b0b      	ldr	r3, [pc, #44]	; (8000588 <HAL_UART_RxCpltCallback+0x60>)
 800055c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8000560:	2b00      	cmp	r3, #0
 8000562:	d003      	beq.n	800056c <HAL_UART_RxCpltCallback+0x44>
			macie do dyspozycji tablice 'xbee_rx.data_array' o wielkości 'DATA_ARRAY' - 30, w której są wartości
			jeżeli chcecie zatrzymać te dane musicie skopiować wartości tej tabilicy
			pobranie adresu jest złym pomysłem bo przy każdym odebraniu tablica zmienia swoją zawartosć
			*/
			if(1)
				stpcpy(data, xbee_rx.data_array);
 8000564:	4909      	ldr	r1, [pc, #36]	; (800058c <HAL_UART_RxCpltCallback+0x64>)
 8000566:	480a      	ldr	r0, [pc, #40]	; (8000590 <HAL_UART_RxCpltCallback+0x68>)
 8000568:	f001 fc96 	bl	8001e98 <strcpy>
		}
		//tutaj zmienić tylko huart
		HAL_UART_Receive_DMA(&huart2, (uint8_t*) xbee_rx.mess_loaded, DATA_LENGTH);
 800056c:	2232      	movs	r2, #50	; 0x32
 800056e:	4909      	ldr	r1, [pc, #36]	; (8000594 <HAL_UART_RxCpltCallback+0x6c>)
 8000570:	4804      	ldr	r0, [pc, #16]	; (8000584 <HAL_UART_RxCpltCallback+0x5c>)
 8000572:	f001 fa45 	bl	8001a00 <HAL_UART_Receive_DMA>
	}
}
 8000576:	bf00      	nop
 8000578:	3710      	adds	r7, #16
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	40004400 	.word	0x40004400
 8000584:	20000170 	.word	0x20000170
 8000588:	20000028 	.word	0x20000028
 800058c:	2000005e 	.word	0x2000005e
 8000590:	20000088 	.word	0x20000088
 8000594:	2000002c 	.word	0x2000002c

08000598 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800059c:	b672      	cpsid	i
}
 800059e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005a0:	e7fe      	b.n	80005a0 <Error_Handler+0x8>
	...

080005a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005a4:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005a6:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <HAL_MspInit+0x3c>)
 80005a8:	699a      	ldr	r2, [r3, #24]
 80005aa:	f042 0201 	orr.w	r2, r2, #1
 80005ae:	619a      	str	r2, [r3, #24]
 80005b0:	699a      	ldr	r2, [r3, #24]
 80005b2:	f002 0201 	and.w	r2, r2, #1
 80005b6:	9200      	str	r2, [sp, #0]
 80005b8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ba:	69da      	ldr	r2, [r3, #28]
 80005bc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80005c0:	61da      	str	r2, [r3, #28]
 80005c2:	69db      	ldr	r3, [r3, #28]
 80005c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c8:	9301      	str	r3, [sp, #4]
 80005ca:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005cc:	4a05      	ldr	r2, [pc, #20]	; (80005e4 <HAL_MspInit+0x40>)
 80005ce:	6853      	ldr	r3, [r2, #4]
 80005d0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005da:	b002      	add	sp, #8
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	40021000 	.word	0x40021000
 80005e4:	40010000 	.word	0x40010000

080005e8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005e8:	e7fe      	b.n	80005e8 <NMI_Handler>

080005ea <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005ea:	e7fe      	b.n	80005ea <HardFault_Handler>

080005ec <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005ec:	e7fe      	b.n	80005ec <MemManage_Handler>

080005ee <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005ee:	e7fe      	b.n	80005ee <BusFault_Handler>

080005f0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005f0:	e7fe      	b.n	80005f0 <UsageFault_Handler>

080005f2 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005f2:	4770      	bx	lr

080005f4 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005f4:	4770      	bx	lr

080005f6 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005f6:	4770      	bx	lr

080005f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005f8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005fa:	f000 fa0f 	bl	8000a1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005fe:	bd08      	pop	{r3, pc}

08000600 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000600:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000602:	4802      	ldr	r0, [pc, #8]	; (800060c <DMA1_Channel6_IRQHandler+0xc>)
 8000604:	f000 fb84 	bl	8000d10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000608:	bd08      	pop	{r3, pc}
 800060a:	bf00      	nop
 800060c:	200000a8 	.word	0x200000a8

08000610 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000610:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000612:	4802      	ldr	r0, [pc, #8]	; (800061c <DMA1_Channel7_IRQHandler+0xc>)
 8000614:	f000 fb7c 	bl	8000d10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000618:	bd08      	pop	{r3, pc}
 800061a:	bf00      	nop
 800061c:	2000012c 	.word	0x2000012c

08000620 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000620:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000622:	4c07      	ldr	r4, [pc, #28]	; (8000640 <USART2_IRQHandler+0x20>)
 8000624:	4620      	mov	r0, r4
 8000626:	f001 fb13 	bl	8001c50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  if(__HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE))
 800062a:	6823      	ldr	r3, [r4, #0]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f013 0f10 	tst.w	r3, #16
 8000632:	d100      	bne.n	8000636 <USART2_IRQHandler+0x16>
	  HAL_UART_RxCpltCallback(&huart2);

  /* USER CODE END USART2_IRQn 1 */
}
 8000634:	bd10      	pop	{r4, pc}
	  HAL_UART_RxCpltCallback(&huart2);
 8000636:	4620      	mov	r0, r4
 8000638:	f7ff ff76 	bl	8000528 <HAL_UART_RxCpltCallback>
}
 800063c:	e7fa      	b.n	8000634 <USART2_IRQHandler+0x14>
 800063e:	bf00      	nop
 8000640:	20000170 	.word	0x20000170

08000644 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000644:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000646:	4802      	ldr	r0, [pc, #8]	; (8000650 <USART3_IRQHandler+0xc>)
 8000648:	f001 fb02 	bl	8001c50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800064c:	bd08      	pop	{r3, pc}
 800064e:	bf00      	nop
 8000650:	200000ec 	.word	0x200000ec

08000654 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000654:	4770      	bx	lr
	...

08000658 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000658:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800065a:	480a      	ldr	r0, [pc, #40]	; (8000684 <MX_USART2_UART_Init+0x2c>)
 800065c:	4b0a      	ldr	r3, [pc, #40]	; (8000688 <MX_USART2_UART_Init+0x30>)
 800065e:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8000660:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000664:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000666:	2300      	movs	r3, #0
 8000668:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800066a:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800066c:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800066e:	220c      	movs	r2, #12
 8000670:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000672:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000674:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000676:	f001 f993 	bl	80019a0 <HAL_UART_Init>
 800067a:	b900      	cbnz	r0, 800067e <MX_USART2_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800067c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800067e:	f7ff ff8b 	bl	8000598 <Error_Handler>
}
 8000682:	e7fb      	b.n	800067c <MX_USART2_UART_Init+0x24>
 8000684:	20000170 	.word	0x20000170
 8000688:	40004400 	.word	0x40004400

0800068c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800068c:	b508      	push	{r3, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800068e:	480a      	ldr	r0, [pc, #40]	; (80006b8 <MX_USART3_UART_Init+0x2c>)
 8000690:	4b0a      	ldr	r3, [pc, #40]	; (80006bc <MX_USART3_UART_Init+0x30>)
 8000692:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 8000694:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000698:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800069a:	2300      	movs	r3, #0
 800069c:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800069e:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006a0:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006a2:	220c      	movs	r2, #12
 80006a4:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a6:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a8:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006aa:	f001 f979 	bl	80019a0 <HAL_UART_Init>
 80006ae:	b900      	cbnz	r0, 80006b2 <MX_USART3_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006b0:	bd08      	pop	{r3, pc}
    Error_Handler();
 80006b2:	f7ff ff71 	bl	8000598 <Error_Handler>
}
 80006b6:	e7fb      	b.n	80006b0 <MX_USART3_UART_Init+0x24>
 80006b8:	200000ec 	.word	0x200000ec
 80006bc:	40004800 	.word	0x40004800

080006c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c4:	2300      	movs	r3, #0
 80006c6:	9304      	str	r3, [sp, #16]
 80006c8:	9305      	str	r3, [sp, #20]
 80006ca:	9306      	str	r3, [sp, #24]
 80006cc:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART2)
 80006ce:	6803      	ldr	r3, [r0, #0]
 80006d0:	4a4a      	ldr	r2, [pc, #296]	; (80007fc <HAL_UART_MspInit+0x13c>)
 80006d2:	4293      	cmp	r3, r2
 80006d4:	d004      	beq.n	80006e0 <HAL_UART_MspInit+0x20>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 80006d6:	4a4a      	ldr	r2, [pc, #296]	; (8000800 <HAL_UART_MspInit+0x140>)
 80006d8:	4293      	cmp	r3, r2
 80006da:	d05c      	beq.n	8000796 <HAL_UART_MspInit+0xd6>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80006dc:	b008      	add	sp, #32
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	4604      	mov	r4, r0
    __HAL_RCC_USART2_CLK_ENABLE();
 80006e2:	4b48      	ldr	r3, [pc, #288]	; (8000804 <HAL_UART_MspInit+0x144>)
 80006e4:	69da      	ldr	r2, [r3, #28]
 80006e6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80006ea:	61da      	str	r2, [r3, #28]
 80006ec:	69da      	ldr	r2, [r3, #28]
 80006ee:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80006f2:	9200      	str	r2, [sp, #0]
 80006f4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f6:	699a      	ldr	r2, [r3, #24]
 80006f8:	f042 0204 	orr.w	r2, r2, #4
 80006fc:	619a      	str	r2, [r3, #24]
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	f003 0304 	and.w	r3, r3, #4
 8000704:	9301      	str	r3, [sp, #4]
 8000706:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000708:	2304      	movs	r3, #4
 800070a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800070c:	2302      	movs	r3, #2
 800070e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000710:	2303      	movs	r3, #3
 8000712:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000714:	4e3c      	ldr	r6, [pc, #240]	; (8000808 <HAL_UART_MspInit+0x148>)
 8000716:	a904      	add	r1, sp, #16
 8000718:	4630      	mov	r0, r6
 800071a:	f000 fb99 	bl	8000e50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800071e:	2308      	movs	r3, #8
 8000720:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000722:	2500      	movs	r5, #0
 8000724:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000726:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000728:	a904      	add	r1, sp, #16
 800072a:	4630      	mov	r0, r6
 800072c:	f000 fb90 	bl	8000e50 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000730:	4836      	ldr	r0, [pc, #216]	; (800080c <HAL_UART_MspInit+0x14c>)
 8000732:	4b37      	ldr	r3, [pc, #220]	; (8000810 <HAL_UART_MspInit+0x150>)
 8000734:	6003      	str	r3, [r0, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000736:	6045      	str	r5, [r0, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000738:	6085      	str	r5, [r0, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800073a:	2380      	movs	r3, #128	; 0x80
 800073c:	60c3      	str	r3, [r0, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800073e:	6105      	str	r5, [r0, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000740:	6145      	str	r5, [r0, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000742:	6185      	str	r5, [r0, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000744:	61c5      	str	r5, [r0, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000746:	f000 f9f7 	bl	8000b38 <HAL_DMA_Init>
 800074a:	b9f0      	cbnz	r0, 800078a <HAL_UART_MspInit+0xca>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800074c:	4b2f      	ldr	r3, [pc, #188]	; (800080c <HAL_UART_MspInit+0x14c>)
 800074e:	6363      	str	r3, [r4, #52]	; 0x34
 8000750:	625c      	str	r4, [r3, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000752:	4830      	ldr	r0, [pc, #192]	; (8000814 <HAL_UART_MspInit+0x154>)
 8000754:	4b30      	ldr	r3, [pc, #192]	; (8000818 <HAL_UART_MspInit+0x158>)
 8000756:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000758:	2310      	movs	r3, #16
 800075a:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800075c:	2300      	movs	r3, #0
 800075e:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000760:	2280      	movs	r2, #128	; 0x80
 8000762:	60c2      	str	r2, [r0, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000764:	6103      	str	r3, [r0, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000766:	6143      	str	r3, [r0, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000768:	6183      	str	r3, [r0, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800076a:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800076c:	f000 f9e4 	bl	8000b38 <HAL_DMA_Init>
 8000770:	b970      	cbnz	r0, 8000790 <HAL_UART_MspInit+0xd0>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8000772:	4b28      	ldr	r3, [pc, #160]	; (8000814 <HAL_UART_MspInit+0x154>)
 8000774:	6323      	str	r3, [r4, #48]	; 0x30
 8000776:	625c      	str	r4, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000778:	2200      	movs	r2, #0
 800077a:	4611      	mov	r1, r2
 800077c:	2026      	movs	r0, #38	; 0x26
 800077e:	f000 f985 	bl	8000a8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000782:	2026      	movs	r0, #38	; 0x26
 8000784:	f000 f9b4 	bl	8000af0 <HAL_NVIC_EnableIRQ>
 8000788:	e7a8      	b.n	80006dc <HAL_UART_MspInit+0x1c>
      Error_Handler();
 800078a:	f7ff ff05 	bl	8000598 <Error_Handler>
 800078e:	e7dd      	b.n	800074c <HAL_UART_MspInit+0x8c>
      Error_Handler();
 8000790:	f7ff ff02 	bl	8000598 <Error_Handler>
 8000794:	e7ed      	b.n	8000772 <HAL_UART_MspInit+0xb2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000796:	4b1b      	ldr	r3, [pc, #108]	; (8000804 <HAL_UART_MspInit+0x144>)
 8000798:	69da      	ldr	r2, [r3, #28]
 800079a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800079e:	61da      	str	r2, [r3, #28]
 80007a0:	69da      	ldr	r2, [r3, #28]
 80007a2:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80007a6:	9202      	str	r2, [sp, #8]
 80007a8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007aa:	699a      	ldr	r2, [r3, #24]
 80007ac:	f042 0208 	orr.w	r2, r2, #8
 80007b0:	619a      	str	r2, [r3, #24]
 80007b2:	699b      	ldr	r3, [r3, #24]
 80007b4:	f003 0308 	and.w	r3, r3, #8
 80007b8:	9303      	str	r3, [sp, #12]
 80007ba:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007c0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c2:	2302      	movs	r3, #2
 80007c4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007c6:	2303      	movs	r3, #3
 80007c8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ca:	4d14      	ldr	r5, [pc, #80]	; (800081c <HAL_UART_MspInit+0x15c>)
 80007cc:	a904      	add	r1, sp, #16
 80007ce:	4628      	mov	r0, r5
 80007d0:	f000 fb3e 	bl	8000e50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80007d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80007d8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007da:	2400      	movs	r4, #0
 80007dc:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e0:	a904      	add	r1, sp, #16
 80007e2:	4628      	mov	r0, r5
 80007e4:	f000 fb34 	bl	8000e50 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80007e8:	4622      	mov	r2, r4
 80007ea:	4621      	mov	r1, r4
 80007ec:	2027      	movs	r0, #39	; 0x27
 80007ee:	f000 f94d 	bl	8000a8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80007f2:	2027      	movs	r0, #39	; 0x27
 80007f4:	f000 f97c 	bl	8000af0 <HAL_NVIC_EnableIRQ>
}
 80007f8:	e770      	b.n	80006dc <HAL_UART_MspInit+0x1c>
 80007fa:	bf00      	nop
 80007fc:	40004400 	.word	0x40004400
 8000800:	40004800 	.word	0x40004800
 8000804:	40021000 	.word	0x40021000
 8000808:	40010800 	.word	0x40010800
 800080c:	200000a8 	.word	0x200000a8
 8000810:	4002006c 	.word	0x4002006c
 8000814:	2000012c 	.word	0x2000012c
 8000818:	40020080 	.word	0x40020080
 800081c:	40010c00 	.word	0x40010c00

08000820 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8000820:	b508      	push	{r3, lr}
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000822:	4809      	ldr	r0, [pc, #36]	; (8000848 <MX_USB_PCD_Init+0x28>)
 8000824:	4b09      	ldr	r3, [pc, #36]	; (800084c <MX_USB_PCD_Init+0x2c>)
 8000826:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000828:	2308      	movs	r3, #8
 800082a:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800082c:	2302      	movs	r3, #2
 800082e:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000830:	2300      	movs	r3, #0
 8000832:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000834:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000836:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000838:	f000 fc2f 	bl	800109a <HAL_PCD_Init>
 800083c:	b900      	cbnz	r0, 8000840 <MX_USB_PCD_Init+0x20>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800083e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000840:	f7ff feaa 	bl	8000598 <Error_Handler>
}
 8000844:	e7fb      	b.n	800083e <MX_USB_PCD_Init+0x1e>
 8000846:	bf00      	nop
 8000848:	200001b0 	.word	0x200001b0
 800084c:	40005c00 	.word	0x40005c00

08000850 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{

  if(pcdHandle->Instance==USB)
 8000850:	6802      	ldr	r2, [r0, #0]
 8000852:	4b09      	ldr	r3, [pc, #36]	; (8000878 <HAL_PCD_MspInit+0x28>)
 8000854:	429a      	cmp	r2, r3
 8000856:	d000      	beq.n	800085a <HAL_PCD_MspInit+0xa>
 8000858:	4770      	bx	lr
{
 800085a:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800085c:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8000860:	69da      	ldr	r2, [r3, #28]
 8000862:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000866:	61da      	str	r2, [r3, #28]
 8000868:	69db      	ldr	r3, [r3, #28]
 800086a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800086e:	9301      	str	r3, [sp, #4]
 8000870:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8000872:	b002      	add	sp, #8
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	40005c00 	.word	0x40005c00

0800087c <xbee_receive>:
    return result;
}


///zastanowić się jak sensownie zwracać dane
void xbee_receive(){
 800087c:	b470      	push	{r4, r5, r6}
	for(int i=0; i<length; i++){
 800087e:	4b34      	ldr	r3, [pc, #208]	; (8000950 <xbee_receive+0xd4>)
 8000880:	f1a3 0435 	sub.w	r4, r3, #53	; 0x35
 8000884:	f103 011e 	add.w	r1, r3, #30
		array[i] = 0;
 8000888:	2200      	movs	r2, #0
 800088a:	f803 2f01 	strb.w	r2, [r3, #1]!
	for(int i=0; i<length; i++){
 800088e:	428b      	cmp	r3, r1
 8000890:	d1fb      	bne.n	800088a <xbee_receive+0xe>
	xbee_clear_array(xbee_rx.data_array, DATA_ARRAY);
	xbee_rx.data_flag = 0;
 8000892:	4b30      	ldr	r3, [pc, #192]	; (8000954 <xbee_receive+0xd8>)
 8000894:	2200      	movs	r2, #0
 8000896:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	//ogarnięcie długości
	xbee_rx.length = (xbee_rx.mess_loaded[1] << 8) + xbee_rx.mess_loaded[2];
 800089a:	795a      	ldrb	r2, [r3, #5]
 800089c:	799d      	ldrb	r5, [r3, #6]
 800089e:	eb05 2502 	add.w	r5, r5, r2, lsl #8
 80008a2:	601d      	str	r5, [r3, #0]
	//długość całej tablicy
	int mess_length = xbee_rx.length + 3; //3 bo dodajemy 4 elementy ale musimy odjąć jeden bo tablice sa numerowane od 0
 80008a4:	1cee      	adds	r6, r5, #3


	//sprawdzenie checksum
	for(int i=3; i<mess_length; i++){
 80008a6:	2e03      	cmp	r6, #3
 80008a8:	dd0e      	ble.n	80008c8 <xbee_receive+0x4c>
 80008aa:	461a      	mov	r2, r3
 80008ac:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80008b0:	3206      	adds	r2, #6
 80008b2:	1da0      	adds	r0, r4, #6
 80008b4:	4428      	add	r0, r5
		xbee_rx.checksum += xbee_rx.mess_loaded[i];
 80008b6:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80008ba:	440b      	add	r3, r1
 80008bc:	b2db      	uxtb	r3, r3
	for(int i=3; i<mess_length; i++){
 80008be:	4282      	cmp	r2, r0
 80008c0:	d1f9      	bne.n	80008b6 <xbee_receive+0x3a>
 80008c2:	4a24      	ldr	r2, [pc, #144]	; (8000954 <xbee_receive+0xd8>)
 80008c4:	f882 3055 	strb.w	r3, [r2, #85]	; 0x55
	}
	xbee_rx.checksum = 0xff - xbee_rx.checksum;
 80008c8:	4a22      	ldr	r2, [pc, #136]	; (8000954 <xbee_receive+0xd8>)
 80008ca:	f892 3055 	ldrb.w	r3, [r2, #85]	; 0x55
 80008ce:	43db      	mvns	r3, r3
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	f882 3055 	strb.w	r3, [r2, #85]	; 0x55
	//sprawdzenie czy checksum sie zgadza
	if(xbee_rx.checksum != xbee_rx.mess_loaded[mess_length]){
 80008d6:	4432      	add	r2, r6
 80008d8:	7912      	ldrb	r2, [r2, #4]
 80008da:	429a      	cmp	r2, r3
 80008dc:	d00e      	beq.n	80008fc <xbee_receive+0x80>
 80008de:	4b1e      	ldr	r3, [pc, #120]	; (8000958 <xbee_receive+0xdc>)
 80008e0:	f104 0235 	add.w	r2, r4, #53	; 0x35
		array[i] = 0;
 80008e4:	2100      	movs	r1, #0
 80008e6:	f803 1f01 	strb.w	r1, [r3, #1]!
	for(int i=0; i<length; i++){
 80008ea:	429a      	cmp	r2, r3
 80008ec:	d1fb      	bne.n	80008e6 <xbee_receive+0x6a>
	xbee_rx.length = 0;
 80008ee:	4b19      	ldr	r3, [pc, #100]	; (8000954 <xbee_receive+0xd8>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
	xbee_rx.checksum = 0;
 80008f4:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
		//debug
		//xbee_rx.data_array[k] = '\n';
		//xbee_rx.data = xbee_data_convert(xbee_rx.data_array);
	}
	xbee_clear();
}
 80008f8:	bc70      	pop	{r4, r5, r6}
 80008fa:	4770      	bx	lr
	if(xbee_rx.length == 7){
 80008fc:	2d07      	cmp	r5, #7
 80008fe:	d01c      	beq.n	800093a <xbee_receive+0xbe>
		for(i = 15, k = 0; i<mess_length; ++i, ++k){
 8000900:	2e0f      	cmp	r6, #15
 8000902:	dd08      	ble.n	8000916 <xbee_receive+0x9a>
 8000904:	4b15      	ldr	r3, [pc, #84]	; (800095c <xbee_receive+0xe0>)
 8000906:	1da2      	adds	r2, r4, #6
 8000908:	4415      	add	r5, r2
			xbee_rx.data_array[k] = xbee_rx.mess_loaded[i];
 800090a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800090e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		for(i = 15, k = 0; i<mess_length; ++i, ++k){
 8000912:	42ab      	cmp	r3, r5
 8000914:	d1f9      	bne.n	800090a <xbee_receive+0x8e>
		xbee_rx.data_flag = 1;
 8000916:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <xbee_receive+0xd8>)
 8000918:	2201      	movs	r2, #1
 800091a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	for(int i=0; i<length; i++){
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <xbee_receive+0xdc>)
 8000920:	f104 0235 	add.w	r2, r4, #53	; 0x35
		array[i] = 0;
 8000924:	2100      	movs	r1, #0
 8000926:	f803 1f01 	strb.w	r1, [r3, #1]!
	for(int i=0; i<length; i++){
 800092a:	429a      	cmp	r2, r3
 800092c:	d1fb      	bne.n	8000926 <xbee_receive+0xaa>
	xbee_rx.length = 0;
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <xbee_receive+0xd8>)
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
	xbee_rx.checksum = 0;
 8000934:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
}
 8000938:	e7de      	b.n	80008f8 <xbee_receive+0x7c>
		if(xbee_rx.mess_loaded[mess_length-1] == 0 && xbee_rx.mess_loaded[mess_length-2] == 0 && xbee_rx.mess_loaded[mess_length-3] == 0){
 800093a:	4a06      	ldr	r2, [pc, #24]	; (8000954 <xbee_receive+0xd8>)
 800093c:	7b53      	ldrb	r3, [r2, #13]
 800093e:	7b11      	ldrb	r1, [r2, #12]
 8000940:	430b      	orrs	r3, r1
 8000942:	7ad2      	ldrb	r2, [r2, #11]
 8000944:	4313      	orrs	r3, r2
 8000946:	d1ea      	bne.n	800091e <xbee_receive+0xa2>
			xbee_rx.response = 1;
 8000948:	4b02      	ldr	r3, [pc, #8]	; (8000954 <xbee_receive+0xd8>)
 800094a:	2201      	movs	r2, #1
 800094c:	659a      	str	r2, [r3, #88]	; 0x58
 800094e:	e7e6      	b.n	800091e <xbee_receive+0xa2>
 8000950:	2000005d 	.word	0x2000005d
 8000954:	20000028 	.word	0x20000028
 8000958:	2000002b 	.word	0x2000002b
 800095c:	2000003a 	.word	0x2000003a

08000960 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000960:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000962:	e003      	b.n	800096c <LoopCopyDataInit>

08000964 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000964:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000966:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000968:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800096a:	3104      	adds	r1, #4

0800096c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800096c:	480a      	ldr	r0, [pc, #40]	; (8000998 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800096e:	4b0b      	ldr	r3, [pc, #44]	; (800099c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000970:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000972:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000974:	d3f6      	bcc.n	8000964 <CopyDataInit>
  ldr r2, =_sbss
 8000976:	4a0a      	ldr	r2, [pc, #40]	; (80009a0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000978:	e002      	b.n	8000980 <LoopFillZerobss>

0800097a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800097a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800097c:	f842 3b04 	str.w	r3, [r2], #4

08000980 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000980:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000982:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000984:	d3f9      	bcc.n	800097a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000986:	f7ff fe65 	bl	8000654 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800098a:	f001 fa59 	bl	8001e40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800098e:	f7ff fc89 	bl	80002a4 <main>
  bx lr
 8000992:	4770      	bx	lr
  ldr r3, =_sidata
 8000994:	08001f38 	.word	0x08001f38
  ldr r0, =_sdata
 8000998:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800099c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80009a0:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80009a4:	200004a0 	.word	0x200004a0

080009a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009a8:	e7fe      	b.n	80009a8 <ADC1_2_IRQHandler>
	...

080009ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009ac:	b510      	push	{r4, lr}
 80009ae:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009b0:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <HAL_InitTick+0x40>)
 80009b2:	7818      	ldrb	r0, [r3, #0]
 80009b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009b8:	fbb3 f3f0 	udiv	r3, r3, r0
 80009bc:	4a0c      	ldr	r2, [pc, #48]	; (80009f0 <HAL_InitTick+0x44>)
 80009be:	6810      	ldr	r0, [r2, #0]
 80009c0:	fbb0 f0f3 	udiv	r0, r0, r3
 80009c4:	f000 f8a2 	bl	8000b0c <HAL_SYSTICK_Config>
 80009c8:	b968      	cbnz	r0, 80009e6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ca:	2c0f      	cmp	r4, #15
 80009cc:	d901      	bls.n	80009d2 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80009ce:	2001      	movs	r0, #1
 80009d0:	e00a      	b.n	80009e8 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009d2:	2200      	movs	r2, #0
 80009d4:	4621      	mov	r1, r4
 80009d6:	f04f 30ff 	mov.w	r0, #4294967295
 80009da:	f000 f857 	bl	8000a8c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009de:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <HAL_InitTick+0x48>)
 80009e0:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80009e2:	2000      	movs	r0, #0
 80009e4:	e000      	b.n	80009e8 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80009e6:	2001      	movs	r0, #1
}
 80009e8:	bd10      	pop	{r4, pc}
 80009ea:	bf00      	nop
 80009ec:	20000004 	.word	0x20000004
 80009f0:	20000000 	.word	0x20000000
 80009f4:	20000008 	.word	0x20000008

080009f8 <HAL_Init>:
{
 80009f8:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009fa:	4a07      	ldr	r2, [pc, #28]	; (8000a18 <HAL_Init+0x20>)
 80009fc:	6813      	ldr	r3, [r2, #0]
 80009fe:	f043 0310 	orr.w	r3, r3, #16
 8000a02:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a04:	2003      	movs	r0, #3
 8000a06:	f000 f82f 	bl	8000a68 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a0a:	2000      	movs	r0, #0
 8000a0c:	f7ff ffce 	bl	80009ac <HAL_InitTick>
  HAL_MspInit();
 8000a10:	f7ff fdc8 	bl	80005a4 <HAL_MspInit>
}
 8000a14:	2000      	movs	r0, #0
 8000a16:	bd08      	pop	{r3, pc}
 8000a18:	40022000 	.word	0x40022000

08000a1c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000a1c:	4a03      	ldr	r2, [pc, #12]	; (8000a2c <HAL_IncTick+0x10>)
 8000a1e:	6811      	ldr	r1, [r2, #0]
 8000a20:	4b03      	ldr	r3, [pc, #12]	; (8000a30 <HAL_IncTick+0x14>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	440b      	add	r3, r1
 8000a26:	6013      	str	r3, [r2, #0]
}
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	2000049c 	.word	0x2000049c
 8000a30:	20000004 	.word	0x20000004

08000a34 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000a34:	4b01      	ldr	r3, [pc, #4]	; (8000a3c <HAL_GetTick+0x8>)
 8000a36:	6818      	ldr	r0, [r3, #0]
}
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	2000049c 	.word	0x2000049c

08000a40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a40:	b538      	push	{r3, r4, r5, lr}
 8000a42:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000a44:	f7ff fff6 	bl	8000a34 <HAL_GetTick>
 8000a48:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a4a:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000a4e:	d002      	beq.n	8000a56 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a50:	4b04      	ldr	r3, [pc, #16]	; (8000a64 <HAL_Delay+0x24>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a56:	f7ff ffed 	bl	8000a34 <HAL_GetTick>
 8000a5a:	1b40      	subs	r0, r0, r5
 8000a5c:	42a0      	cmp	r0, r4
 8000a5e:	d3fa      	bcc.n	8000a56 <HAL_Delay+0x16>
  {
  }
}
 8000a60:	bd38      	pop	{r3, r4, r5, pc}
 8000a62:	bf00      	nop
 8000a64:	20000004 	.word	0x20000004

08000a68 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a68:	4907      	ldr	r1, [pc, #28]	; (8000a88 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000a6a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a6c:	0203      	lsls	r3, r0, #8
 8000a6e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a72:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000a76:	0412      	lsls	r2, r2, #16
 8000a78:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000a84:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000a86:	4770      	bx	lr
 8000a88:	e000ed00 	.word	0xe000ed00

08000a8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a8c:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a8e:	4b16      	ldr	r3, [pc, #88]	; (8000ae8 <HAL_NVIC_SetPriority+0x5c>)
 8000a90:	68db      	ldr	r3, [r3, #12]
 8000a92:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a96:	f1c3 0407 	rsb	r4, r3, #7
 8000a9a:	2c04      	cmp	r4, #4
 8000a9c:	bf28      	it	cs
 8000a9e:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aa0:	1d1d      	adds	r5, r3, #4
 8000aa2:	2d06      	cmp	r5, #6
 8000aa4:	bf8c      	ite	hi
 8000aa6:	3b03      	subhi	r3, #3
 8000aa8:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aaa:	f04f 35ff 	mov.w	r5, #4294967295
 8000aae:	fa05 f404 	lsl.w	r4, r5, r4
 8000ab2:	ea21 0104 	bic.w	r1, r1, r4
 8000ab6:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ab8:	fa05 f303 	lsl.w	r3, r5, r3
 8000abc:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac0:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8000ac2:	2800      	cmp	r0, #0
 8000ac4:	db09      	blt.n	8000ada <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac6:	0109      	lsls	r1, r1, #4
 8000ac8:	b2c9      	uxtb	r1, r1
 8000aca:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000ace:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000ad2:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000ad6:	bc30      	pop	{r4, r5}
 8000ad8:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ada:	f000 000f 	and.w	r0, r0, #15
 8000ade:	0109      	lsls	r1, r1, #4
 8000ae0:	b2c9      	uxtb	r1, r1
 8000ae2:	4b02      	ldr	r3, [pc, #8]	; (8000aec <HAL_NVIC_SetPriority+0x60>)
 8000ae4:	5419      	strb	r1, [r3, r0]
 8000ae6:	e7f6      	b.n	8000ad6 <HAL_NVIC_SetPriority+0x4a>
 8000ae8:	e000ed00 	.word	0xe000ed00
 8000aec:	e000ed14 	.word	0xe000ed14

08000af0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000af0:	2800      	cmp	r0, #0
 8000af2:	db08      	blt.n	8000b06 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000af4:	0942      	lsrs	r2, r0, #5
 8000af6:	f000 001f 	and.w	r0, r0, #31
 8000afa:	2301      	movs	r3, #1
 8000afc:	fa03 f000 	lsl.w	r0, r3, r0
 8000b00:	4b01      	ldr	r3, [pc, #4]	; (8000b08 <HAL_NVIC_EnableIRQ+0x18>)
 8000b02:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000b06:	4770      	bx	lr
 8000b08:	e000e100 	.word	0xe000e100

08000b0c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b0c:	3801      	subs	r0, #1
 8000b0e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b12:	d20a      	bcs.n	8000b2a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b14:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <HAL_SYSTICK_Config+0x24>)
 8000b16:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b18:	4a06      	ldr	r2, [pc, #24]	; (8000b34 <HAL_SYSTICK_Config+0x28>)
 8000b1a:	21f0      	movs	r1, #240	; 0xf0
 8000b1c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b20:	2000      	movs	r0, #0
 8000b22:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b24:	2207      	movs	r2, #7
 8000b26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b28:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000b2a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	e000e010 	.word	0xe000e010
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000b38:	b360      	cbz	r0, 8000b94 <HAL_DMA_Init+0x5c>
{
 8000b3a:	b410      	push	{r4}
 8000b3c:	4602      	mov	r2, r0
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000b3e:	6801      	ldr	r1, [r0, #0]
 8000b40:	4b15      	ldr	r3, [pc, #84]	; (8000b98 <HAL_DMA_Init+0x60>)
 8000b42:	440b      	add	r3, r1
 8000b44:	4815      	ldr	r0, [pc, #84]	; (8000b9c <HAL_DMA_Init+0x64>)
 8000b46:	fba0 0303 	umull	r0, r3, r0, r3
 8000b4a:	091b      	lsrs	r3, r3, #4
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	6413      	str	r3, [r2, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000b50:	4b13      	ldr	r3, [pc, #76]	; (8000ba0 <HAL_DMA_Init+0x68>)
 8000b52:	63d3      	str	r3, [r2, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000b54:	2302      	movs	r3, #2
 8000b56:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000b5a:	6808      	ldr	r0, [r1, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000b5c:	f420 507f 	bic.w	r0, r0, #16320	; 0x3fc0
 8000b60:	f020 0030 	bic.w	r0, r0, #48	; 0x30
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000b64:	6853      	ldr	r3, [r2, #4]
 8000b66:	6894      	ldr	r4, [r2, #8]
 8000b68:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b6a:	68d4      	ldr	r4, [r2, #12]
 8000b6c:	4323      	orrs	r3, r4
 8000b6e:	6914      	ldr	r4, [r2, #16]
 8000b70:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b72:	6954      	ldr	r4, [r2, #20]
 8000b74:	4323      	orrs	r3, r4
 8000b76:	6994      	ldr	r4, [r2, #24]
 8000b78:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b7a:	69d4      	ldr	r4, [r2, #28]
 8000b7c:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8000b7e:	4303      	orrs	r3, r0

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000b80:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b82:	2000      	movs	r0, #0
 8000b84:	6390      	str	r0, [r2, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000b86:	2301      	movs	r3, #1
 8000b88:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000b8c:	f882 0020 	strb.w	r0, [r2, #32]

  return HAL_OK;
}
 8000b90:	bc10      	pop	{r4}
 8000b92:	4770      	bx	lr
    return HAL_ERROR;
 8000b94:	2001      	movs	r0, #1
}
 8000b96:	4770      	bx	lr
 8000b98:	bffdfff8 	.word	0xbffdfff8
 8000b9c:	cccccccd 	.word	0xcccccccd
 8000ba0:	40020000 	.word	0x40020000

08000ba4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ba4:	b470      	push	{r4, r5, r6}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000ba6:	f890 4020 	ldrb.w	r4, [r0, #32]
 8000baa:	2c01      	cmp	r4, #1
 8000bac:	d042      	beq.n	8000c34 <HAL_DMA_Start_IT+0x90>
 8000bae:	2401      	movs	r4, #1
 8000bb0:	f880 4020 	strb.w	r4, [r0, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000bb4:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
 8000bb8:	2c01      	cmp	r4, #1
 8000bba:	d005      	beq.n	8000bc8 <HAL_DMA_Start_IT+0x24>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	f880 3020 	strb.w	r3, [r0, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000bc2:	2002      	movs	r0, #2
  }    
  return status;
}
 8000bc4:	bc70      	pop	{r4, r5, r6}
 8000bc6:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8000bc8:	2402      	movs	r4, #2
 8000bca:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000bce:	2400      	movs	r4, #0
 8000bd0:	6384      	str	r4, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8000bd2:	6805      	ldr	r5, [r0, #0]
 8000bd4:	682c      	ldr	r4, [r5, #0]
 8000bd6:	f024 0401 	bic.w	r4, r4, #1
 8000bda:	602c      	str	r4, [r5, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000bdc:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8000bde:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8000be0:	2401      	movs	r4, #1
 8000be2:	40b4      	lsls	r4, r6
 8000be4:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000be6:	6804      	ldr	r4, [r0, #0]
 8000be8:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000bea:	6843      	ldr	r3, [r0, #4]
 8000bec:	2b10      	cmp	r3, #16
 8000bee:	d011      	beq.n	8000c14 <HAL_DMA_Start_IT+0x70>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8000bf0:	6803      	ldr	r3, [r0, #0]
 8000bf2:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8000bf4:	6803      	ldr	r3, [r0, #0]
 8000bf6:	60da      	str	r2, [r3, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8000bf8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000bfa:	b183      	cbz	r3, 8000c1e <HAL_DMA_Start_IT+0x7a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bfc:	6802      	ldr	r2, [r0, #0]
 8000bfe:	6813      	ldr	r3, [r2, #0]
 8000c00:	f043 030e 	orr.w	r3, r3, #14
 8000c04:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8000c06:	6802      	ldr	r2, [r0, #0]
 8000c08:	6813      	ldr	r3, [r2, #0]
 8000c0a:	f043 0301 	orr.w	r3, r3, #1
 8000c0e:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000c10:	2000      	movs	r0, #0
 8000c12:	e7d7      	b.n	8000bc4 <HAL_DMA_Start_IT+0x20>
    hdma->Instance->CPAR = DstAddress;
 8000c14:	6803      	ldr	r3, [r0, #0]
 8000c16:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000c18:	6803      	ldr	r3, [r0, #0]
 8000c1a:	60d9      	str	r1, [r3, #12]
 8000c1c:	e7ec      	b.n	8000bf8 <HAL_DMA_Start_IT+0x54>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000c1e:	6802      	ldr	r2, [r0, #0]
 8000c20:	6813      	ldr	r3, [r2, #0]
 8000c22:	f023 0304 	bic.w	r3, r3, #4
 8000c26:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000c28:	6802      	ldr	r2, [r0, #0]
 8000c2a:	6813      	ldr	r3, [r2, #0]
 8000c2c:	f043 030a 	orr.w	r3, r3, #10
 8000c30:	6013      	str	r3, [r2, #0]
 8000c32:	e7e8      	b.n	8000c06 <HAL_DMA_Start_IT+0x62>
  __HAL_LOCK(hdma);
 8000c34:	2002      	movs	r0, #2
 8000c36:	e7c5      	b.n	8000bc4 <HAL_DMA_Start_IT+0x20>

08000c38 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c38:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8000c3c:	2b02      	cmp	r3, #2
 8000c3e:	d006      	beq.n	8000c4e <HAL_DMA_Abort+0x16>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c40:	2304      	movs	r3, #4
 8000c42:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8000c44:	2300      	movs	r3, #0
 8000c46:	f880 3020 	strb.w	r3, [r0, #32]
    return HAL_ERROR;
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c4e:	6802      	ldr	r2, [r0, #0]
 8000c50:	6813      	ldr	r3, [r2, #0]
 8000c52:	f023 030e 	bic.w	r3, r3, #14
 8000c56:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8000c58:	6802      	ldr	r2, [r0, #0]
 8000c5a:	6813      	ldr	r3, [r2, #0]
 8000c5c:	f023 0301 	bic.w	r3, r3, #1
 8000c60:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000c62:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8000c64:	2201      	movs	r2, #1
 8000c66:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	604b      	str	r3, [r1, #4]
  hdma->State = HAL_DMA_STATE_READY;
 8000c6e:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  __HAL_UNLOCK(hdma);      
 8000c72:	2300      	movs	r3, #0
 8000c74:	f880 3020 	strb.w	r3, [r0, #32]
  return status; 
 8000c78:	4618      	mov	r0, r3
}
 8000c7a:	4770      	bx	lr

08000c7c <HAL_DMA_Abort_IT>:
{  
 8000c7c:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c7e:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8000c82:	2b02      	cmp	r3, #2
 8000c84:	d003      	beq.n	8000c8e <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c86:	2304      	movs	r3, #4
 8000c88:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8000c8a:	2001      	movs	r0, #1
}
 8000c8c:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c8e:	6802      	ldr	r2, [r0, #0]
 8000c90:	6813      	ldr	r3, [r2, #0]
 8000c92:	f023 030e 	bic.w	r3, r3, #14
 8000c96:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8000c98:	6802      	ldr	r2, [r0, #0]
 8000c9a:	6813      	ldr	r3, [r2, #0]
 8000c9c:	f023 0301 	bic.w	r3, r3, #1
 8000ca0:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000ca2:	6803      	ldr	r3, [r0, #0]
 8000ca4:	4a18      	ldr	r2, [pc, #96]	; (8000d08 <HAL_DMA_Abort_IT+0x8c>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d013      	beq.n	8000cd2 <HAL_DMA_Abort_IT+0x56>
 8000caa:	3214      	adds	r2, #20
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d01e      	beq.n	8000cee <HAL_DMA_Abort_IT+0x72>
 8000cb0:	3214      	adds	r2, #20
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d01d      	beq.n	8000cf2 <HAL_DMA_Abort_IT+0x76>
 8000cb6:	3214      	adds	r2, #20
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d01d      	beq.n	8000cf8 <HAL_DMA_Abort_IT+0x7c>
 8000cbc:	3214      	adds	r2, #20
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d01d      	beq.n	8000cfe <HAL_DMA_Abort_IT+0x82>
 8000cc2:	3214      	adds	r2, #20
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	bf0c      	ite	eq
 8000cc8:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8000ccc:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8000cd0:	e000      	b.n	8000cd4 <HAL_DMA_Abort_IT+0x58>
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	4a0d      	ldr	r2, [pc, #52]	; (8000d0c <HAL_DMA_Abort_IT+0x90>)
 8000cd6:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000cde:	2300      	movs	r3, #0
 8000ce0:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8000ce4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000ce6:	b16b      	cbz	r3, 8000d04 <HAL_DMA_Abort_IT+0x88>
      hdma->XferAbortCallback(hdma);
 8000ce8:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000cea:	2000      	movs	r0, #0
 8000cec:	e7ce      	b.n	8000c8c <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000cee:	2310      	movs	r3, #16
 8000cf0:	e7f0      	b.n	8000cd4 <HAL_DMA_Abort_IT+0x58>
 8000cf2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cf6:	e7ed      	b.n	8000cd4 <HAL_DMA_Abort_IT+0x58>
 8000cf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cfc:	e7ea      	b.n	8000cd4 <HAL_DMA_Abort_IT+0x58>
 8000cfe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d02:	e7e7      	b.n	8000cd4 <HAL_DMA_Abort_IT+0x58>
  HAL_StatusTypeDef status = HAL_OK;
 8000d04:	2000      	movs	r0, #0
 8000d06:	e7c1      	b.n	8000c8c <HAL_DMA_Abort_IT+0x10>
 8000d08:	40020008 	.word	0x40020008
 8000d0c:	40020000 	.word	0x40020000

08000d10 <HAL_DMA_IRQHandler>:
{
 8000d10:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000d12:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8000d14:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000d16:	6804      	ldr	r4, [r0, #0]
 8000d18:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000d1a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8000d1c:	2304      	movs	r3, #4
 8000d1e:	408b      	lsls	r3, r1
 8000d20:	4213      	tst	r3, r2
 8000d22:	d034      	beq.n	8000d8e <HAL_DMA_IRQHandler+0x7e>
 8000d24:	f015 0f04 	tst.w	r5, #4
 8000d28:	d031      	beq.n	8000d8e <HAL_DMA_IRQHandler+0x7e>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d2a:	6823      	ldr	r3, [r4, #0]
 8000d2c:	f013 0f20 	tst.w	r3, #32
 8000d30:	d103      	bne.n	8000d3a <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000d32:	6823      	ldr	r3, [r4, #0]
 8000d34:	f023 0304 	bic.w	r3, r3, #4
 8000d38:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000d3a:	6803      	ldr	r3, [r0, #0]
 8000d3c:	4a42      	ldr	r2, [pc, #264]	; (8000e48 <HAL_DMA_IRQHandler+0x138>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d013      	beq.n	8000d6a <HAL_DMA_IRQHandler+0x5a>
 8000d42:	3214      	adds	r2, #20
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d017      	beq.n	8000d78 <HAL_DMA_IRQHandler+0x68>
 8000d48:	3214      	adds	r2, #20
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d016      	beq.n	8000d7c <HAL_DMA_IRQHandler+0x6c>
 8000d4e:	3214      	adds	r2, #20
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d016      	beq.n	8000d82 <HAL_DMA_IRQHandler+0x72>
 8000d54:	3214      	adds	r2, #20
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d016      	beq.n	8000d88 <HAL_DMA_IRQHandler+0x78>
 8000d5a:	3214      	adds	r2, #20
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	bf0c      	ite	eq
 8000d60:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8000d64:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8000d68:	e000      	b.n	8000d6c <HAL_DMA_IRQHandler+0x5c>
 8000d6a:	2304      	movs	r3, #4
 8000d6c:	4a37      	ldr	r2, [pc, #220]	; (8000e4c <HAL_DMA_IRQHandler+0x13c>)
 8000d6e:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8000d70:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000d72:	b103      	cbz	r3, 8000d76 <HAL_DMA_IRQHandler+0x66>
      hdma->XferHalfCpltCallback(hdma);
 8000d74:	4798      	blx	r3
}
 8000d76:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000d78:	2340      	movs	r3, #64	; 0x40
 8000d7a:	e7f7      	b.n	8000d6c <HAL_DMA_IRQHandler+0x5c>
 8000d7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d80:	e7f4      	b.n	8000d6c <HAL_DMA_IRQHandler+0x5c>
 8000d82:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d86:	e7f1      	b.n	8000d6c <HAL_DMA_IRQHandler+0x5c>
 8000d88:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000d8c:	e7ee      	b.n	8000d6c <HAL_DMA_IRQHandler+0x5c>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000d8e:	2302      	movs	r3, #2
 8000d90:	408b      	lsls	r3, r1
 8000d92:	4213      	tst	r3, r2
 8000d94:	d03b      	beq.n	8000e0e <HAL_DMA_IRQHandler+0xfe>
 8000d96:	f015 0f02 	tst.w	r5, #2
 8000d9a:	d038      	beq.n	8000e0e <HAL_DMA_IRQHandler+0xfe>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d9c:	6823      	ldr	r3, [r4, #0]
 8000d9e:	f013 0f20 	tst.w	r3, #32
 8000da2:	d106      	bne.n	8000db2 <HAL_DMA_IRQHandler+0xa2>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000da4:	6823      	ldr	r3, [r4, #0]
 8000da6:	f023 030a 	bic.w	r3, r3, #10
 8000daa:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8000dac:	2301      	movs	r3, #1
 8000dae:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000db2:	6803      	ldr	r3, [r0, #0]
 8000db4:	4a24      	ldr	r2, [pc, #144]	; (8000e48 <HAL_DMA_IRQHandler+0x138>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d013      	beq.n	8000de2 <HAL_DMA_IRQHandler+0xd2>
 8000dba:	3214      	adds	r2, #20
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d01b      	beq.n	8000df8 <HAL_DMA_IRQHandler+0xe8>
 8000dc0:	3214      	adds	r2, #20
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d01a      	beq.n	8000dfc <HAL_DMA_IRQHandler+0xec>
 8000dc6:	3214      	adds	r2, #20
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d01a      	beq.n	8000e02 <HAL_DMA_IRQHandler+0xf2>
 8000dcc:	3214      	adds	r2, #20
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d01a      	beq.n	8000e08 <HAL_DMA_IRQHandler+0xf8>
 8000dd2:	3214      	adds	r2, #20
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	bf0c      	ite	eq
 8000dd8:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8000ddc:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8000de0:	e000      	b.n	8000de4 <HAL_DMA_IRQHandler+0xd4>
 8000de2:	2302      	movs	r3, #2
 8000de4:	4a19      	ldr	r2, [pc, #100]	; (8000e4c <HAL_DMA_IRQHandler+0x13c>)
 8000de6:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8000de8:	2300      	movs	r3, #0
 8000dea:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8000dee:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d0c0      	beq.n	8000d76 <HAL_DMA_IRQHandler+0x66>
      hdma->XferCpltCallback(hdma);
 8000df4:	4798      	blx	r3
 8000df6:	e7be      	b.n	8000d76 <HAL_DMA_IRQHandler+0x66>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000df8:	2320      	movs	r3, #32
 8000dfa:	e7f3      	b.n	8000de4 <HAL_DMA_IRQHandler+0xd4>
 8000dfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e00:	e7f0      	b.n	8000de4 <HAL_DMA_IRQHandler+0xd4>
 8000e02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e06:	e7ed      	b.n	8000de4 <HAL_DMA_IRQHandler+0xd4>
 8000e08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e0c:	e7ea      	b.n	8000de4 <HAL_DMA_IRQHandler+0xd4>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000e0e:	2308      	movs	r3, #8
 8000e10:	fa03 f101 	lsl.w	r1, r3, r1
 8000e14:	4211      	tst	r1, r2
 8000e16:	d0ae      	beq.n	8000d76 <HAL_DMA_IRQHandler+0x66>
 8000e18:	f015 0f08 	tst.w	r5, #8
 8000e1c:	d0ab      	beq.n	8000d76 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e1e:	6823      	ldr	r3, [r4, #0]
 8000e20:	f023 030e 	bic.w	r3, r3, #14
 8000e24:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e26:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8000e28:	2301      	movs	r3, #1
 8000e2a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000e2c:	fa03 f202 	lsl.w	r2, r3, r2
 8000e30:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000e32:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8000e34:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000e38:	2300      	movs	r3, #0
 8000e3a:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8000e3e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d098      	beq.n	8000d76 <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 8000e44:	4798      	blx	r3
  return;
 8000e46:	e796      	b.n	8000d76 <HAL_DMA_IRQHandler+0x66>
 8000e48:	40020008 	.word	0x40020008
 8000e4c:	40020000 	.word	0x40020000

08000e50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e54:	b083      	sub	sp, #12
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e56:	680f      	ldr	r7, [r1, #0]
 8000e58:	2f00      	cmp	r7, #0
 8000e5a:	f000 80f8 	beq.w	800104e <HAL_GPIO_Init+0x1fe>
  uint32_t config = 0x00u;
 8000e5e:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8000e60:	4613      	mov	r3, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e62:	f8df c200 	ldr.w	ip, [pc, #512]	; 8001064 <HAL_GPIO_Init+0x214>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e66:	4d7b      	ldr	r5, [pc, #492]	; (8001054 <HAL_GPIO_Init+0x204>)
      switch (GPIO_Init->Mode)
 8000e68:	4e7b      	ldr	r6, [pc, #492]	; (8001058 <HAL_GPIO_Init+0x208>)
 8000e6a:	f8df e1fc 	ldr.w	lr, [pc, #508]	; 8001068 <HAL_GPIO_Init+0x218>
 8000e6e:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 800106c <HAL_GPIO_Init+0x21c>
 8000e72:	e09a      	b.n	8000faa <HAL_GPIO_Init+0x15a>
 8000e74:	2200      	movs	r2, #0
 8000e76:	e01e      	b.n	8000eb6 <HAL_GPIO_Init+0x66>
 8000e78:	42b4      	cmp	r4, r6
 8000e7a:	d00c      	beq.n	8000e96 <HAL_GPIO_Init+0x46>
 8000e7c:	d904      	bls.n	8000e88 <HAL_GPIO_Init+0x38>
 8000e7e:	4574      	cmp	r4, lr
 8000e80:	d009      	beq.n	8000e96 <HAL_GPIO_Init+0x46>
 8000e82:	4544      	cmp	r4, r8
 8000e84:	d007      	beq.n	8000e96 <HAL_GPIO_Init+0x46>
 8000e86:	e016      	b.n	8000eb6 <HAL_GPIO_Init+0x66>
 8000e88:	4f74      	ldr	r7, [pc, #464]	; (800105c <HAL_GPIO_Init+0x20c>)
 8000e8a:	42bc      	cmp	r4, r7
 8000e8c:	d003      	beq.n	8000e96 <HAL_GPIO_Init+0x46>
 8000e8e:	f507 2770 	add.w	r7, r7, #983040	; 0xf0000
 8000e92:	42bc      	cmp	r4, r7
 8000e94:	d10b      	bne.n	8000eae <HAL_GPIO_Init+0x5e>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e96:	688a      	ldr	r2, [r1, #8]
 8000e98:	2a00      	cmp	r2, #0
 8000e9a:	f000 80ca 	beq.w	8001032 <HAL_GPIO_Init+0x1e2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e9e:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000ea0:	bf0c      	ite	eq
 8000ea2:	f8c0 9010 	streq.w	r9, [r0, #16]
            GPIOx->BRR = ioposition;
 8000ea6:	f8c0 9014 	strne.w	r9, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000eaa:	2208      	movs	r2, #8
 8000eac:	e003      	b.n	8000eb6 <HAL_GPIO_Init+0x66>
      switch (GPIO_Init->Mode)
 8000eae:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8000eb2:	42bc      	cmp	r4, r7
 8000eb4:	d0ef      	beq.n	8000e96 <HAL_GPIO_Init+0x46>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000eb6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8000eba:	f200 80bc 	bhi.w	8001036 <HAL_GPIO_Init+0x1e6>
 8000ebe:	4607      	mov	r7, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ec0:	ea4f 0983 	mov.w	r9, r3, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ec4:	683c      	ldr	r4, [r7, #0]
 8000ec6:	f04f 0b0f 	mov.w	fp, #15
 8000eca:	fa0b fb09 	lsl.w	fp, fp, r9
 8000ece:	ea24 040b 	bic.w	r4, r4, fp
 8000ed2:	fa02 f909 	lsl.w	r9, r2, r9
 8000ed6:	ea44 0409 	orr.w	r4, r4, r9
 8000eda:	603c      	str	r4, [r7, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000edc:	684c      	ldr	r4, [r1, #4]
 8000ede:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8000ee2:	d05d      	beq.n	8000fa0 <HAL_GPIO_Init+0x150>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ee4:	f8dc 4018 	ldr.w	r4, [ip, #24]
 8000ee8:	f044 0401 	orr.w	r4, r4, #1
 8000eec:	f8cc 4018 	str.w	r4, [ip, #24]
 8000ef0:	f8dc 4018 	ldr.w	r4, [ip, #24]
 8000ef4:	f004 0401 	and.w	r4, r4, #1
 8000ef8:	9401      	str	r4, [sp, #4]
 8000efa:	9c01      	ldr	r4, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8000efc:	f023 0403 	bic.w	r4, r3, #3
 8000f00:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8000f04:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 8000f08:	f8d4 9008 	ldr.w	r9, [r4, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f0c:	f003 0703 	and.w	r7, r3, #3
 8000f10:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 8000f14:	270f      	movs	r7, #15
 8000f16:	fa07 f70b 	lsl.w	r7, r7, fp
 8000f1a:	ea29 0907 	bic.w	r9, r9, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f1e:	4f50      	ldr	r7, [pc, #320]	; (8001060 <HAL_GPIO_Init+0x210>)
 8000f20:	42b8      	cmp	r0, r7
 8000f22:	f000 808e 	beq.w	8001042 <HAL_GPIO_Init+0x1f2>
 8000f26:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000f2a:	42b8      	cmp	r0, r7
 8000f2c:	f000 808b 	beq.w	8001046 <HAL_GPIO_Init+0x1f6>
 8000f30:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000f34:	42b8      	cmp	r0, r7
 8000f36:	f000 8088 	beq.w	800104a <HAL_GPIO_Init+0x1fa>
 8000f3a:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000f3e:	42b8      	cmp	r0, r7
 8000f40:	bf0c      	ite	eq
 8000f42:	2703      	moveq	r7, #3
 8000f44:	2704      	movne	r7, #4
 8000f46:	fa07 f70b 	lsl.w	r7, r7, fp
 8000f4a:	ea47 0709 	orr.w	r7, r7, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8000f4e:	60a7      	str	r7, [r4, #8]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f50:	684c      	ldr	r4, [r1, #4]
 8000f52:	f414 3f80 	tst.w	r4, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000f56:	682c      	ldr	r4, [r5, #0]
 8000f58:	bf14      	ite	ne
 8000f5a:	ea44 040a 	orrne.w	r4, r4, sl
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f5e:	ea24 040a 	biceq.w	r4, r4, sl
 8000f62:	602c      	str	r4, [r5, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f64:	684c      	ldr	r4, [r1, #4]
 8000f66:	f414 3f00 	tst.w	r4, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000f6a:	686c      	ldr	r4, [r5, #4]
 8000f6c:	bf14      	ite	ne
 8000f6e:	ea44 040a 	orrne.w	r4, r4, sl
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f72:	ea24 040a 	biceq.w	r4, r4, sl
 8000f76:	606c      	str	r4, [r5, #4]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f78:	684c      	ldr	r4, [r1, #4]
 8000f7a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f7e:	68ac      	ldr	r4, [r5, #8]
 8000f80:	bf14      	ite	ne
 8000f82:	ea44 040a 	orrne.w	r4, r4, sl
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f86:	ea24 040a 	biceq.w	r4, r4, sl
 8000f8a:	60ac      	str	r4, [r5, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f8c:	684c      	ldr	r4, [r1, #4]
 8000f8e:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f92:	68ec      	ldr	r4, [r5, #12]
 8000f94:	bf14      	ite	ne
 8000f96:	ea44 040a 	orrne.w	r4, r4, sl
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f9a:	ea24 040a 	biceq.w	r4, r4, sl
 8000f9e:	60ec      	str	r4, [r5, #12]
        }
      }
    }

	position++;
 8000fa0:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fa2:	680f      	ldr	r7, [r1, #0]
 8000fa4:	fa37 f403 	lsrs.w	r4, r7, r3
 8000fa8:	d051      	beq.n	800104e <HAL_GPIO_Init+0x1fe>
    ioposition = (0x01uL << position);
 8000faa:	f04f 0901 	mov.w	r9, #1
 8000fae:	fa09 f903 	lsl.w	r9, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fb2:	ea09 0a07 	and.w	sl, r9, r7
    if (iocurrent == ioposition)
 8000fb6:	ea39 0407 	bics.w	r4, r9, r7
 8000fba:	d1f1      	bne.n	8000fa0 <HAL_GPIO_Init+0x150>
      switch (GPIO_Init->Mode)
 8000fbc:	684c      	ldr	r4, [r1, #4]
 8000fbe:	2c12      	cmp	r4, #18
 8000fc0:	f63f af5a 	bhi.w	8000e78 <HAL_GPIO_Init+0x28>
 8000fc4:	2c12      	cmp	r4, #18
 8000fc6:	f63f af76 	bhi.w	8000eb6 <HAL_GPIO_Init+0x66>
 8000fca:	a701      	add	r7, pc, #4	; (adr r7, 8000fd0 <HAL_GPIO_Init+0x180>)
 8000fcc:	f857 f024 	ldr.w	pc, [r7, r4, lsl #2]
 8000fd0:	08000e97 	.word	0x08000e97
 8000fd4:	0800101d 	.word	0x0800101d
 8000fd8:	08001027 	.word	0x08001027
 8000fdc:	08000e75 	.word	0x08000e75
 8000fe0:	08000eb7 	.word	0x08000eb7
 8000fe4:	08000eb7 	.word	0x08000eb7
 8000fe8:	08000eb7 	.word	0x08000eb7
 8000fec:	08000eb7 	.word	0x08000eb7
 8000ff0:	08000eb7 	.word	0x08000eb7
 8000ff4:	08000eb7 	.word	0x08000eb7
 8000ff8:	08000eb7 	.word	0x08000eb7
 8000ffc:	08000eb7 	.word	0x08000eb7
 8001000:	08000eb7 	.word	0x08000eb7
 8001004:	08000eb7 	.word	0x08000eb7
 8001008:	08000eb7 	.word	0x08000eb7
 800100c:	08000eb7 	.word	0x08000eb7
 8001010:	08000eb7 	.word	0x08000eb7
 8001014:	08001021 	.word	0x08001021
 8001018:	0800102d 	.word	0x0800102d
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800101c:	68ca      	ldr	r2, [r1, #12]
          break;
 800101e:	e74a      	b.n	8000eb6 <HAL_GPIO_Init+0x66>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001020:	68ca      	ldr	r2, [r1, #12]
 8001022:	3204      	adds	r2, #4
          break;
 8001024:	e747      	b.n	8000eb6 <HAL_GPIO_Init+0x66>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001026:	68ca      	ldr	r2, [r1, #12]
 8001028:	3208      	adds	r2, #8
          break;
 800102a:	e744      	b.n	8000eb6 <HAL_GPIO_Init+0x66>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800102c:	68ca      	ldr	r2, [r1, #12]
 800102e:	320c      	adds	r2, #12
          break;
 8001030:	e741      	b.n	8000eb6 <HAL_GPIO_Init+0x66>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001032:	2204      	movs	r2, #4
 8001034:	e73f      	b.n	8000eb6 <HAL_GPIO_Init+0x66>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001036:	1d07      	adds	r7, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001038:	ea4f 0983 	mov.w	r9, r3, lsl #2
 800103c:	f1a9 0920 	sub.w	r9, r9, #32
 8001040:	e740      	b.n	8000ec4 <HAL_GPIO_Init+0x74>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001042:	2700      	movs	r7, #0
 8001044:	e77f      	b.n	8000f46 <HAL_GPIO_Init+0xf6>
 8001046:	2701      	movs	r7, #1
 8001048:	e77d      	b.n	8000f46 <HAL_GPIO_Init+0xf6>
 800104a:	2702      	movs	r7, #2
 800104c:	e77b      	b.n	8000f46 <HAL_GPIO_Init+0xf6>
  }
}
 800104e:	b003      	add	sp, #12
 8001050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001054:	40010400 	.word	0x40010400
 8001058:	10220000 	.word	0x10220000
 800105c:	10120000 	.word	0x10120000
 8001060:	40010800 	.word	0x40010800
 8001064:	40021000 	.word	0x40021000
 8001068:	10310000 	.word	0x10310000
 800106c:	10320000 	.word	0x10320000

08001070 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001070:	6883      	ldr	r3, [r0, #8]
 8001072:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001074:	bf14      	ite	ne
 8001076:	2001      	movne	r0, #1
 8001078:	2000      	moveq	r0, #0
 800107a:	4770      	bx	lr

0800107c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800107c:	b10a      	cbz	r2, 8001082 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800107e:	6101      	str	r1, [r0, #16]
 8001080:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001082:	0409      	lsls	r1, r1, #16
 8001084:	6101      	str	r1, [r0, #16]
  }
}
 8001086:	4770      	bx	lr

08001088 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001088:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800108a:	ea01 0203 	and.w	r2, r1, r3
 800108e:	ea21 0103 	bic.w	r1, r1, r3
 8001092:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001096:	6101      	str	r1, [r0, #16]
}
 8001098:	4770      	bx	lr

0800109a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800109a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800109c:	b087      	sub	sp, #28
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800109e:	2800      	cmp	r0, #0
 80010a0:	d07a      	beq.n	8001198 <HAL_PCD_Init+0xfe>
 80010a2:	4605      	mov	r5, r0

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80010a4:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 80010a8:	b1db      	cbz	r3, 80010e2 <HAL_PCD_Init+0x48>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80010aa:	2303      	movs	r3, #3
 80010ac:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80010b0:	6828      	ldr	r0, [r5, #0]
 80010b2:	f000 fea4 	bl	8001dfe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010b6:	462c      	mov	r4, r5
 80010b8:	f854 7b10 	ldr.w	r7, [r4], #16
 80010bc:	466e      	mov	r6, sp
 80010be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010c0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80010c2:	6823      	ldr	r3, [r4, #0]
 80010c4:	6033      	str	r3, [r6, #0]
 80010c6:	1d2b      	adds	r3, r5, #4
 80010c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010ca:	4638      	mov	r0, r7
 80010cc:	f000 fe90 	bl	8001df0 <USB_CoreInit>
 80010d0:	4604      	mov	r4, r0
 80010d2:	b158      	cbz	r0, 80010ec <HAL_PCD_Init+0x52>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010d4:	2302      	movs	r3, #2
 80010d6:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
    return HAL_ERROR;
 80010da:	2401      	movs	r4, #1
  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 80010dc:	4620      	mov	r0, r4
 80010de:	b007      	add	sp, #28
 80010e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 80010e2:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 80010e6:	f7ff fbb3 	bl	8000850 <HAL_PCD_MspInit>
 80010ea:	e7de      	b.n	80010aa <HAL_PCD_Init+0x10>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80010ec:	2100      	movs	r1, #0
 80010ee:	6828      	ldr	r0, [r5, #0]
 80010f0:	f000 fe8f 	bl	8001e12 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010f4:	6868      	ldr	r0, [r5, #4]
 80010f6:	b388      	cbz	r0, 800115c <HAL_PCD_Init+0xc2>
 80010f8:	4623      	mov	r3, r4
    hpcd->IN_ep[i].is_in = 1U;
 80010fa:	2601      	movs	r6, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80010fc:	2100      	movs	r1, #0
    hpcd->IN_ep[i].is_in = 1U;
 80010fe:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8001102:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8001106:	f882 6029 	strb.w	r6, [r2, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 800110a:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 800110e:	86d3      	strh	r3, [r2, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001110:	f882 102b 	strb.w	r1, [r2, #43]	; 0x2b
    hpcd->IN_ep[i].maxpacket = 0U;
 8001114:	6391      	str	r1, [r2, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001116:	63d1      	str	r1, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 8001118:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800111c:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8001120:	6411      	str	r1, [r2, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001122:	3301      	adds	r3, #1
 8001124:	b2db      	uxtb	r3, r3
 8001126:	4283      	cmp	r3, r0
 8001128:	d3e9      	bcc.n	80010fe <HAL_PCD_Init+0x64>
    hpcd->OUT_ep[i].is_in = 0U;
 800112a:	2200      	movs	r2, #0
 800112c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8001130:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8001134:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 8001138:	f883 4168 	strb.w	r4, [r3, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800113c:	f883 216b 	strb.w	r2, [r3, #363]	; 0x16b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001140:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001144:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001148:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800114c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8001150:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001154:	3401      	adds	r4, #1
 8001156:	b2e4      	uxtb	r4, r4
 8001158:	4284      	cmp	r4, r0
 800115a:	d3e7      	bcc.n	800112c <HAL_PCD_Init+0x92>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800115c:	462c      	mov	r4, r5
 800115e:	f854 7b10 	ldr.w	r7, [r4], #16
 8001162:	466e      	mov	r6, sp
 8001164:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001166:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001168:	6823      	ldr	r3, [r4, #0]
 800116a:	6033      	str	r3, [r6, #0]
 800116c:	1d2b      	adds	r3, r5, #4
 800116e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001170:	4638      	mov	r0, r7
 8001172:	f000 fe50 	bl	8001e16 <USB_DevInit>
 8001176:	4604      	mov	r4, r0
 8001178:	b120      	cbz	r0, 8001184 <HAL_PCD_Init+0xea>
    hpcd->State = HAL_PCD_STATE_ERROR;
 800117a:	2302      	movs	r3, #2
 800117c:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
    return HAL_ERROR;
 8001180:	2401      	movs	r4, #1
 8001182:	e7ab      	b.n	80010dc <HAL_PCD_Init+0x42>
  hpcd->USB_Address = 0U;
 8001184:	2300      	movs	r3, #0
 8001186:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800118a:	2301      	movs	r3, #1
 800118c:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001190:	6828      	ldr	r0, [r5, #0]
 8001192:	f000 fe53 	bl	8001e3c <USB_DevDisconnect>
  return HAL_OK;
 8001196:	e7a1      	b.n	80010dc <HAL_PCD_Init+0x42>
    return HAL_ERROR;
 8001198:	2401      	movs	r4, #1
 800119a:	e79f      	b.n	80010dc <HAL_PCD_Init+0x42>

0800119c <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800119c:	2800      	cmp	r0, #0
 800119e:	f000 8201 	beq.w	80015a4 <HAL_RCC_OscConfig+0x408>
{
 80011a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011aa:	6803      	ldr	r3, [r0, #0]
 80011ac:	f013 0f01 	tst.w	r3, #1
 80011b0:	d02c      	beq.n	800120c <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011b2:	4baa      	ldr	r3, [pc, #680]	; (800145c <HAL_RCC_OscConfig+0x2c0>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f003 030c 	and.w	r3, r3, #12
 80011ba:	2b04      	cmp	r3, #4
 80011bc:	d01d      	beq.n	80011fa <HAL_RCC_OscConfig+0x5e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011be:	4ba7      	ldr	r3, [pc, #668]	; (800145c <HAL_RCC_OscConfig+0x2c0>)
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f003 030c 	and.w	r3, r3, #12
 80011c6:	2b08      	cmp	r3, #8
 80011c8:	d012      	beq.n	80011f0 <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011ca:	6863      	ldr	r3, [r4, #4]
 80011cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011d0:	d041      	beq.n	8001256 <HAL_RCC_OscConfig+0xba>
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d155      	bne.n	8001282 <HAL_RCC_OscConfig+0xe6>
 80011d6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80011da:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	e037      	b.n	8001260 <HAL_RCC_OscConfig+0xc4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011f0:	4b9a      	ldr	r3, [pc, #616]	; (800145c <HAL_RCC_OscConfig+0x2c0>)
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80011f8:	d0e7      	beq.n	80011ca <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011fa:	4b98      	ldr	r3, [pc, #608]	; (800145c <HAL_RCC_OscConfig+0x2c0>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001202:	d003      	beq.n	800120c <HAL_RCC_OscConfig+0x70>
 8001204:	6863      	ldr	r3, [r4, #4]
 8001206:	2b00      	cmp	r3, #0
 8001208:	f000 81ce 	beq.w	80015a8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800120c:	6823      	ldr	r3, [r4, #0]
 800120e:	f013 0f02 	tst.w	r3, #2
 8001212:	d075      	beq.n	8001300 <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001214:	4b91      	ldr	r3, [pc, #580]	; (800145c <HAL_RCC_OscConfig+0x2c0>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f013 0f0c 	tst.w	r3, #12
 800121c:	d05f      	beq.n	80012de <HAL_RCC_OscConfig+0x142>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800121e:	4b8f      	ldr	r3, [pc, #572]	; (800145c <HAL_RCC_OscConfig+0x2c0>)
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f003 030c 	and.w	r3, r3, #12
 8001226:	2b08      	cmp	r3, #8
 8001228:	d054      	beq.n	80012d4 <HAL_RCC_OscConfig+0x138>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800122a:	6923      	ldr	r3, [r4, #16]
 800122c:	2b00      	cmp	r3, #0
 800122e:	f000 8089 	beq.w	8001344 <HAL_RCC_OscConfig+0x1a8>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001232:	4b8b      	ldr	r3, [pc, #556]	; (8001460 <HAL_RCC_OscConfig+0x2c4>)
 8001234:	2201      	movs	r2, #1
 8001236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001238:	f7ff fbfc 	bl	8000a34 <HAL_GetTick>
 800123c:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800123e:	4e87      	ldr	r6, [pc, #540]	; (800145c <HAL_RCC_OscConfig+0x2c0>)
 8001240:	6833      	ldr	r3, [r6, #0]
 8001242:	f013 0f02 	tst.w	r3, #2
 8001246:	d174      	bne.n	8001332 <HAL_RCC_OscConfig+0x196>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001248:	f7ff fbf4 	bl	8000a34 <HAL_GetTick>
 800124c:	1b40      	subs	r0, r0, r5
 800124e:	2802      	cmp	r0, #2
 8001250:	d9f6      	bls.n	8001240 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_TIMEOUT;
 8001252:	2003      	movs	r0, #3
 8001254:	e1ad      	b.n	80015b2 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001256:	4a81      	ldr	r2, [pc, #516]	; (800145c <HAL_RCC_OscConfig+0x2c0>)
 8001258:	6813      	ldr	r3, [r2, #0]
 800125a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800125e:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001260:	6863      	ldr	r3, [r4, #4]
 8001262:	b343      	cbz	r3, 80012b6 <HAL_RCC_OscConfig+0x11a>
        tickstart = HAL_GetTick();
 8001264:	f7ff fbe6 	bl	8000a34 <HAL_GetTick>
 8001268:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800126a:	4e7c      	ldr	r6, [pc, #496]	; (800145c <HAL_RCC_OscConfig+0x2c0>)
 800126c:	6833      	ldr	r3, [r6, #0]
 800126e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001272:	d1cb      	bne.n	800120c <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001274:	f7ff fbde 	bl	8000a34 <HAL_GetTick>
 8001278:	1b40      	subs	r0, r0, r5
 800127a:	2864      	cmp	r0, #100	; 0x64
 800127c:	d9f6      	bls.n	800126c <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 800127e:	2003      	movs	r0, #3
 8001280:	e197      	b.n	80015b2 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001282:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001286:	d009      	beq.n	800129c <HAL_RCC_OscConfig+0x100>
 8001288:	4b74      	ldr	r3, [pc, #464]	; (800145c <HAL_RCC_OscConfig+0x2c0>)
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	e7e1      	b.n	8001260 <HAL_RCC_OscConfig+0xc4>
 800129c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80012a0:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	e7d4      	b.n	8001260 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 80012b6:	f7ff fbbd 	bl	8000a34 <HAL_GetTick>
 80012ba:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012bc:	4e67      	ldr	r6, [pc, #412]	; (800145c <HAL_RCC_OscConfig+0x2c0>)
 80012be:	6833      	ldr	r3, [r6, #0]
 80012c0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80012c4:	d0a2      	beq.n	800120c <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012c6:	f7ff fbb5 	bl	8000a34 <HAL_GetTick>
 80012ca:	1b40      	subs	r0, r0, r5
 80012cc:	2864      	cmp	r0, #100	; 0x64
 80012ce:	d9f6      	bls.n	80012be <HAL_RCC_OscConfig+0x122>
            return HAL_TIMEOUT;
 80012d0:	2003      	movs	r0, #3
 80012d2:	e16e      	b.n	80015b2 <HAL_RCC_OscConfig+0x416>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80012d4:	4b61      	ldr	r3, [pc, #388]	; (800145c <HAL_RCC_OscConfig+0x2c0>)
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80012dc:	d1a5      	bne.n	800122a <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012de:	4b5f      	ldr	r3, [pc, #380]	; (800145c <HAL_RCC_OscConfig+0x2c0>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f013 0f02 	tst.w	r3, #2
 80012e6:	d003      	beq.n	80012f0 <HAL_RCC_OscConfig+0x154>
 80012e8:	6923      	ldr	r3, [r4, #16]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	f040 815e 	bne.w	80015ac <HAL_RCC_OscConfig+0x410>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012f0:	4a5a      	ldr	r2, [pc, #360]	; (800145c <HAL_RCC_OscConfig+0x2c0>)
 80012f2:	6813      	ldr	r3, [r2, #0]
 80012f4:	6961      	ldr	r1, [r4, #20]
 80012f6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80012fa:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80012fe:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001300:	6823      	ldr	r3, [r4, #0]
 8001302:	f013 0f08 	tst.w	r3, #8
 8001306:	d03c      	beq.n	8001382 <HAL_RCC_OscConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001308:	69a3      	ldr	r3, [r4, #24]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d04f      	beq.n	80013ae <HAL_RCC_OscConfig+0x212>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800130e:	4b55      	ldr	r3, [pc, #340]	; (8001464 <HAL_RCC_OscConfig+0x2c8>)
 8001310:	2201      	movs	r2, #1
 8001312:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001314:	f7ff fb8e 	bl	8000a34 <HAL_GetTick>
 8001318:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800131a:	4e50      	ldr	r6, [pc, #320]	; (800145c <HAL_RCC_OscConfig+0x2c0>)
 800131c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800131e:	f013 0f02 	tst.w	r3, #2
 8001322:	d121      	bne.n	8001368 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001324:	f7ff fb86 	bl	8000a34 <HAL_GetTick>
 8001328:	1b40      	subs	r0, r0, r5
 800132a:	2802      	cmp	r0, #2
 800132c:	d9f6      	bls.n	800131c <HAL_RCC_OscConfig+0x180>
        {
          return HAL_TIMEOUT;
 800132e:	2003      	movs	r0, #3
 8001330:	e13f      	b.n	80015b2 <HAL_RCC_OscConfig+0x416>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001332:	4a4a      	ldr	r2, [pc, #296]	; (800145c <HAL_RCC_OscConfig+0x2c0>)
 8001334:	6813      	ldr	r3, [r2, #0]
 8001336:	6961      	ldr	r1, [r4, #20]
 8001338:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800133c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001340:	6013      	str	r3, [r2, #0]
 8001342:	e7dd      	b.n	8001300 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8001344:	4b46      	ldr	r3, [pc, #280]	; (8001460 <HAL_RCC_OscConfig+0x2c4>)
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800134a:	f7ff fb73 	bl	8000a34 <HAL_GetTick>
 800134e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001350:	4e42      	ldr	r6, [pc, #264]	; (800145c <HAL_RCC_OscConfig+0x2c0>)
 8001352:	6833      	ldr	r3, [r6, #0]
 8001354:	f013 0f02 	tst.w	r3, #2
 8001358:	d0d2      	beq.n	8001300 <HAL_RCC_OscConfig+0x164>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800135a:	f7ff fb6b 	bl	8000a34 <HAL_GetTick>
 800135e:	1b40      	subs	r0, r0, r5
 8001360:	2802      	cmp	r0, #2
 8001362:	d9f6      	bls.n	8001352 <HAL_RCC_OscConfig+0x1b6>
            return HAL_TIMEOUT;
 8001364:	2003      	movs	r0, #3
 8001366:	e124      	b.n	80015b2 <HAL_RCC_OscConfig+0x416>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001368:	4b3f      	ldr	r3, [pc, #252]	; (8001468 <HAL_RCC_OscConfig+0x2cc>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a3f      	ldr	r2, [pc, #252]	; (800146c <HAL_RCC_OscConfig+0x2d0>)
 800136e:	fba2 2303 	umull	r2, r3, r2, r3
 8001372:	0a5b      	lsrs	r3, r3, #9
 8001374:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001376:	bf00      	nop
  }
  while (Delay --);
 8001378:	9b01      	ldr	r3, [sp, #4]
 800137a:	1e5a      	subs	r2, r3, #1
 800137c:	9201      	str	r2, [sp, #4]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d1f9      	bne.n	8001376 <HAL_RCC_OscConfig+0x1da>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001382:	6823      	ldr	r3, [r4, #0]
 8001384:	f013 0f04 	tst.w	r3, #4
 8001388:	f000 809c 	beq.w	80014c4 <HAL_RCC_OscConfig+0x328>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800138c:	4b33      	ldr	r3, [pc, #204]	; (800145c <HAL_RCC_OscConfig+0x2c0>)
 800138e:	69db      	ldr	r3, [r3, #28]
 8001390:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001394:	d11d      	bne.n	80013d2 <HAL_RCC_OscConfig+0x236>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001396:	4b31      	ldr	r3, [pc, #196]	; (800145c <HAL_RCC_OscConfig+0x2c0>)
 8001398:	69da      	ldr	r2, [r3, #28]
 800139a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800139e:	61da      	str	r2, [r3, #28]
 80013a0:	69db      	ldr	r3, [r3, #28]
 80013a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a6:	9300      	str	r3, [sp, #0]
 80013a8:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 80013aa:	2501      	movs	r5, #1
 80013ac:	e012      	b.n	80013d4 <HAL_RCC_OscConfig+0x238>
      __HAL_RCC_LSI_DISABLE();
 80013ae:	4b2d      	ldr	r3, [pc, #180]	; (8001464 <HAL_RCC_OscConfig+0x2c8>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80013b4:	f7ff fb3e 	bl	8000a34 <HAL_GetTick>
 80013b8:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013ba:	4e28      	ldr	r6, [pc, #160]	; (800145c <HAL_RCC_OscConfig+0x2c0>)
 80013bc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80013be:	f013 0f02 	tst.w	r3, #2
 80013c2:	d0de      	beq.n	8001382 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013c4:	f7ff fb36 	bl	8000a34 <HAL_GetTick>
 80013c8:	1b40      	subs	r0, r0, r5
 80013ca:	2802      	cmp	r0, #2
 80013cc:	d9f6      	bls.n	80013bc <HAL_RCC_OscConfig+0x220>
          return HAL_TIMEOUT;
 80013ce:	2003      	movs	r0, #3
 80013d0:	e0ef      	b.n	80015b2 <HAL_RCC_OscConfig+0x416>
    FlagStatus       pwrclkchanged = RESET;
 80013d2:	2500      	movs	r5, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013d4:	4b26      	ldr	r3, [pc, #152]	; (8001470 <HAL_RCC_OscConfig+0x2d4>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80013dc:	d011      	beq.n	8001402 <HAL_RCC_OscConfig+0x266>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013de:	68e3      	ldr	r3, [r4, #12]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d022      	beq.n	800142a <HAL_RCC_OscConfig+0x28e>
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d145      	bne.n	8001474 <HAL_RCC_OscConfig+0x2d8>
 80013e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80013ec:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80013f0:	6a1a      	ldr	r2, [r3, #32]
 80013f2:	f022 0201 	bic.w	r2, r2, #1
 80013f6:	621a      	str	r2, [r3, #32]
 80013f8:	6a1a      	ldr	r2, [r3, #32]
 80013fa:	f022 0204 	bic.w	r2, r2, #4
 80013fe:	621a      	str	r2, [r3, #32]
 8001400:	e018      	b.n	8001434 <HAL_RCC_OscConfig+0x298>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001402:	4a1b      	ldr	r2, [pc, #108]	; (8001470 <HAL_RCC_OscConfig+0x2d4>)
 8001404:	6813      	ldr	r3, [r2, #0]
 8001406:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800140a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800140c:	f7ff fb12 	bl	8000a34 <HAL_GetTick>
 8001410:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001412:	4f17      	ldr	r7, [pc, #92]	; (8001470 <HAL_RCC_OscConfig+0x2d4>)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	f413 7f80 	tst.w	r3, #256	; 0x100
 800141a:	d1e0      	bne.n	80013de <HAL_RCC_OscConfig+0x242>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800141c:	f7ff fb0a 	bl	8000a34 <HAL_GetTick>
 8001420:	1b80      	subs	r0, r0, r6
 8001422:	2864      	cmp	r0, #100	; 0x64
 8001424:	d9f6      	bls.n	8001414 <HAL_RCC_OscConfig+0x278>
          return HAL_TIMEOUT;
 8001426:	2003      	movs	r0, #3
 8001428:	e0c3      	b.n	80015b2 <HAL_RCC_OscConfig+0x416>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800142a:	4a0c      	ldr	r2, [pc, #48]	; (800145c <HAL_RCC_OscConfig+0x2c0>)
 800142c:	6a13      	ldr	r3, [r2, #32]
 800142e:	f043 0301 	orr.w	r3, r3, #1
 8001432:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001434:	68e3      	ldr	r3, [r4, #12]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d032      	beq.n	80014a0 <HAL_RCC_OscConfig+0x304>
      tickstart = HAL_GetTick();
 800143a:	f7ff fafb 	bl	8000a34 <HAL_GetTick>
 800143e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001440:	4f06      	ldr	r7, [pc, #24]	; (800145c <HAL_RCC_OscConfig+0x2c0>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001442:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001446:	6a3b      	ldr	r3, [r7, #32]
 8001448:	f013 0f02 	tst.w	r3, #2
 800144c:	d139      	bne.n	80014c2 <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800144e:	f7ff faf1 	bl	8000a34 <HAL_GetTick>
 8001452:	1b80      	subs	r0, r0, r6
 8001454:	4540      	cmp	r0, r8
 8001456:	d9f6      	bls.n	8001446 <HAL_RCC_OscConfig+0x2aa>
          return HAL_TIMEOUT;
 8001458:	2003      	movs	r0, #3
 800145a:	e0aa      	b.n	80015b2 <HAL_RCC_OscConfig+0x416>
 800145c:	40021000 	.word	0x40021000
 8001460:	42420000 	.word	0x42420000
 8001464:	42420480 	.word	0x42420480
 8001468:	20000000 	.word	0x20000000
 800146c:	10624dd3 	.word	0x10624dd3
 8001470:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001474:	2b05      	cmp	r3, #5
 8001476:	d009      	beq.n	800148c <HAL_RCC_OscConfig+0x2f0>
 8001478:	4b51      	ldr	r3, [pc, #324]	; (80015c0 <HAL_RCC_OscConfig+0x424>)
 800147a:	6a1a      	ldr	r2, [r3, #32]
 800147c:	f022 0201 	bic.w	r2, r2, #1
 8001480:	621a      	str	r2, [r3, #32]
 8001482:	6a1a      	ldr	r2, [r3, #32]
 8001484:	f022 0204 	bic.w	r2, r2, #4
 8001488:	621a      	str	r2, [r3, #32]
 800148a:	e7d3      	b.n	8001434 <HAL_RCC_OscConfig+0x298>
 800148c:	4b4c      	ldr	r3, [pc, #304]	; (80015c0 <HAL_RCC_OscConfig+0x424>)
 800148e:	6a1a      	ldr	r2, [r3, #32]
 8001490:	f042 0204 	orr.w	r2, r2, #4
 8001494:	621a      	str	r2, [r3, #32]
 8001496:	6a1a      	ldr	r2, [r3, #32]
 8001498:	f042 0201 	orr.w	r2, r2, #1
 800149c:	621a      	str	r2, [r3, #32]
 800149e:	e7c9      	b.n	8001434 <HAL_RCC_OscConfig+0x298>
      tickstart = HAL_GetTick();
 80014a0:	f7ff fac8 	bl	8000a34 <HAL_GetTick>
 80014a4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014a6:	4f46      	ldr	r7, [pc, #280]	; (80015c0 <HAL_RCC_OscConfig+0x424>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014a8:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014ac:	6a3b      	ldr	r3, [r7, #32]
 80014ae:	f013 0f02 	tst.w	r3, #2
 80014b2:	d006      	beq.n	80014c2 <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014b4:	f7ff fabe 	bl	8000a34 <HAL_GetTick>
 80014b8:	1b80      	subs	r0, r0, r6
 80014ba:	4540      	cmp	r0, r8
 80014bc:	d9f6      	bls.n	80014ac <HAL_RCC_OscConfig+0x310>
          return HAL_TIMEOUT;
 80014be:	2003      	movs	r0, #3
 80014c0:	e077      	b.n	80015b2 <HAL_RCC_OscConfig+0x416>
    if (pwrclkchanged == SET)
 80014c2:	b9e5      	cbnz	r5, 80014fe <HAL_RCC_OscConfig+0x362>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014c4:	69e3      	ldr	r3, [r4, #28]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d072      	beq.n	80015b0 <HAL_RCC_OscConfig+0x414>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014ca:	4a3d      	ldr	r2, [pc, #244]	; (80015c0 <HAL_RCC_OscConfig+0x424>)
 80014cc:	6852      	ldr	r2, [r2, #4]
 80014ce:	f002 020c 	and.w	r2, r2, #12
 80014d2:	2a08      	cmp	r2, #8
 80014d4:	d056      	beq.n	8001584 <HAL_RCC_OscConfig+0x3e8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d017      	beq.n	800150a <HAL_RCC_OscConfig+0x36e>
        __HAL_RCC_PLL_DISABLE();
 80014da:	4b3a      	ldr	r3, [pc, #232]	; (80015c4 <HAL_RCC_OscConfig+0x428>)
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80014e0:	f7ff faa8 	bl	8000a34 <HAL_GetTick>
 80014e4:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014e6:	4d36      	ldr	r5, [pc, #216]	; (80015c0 <HAL_RCC_OscConfig+0x424>)
 80014e8:	682b      	ldr	r3, [r5, #0]
 80014ea:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80014ee:	d047      	beq.n	8001580 <HAL_RCC_OscConfig+0x3e4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014f0:	f7ff faa0 	bl	8000a34 <HAL_GetTick>
 80014f4:	1b00      	subs	r0, r0, r4
 80014f6:	2802      	cmp	r0, #2
 80014f8:	d9f6      	bls.n	80014e8 <HAL_RCC_OscConfig+0x34c>
            return HAL_TIMEOUT;
 80014fa:	2003      	movs	r0, #3
 80014fc:	e059      	b.n	80015b2 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_PWR_CLK_DISABLE();
 80014fe:	4a30      	ldr	r2, [pc, #192]	; (80015c0 <HAL_RCC_OscConfig+0x424>)
 8001500:	69d3      	ldr	r3, [r2, #28]
 8001502:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001506:	61d3      	str	r3, [r2, #28]
 8001508:	e7dc      	b.n	80014c4 <HAL_RCC_OscConfig+0x328>
        __HAL_RCC_PLL_DISABLE();
 800150a:	4b2e      	ldr	r3, [pc, #184]	; (80015c4 <HAL_RCC_OscConfig+0x428>)
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001510:	f7ff fa90 	bl	8000a34 <HAL_GetTick>
 8001514:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001516:	4e2a      	ldr	r6, [pc, #168]	; (80015c0 <HAL_RCC_OscConfig+0x424>)
 8001518:	6833      	ldr	r3, [r6, #0]
 800151a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800151e:	d006      	beq.n	800152e <HAL_RCC_OscConfig+0x392>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001520:	f7ff fa88 	bl	8000a34 <HAL_GetTick>
 8001524:	1b40      	subs	r0, r0, r5
 8001526:	2802      	cmp	r0, #2
 8001528:	d9f6      	bls.n	8001518 <HAL_RCC_OscConfig+0x37c>
            return HAL_TIMEOUT;
 800152a:	2003      	movs	r0, #3
 800152c:	e041      	b.n	80015b2 <HAL_RCC_OscConfig+0x416>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800152e:	6a23      	ldr	r3, [r4, #32]
 8001530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001534:	d01a      	beq.n	800156c <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001536:	4922      	ldr	r1, [pc, #136]	; (80015c0 <HAL_RCC_OscConfig+0x424>)
 8001538:	684a      	ldr	r2, [r1, #4]
 800153a:	6a23      	ldr	r3, [r4, #32]
 800153c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800153e:	4303      	orrs	r3, r0
 8001540:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001544:	4313      	orrs	r3, r2
 8001546:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8001548:	4b1e      	ldr	r3, [pc, #120]	; (80015c4 <HAL_RCC_OscConfig+0x428>)
 800154a:	2201      	movs	r2, #1
 800154c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800154e:	f7ff fa71 	bl	8000a34 <HAL_GetTick>
 8001552:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001554:	4d1a      	ldr	r5, [pc, #104]	; (80015c0 <HAL_RCC_OscConfig+0x424>)
 8001556:	682b      	ldr	r3, [r5, #0]
 8001558:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800155c:	d10e      	bne.n	800157c <HAL_RCC_OscConfig+0x3e0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800155e:	f7ff fa69 	bl	8000a34 <HAL_GetTick>
 8001562:	1b00      	subs	r0, r0, r4
 8001564:	2802      	cmp	r0, #2
 8001566:	d9f6      	bls.n	8001556 <HAL_RCC_OscConfig+0x3ba>
            return HAL_TIMEOUT;
 8001568:	2003      	movs	r0, #3
 800156a:	e022      	b.n	80015b2 <HAL_RCC_OscConfig+0x416>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800156c:	4a14      	ldr	r2, [pc, #80]	; (80015c0 <HAL_RCC_OscConfig+0x424>)
 800156e:	6853      	ldr	r3, [r2, #4]
 8001570:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001574:	68a1      	ldr	r1, [r4, #8]
 8001576:	430b      	orrs	r3, r1
 8001578:	6053      	str	r3, [r2, #4]
 800157a:	e7dc      	b.n	8001536 <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 800157c:	2000      	movs	r0, #0
 800157e:	e018      	b.n	80015b2 <HAL_RCC_OscConfig+0x416>
 8001580:	2000      	movs	r0, #0
 8001582:	e016      	b.n	80015b2 <HAL_RCC_OscConfig+0x416>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001584:	2b01      	cmp	r3, #1
 8001586:	d017      	beq.n	80015b8 <HAL_RCC_OscConfig+0x41c>
        pll_config = RCC->CFGR;
 8001588:	4b0d      	ldr	r3, [pc, #52]	; (80015c0 <HAL_RCC_OscConfig+0x424>)
 800158a:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800158c:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8001590:	6a22      	ldr	r2, [r4, #32]
 8001592:	4291      	cmp	r1, r2
 8001594:	d112      	bne.n	80015bc <HAL_RCC_OscConfig+0x420>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001596:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800159a:	6a60      	ldr	r0, [r4, #36]	; 0x24
        return HAL_ERROR;
 800159c:	1a18      	subs	r0, r3, r0
 800159e:	bf18      	it	ne
 80015a0:	2001      	movne	r0, #1
 80015a2:	e006      	b.n	80015b2 <HAL_RCC_OscConfig+0x416>
    return HAL_ERROR;
 80015a4:	2001      	movs	r0, #1
}
 80015a6:	4770      	bx	lr
        return HAL_ERROR;
 80015a8:	2001      	movs	r0, #1
 80015aa:	e002      	b.n	80015b2 <HAL_RCC_OscConfig+0x416>
        return HAL_ERROR;
 80015ac:	2001      	movs	r0, #1
 80015ae:	e000      	b.n	80015b2 <HAL_RCC_OscConfig+0x416>
  return HAL_OK;
 80015b0:	2000      	movs	r0, #0
}
 80015b2:	b002      	add	sp, #8
 80015b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 80015b8:	2001      	movs	r0, #1
 80015ba:	e7fa      	b.n	80015b2 <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
 80015bc:	2001      	movs	r0, #1
 80015be:	e7f8      	b.n	80015b2 <HAL_RCC_OscConfig+0x416>
 80015c0:	40021000 	.word	0x40021000
 80015c4:	42420060 	.word	0x42420060

080015c8 <HAL_RCC_GetSysClockFreq>:
{
 80015c8:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80015ca:	4b16      	ldr	r3, [pc, #88]	; (8001624 <HAL_RCC_GetSysClockFreq+0x5c>)
 80015cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015ce:	f10d 0c18 	add.w	ip, sp, #24
 80015d2:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80015d6:	f240 2301 	movw	r3, #513	; 0x201
 80015da:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 80015de:	4b12      	ldr	r3, [pc, #72]	; (8001628 <HAL_RCC_GetSysClockFreq+0x60>)
 80015e0:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80015e2:	f003 020c 	and.w	r2, r3, #12
 80015e6:	2a08      	cmp	r2, #8
 80015e8:	d002      	beq.n	80015f0 <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 80015ea:	4810      	ldr	r0, [pc, #64]	; (800162c <HAL_RCC_GetSysClockFreq+0x64>)
}
 80015ec:	b006      	add	sp, #24
 80015ee:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80015f0:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80015f4:	4462      	add	r2, ip
 80015f6:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80015fa:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80015fe:	d00c      	beq.n	800161a <HAL_RCC_GetSysClockFreq+0x52>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001600:	4b09      	ldr	r3, [pc, #36]	; (8001628 <HAL_RCC_GetSysClockFreq+0x60>)
 8001602:	685b      	ldr	r3, [r3, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001604:	4809      	ldr	r0, [pc, #36]	; (800162c <HAL_RCC_GetSysClockFreq+0x64>)
 8001606:	fb00 f002 	mul.w	r0, r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800160a:	f3c3 4340 	ubfx	r3, r3, #17, #1
 800160e:	4463      	add	r3, ip
 8001610:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001614:	fbb0 f0f3 	udiv	r0, r0, r3
 8001618:	e7e8      	b.n	80015ec <HAL_RCC_GetSysClockFreq+0x24>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800161a:	4805      	ldr	r0, [pc, #20]	; (8001630 <HAL_RCC_GetSysClockFreq+0x68>)
 800161c:	fb00 f002 	mul.w	r0, r0, r2
 8001620:	e7e4      	b.n	80015ec <HAL_RCC_GetSysClockFreq+0x24>
 8001622:	bf00      	nop
 8001624:	08001f1c 	.word	0x08001f1c
 8001628:	40021000 	.word	0x40021000
 800162c:	007a1200 	.word	0x007a1200
 8001630:	003d0900 	.word	0x003d0900

08001634 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001634:	2800      	cmp	r0, #0
 8001636:	f000 80a2 	beq.w	800177e <HAL_RCC_ClockConfig+0x14a>
{
 800163a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800163e:	460d      	mov	r5, r1
 8001640:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001642:	4b53      	ldr	r3, [pc, #332]	; (8001790 <HAL_RCC_ClockConfig+0x15c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	428b      	cmp	r3, r1
 800164c:	d20b      	bcs.n	8001666 <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800164e:	4a50      	ldr	r2, [pc, #320]	; (8001790 <HAL_RCC_ClockConfig+0x15c>)
 8001650:	6813      	ldr	r3, [r2, #0]
 8001652:	f023 0307 	bic.w	r3, r3, #7
 8001656:	430b      	orrs	r3, r1
 8001658:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800165a:	6813      	ldr	r3, [r2, #0]
 800165c:	f003 0307 	and.w	r3, r3, #7
 8001660:	428b      	cmp	r3, r1
 8001662:	f040 808e 	bne.w	8001782 <HAL_RCC_ClockConfig+0x14e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001666:	6823      	ldr	r3, [r4, #0]
 8001668:	f013 0f02 	tst.w	r3, #2
 800166c:	d017      	beq.n	800169e <HAL_RCC_ClockConfig+0x6a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800166e:	f013 0f04 	tst.w	r3, #4
 8001672:	d004      	beq.n	800167e <HAL_RCC_ClockConfig+0x4a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001674:	4a47      	ldr	r2, [pc, #284]	; (8001794 <HAL_RCC_ClockConfig+0x160>)
 8001676:	6853      	ldr	r3, [r2, #4]
 8001678:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800167c:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800167e:	6823      	ldr	r3, [r4, #0]
 8001680:	f013 0f08 	tst.w	r3, #8
 8001684:	d004      	beq.n	8001690 <HAL_RCC_ClockConfig+0x5c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001686:	4a43      	ldr	r2, [pc, #268]	; (8001794 <HAL_RCC_ClockConfig+0x160>)
 8001688:	6853      	ldr	r3, [r2, #4]
 800168a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800168e:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001690:	4a40      	ldr	r2, [pc, #256]	; (8001794 <HAL_RCC_ClockConfig+0x160>)
 8001692:	6853      	ldr	r3, [r2, #4]
 8001694:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001698:	68a1      	ldr	r1, [r4, #8]
 800169a:	430b      	orrs	r3, r1
 800169c:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800169e:	6823      	ldr	r3, [r4, #0]
 80016a0:	f013 0f01 	tst.w	r3, #1
 80016a4:	d031      	beq.n	800170a <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016a6:	6862      	ldr	r2, [r4, #4]
 80016a8:	2a01      	cmp	r2, #1
 80016aa:	d020      	beq.n	80016ee <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016ac:	2a02      	cmp	r2, #2
 80016ae:	d025      	beq.n	80016fc <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016b0:	4b38      	ldr	r3, [pc, #224]	; (8001794 <HAL_RCC_ClockConfig+0x160>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f013 0f02 	tst.w	r3, #2
 80016b8:	d065      	beq.n	8001786 <HAL_RCC_ClockConfig+0x152>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016ba:	4936      	ldr	r1, [pc, #216]	; (8001794 <HAL_RCC_ClockConfig+0x160>)
 80016bc:	684b      	ldr	r3, [r1, #4]
 80016be:	f023 0303 	bic.w	r3, r3, #3
 80016c2:	4313      	orrs	r3, r2
 80016c4:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 80016c6:	f7ff f9b5 	bl	8000a34 <HAL_GetTick>
 80016ca:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016cc:	4f31      	ldr	r7, [pc, #196]	; (8001794 <HAL_RCC_ClockConfig+0x160>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016ce:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f003 030c 	and.w	r3, r3, #12
 80016d8:	6862      	ldr	r2, [r4, #4]
 80016da:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80016de:	d014      	beq.n	800170a <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016e0:	f7ff f9a8 	bl	8000a34 <HAL_GetTick>
 80016e4:	1b80      	subs	r0, r0, r6
 80016e6:	4540      	cmp	r0, r8
 80016e8:	d9f3      	bls.n	80016d2 <HAL_RCC_ClockConfig+0x9e>
        return HAL_TIMEOUT;
 80016ea:	2003      	movs	r0, #3
 80016ec:	e045      	b.n	800177a <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ee:	4b29      	ldr	r3, [pc, #164]	; (8001794 <HAL_RCC_ClockConfig+0x160>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80016f6:	d1e0      	bne.n	80016ba <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80016f8:	2001      	movs	r0, #1
 80016fa:	e03e      	b.n	800177a <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016fc:	4b25      	ldr	r3, [pc, #148]	; (8001794 <HAL_RCC_ClockConfig+0x160>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001704:	d1d9      	bne.n	80016ba <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8001706:	2001      	movs	r0, #1
 8001708:	e037      	b.n	800177a <HAL_RCC_ClockConfig+0x146>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800170a:	4b21      	ldr	r3, [pc, #132]	; (8001790 <HAL_RCC_ClockConfig+0x15c>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0307 	and.w	r3, r3, #7
 8001712:	42ab      	cmp	r3, r5
 8001714:	d90a      	bls.n	800172c <HAL_RCC_ClockConfig+0xf8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001716:	4a1e      	ldr	r2, [pc, #120]	; (8001790 <HAL_RCC_ClockConfig+0x15c>)
 8001718:	6813      	ldr	r3, [r2, #0]
 800171a:	f023 0307 	bic.w	r3, r3, #7
 800171e:	432b      	orrs	r3, r5
 8001720:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001722:	6813      	ldr	r3, [r2, #0]
 8001724:	f003 0307 	and.w	r3, r3, #7
 8001728:	42ab      	cmp	r3, r5
 800172a:	d12e      	bne.n	800178a <HAL_RCC_ClockConfig+0x156>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800172c:	6823      	ldr	r3, [r4, #0]
 800172e:	f013 0f04 	tst.w	r3, #4
 8001732:	d006      	beq.n	8001742 <HAL_RCC_ClockConfig+0x10e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001734:	4a17      	ldr	r2, [pc, #92]	; (8001794 <HAL_RCC_ClockConfig+0x160>)
 8001736:	6853      	ldr	r3, [r2, #4]
 8001738:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800173c:	68e1      	ldr	r1, [r4, #12]
 800173e:	430b      	orrs	r3, r1
 8001740:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001742:	6823      	ldr	r3, [r4, #0]
 8001744:	f013 0f08 	tst.w	r3, #8
 8001748:	d007      	beq.n	800175a <HAL_RCC_ClockConfig+0x126>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800174a:	4a12      	ldr	r2, [pc, #72]	; (8001794 <HAL_RCC_ClockConfig+0x160>)
 800174c:	6853      	ldr	r3, [r2, #4]
 800174e:	6921      	ldr	r1, [r4, #16]
 8001750:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001754:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001758:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800175a:	f7ff ff35 	bl	80015c8 <HAL_RCC_GetSysClockFreq>
 800175e:	4b0d      	ldr	r3, [pc, #52]	; (8001794 <HAL_RCC_ClockConfig+0x160>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001766:	4a0c      	ldr	r2, [pc, #48]	; (8001798 <HAL_RCC_ClockConfig+0x164>)
 8001768:	5cd3      	ldrb	r3, [r2, r3]
 800176a:	40d8      	lsrs	r0, r3
 800176c:	4b0b      	ldr	r3, [pc, #44]	; (800179c <HAL_RCC_ClockConfig+0x168>)
 800176e:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001770:	4b0b      	ldr	r3, [pc, #44]	; (80017a0 <HAL_RCC_ClockConfig+0x16c>)
 8001772:	6818      	ldr	r0, [r3, #0]
 8001774:	f7ff f91a 	bl	80009ac <HAL_InitTick>
  return HAL_OK;
 8001778:	2000      	movs	r0, #0
}
 800177a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 800177e:	2001      	movs	r0, #1
}
 8001780:	4770      	bx	lr
    return HAL_ERROR;
 8001782:	2001      	movs	r0, #1
 8001784:	e7f9      	b.n	800177a <HAL_RCC_ClockConfig+0x146>
        return HAL_ERROR;
 8001786:	2001      	movs	r0, #1
 8001788:	e7f7      	b.n	800177a <HAL_RCC_ClockConfig+0x146>
    return HAL_ERROR;
 800178a:	2001      	movs	r0, #1
 800178c:	e7f5      	b.n	800177a <HAL_RCC_ClockConfig+0x146>
 800178e:	bf00      	nop
 8001790:	40022000 	.word	0x40022000
 8001794:	40021000 	.word	0x40021000
 8001798:	08001f04 	.word	0x08001f04
 800179c:	20000000 	.word	0x20000000
 80017a0:	20000008 	.word	0x20000008

080017a4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80017a4:	4b04      	ldr	r3, [pc, #16]	; (80017b8 <HAL_RCC_GetPCLK1Freq+0x14>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80017ac:	4a03      	ldr	r2, [pc, #12]	; (80017bc <HAL_RCC_GetPCLK1Freq+0x18>)
 80017ae:	5cd3      	ldrb	r3, [r2, r3]
 80017b0:	4a03      	ldr	r2, [pc, #12]	; (80017c0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80017b2:	6810      	ldr	r0, [r2, #0]
}
 80017b4:	40d8      	lsrs	r0, r3
 80017b6:	4770      	bx	lr
 80017b8:	40021000 	.word	0x40021000
 80017bc:	08001f14 	.word	0x08001f14
 80017c0:	20000000 	.word	0x20000000

080017c4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80017c4:	4b04      	ldr	r3, [pc, #16]	; (80017d8 <HAL_RCC_GetPCLK2Freq+0x14>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80017cc:	4a03      	ldr	r2, [pc, #12]	; (80017dc <HAL_RCC_GetPCLK2Freq+0x18>)
 80017ce:	5cd3      	ldrb	r3, [r2, r3]
 80017d0:	4a03      	ldr	r2, [pc, #12]	; (80017e0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80017d2:	6810      	ldr	r0, [r2, #0]
}
 80017d4:	40d8      	lsrs	r0, r3
 80017d6:	4770      	bx	lr
 80017d8:	40021000 	.word	0x40021000
 80017dc:	08001f14 	.word	0x08001f14
 80017e0:	20000000 	.word	0x20000000

080017e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80017e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017e8:	b082      	sub	sp, #8
 80017ea:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80017ec:	6803      	ldr	r3, [r0, #0]
 80017ee:	f013 0f01 	tst.w	r3, #1
 80017f2:	d034      	beq.n	800185e <HAL_RCCEx_PeriphCLKConfig+0x7a>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017f4:	4b3e      	ldr	r3, [pc, #248]	; (80018f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80017f6:	69db      	ldr	r3, [r3, #28]
 80017f8:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80017fc:	d147      	bne.n	800188e <HAL_RCCEx_PeriphCLKConfig+0xaa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017fe:	4b3c      	ldr	r3, [pc, #240]	; (80018f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001800:	69da      	ldr	r2, [r3, #28]
 8001802:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001806:	61da      	str	r2, [r3, #28]
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180e:	9301      	str	r3, [sp, #4]
 8001810:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001812:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001814:	4b37      	ldr	r3, [pc, #220]	; (80018f4 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f413 7f80 	tst.w	r3, #256	; 0x100
 800181c:	d039      	beq.n	8001892 <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800181e:	4b34      	ldr	r3, [pc, #208]	; (80018f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001820:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001822:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001826:	d011      	beq.n	800184c <HAL_RCCEx_PeriphCLKConfig+0x68>
 8001828:	6862      	ldr	r2, [r4, #4]
 800182a:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800182e:	429a      	cmp	r2, r3
 8001830:	d00c      	beq.n	800184c <HAL_RCCEx_PeriphCLKConfig+0x68>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001832:	4a2f      	ldr	r2, [pc, #188]	; (80018f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001834:	6a13      	ldr	r3, [r2, #32]
 8001836:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800183a:	492f      	ldr	r1, [pc, #188]	; (80018f8 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 800183c:	2601      	movs	r6, #1
 800183e:	600e      	str	r6, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001840:	2600      	movs	r6, #0
 8001842:	600e      	str	r6, [r1, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001844:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001846:	f013 0f01 	tst.w	r3, #1
 800184a:	d136      	bne.n	80018ba <HAL_RCCEx_PeriphCLKConfig+0xd6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800184c:	4a28      	ldr	r2, [pc, #160]	; (80018f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800184e:	6a13      	ldr	r3, [r2, #32]
 8001850:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001854:	6861      	ldr	r1, [r4, #4]
 8001856:	430b      	orrs	r3, r1
 8001858:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800185a:	2d00      	cmp	r5, #0
 800185c:	d13e      	bne.n	80018dc <HAL_RCCEx_PeriphCLKConfig+0xf8>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800185e:	6823      	ldr	r3, [r4, #0]
 8001860:	f013 0f02 	tst.w	r3, #2
 8001864:	d006      	beq.n	8001874 <HAL_RCCEx_PeriphCLKConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001866:	4a22      	ldr	r2, [pc, #136]	; (80018f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001868:	6853      	ldr	r3, [r2, #4]
 800186a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800186e:	68a1      	ldr	r1, [r4, #8]
 8001870:	430b      	orrs	r3, r1
 8001872:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001874:	6823      	ldr	r3, [r4, #0]
 8001876:	f013 0f10 	tst.w	r3, #16
 800187a:	d034      	beq.n	80018e6 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800187c:	4a1c      	ldr	r2, [pc, #112]	; (80018f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800187e:	6853      	ldr	r3, [r2, #4]
 8001880:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001884:	68e1      	ldr	r1, [r4, #12]
 8001886:	430b      	orrs	r3, r1
 8001888:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800188a:	2000      	movs	r0, #0
 800188c:	e02c      	b.n	80018e8 <HAL_RCCEx_PeriphCLKConfig+0x104>
    FlagStatus       pwrclkchanged = RESET;
 800188e:	2500      	movs	r5, #0
 8001890:	e7c0      	b.n	8001814 <HAL_RCCEx_PeriphCLKConfig+0x30>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001892:	4a18      	ldr	r2, [pc, #96]	; (80018f4 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8001894:	6813      	ldr	r3, [r2, #0]
 8001896:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800189a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800189c:	f7ff f8ca 	bl	8000a34 <HAL_GetTick>
 80018a0:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a2:	4f14      	ldr	r7, [pc, #80]	; (80018f4 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80018aa:	d1b8      	bne.n	800181e <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018ac:	f7ff f8c2 	bl	8000a34 <HAL_GetTick>
 80018b0:	1b80      	subs	r0, r0, r6
 80018b2:	2864      	cmp	r0, #100	; 0x64
 80018b4:	d9f6      	bls.n	80018a4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 80018b6:	2003      	movs	r0, #3
 80018b8:	e016      	b.n	80018e8 <HAL_RCCEx_PeriphCLKConfig+0x104>
        tickstart = HAL_GetTick();
 80018ba:	f7ff f8bb 	bl	8000a34 <HAL_GetTick>
 80018be:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018c0:	4f0b      	ldr	r7, [pc, #44]	; (80018f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018c2:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018c6:	6a3b      	ldr	r3, [r7, #32]
 80018c8:	f013 0f02 	tst.w	r3, #2
 80018cc:	d1be      	bne.n	800184c <HAL_RCCEx_PeriphCLKConfig+0x68>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ce:	f7ff f8b1 	bl	8000a34 <HAL_GetTick>
 80018d2:	1b80      	subs	r0, r0, r6
 80018d4:	4540      	cmp	r0, r8
 80018d6:	d9f6      	bls.n	80018c6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
            return HAL_TIMEOUT;
 80018d8:	2003      	movs	r0, #3
 80018da:	e005      	b.n	80018e8 <HAL_RCCEx_PeriphCLKConfig+0x104>
      __HAL_RCC_PWR_CLK_DISABLE();
 80018dc:	69d3      	ldr	r3, [r2, #28]
 80018de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018e2:	61d3      	str	r3, [r2, #28]
 80018e4:	e7bb      	b.n	800185e <HAL_RCCEx_PeriphCLKConfig+0x7a>
  return HAL_OK;
 80018e6:	2000      	movs	r0, #0
}
 80018e8:	b002      	add	sp, #8
 80018ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80018ee:	bf00      	nop
 80018f0:	40021000 	.word	0x40021000
 80018f4:	40007000 	.word	0x40007000
 80018f8:	42420440 	.word	0x42420440

080018fc <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80018fc:	6802      	ldr	r2, [r0, #0]
 80018fe:	68d3      	ldr	r3, [r2, #12]
 8001900:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001904:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001906:	6802      	ldr	r2, [r0, #0]
 8001908:	6953      	ldr	r3, [r2, #20]
 800190a:	f023 0301 	bic.w	r3, r3, #1
 800190e:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001910:	2320      	movs	r3, #32
 8001912:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 8001916:	4770      	bx	lr

08001918 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001918:	b510      	push	{r4, lr}
 800191a:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800191c:	6802      	ldr	r2, [r0, #0]
 800191e:	6913      	ldr	r3, [r2, #16]
 8001920:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001924:	68c1      	ldr	r1, [r0, #12]
 8001926:	430b      	orrs	r3, r1
 8001928:	6113      	str	r3, [r2, #16]
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
  MODIFY_REG(huart->Instance->CR1,
 800192a:	6801      	ldr	r1, [r0, #0]
 800192c:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800192e:	6883      	ldr	r3, [r0, #8]
 8001930:	6900      	ldr	r0, [r0, #16]
 8001932:	4303      	orrs	r3, r0
 8001934:	6960      	ldr	r0, [r4, #20]
 8001936:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8001938:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 800193c:	f022 020c 	bic.w	r2, r2, #12
 8001940:	4313      	orrs	r3, r2
 8001942:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001944:	6822      	ldr	r2, [r4, #0]
 8001946:	6953      	ldr	r3, [r2, #20]
 8001948:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800194c:	69a1      	ldr	r1, [r4, #24]
 800194e:	430b      	orrs	r3, r1
 8001950:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 8001952:	6822      	ldr	r2, [r4, #0]
 8001954:	4b10      	ldr	r3, [pc, #64]	; (8001998 <UART_SetConfig+0x80>)
 8001956:	429a      	cmp	r2, r3
 8001958:	d01a      	beq.n	8001990 <UART_SetConfig+0x78>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800195a:	f7ff ff23 	bl	80017a4 <HAL_RCC_GetPCLK1Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800195e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001962:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001966:	6863      	ldr	r3, [r4, #4]
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	fbb0 f3f3 	udiv	r3, r0, r3
 800196e:	6824      	ldr	r4, [r4, #0]
 8001970:	480a      	ldr	r0, [pc, #40]	; (800199c <UART_SetConfig+0x84>)
 8001972:	fba0 2103 	umull	r2, r1, r0, r3
 8001976:	0949      	lsrs	r1, r1, #5
 8001978:	2264      	movs	r2, #100	; 0x64
 800197a:	fb02 3311 	mls	r3, r2, r1, r3
 800197e:	011b      	lsls	r3, r3, #4
 8001980:	3332      	adds	r3, #50	; 0x32
 8001982:	fba0 2303 	umull	r2, r3, r0, r3
 8001986:	0109      	lsls	r1, r1, #4
 8001988:	eb01 1353 	add.w	r3, r1, r3, lsr #5
 800198c:	60a3      	str	r3, [r4, #8]
#endif /* USART_CR1_OVER8 */
}
 800198e:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8001990:	f7ff ff18 	bl	80017c4 <HAL_RCC_GetPCLK2Freq>
 8001994:	e7e3      	b.n	800195e <UART_SetConfig+0x46>
 8001996:	bf00      	nop
 8001998:	40013800 	.word	0x40013800
 800199c:	51eb851f 	.word	0x51eb851f

080019a0 <HAL_UART_Init>:
  if (huart == NULL)
 80019a0:	b358      	cbz	r0, 80019fa <HAL_UART_Init+0x5a>
{
 80019a2:	b510      	push	{r4, lr}
 80019a4:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80019a6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80019aa:	b30b      	cbz	r3, 80019f0 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80019ac:	2324      	movs	r3, #36	; 0x24
 80019ae:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80019b2:	6822      	ldr	r2, [r4, #0]
 80019b4:	68d3      	ldr	r3, [r2, #12]
 80019b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80019ba:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80019bc:	4620      	mov	r0, r4
 80019be:	f7ff ffab 	bl	8001918 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019c2:	6822      	ldr	r2, [r4, #0]
 80019c4:	6913      	ldr	r3, [r2, #16]
 80019c6:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80019ca:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019cc:	6822      	ldr	r2, [r4, #0]
 80019ce:	6953      	ldr	r3, [r2, #20]
 80019d0:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80019d4:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80019d6:	6822      	ldr	r2, [r4, #0]
 80019d8:	68d3      	ldr	r3, [r2, #12]
 80019da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019de:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019e0:	2000      	movs	r0, #0
 80019e2:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80019e4:	2320      	movs	r3, #32
 80019e6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80019ea:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 80019ee:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80019f0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80019f4:	f7fe fe64 	bl	80006c0 <HAL_UART_MspInit>
 80019f8:	e7d8      	b.n	80019ac <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80019fa:	2001      	movs	r0, #1
}
 80019fc:	4770      	bx	lr
	...

08001a00 <HAL_UART_Receive_DMA>:
{
 8001a00:	b530      	push	{r4, r5, lr}
 8001a02:	b083      	sub	sp, #12
 8001a04:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 8001a06:	f890 003a 	ldrb.w	r0, [r0, #58]	; 0x3a
 8001a0a:	b2c0      	uxtb	r0, r0
 8001a0c:	2820      	cmp	r0, #32
 8001a0e:	d13c      	bne.n	8001a8a <HAL_UART_Receive_DMA+0x8a>
    if ((pData == NULL) || (Size == 0U))
 8001a10:	2900      	cmp	r1, #0
 8001a12:	d03d      	beq.n	8001a90 <HAL_UART_Receive_DMA+0x90>
 8001a14:	2a00      	cmp	r2, #0
 8001a16:	d03d      	beq.n	8001a94 <HAL_UART_Receive_DMA+0x94>
    __HAL_LOCK(huart);
 8001a18:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d03b      	beq.n	8001a98 <HAL_UART_Receive_DMA+0x98>
 8001a20:	2301      	movs	r3, #1
 8001a22:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    huart->pRxBuffPtr = pData;
 8001a26:	62a1      	str	r1, [r4, #40]	; 0x28
    huart->RxXferSize = Size;
 8001a28:	85a2      	strh	r2, [r4, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a2a:	2500      	movs	r5, #0
 8001a2c:	63e5      	str	r5, [r4, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001a2e:	2322      	movs	r3, #34	; 0x22
 8001a30:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8001a34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001a36:	4819      	ldr	r0, [pc, #100]	; (8001a9c <HAL_UART_Receive_DMA+0x9c>)
 8001a38:	6298      	str	r0, [r3, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8001a3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001a3c:	4818      	ldr	r0, [pc, #96]	; (8001aa0 <HAL_UART_Receive_DMA+0xa0>)
 8001a3e:	62d8      	str	r0, [r3, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8001a40:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001a42:	4818      	ldr	r0, [pc, #96]	; (8001aa4 <HAL_UART_Receive_DMA+0xa4>)
 8001a44:	6318      	str	r0, [r3, #48]	; 0x30
    huart->hdmarx->XferAbortCallback = NULL;
 8001a46:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001a48:	635d      	str	r5, [r3, #52]	; 0x34
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8001a4a:	6820      	ldr	r0, [r4, #0]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	460a      	mov	r2, r1
 8001a50:	1d01      	adds	r1, r0, #4
 8001a52:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001a54:	f7ff f8a6 	bl	8000ba4 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_OREFLAG(huart);
 8001a58:	9501      	str	r5, [sp, #4]
 8001a5a:	6823      	ldr	r3, [r4, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	9201      	str	r2, [sp, #4]
 8001a60:	685a      	ldr	r2, [r3, #4]
 8001a62:	9201      	str	r2, [sp, #4]
 8001a64:	9a01      	ldr	r2, [sp, #4]
    __HAL_UNLOCK(huart);
 8001a66:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001a6a:	68da      	ldr	r2, [r3, #12]
 8001a6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a70:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a72:	6822      	ldr	r2, [r4, #0]
 8001a74:	6953      	ldr	r3, [r2, #20]
 8001a76:	f043 0301 	orr.w	r3, r3, #1
 8001a7a:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001a7c:	6822      	ldr	r2, [r4, #0]
 8001a7e:	6953      	ldr	r3, [r2, #20]
 8001a80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a84:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 8001a86:	4628      	mov	r0, r5
 8001a88:	e000      	b.n	8001a8c <HAL_UART_Receive_DMA+0x8c>
    return HAL_BUSY;
 8001a8a:	2002      	movs	r0, #2
}
 8001a8c:	b003      	add	sp, #12
 8001a8e:	bd30      	pop	{r4, r5, pc}
      return HAL_ERROR;
 8001a90:	2001      	movs	r0, #1
 8001a92:	e7fb      	b.n	8001a8c <HAL_UART_Receive_DMA+0x8c>
 8001a94:	2001      	movs	r0, #1
 8001a96:	e7f9      	b.n	8001a8c <HAL_UART_Receive_DMA+0x8c>
    __HAL_LOCK(huart);
 8001a98:	2002      	movs	r0, #2
 8001a9a:	e7f7      	b.n	8001a8c <HAL_UART_Receive_DMA+0x8c>
 8001a9c:	08001b15 	.word	0x08001b15
 8001aa0:	08001be7 	.word	0x08001be7
 8001aa4:	08001bf3 	.word	0x08001bf3

08001aa8 <HAL_UART_DMAStop>:
{
 8001aa8:	b510      	push	{r4, lr}
 8001aaa:	4604      	mov	r4, r0
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8001aac:	6802      	ldr	r2, [r0, #0]
 8001aae:	6951      	ldr	r1, [r2, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8001ab0:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	2b21      	cmp	r3, #33	; 0x21
 8001ab8:	d008      	beq.n	8001acc <HAL_UART_DMAStop+0x24>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001aba:	6822      	ldr	r2, [r4, #0]
 8001abc:	6951      	ldr	r1, [r2, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001abe:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	2b22      	cmp	r3, #34	; 0x22
 8001ac6:	d015      	beq.n	8001af4 <HAL_UART_DMAStop+0x4c>
}
 8001ac8:	2000      	movs	r0, #0
 8001aca:	bd10      	pop	{r4, pc}
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8001acc:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001ad0:	d0f3      	beq.n	8001aba <HAL_UART_DMAStop+0x12>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001ad2:	6953      	ldr	r3, [r2, #20]
 8001ad4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ad8:	6153      	str	r3, [r2, #20]
    if (huart->hdmatx != NULL)
 8001ada:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8001adc:	b108      	cbz	r0, 8001ae2 <HAL_UART_DMAStop+0x3a>
      HAL_DMA_Abort(huart->hdmatx);
 8001ade:	f7ff f8ab 	bl	8000c38 <HAL_DMA_Abort>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8001ae2:	6822      	ldr	r2, [r4, #0]
 8001ae4:	68d3      	ldr	r3, [r2, #12]
 8001ae6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001aea:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001aec:	2320      	movs	r3, #32
 8001aee:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 8001af2:	e7e2      	b.n	8001aba <HAL_UART_DMAStop+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001af4:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001af8:	d0e6      	beq.n	8001ac8 <HAL_UART_DMAStop+0x20>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001afa:	6953      	ldr	r3, [r2, #20]
 8001afc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b00:	6153      	str	r3, [r2, #20]
    if (huart->hdmarx != NULL)
 8001b02:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001b04:	b108      	cbz	r0, 8001b0a <HAL_UART_DMAStop+0x62>
      HAL_DMA_Abort(huart->hdmarx);
 8001b06:	f7ff f897 	bl	8000c38 <HAL_DMA_Abort>
    UART_EndRxTransfer(huart);
 8001b0a:	4620      	mov	r0, r4
 8001b0c:	f7ff fef6 	bl	80018fc <UART_EndRxTransfer>
 8001b10:	e7da      	b.n	8001ac8 <HAL_UART_DMAStop+0x20>

08001b12 <HAL_UART_TxCpltCallback>:
}
 8001b12:	4770      	bx	lr

08001b14 <UART_DMAReceiveCplt>:
{
 8001b14:	b508      	push	{r3, lr}
 8001b16:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b18:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f013 0f20 	tst.w	r3, #32
 8001b22:	d113      	bne.n	8001b4c <UART_DMAReceiveCplt+0x38>
    huart->RxXferCount = 0U;
 8001b24:	2300      	movs	r3, #0
 8001b26:	85c3      	strh	r3, [r0, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001b28:	6802      	ldr	r2, [r0, #0]
 8001b2a:	68d3      	ldr	r3, [r2, #12]
 8001b2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b30:	60d3      	str	r3, [r2, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b32:	6802      	ldr	r2, [r0, #0]
 8001b34:	6953      	ldr	r3, [r2, #20]
 8001b36:	f023 0301 	bic.w	r3, r3, #1
 8001b3a:	6153      	str	r3, [r2, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001b3c:	6802      	ldr	r2, [r0, #0]
 8001b3e:	6953      	ldr	r3, [r2, #20]
 8001b40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b44:	6153      	str	r3, [r2, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8001b46:	2320      	movs	r3, #32
 8001b48:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 8001b4c:	f7fe fcec 	bl	8000528 <HAL_UART_RxCpltCallback>
}
 8001b50:	bd08      	pop	{r3, pc}

08001b52 <UART_Receive_IT>:
{
 8001b52:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001b54:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	2b22      	cmp	r3, #34	; 0x22
 8001b5c:	d130      	bne.n	8001bc0 <UART_Receive_IT+0x6e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b5e:	6883      	ldr	r3, [r0, #8]
 8001b60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b64:	d006      	beq.n	8001b74 <UART_Receive_IT+0x22>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001b66:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001b68:	b183      	cbz	r3, 8001b8c <UART_Receive_IT+0x3a>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001b6a:	6803      	ldr	r3, [r0, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b72:	e02b      	b.n	8001bcc <UART_Receive_IT+0x7a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b74:	6903      	ldr	r3, [r0, #16]
 8001b76:	bb2b      	cbnz	r3, 8001bc4 <UART_Receive_IT+0x72>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8001b78:	6a82      	ldr	r2, [r0, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001b7a:	6803      	ldr	r3, [r0, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b82:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8001b84:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001b86:	3302      	adds	r3, #2
 8001b88:	6283      	str	r3, [r0, #40]	; 0x28
 8001b8a:	e023      	b.n	8001bd4 <UART_Receive_IT+0x82>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001b8c:	6903      	ldr	r3, [r0, #16]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1eb      	bne.n	8001b6a <UART_Receive_IT+0x18>
 8001b92:	e018      	b.n	8001bc6 <UART_Receive_IT+0x74>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001b94:	6802      	ldr	r2, [r0, #0]
 8001b96:	68d3      	ldr	r3, [r2, #12]
 8001b98:	f023 0320 	bic.w	r3, r3, #32
 8001b9c:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001b9e:	6802      	ldr	r2, [r0, #0]
 8001ba0:	68d3      	ldr	r3, [r2, #12]
 8001ba2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ba6:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001ba8:	6802      	ldr	r2, [r0, #0]
 8001baa:	6953      	ldr	r3, [r2, #20]
 8001bac:	f023 0301 	bic.w	r3, r3, #1
 8001bb0:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001bb2:	2320      	movs	r3, #32
 8001bb4:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8001bb8:	f7fe fcb6 	bl	8000528 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8001bbc:	2000      	movs	r0, #0
 8001bbe:	e010      	b.n	8001be2 <UART_Receive_IT+0x90>
    return HAL_BUSY;
 8001bc0:	2002      	movs	r0, #2
 8001bc2:	e00e      	b.n	8001be2 <UART_Receive_IT+0x90>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001bc4:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001bc6:	6803      	ldr	r3, [r0, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8001bce:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8001bd4:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d0d9      	beq.n	8001b94 <UART_Receive_IT+0x42>
    return HAL_OK;
 8001be0:	2000      	movs	r0, #0
}
 8001be2:	bd08      	pop	{r3, pc}

08001be4 <HAL_UART_RxHalfCpltCallback>:
}
 8001be4:	4770      	bx	lr

08001be6 <UART_DMARxHalfCplt>:
{
 8001be6:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 8001be8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001bea:	f7ff fffb 	bl	8001be4 <HAL_UART_RxHalfCpltCallback>
}
 8001bee:	bd08      	pop	{r3, pc}

08001bf0 <HAL_UART_ErrorCallback>:
}
 8001bf0:	4770      	bx	lr

08001bf2 <UART_DMAError>:
{
 8001bf2:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001bf4:	6a44      	ldr	r4, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8001bf6:	6822      	ldr	r2, [r4, #0]
 8001bf8:	6951      	ldr	r1, [r2, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8001bfa:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	2b21      	cmp	r3, #33	; 0x21
 8001c02:	d00e      	beq.n	8001c22 <UART_DMAError+0x30>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001c04:	6823      	ldr	r3, [r4, #0]
 8001c06:	695a      	ldr	r2, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001c08:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b22      	cmp	r3, #34	; 0x22
 8001c10:	d014      	beq.n	8001c3c <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8001c12:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001c14:	f043 0310 	orr.w	r3, r3, #16
 8001c18:	63e3      	str	r3, [r4, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8001c1a:	4620      	mov	r0, r4
 8001c1c:	f7ff ffe8 	bl	8001bf0 <HAL_UART_ErrorCallback>
}
 8001c20:	bd10      	pop	{r4, pc}
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8001c22:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001c26:	d0ed      	beq.n	8001c04 <UART_DMAError+0x12>
    huart->TxXferCount = 0x00U;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	84e3      	strh	r3, [r4, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8001c2c:	68d3      	ldr	r3, [r2, #12]
 8001c2e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001c32:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001c34:	2320      	movs	r3, #32
 8001c36:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 8001c3a:	e7e3      	b.n	8001c04 <UART_DMAError+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001c3c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001c40:	d0e7      	beq.n	8001c12 <UART_DMAError+0x20>
    huart->RxXferCount = 0x00U;
 8001c42:	2300      	movs	r3, #0
 8001c44:	85e3      	strh	r3, [r4, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8001c46:	4620      	mov	r0, r4
 8001c48:	f7ff fe58 	bl	80018fc <UART_EndRxTransfer>
 8001c4c:	e7e1      	b.n	8001c12 <UART_DMAError+0x20>
	...

08001c50 <HAL_UART_IRQHandler>:
{
 8001c50:	b538      	push	{r3, r4, r5, lr}
 8001c52:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001c54:	6802      	ldr	r2, [r0, #0]
 8001c56:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001c58:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001c5a:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 8001c5c:	f013 0f0f 	tst.w	r3, #15
 8001c60:	d109      	bne.n	8001c76 <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001c62:	f013 0f20 	tst.w	r3, #32
 8001c66:	d00c      	beq.n	8001c82 <HAL_UART_IRQHandler+0x32>
 8001c68:	f010 0f20 	tst.w	r0, #32
 8001c6c:	d009      	beq.n	8001c82 <HAL_UART_IRQHandler+0x32>
      UART_Receive_IT(huart);
 8001c6e:	4620      	mov	r0, r4
 8001c70:	f7ff ff6f 	bl	8001b52 <UART_Receive_IT>
      return;
 8001c74:	e012      	b.n	8001c9c <HAL_UART_IRQHandler+0x4c>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001c76:	f001 0101 	and.w	r1, r1, #1
 8001c7a:	f400 7590 	and.w	r5, r0, #288	; 0x120
 8001c7e:	430d      	orrs	r5, r1
 8001c80:	d10d      	bne.n	8001c9e <HAL_UART_IRQHandler+0x4e>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001c82:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001c86:	d002      	beq.n	8001c8e <HAL_UART_IRQHandler+0x3e>
 8001c88:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001c8c:	d170      	bne.n	8001d70 <HAL_UART_IRQHandler+0x120>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001c8e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001c92:	d003      	beq.n	8001c9c <HAL_UART_IRQHandler+0x4c>
 8001c94:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001c98:	f040 8095 	bne.w	8001dc6 <HAL_UART_IRQHandler+0x176>
}
 8001c9c:	bd38      	pop	{r3, r4, r5, pc}
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001c9e:	f013 0f01 	tst.w	r3, #1
 8001ca2:	d006      	beq.n	8001cb2 <HAL_UART_IRQHandler+0x62>
 8001ca4:	f410 7f80 	tst.w	r0, #256	; 0x100
 8001ca8:	d003      	beq.n	8001cb2 <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001caa:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001cac:	f042 0201 	orr.w	r2, r2, #1
 8001cb0:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001cb2:	f013 0f04 	tst.w	r3, #4
 8001cb6:	d00b      	beq.n	8001cd0 <HAL_UART_IRQHandler+0x80>
 8001cb8:	b191      	cbz	r1, 8001ce0 <HAL_UART_IRQHandler+0x90>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001cba:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001cbc:	f042 0202 	orr.w	r2, r2, #2
 8001cc0:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001cc2:	f013 0f02 	tst.w	r3, #2
 8001cc6:	d107      	bne.n	8001cd8 <HAL_UART_IRQHandler+0x88>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001cc8:	f013 0f08 	tst.w	r3, #8
 8001ccc:	d10f      	bne.n	8001cee <HAL_UART_IRQHandler+0x9e>
 8001cce:	e012      	b.n	8001cf6 <HAL_UART_IRQHandler+0xa6>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001cd0:	f013 0f02 	tst.w	r3, #2
 8001cd4:	d004      	beq.n	8001ce0 <HAL_UART_IRQHandler+0x90>
 8001cd6:	b119      	cbz	r1, 8001ce0 <HAL_UART_IRQHandler+0x90>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001cd8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001cda:	f042 0204 	orr.w	r2, r2, #4
 8001cde:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001ce0:	f013 0f08 	tst.w	r3, #8
 8001ce4:	d007      	beq.n	8001cf6 <HAL_UART_IRQHandler+0xa6>
 8001ce6:	f000 0220 	and.w	r2, r0, #32
 8001cea:	430a      	orrs	r2, r1
 8001cec:	d003      	beq.n	8001cf6 <HAL_UART_IRQHandler+0xa6>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001cee:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001cf0:	f042 0208 	orr.w	r2, r2, #8
 8001cf4:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001cf6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001cf8:	2a00      	cmp	r2, #0
 8001cfa:	d0cf      	beq.n	8001c9c <HAL_UART_IRQHandler+0x4c>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001cfc:	f013 0f20 	tst.w	r3, #32
 8001d00:	d002      	beq.n	8001d08 <HAL_UART_IRQHandler+0xb8>
 8001d02:	f010 0f20 	tst.w	r0, #32
 8001d06:	d10e      	bne.n	8001d26 <HAL_UART_IRQHandler+0xd6>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001d08:	6823      	ldr	r3, [r4, #0]
 8001d0a:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001d0c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001d0e:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001d12:	f003 0308 	and.w	r3, r3, #8
 8001d16:	4313      	orrs	r3, r2
 8001d18:	d109      	bne.n	8001d2e <HAL_UART_IRQHandler+0xde>
        HAL_UART_ErrorCallback(huart);
 8001d1a:	4620      	mov	r0, r4
 8001d1c:	f7ff ff68 	bl	8001bf0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d20:	2300      	movs	r3, #0
 8001d22:	63e3      	str	r3, [r4, #60]	; 0x3c
 8001d24:	e7ba      	b.n	8001c9c <HAL_UART_IRQHandler+0x4c>
        UART_Receive_IT(huart);
 8001d26:	4620      	mov	r0, r4
 8001d28:	f7ff ff13 	bl	8001b52 <UART_Receive_IT>
 8001d2c:	e7ec      	b.n	8001d08 <HAL_UART_IRQHandler+0xb8>
        UART_EndRxTransfer(huart);
 8001d2e:	4620      	mov	r0, r4
 8001d30:	f7ff fde4 	bl	80018fc <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d34:	6823      	ldr	r3, [r4, #0]
 8001d36:	695a      	ldr	r2, [r3, #20]
 8001d38:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001d3c:	d014      	beq.n	8001d68 <HAL_UART_IRQHandler+0x118>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d3e:	695a      	ldr	r2, [r3, #20]
 8001d40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d44:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8001d46:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001d48:	b153      	cbz	r3, 8001d60 <HAL_UART_IRQHandler+0x110>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001d4a:	4a24      	ldr	r2, [pc, #144]	; (8001ddc <HAL_UART_IRQHandler+0x18c>)
 8001d4c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001d4e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001d50:	f7fe ff94 	bl	8000c7c <HAL_DMA_Abort_IT>
 8001d54:	2800      	cmp	r0, #0
 8001d56:	d0a1      	beq.n	8001c9c <HAL_UART_IRQHandler+0x4c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001d58:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001d5a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001d5c:	4798      	blx	r3
 8001d5e:	e79d      	b.n	8001c9c <HAL_UART_IRQHandler+0x4c>
            HAL_UART_ErrorCallback(huart);
 8001d60:	4620      	mov	r0, r4
 8001d62:	f7ff ff45 	bl	8001bf0 <HAL_UART_ErrorCallback>
 8001d66:	e799      	b.n	8001c9c <HAL_UART_IRQHandler+0x4c>
          HAL_UART_ErrorCallback(huart);
 8001d68:	4620      	mov	r0, r4
 8001d6a:	f7ff ff41 	bl	8001bf0 <HAL_UART_ErrorCallback>
 8001d6e:	e795      	b.n	8001c9c <HAL_UART_IRQHandler+0x4c>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001d70:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b21      	cmp	r3, #33	; 0x21
 8001d78:	d190      	bne.n	8001c9c <HAL_UART_IRQHandler+0x4c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d7a:	68a3      	ldr	r3, [r4, #8]
 8001d7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d80:	d015      	beq.n	8001dae <HAL_UART_IRQHandler+0x15e>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001d82:	6a23      	ldr	r3, [r4, #32]
 8001d84:	1c59      	adds	r1, r3, #1
 8001d86:	6221      	str	r1, [r4, #32]
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	6053      	str	r3, [r2, #4]
    if (--huart->TxXferCount == 0U)
 8001d8c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	84e3      	strh	r3, [r4, #38]	; 0x26
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d181      	bne.n	8001c9c <HAL_UART_IRQHandler+0x4c>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001d98:	6822      	ldr	r2, [r4, #0]
 8001d9a:	68d3      	ldr	r3, [r2, #12]
 8001d9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001da0:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001da2:	6822      	ldr	r2, [r4, #0]
 8001da4:	68d3      	ldr	r3, [r2, #12]
 8001da6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001daa:	60d3      	str	r3, [r2, #12]
 8001dac:	e776      	b.n	8001c9c <HAL_UART_IRQHandler+0x4c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001dae:	6923      	ldr	r3, [r4, #16]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1e6      	bne.n	8001d82 <HAL_UART_IRQHandler+0x132>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001db4:	6a23      	ldr	r3, [r4, #32]
 8001db6:	881b      	ldrh	r3, [r3, #0]
 8001db8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dbc:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 8001dbe:	6a23      	ldr	r3, [r4, #32]
 8001dc0:	3302      	adds	r3, #2
 8001dc2:	6223      	str	r3, [r4, #32]
 8001dc4:	e7e2      	b.n	8001d8c <HAL_UART_IRQHandler+0x13c>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001dc6:	68d3      	ldr	r3, [r2, #12]
 8001dc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001dcc:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001dce:	2320      	movs	r3, #32
 8001dd0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8001dd4:	4620      	mov	r0, r4
 8001dd6:	f7ff fe9c 	bl	8001b12 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 8001dda:	e75f      	b.n	8001c9c <HAL_UART_IRQHandler+0x4c>
 8001ddc:	08001de1 	.word	0x08001de1

08001de0 <UART_DMAAbortOnError>:
{
 8001de0:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001de2:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8001de4:	2300      	movs	r3, #0
 8001de6:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001de8:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8001dea:	f7ff ff01 	bl	8001bf0 <HAL_UART_ErrorCallback>
}
 8001dee:	bd08      	pop	{r3, pc}

08001df0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001df0:	b084      	sub	sp, #16
 8001df2:	a801      	add	r0, sp, #4
 8001df4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8001df8:	2000      	movs	r0, #0
 8001dfa:	b004      	add	sp, #16
 8001dfc:	4770      	bx	lr

08001dfe <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8001dfe:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8001e02:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001e06:	045b      	lsls	r3, r3, #17
 8001e08:	0c5b      	lsrs	r3, r3, #17
 8001e0a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8001e0e:	2000      	movs	r0, #0
 8001e10:	4770      	bx	lr

08001e12 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001e12:	2000      	movs	r0, #0
 8001e14:	4770      	bx	lr

08001e16 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001e16:	b084      	sub	sp, #16
 8001e18:	b410      	push	{r4}
 8001e1a:	4604      	mov	r4, r0
 8001e1c:	a802      	add	r0, sp, #8
 8001e1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8001e22:	2301      	movs	r3, #1
 8001e24:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8001e28:	2000      	movs	r0, #0
 8001e2a:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8001e2e:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8001e32:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50

  return HAL_OK;
}
 8001e36:	bc10      	pop	{r4}
 8001e38:	b004      	add	sp, #16
 8001e3a:	4770      	bx	lr

08001e3c <USB_DevDisconnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8001e3c:	2000      	movs	r0, #0
 8001e3e:	4770      	bx	lr

08001e40 <__libc_init_array>:
 8001e40:	b570      	push	{r4, r5, r6, lr}
 8001e42:	2600      	movs	r6, #0
 8001e44:	4d0c      	ldr	r5, [pc, #48]	; (8001e78 <__libc_init_array+0x38>)
 8001e46:	4c0d      	ldr	r4, [pc, #52]	; (8001e7c <__libc_init_array+0x3c>)
 8001e48:	1b64      	subs	r4, r4, r5
 8001e4a:	10a4      	asrs	r4, r4, #2
 8001e4c:	42a6      	cmp	r6, r4
 8001e4e:	d109      	bne.n	8001e64 <__libc_init_array+0x24>
 8001e50:	f000 f83c 	bl	8001ecc <_init>
 8001e54:	2600      	movs	r6, #0
 8001e56:	4d0a      	ldr	r5, [pc, #40]	; (8001e80 <__libc_init_array+0x40>)
 8001e58:	4c0a      	ldr	r4, [pc, #40]	; (8001e84 <__libc_init_array+0x44>)
 8001e5a:	1b64      	subs	r4, r4, r5
 8001e5c:	10a4      	asrs	r4, r4, #2
 8001e5e:	42a6      	cmp	r6, r4
 8001e60:	d105      	bne.n	8001e6e <__libc_init_array+0x2e>
 8001e62:	bd70      	pop	{r4, r5, r6, pc}
 8001e64:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e68:	4798      	blx	r3
 8001e6a:	3601      	adds	r6, #1
 8001e6c:	e7ee      	b.n	8001e4c <__libc_init_array+0xc>
 8001e6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e72:	4798      	blx	r3
 8001e74:	3601      	adds	r6, #1
 8001e76:	e7f2      	b.n	8001e5e <__libc_init_array+0x1e>
 8001e78:	08001f30 	.word	0x08001f30
 8001e7c:	08001f30 	.word	0x08001f30
 8001e80:	08001f30 	.word	0x08001f30
 8001e84:	08001f34 	.word	0x08001f34

08001e88 <memset>:
 8001e88:	4603      	mov	r3, r0
 8001e8a:	4402      	add	r2, r0
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d100      	bne.n	8001e92 <memset+0xa>
 8001e90:	4770      	bx	lr
 8001e92:	f803 1b01 	strb.w	r1, [r3], #1
 8001e96:	e7f9      	b.n	8001e8c <memset+0x4>

08001e98 <strcpy>:
 8001e98:	4603      	mov	r3, r0
 8001e9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001e9e:	f803 2b01 	strb.w	r2, [r3], #1
 8001ea2:	2a00      	cmp	r2, #0
 8001ea4:	d1f9      	bne.n	8001e9a <strcpy+0x2>
 8001ea6:	4770      	bx	lr

08001ea8 <strncmp>:
 8001ea8:	b510      	push	{r4, lr}
 8001eaa:	b16a      	cbz	r2, 8001ec8 <strncmp+0x20>
 8001eac:	3901      	subs	r1, #1
 8001eae:	1884      	adds	r4, r0, r2
 8001eb0:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001eb4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d103      	bne.n	8001ec4 <strncmp+0x1c>
 8001ebc:	42a0      	cmp	r0, r4
 8001ebe:	d001      	beq.n	8001ec4 <strncmp+0x1c>
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d1f5      	bne.n	8001eb0 <strncmp+0x8>
 8001ec4:	1a98      	subs	r0, r3, r2
 8001ec6:	bd10      	pop	{r4, pc}
 8001ec8:	4610      	mov	r0, r2
 8001eca:	e7fc      	b.n	8001ec6 <strncmp+0x1e>

08001ecc <_init>:
 8001ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ece:	bf00      	nop
 8001ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ed2:	bc08      	pop	{r3}
 8001ed4:	469e      	mov	lr, r3
 8001ed6:	4770      	bx	lr

08001ed8 <_fini>:
 8001ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eda:	bf00      	nop
 8001edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ede:	bc08      	pop	{r3}
 8001ee0:	469e      	mov	lr, r3
 8001ee2:	4770      	bx	lr
