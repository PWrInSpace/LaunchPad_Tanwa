
tanwaR4S.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a58  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08002b68  08002b68  00012b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bfc  08002bfc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002bfc  08002bfc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002bfc  08002bfc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bfc  08002bfc  00012bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c00  08002c00  00012c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002c04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f4  20000070  08002c74  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000564  08002c74  00020564  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001018e  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e94  00000000  00000000  00030227  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000930  00000000  00000000  000330c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c80  00000000  00000000  000339f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005d5a  00000000  00000000  00034670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f967  00000000  00000000  0003a3ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a583  00000000  00000000  00049d31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d42b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b0c  00000000  00000000  000d4308  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000076cd  00000000  00000000  000d5e14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08002b50 	.word	0x08002b50

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08002b50 	.word	0x08002b50

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <_ZN7IgniterC1EP12GPIO_TypeDeftS1_t>:
#include <Igniter.hh>

//(names of args start with '_' sign)
Igniter::Igniter(GPIO_TypeDef* _GPIO_PORT_IGNITER, uint16_t _PIN_IGNITER, GPIO_TypeDef* _IGN_GPIO_PORT_TEST_CON, uint16_t _IGN_PIN_TEST_CON){
 8000160:	b480      	push	{r7}
 8000162:	b085      	sub	sp, #20
 8000164:	af00      	add	r7, sp, #0
 8000166:	60f8      	str	r0, [r7, #12]
 8000168:	60b9      	str	r1, [r7, #8]
 800016a:	603b      	str	r3, [r7, #0]
 800016c:	4613      	mov	r3, r2
 800016e:	80fb      	strh	r3, [r7, #6]
	GPIO_PORT_IGNITER = _GPIO_PORT_IGNITER;
 8000170:	68fb      	ldr	r3, [r7, #12]
 8000172:	68ba      	ldr	r2, [r7, #8]
 8000174:	601a      	str	r2, [r3, #0]
	PIN_IGNITER = _PIN_IGNITER;
 8000176:	68fb      	ldr	r3, [r7, #12]
 8000178:	88fa      	ldrh	r2, [r7, #6]
 800017a:	809a      	strh	r2, [r3, #4]
	GPIO_PORT_TEST_CON = _IGN_GPIO_PORT_TEST_CON;
 800017c:	68fb      	ldr	r3, [r7, #12]
 800017e:	683a      	ldr	r2, [r7, #0]
 8000180:	609a      	str	r2, [r3, #8]
	PIN_TEST_CON = _IGN_PIN_TEST_CON;
 8000182:	68fb      	ldr	r3, [r7, #12]
 8000184:	8b3a      	ldrh	r2, [r7, #24]
 8000186:	819a      	strh	r2, [r3, #12]
}
 8000188:	68fb      	ldr	r3, [r7, #12]
 800018a:	4618      	mov	r0, r3
 800018c:	3714      	adds	r7, #20
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr

08000194 <_ZNK7Igniter12is_connectedEv>:

bool Igniter::is_connected() const{
 8000194:	b580      	push	{r7, lr}
 8000196:	b082      	sub	sp, #8
 8000198:	af00      	add	r7, sp, #0
 800019a:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(GPIO_PORT_TEST_CON, PIN_TEST_CON) == GPIO_PIN_SET)
 800019c:	687b      	ldr	r3, [r7, #4]
 800019e:	689a      	ldr	r2, [r3, #8]
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	899b      	ldrh	r3, [r3, #12]
 80001a4:	4619      	mov	r1, r3
 80001a6:	4610      	mov	r0, r2
 80001a8:	f001 f8a6 	bl	80012f8 <HAL_GPIO_ReadPin>
 80001ac:	4603      	mov	r3, r0
 80001ae:	2b01      	cmp	r3, #1
 80001b0:	bf0c      	ite	eq
 80001b2:	2301      	moveq	r3, #1
 80001b4:	2300      	movne	r3, #0
 80001b6:	b2db      	uxtb	r3, r3
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d001      	beq.n	80001c0 <_ZNK7Igniter12is_connectedEv+0x2c>
		return 1;
 80001bc:	2301      	movs	r3, #1
 80001be:	e000      	b.n	80001c2 <_ZNK7Igniter12is_connectedEv+0x2e>
	else
		return 0;
 80001c0:	2300      	movs	r3, #0
}
 80001c2:	4618      	mov	r0, r3
 80001c4:	3708      	adds	r7, #8
 80001c6:	46bd      	mov	sp, r7
 80001c8:	bd80      	pop	{r7, pc}

080001ca <_ZN7Igniter4FIREEv>:

void Igniter::FIRE(){
 80001ca:	b580      	push	{r7, lr}
 80001cc:	b082      	sub	sp, #8
 80001ce:	af00      	add	r7, sp, #0
 80001d0:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIO_PORT_IGNITER, PIN_IGNITER, GPIO_PIN_SET);
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	6818      	ldr	r0, [r3, #0]
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	889b      	ldrh	r3, [r3, #4]
 80001da:	2201      	movs	r2, #1
 80001dc:	4619      	mov	r1, r3
 80001de:	f001 f891 	bl	8001304 <HAL_GPIO_WritePin>
}
 80001e2:	bf00      	nop
 80001e4:	3708      	adds	r7, #8
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bd80      	pop	{r7, pc}
	...

080001ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80001f0:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001f2:	2400      	movs	r4, #0
 80001f4:	9404      	str	r4, [sp, #16]
 80001f6:	9405      	str	r4, [sp, #20]
 80001f8:	9406      	str	r4, [sp, #24]
 80001fa:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001fc:	4b2b      	ldr	r3, [pc, #172]	; (80002ac <MX_GPIO_Init+0xc0>)
 80001fe:	699a      	ldr	r2, [r3, #24]
 8000200:	f042 0210 	orr.w	r2, r2, #16
 8000204:	619a      	str	r2, [r3, #24]
 8000206:	699a      	ldr	r2, [r3, #24]
 8000208:	f002 0210 	and.w	r2, r2, #16
 800020c:	9200      	str	r2, [sp, #0]
 800020e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000210:	699a      	ldr	r2, [r3, #24]
 8000212:	f042 0220 	orr.w	r2, r2, #32
 8000216:	619a      	str	r2, [r3, #24]
 8000218:	699a      	ldr	r2, [r3, #24]
 800021a:	f002 0220 	and.w	r2, r2, #32
 800021e:	9201      	str	r2, [sp, #4]
 8000220:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000222:	699a      	ldr	r2, [r3, #24]
 8000224:	f042 0204 	orr.w	r2, r2, #4
 8000228:	619a      	str	r2, [r3, #24]
 800022a:	699a      	ldr	r2, [r3, #24]
 800022c:	f002 0204 	and.w	r2, r2, #4
 8000230:	9202      	str	r2, [sp, #8]
 8000232:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000234:	699a      	ldr	r2, [r3, #24]
 8000236:	f042 0208 	orr.w	r2, r2, #8
 800023a:	619a      	str	r2, [r3, #24]
 800023c:	699b      	ldr	r3, [r3, #24]
 800023e:	f003 0308 	and.w	r3, r3, #8
 8000242:	9303      	str	r3, [sp, #12]
 8000244:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUILD_IN_LED_GPIO_Port, BUILD_IN_LED_Pin, GPIO_PIN_RESET);
 8000246:	4d1a      	ldr	r5, [pc, #104]	; (80002b0 <MX_GPIO_Init+0xc4>)
 8000248:	4622      	mov	r2, r4
 800024a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800024e:	4628      	mov	r0, r5
 8000250:	f001 f858 	bl	8001304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IGN_FIRE_GPIO_Port, IGN_FIRE_Pin, GPIO_PIN_RESET);
 8000254:	4e17      	ldr	r6, [pc, #92]	; (80002b4 <MX_GPIO_Init+0xc8>)
 8000256:	4622      	mov	r2, r4
 8000258:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800025c:	4630      	mov	r0, r6
 800025e:	f001 f851 	bl	8001304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUILD_IN_LED_Pin;
 8000262:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000266:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000268:	f04f 0801 	mov.w	r8, #1
 800026c:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000270:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000272:	2702      	movs	r7, #2
 8000274:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(BUILD_IN_LED_GPIO_Port, &GPIO_InitStruct);
 8000276:	a904      	add	r1, sp, #16
 8000278:	4628      	mov	r0, r5
 800027a:	f000 ff2d 	bl	80010d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IGN_TEST_CON_Pin;
 800027e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000282:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000284:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000286:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(IGN_TEST_CON_GPIO_Port, &GPIO_InitStruct);
 8000288:	a904      	add	r1, sp, #16
 800028a:	4628      	mov	r0, r5
 800028c:	f000 ff24 	bl	80010d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IGN_FIRE_Pin;
 8000290:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000294:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000296:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800029a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800029c:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(IGN_FIRE_GPIO_Port, &GPIO_InitStruct);
 800029e:	a904      	add	r1, sp, #16
 80002a0:	4630      	mov	r0, r6
 80002a2:	f000 ff19 	bl	80010d8 <HAL_GPIO_Init>

}
 80002a6:	b008      	add	sp, #32
 80002a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80002ac:	40021000 	.word	0x40021000
 80002b0:	40011000 	.word	0x40011000
 80002b4:	40010800 	.word	0x40010800

080002b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ba:	b08d      	sub	sp, #52	; 0x34
 80002bc:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */
	  HAL_Delay(1000);
 80002be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002c2:	f000 fd01 	bl	8000cc8 <HAL_Delay>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002c6:	f000 fcdb 	bl	8000c80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002ca:	f000 f917 	bl	80004fc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ce:	f7ff ff8d 	bl	80001ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002d2:	f000 fa1b 	bl	800070c <MX_USART2_UART_Init>
  MX_USB_PCD_Init();
 80002d6:	f000 fafd 	bl	80008d4 <MX_USB_PCD_Init>
  MX_USART3_UART_Init();
 80002da:	f000 fa31 	bl	8000740 <MX_USART3_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  __HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);
 80002de:	4b78      	ldr	r3, [pc, #480]	; (80004c0 <main+0x208>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	68da      	ldr	r2, [r3, #12]
 80002e4:	4b76      	ldr	r3, [pc, #472]	; (80004c0 <main+0x208>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	f042 0210 	orr.w	r2, r2, #16
 80002ec:	60da      	str	r2, [r3, #12]
  HAL_UART_Receive_DMA(&huart2, (uint8_t*) xbee_rx.mess_loaded, DATA_LENGTH);
 80002ee:	2232      	movs	r2, #50	; 0x32
 80002f0:	4974      	ldr	r1, [pc, #464]	; (80004c4 <main+0x20c>)
 80002f2:	4873      	ldr	r0, [pc, #460]	; (80004c0 <main+0x208>)
 80002f4:	f001 fd6e 	bl	8001dd4 <HAL_UART_Receive_DMA>
  xbee_init(&communication, 0x0013A20041C283E5, &huart2); //inicjalizacja modułu xbee
 80002f8:	4b71      	ldr	r3, [pc, #452]	; (80004c0 <main+0x208>)
 80002fa:	9300      	str	r3, [sp, #0]
 80002fc:	a36e      	add	r3, pc, #440	; (adr r3, 80004b8 <main+0x200>)
 80002fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000302:	4871      	ldr	r0, [pc, #452]	; (80004c8 <main+0x210>)
 8000304:	f000 fb21 	bl	800094a <xbee_init>
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 8000308:	4b6d      	ldr	r3, [pc, #436]	; (80004c0 <main+0x208>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	68da      	ldr	r2, [r3, #12]
 800030e:	4b6c      	ldr	r3, [pc, #432]	; (80004c0 <main+0x208>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	f042 0220 	orr.w	r2, r2, #32
 8000316:	60da      	str	r2, [r3, #12]

  /* USER CODE END 2 */

  /* USER CODE BEGIN WHILE */

  Igniter igniter(IGN_FIRE_GPIO_Port, IGN_FIRE_Pin, IGN_TEST_CON_GPIO_Port, IGN_TEST_CON_Pin);
 8000318:	1d38      	adds	r0, r7, #4
 800031a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800031e:	9300      	str	r3, [sp, #0]
 8000320:	4b6a      	ldr	r3, [pc, #424]	; (80004cc <main+0x214>)
 8000322:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000326:	496a      	ldr	r1, [pc, #424]	; (80004d0 <main+0x218>)
 8000328:	f7ff ff1a 	bl	8000160 <_ZN7IgniterC1EP12GPIO_TypeDeftS1_t>


  state currState = Init;
 800032c:	2301      	movs	r3, #1
 800032e:	75fb      	strb	r3, [r7, #23]
  while (1)
  {
	  sprintf(dataOut,"D;S%i;I%i;F%i;", currState, igniter.is_connected(), fired);
 8000330:	7dfc      	ldrb	r4, [r7, #23]
 8000332:	1d3b      	adds	r3, r7, #4
 8000334:	4618      	mov	r0, r3
 8000336:	f7ff ff2d 	bl	8000194 <_ZNK7Igniter12is_connectedEv>
 800033a:	4603      	mov	r3, r0
 800033c:	461a      	mov	r2, r3
 800033e:	4b65      	ldr	r3, [pc, #404]	; (80004d4 <main+0x21c>)
 8000340:	781b      	ldrb	r3, [r3, #0]
 8000342:	9300      	str	r3, [sp, #0]
 8000344:	4613      	mov	r3, r2
 8000346:	4622      	mov	r2, r4
 8000348:	4963      	ldr	r1, [pc, #396]	; (80004d8 <main+0x220>)
 800034a:	4864      	ldr	r0, [pc, #400]	; (80004dc <main+0x224>)
 800034c:	f002 f854 	bl	80023f8 <siprintf>
	  xbee_transmit_char(communication, dataOut);
 8000350:	4e5d      	ldr	r6, [pc, #372]	; (80004c8 <main+0x210>)
 8000352:	4b62      	ldr	r3, [pc, #392]	; (80004dc <main+0x224>)
 8000354:	9305      	str	r3, [sp, #20]
 8000356:	466d      	mov	r5, sp
 8000358:	f106 0410 	add.w	r4, r6, #16
 800035c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800035e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000360:	6823      	ldr	r3, [r4, #0]
 8000362:	602b      	str	r3, [r5, #0]
 8000364:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000368:	f000 fbb5 	bl	8000ad6 <xbee_transmit_char>
	  HAL_Delay(50);
 800036c:	2032      	movs	r0, #50	; 0x32
 800036e:	f000 fcab 	bl	8000cc8 <HAL_Delay>

	  switch(currState){
 8000372:	7dfb      	ldrb	r3, [r7, #23]
 8000374:	3b01      	subs	r3, #1
 8000376:	2b06      	cmp	r3, #6
 8000378:	f200 8098 	bhi.w	80004ac <main+0x1f4>
 800037c:	a201      	add	r2, pc, #4	; (adr r2, 8000384 <main+0xcc>)
 800037e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000382:	bf00      	nop
 8000384:	080003a1 	.word	0x080003a1
 8000388:	080003bf 	.word	0x080003bf
 800038c:	080003dd 	.word	0x080003dd
 8000390:	08000429 	.word	0x08000429
 8000394:	08000435 	.word	0x08000435
 8000398:	0800049b 	.word	0x0800049b
 800039c:	080004a3 	.word	0x080004a3
		  case Init: //test state		//1:INIT

			  //place for random tests	//
			  if(igniter.is_connected()){
 80003a0:	1d3b      	adds	r3, r7, #4
 80003a2:	4618      	mov	r0, r3
 80003a4:	f7ff fef6 	bl	8000194 <_ZNK7Igniter12is_connectedEv>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d004      	beq.n	80003b8 <main+0x100>
   				  HAL_GPIO_TogglePin(BUILD_IN_LED_GPIO_Port, BUILD_IN_LED_Pin);
 80003ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003b2:	4846      	ldr	r0, [pc, #280]	; (80004cc <main+0x214>)
 80003b4:	f000 ffac 	bl	8001310 <HAL_GPIO_TogglePin>

			  //strcpy(dataIn, "DINI");	//xd

			  // (end) place for random test //

   			  currState = Idle;
 80003b8:	2302      	movs	r3, #2
 80003ba:	75fb      	strb	r3, [r7, #23]
   			  break;
 80003bc:	e079      	b.n	80004b2 <main+0x1fa>
   		  case Idle:{	//2:IDLE
   			  if(strncmp(dataIn, "DINI", 4) == 0){ // signal == init
 80003be:	2204      	movs	r2, #4
 80003c0:	4947      	ldr	r1, [pc, #284]	; (80004e0 <main+0x228>)
 80003c2:	4848      	ldr	r0, [pc, #288]	; (80004e4 <main+0x22c>)
 80003c4:	f002 f840 	bl	8002448 <strncmp>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d101      	bne.n	80003d2 <main+0x11a>
   				currState = ArmedHard;
 80003ce:	2303      	movs	r3, #3
 80003d0:	75fb      	strb	r3, [r7, #23]
   			  }
   			  HAL_Delay(5000);
 80003d2:	f241 3088 	movw	r0, #5000	; 0x1388
 80003d6:	f000 fc77 	bl	8000cc8 <HAL_Delay>
   			  break;
 80003da:	e06a      	b.n	80004b2 <main+0x1fa>
   		  }
   		  case ArmedHard:{	//3:ARMED(hard)
   			  if(igniter.is_connected() && strncmp(dataIn, "DARM", 4) == 0){ // signal == arm
 80003dc:	1d3b      	adds	r3, r7, #4
 80003de:	4618      	mov	r0, r3
 80003e0:	f7ff fed8 	bl	8000194 <_ZNK7Igniter12is_connectedEv>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d009      	beq.n	80003fe <main+0x146>
 80003ea:	2204      	movs	r2, #4
 80003ec:	493e      	ldr	r1, [pc, #248]	; (80004e8 <main+0x230>)
 80003ee:	483d      	ldr	r0, [pc, #244]	; (80004e4 <main+0x22c>)
 80003f0:	f002 f82a 	bl	8002448 <strncmp>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d101      	bne.n	80003fe <main+0x146>
 80003fa:	2301      	movs	r3, #1
 80003fc:	e000      	b.n	8000400 <main+0x148>
 80003fe:	2300      	movs	r3, #0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d002      	beq.n	800040a <main+0x152>
   				currState = ArmedSoft;
 8000404:	2304      	movs	r3, #4
 8000406:	75fb      	strb	r3, [r7, #23]
 8000408:	e009      	b.n	800041e <main+0x166>
   			  }
   			  else if(strncmp (dataIn, "DABR", 4) == 0){	//signal == abort
 800040a:	2204      	movs	r2, #4
 800040c:	4937      	ldr	r1, [pc, #220]	; (80004ec <main+0x234>)
 800040e:	4835      	ldr	r0, [pc, #212]	; (80004e4 <main+0x22c>)
 8000410:	f002 f81a 	bl	8002448 <strncmp>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d101      	bne.n	800041e <main+0x166>
   				currState = Abort;
 800041a:	2307      	movs	r3, #7
 800041c:	75fb      	strb	r3, [r7, #23]
			  }
   			  HAL_Delay(5000);
 800041e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000422:	f000 fc51 	bl	8000cc8 <HAL_Delay>
   			  break;
 8000426:	e044      	b.n	80004b2 <main+0x1fa>
   		  }
   		  case ArmedSoft:{	//4:ARMED(soft)
   			  currState = Ready; // there should be a signal for this (at least in R4 it necessary)
 8000428:	2305      	movs	r3, #5
 800042a:	75fb      	strb	r3, [r7, #23]
   			  HAL_Delay(100);
 800042c:	2064      	movs	r0, #100	; 0x64
 800042e:	f000 fc4b 	bl	8000cc8 <HAL_Delay>
   			  break;
 8000432:	e03e      	b.n	80004b2 <main+0x1fa>
   		  }
   		  case Ready:{	//5:Ready
			  if(strncmp (dataIn, "DSTA", 4) == 0){	//signal == fire
 8000434:	2204      	movs	r2, #4
 8000436:	492e      	ldr	r1, [pc, #184]	; (80004f0 <main+0x238>)
 8000438:	482a      	ldr	r0, [pc, #168]	; (80004e4 <main+0x22c>)
 800043a:	f002 f805 	bl	8002448 <strncmp>
 800043e:	4603      	mov	r3, r0
 8000440:	2b00      	cmp	r3, #0
 8000442:	d11b      	bne.n	800047c <main+0x1c4>
				  igniter.FIRE();
 8000444:	1d3b      	adds	r3, r7, #4
 8000446:	4618      	mov	r0, r3
 8000448:	f7ff febf 	bl	80001ca <_ZN7Igniter4FIREEv>
				  fired = 1;
 800044c:	4b21      	ldr	r3, [pc, #132]	; (80004d4 <main+0x21c>)
 800044e:	2201      	movs	r2, #1
 8000450:	701a      	strb	r2, [r3, #0]
				  sprintf(dataOut,"ASTB");
 8000452:	4928      	ldr	r1, [pc, #160]	; (80004f4 <main+0x23c>)
 8000454:	4821      	ldr	r0, [pc, #132]	; (80004dc <main+0x224>)
 8000456:	f001 ffcf 	bl	80023f8 <siprintf>
				  xbee_transmit_char(communication, dataOut);
 800045a:	4e1b      	ldr	r6, [pc, #108]	; (80004c8 <main+0x210>)
 800045c:	4b1f      	ldr	r3, [pc, #124]	; (80004dc <main+0x224>)
 800045e:	9305      	str	r3, [sp, #20]
 8000460:	466d      	mov	r5, sp
 8000462:	f106 0410 	add.w	r4, r6, #16
 8000466:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000468:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800046a:	6823      	ldr	r3, [r4, #0]
 800046c:	602b      	str	r3, [r5, #0]
 800046e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000472:	f000 fb30 	bl	8000ad6 <xbee_transmit_char>
				  currState = End;
 8000476:	2306      	movs	r3, #6
 8000478:	75fb      	strb	r3, [r7, #23]
 800047a:	e009      	b.n	8000490 <main+0x1d8>
			  }
			  else if(strncmp (dataIn, "DABR", 4) == 0){	//signal == abort
 800047c:	2204      	movs	r2, #4
 800047e:	491b      	ldr	r1, [pc, #108]	; (80004ec <main+0x234>)
 8000480:	4818      	ldr	r0, [pc, #96]	; (80004e4 <main+0x22c>)
 8000482:	f001 ffe1 	bl	8002448 <strncmp>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d101      	bne.n	8000490 <main+0x1d8>
				  currState = Abort;
 800048c:	2307      	movs	r3, #7
 800048e:	75fb      	strb	r3, [r7, #23]
			  }
			  HAL_Delay(1000);
 8000490:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000494:	f000 fc18 	bl	8000cc8 <HAL_Delay>
			  break;
 8000498:	e00b      	b.n	80004b2 <main+0x1fa>
		  }
   		  case End:{	//6:END
   			  HAL_Delay(1000000);
 800049a:	4817      	ldr	r0, [pc, #92]	; (80004f8 <main+0x240>)
 800049c:	f000 fc14 	bl	8000cc8 <HAL_Delay>
   			  break;
 80004a0:	e007      	b.n	80004b2 <main+0x1fa>
   		  }
   		  case Abort:{	//7:ABORT
			  HAL_Delay(1000);
 80004a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004a6:	f000 fc0f 	bl	8000cc8 <HAL_Delay>
			  break;
 80004aa:	e002      	b.n	80004b2 <main+0x1fa>
		  }
   		  default:{
   			  currState = Abort;
 80004ac:	2307      	movs	r3, #7
 80004ae:	75fb      	strb	r3, [r7, #23]
   			  break;
 80004b0:	bf00      	nop
	  sprintf(dataOut,"D;S%i;I%i;F%i;", currState, igniter.is_connected(), fired);
 80004b2:	e73d      	b.n	8000330 <main+0x78>
 80004b4:	f3af 8000 	nop.w
 80004b8:	41c283e5 	.word	0x41c283e5
 80004bc:	0013a200 	.word	0x0013a200
 80004c0:	20000224 	.word	0x20000224
 80004c4:	20000090 	.word	0x20000090
 80004c8:	2000012c 	.word	0x2000012c
 80004cc:	40011000 	.word	0x40011000
 80004d0:	40010800 	.word	0x40010800
 80004d4:	200000e8 	.word	0x200000e8
 80004d8:	08002b68 	.word	0x08002b68
 80004dc:	2000010c 	.word	0x2000010c
 80004e0:	08002b78 	.word	0x08002b78
 80004e4:	200000ec 	.word	0x200000ec
 80004e8:	08002b80 	.word	0x08002b80
 80004ec:	08002b88 	.word	0x08002b88
 80004f0:	08002b90 	.word	0x08002b90
 80004f4:	08002b98 	.word	0x08002b98
 80004f8:	000f4240 	.word	0x000f4240

080004fc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b094      	sub	sp, #80	; 0x50
 8000500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000502:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000506:	2228      	movs	r2, #40	; 0x28
 8000508:	2100      	movs	r1, #0
 800050a:	4618      	mov	r0, r3
 800050c:	f001 feb6 	bl	800227c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000510:	f107 0314 	add.w	r3, r7, #20
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
 8000518:	605a      	str	r2, [r3, #4]
 800051a:	609a      	str	r2, [r3, #8]
 800051c:	60da      	str	r2, [r3, #12]
 800051e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000520:	1d3b      	adds	r3, r7, #4
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	605a      	str	r2, [r3, #4]
 8000528:	609a      	str	r2, [r3, #8]
 800052a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800052c:	2301      	movs	r3, #1
 800052e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000530:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000534:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000536:	2300      	movs	r3, #0
 8000538:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800053a:	2301      	movs	r3, #1
 800053c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800053e:	2302      	movs	r3, #2
 8000540:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000542:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000546:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000548:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800054c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800054e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000552:	4618      	mov	r0, r3
 8000554:	f000 ff66 	bl	8001424 <HAL_RCC_OscConfig>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	bf14      	ite	ne
 800055e:	2301      	movne	r3, #1
 8000560:	2300      	moveq	r3, #0
 8000562:	b2db      	uxtb	r3, r3
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8000568:	f000 f870 	bl	800064c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800056c:	230f      	movs	r3, #15
 800056e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000570:	2302      	movs	r3, #2
 8000572:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000574:	2300      	movs	r3, #0
 8000576:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000578:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800057c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800057e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000582:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000584:	f107 0314 	add.w	r3, r7, #20
 8000588:	2101      	movs	r1, #1
 800058a:	4618      	mov	r0, r3
 800058c:	f001 f996 	bl	80018bc <HAL_RCC_ClockConfig>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	bf14      	ite	ne
 8000596:	2301      	movne	r3, #1
 8000598:	2300      	moveq	r3, #0
 800059a:	b2db      	uxtb	r3, r3
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <_Z18SystemClock_Configv+0xa8>
  {
    Error_Handler();
 80005a0:	f000 f854 	bl	800064c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80005a4:	2310      	movs	r3, #16
 80005a6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80005a8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ac:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	4618      	mov	r0, r3
 80005b2:	f001 fa5b 	bl	8001a6c <HAL_RCCEx_PeriphCLKConfig>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	bf14      	ite	ne
 80005bc:	2301      	movne	r3, #1
 80005be:	2300      	moveq	r3, #0
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <_Z18SystemClock_Configv+0xce>
  {
    Error_Handler();
 80005c6:	f000 f841 	bl	800064c <Error_Handler>
  }
}
 80005ca:	bf00      	nop
 80005cc:	3750      	adds	r7, #80	; 0x50
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
	...

080005d4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a14      	ldr	r2, [pc, #80]	; (8000634 <HAL_UART_RxCpltCallback+0x60>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d122      	bne.n	800062c <HAL_UART_RxCpltCallback+0x58>
		__HAL_UART_CLEAR_IDLEFLAG(&huart2);
 80005e6:	2300      	movs	r3, #0
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	4b13      	ldr	r3, [pc, #76]	; (8000638 <HAL_UART_RxCpltCallback+0x64>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	60fb      	str	r3, [r7, #12]
 80005f2:	4b11      	ldr	r3, [pc, #68]	; (8000638 <HAL_UART_RxCpltCallback+0x64>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	685b      	ldr	r3, [r3, #4]
 80005f8:	60fb      	str	r3, [r7, #12]
 80005fa:	68fb      	ldr	r3, [r7, #12]
		HAL_UART_DMAStop(&huart2);
 80005fc:	480e      	ldr	r0, [pc, #56]	; (8000638 <HAL_UART_RxCpltCallback+0x64>)
 80005fe:	f001 fc3d 	bl	8001e7c <HAL_UART_DMAStop>

		xbee_receive(); //odebranie całej wiadomości
 8000602:	f000 fa7f 	bl	8000b04 <xbee_receive>
		if(xbee_rx.data_flag){  //jeżeli wiadomość była danymi to ta zmienna będzie miała wartość 1
 8000606:	4b0d      	ldr	r3, [pc, #52]	; (800063c <HAL_UART_RxCpltCallback+0x68>)
 8000608:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800060c:	2b00      	cmp	r3, #0
 800060e:	d008      	beq.n	8000622 <HAL_UART_RxCpltCallback+0x4e>
			TUTAJ WEDLE UZNANIA PRZECHWYTUJECIE DANE KTORE PRZYSZŁY
			macie do dyspozycji tablice 'xbee_rx.data_array' o wielkości 'DATA_ARRAY' - 30, w której są wartości
			jeżeli chcecie zatrzymać te dane musicie skopiować wartości tej tabilicy
			pobranie adresu jest złym pomysłem bo przy każdym odebraniu tablica zmienia swoją zawartosć
			*/
			if(xbee_rx.data_array[0] == 'D'){
 8000610:	4b0a      	ldr	r3, [pc, #40]	; (800063c <HAL_UART_RxCpltCallback+0x68>)
 8000612:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8000616:	2b44      	cmp	r3, #68	; 0x44
 8000618:	d103      	bne.n	8000622 <HAL_UART_RxCpltCallback+0x4e>
				strcpy(dataIn, xbee_rx.data_array);
 800061a:	4909      	ldr	r1, [pc, #36]	; (8000640 <HAL_UART_RxCpltCallback+0x6c>)
 800061c:	4809      	ldr	r0, [pc, #36]	; (8000644 <HAL_UART_RxCpltCallback+0x70>)
 800061e:	f001 ff0b 	bl	8002438 <strcpy>
			}
		}
		//tutaj zmienić tylko huart
		HAL_UART_Receive_DMA(&huart2, (uint8_t*) xbee_rx.mess_loaded, DATA_LENGTH);
 8000622:	2232      	movs	r2, #50	; 0x32
 8000624:	4908      	ldr	r1, [pc, #32]	; (8000648 <HAL_UART_RxCpltCallback+0x74>)
 8000626:	4804      	ldr	r0, [pc, #16]	; (8000638 <HAL_UART_RxCpltCallback+0x64>)
 8000628:	f001 fbd4 	bl	8001dd4 <HAL_UART_Receive_DMA>
	}
}
 800062c:	bf00      	nop
 800062e:	3710      	adds	r7, #16
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	40004400 	.word	0x40004400
 8000638:	20000224 	.word	0x20000224
 800063c:	2000008c 	.word	0x2000008c
 8000640:	200000c2 	.word	0x200000c2
 8000644:	200000ec 	.word	0x200000ec
 8000648:	20000090 	.word	0x20000090

0800064c <Error_Handler>:

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void){
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000650:	b672      	cpsid	i
}
 8000652:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000654:	e7fe      	b.n	8000654 <Error_Handler+0x8>
	...

08000658 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000658:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800065a:	4b0e      	ldr	r3, [pc, #56]	; (8000694 <HAL_MspInit+0x3c>)
 800065c:	699a      	ldr	r2, [r3, #24]
 800065e:	f042 0201 	orr.w	r2, r2, #1
 8000662:	619a      	str	r2, [r3, #24]
 8000664:	699a      	ldr	r2, [r3, #24]
 8000666:	f002 0201 	and.w	r2, r2, #1
 800066a:	9200      	str	r2, [sp, #0]
 800066c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800066e:	69da      	ldr	r2, [r3, #28]
 8000670:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000674:	61da      	str	r2, [r3, #28]
 8000676:	69db      	ldr	r3, [r3, #28]
 8000678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800067c:	9301      	str	r3, [sp, #4]
 800067e:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000680:	4a05      	ldr	r2, [pc, #20]	; (8000698 <HAL_MspInit+0x40>)
 8000682:	6853      	ldr	r3, [r2, #4]
 8000684:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000688:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800068c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800068e:	b002      	add	sp, #8
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	40021000 	.word	0x40021000
 8000698:	40010000 	.word	0x40010000

0800069c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800069c:	e7fe      	b.n	800069c <NMI_Handler>

0800069e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800069e:	e7fe      	b.n	800069e <HardFault_Handler>

080006a0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006a0:	e7fe      	b.n	80006a0 <MemManage_Handler>

080006a2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006a2:	e7fe      	b.n	80006a2 <BusFault_Handler>

080006a4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006a4:	e7fe      	b.n	80006a4 <UsageFault_Handler>

080006a6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006a6:	4770      	bx	lr

080006a8 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006a8:	4770      	bx	lr

080006aa <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006aa:	4770      	bx	lr

080006ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006ac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006ae:	f000 faf9 	bl	8000ca4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006b2:	bd08      	pop	{r3, pc}

080006b4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80006b4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80006b6:	4802      	ldr	r0, [pc, #8]	; (80006c0 <DMA1_Channel6_IRQHandler+0xc>)
 80006b8:	f000 fc6e 	bl	8000f98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80006bc:	bd08      	pop	{r3, pc}
 80006be:	bf00      	nop
 80006c0:	2000015c 	.word	0x2000015c

080006c4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80006c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80006c6:	4802      	ldr	r0, [pc, #8]	; (80006d0 <DMA1_Channel7_IRQHandler+0xc>)
 80006c8:	f000 fc66 	bl	8000f98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80006cc:	bd08      	pop	{r3, pc}
 80006ce:	bf00      	nop
 80006d0:	200001e0 	.word	0x200001e0

080006d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80006d4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80006d6:	4c07      	ldr	r4, [pc, #28]	; (80006f4 <USART2_IRQHandler+0x20>)
 80006d8:	4620      	mov	r0, r4
 80006da:	f001 fca3 	bl	8002024 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  if(__HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE))
 80006de:	6823      	ldr	r3, [r4, #0]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f013 0f10 	tst.w	r3, #16
 80006e6:	d100      	bne.n	80006ea <USART2_IRQHandler+0x16>
	  HAL_UART_RxCpltCallback(&huart2);

  /* USER CODE END USART2_IRQn 1 */
}
 80006e8:	bd10      	pop	{r4, pc}
	  HAL_UART_RxCpltCallback(&huart2);
 80006ea:	4620      	mov	r0, r4
 80006ec:	f7ff ff72 	bl	80005d4 <HAL_UART_RxCpltCallback>
}
 80006f0:	e7fa      	b.n	80006e8 <USART2_IRQHandler+0x14>
 80006f2:	bf00      	nop
 80006f4:	20000224 	.word	0x20000224

080006f8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80006f8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80006fa:	4802      	ldr	r0, [pc, #8]	; (8000704 <USART3_IRQHandler+0xc>)
 80006fc:	f001 fc92 	bl	8002024 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000700:	bd08      	pop	{r3, pc}
 8000702:	bf00      	nop
 8000704:	200001a0 	.word	0x200001a0

08000708 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000708:	4770      	bx	lr
	...

0800070c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800070c:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800070e:	480a      	ldr	r0, [pc, #40]	; (8000738 <MX_USART2_UART_Init+0x2c>)
 8000710:	4b0a      	ldr	r3, [pc, #40]	; (800073c <MX_USART2_UART_Init+0x30>)
 8000712:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8000714:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000718:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800071a:	2300      	movs	r3, #0
 800071c:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800071e:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000720:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000722:	220c      	movs	r2, #12
 8000724:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000726:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000728:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800072a:	f001 fab1 	bl	8001c90 <HAL_UART_Init>
 800072e:	b900      	cbnz	r0, 8000732 <MX_USART2_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000730:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000732:	f7ff ff8b 	bl	800064c <Error_Handler>
}
 8000736:	e7fb      	b.n	8000730 <MX_USART2_UART_Init+0x24>
 8000738:	20000224 	.word	0x20000224
 800073c:	40004400 	.word	0x40004400

08000740 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000740:	b508      	push	{r3, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000742:	480a      	ldr	r0, [pc, #40]	; (800076c <MX_USART3_UART_Init+0x2c>)
 8000744:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <MX_USART3_UART_Init+0x30>)
 8000746:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 8000748:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800074c:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800074e:	2300      	movs	r3, #0
 8000750:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000752:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000754:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000756:	220c      	movs	r2, #12
 8000758:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075a:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800075c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800075e:	f001 fa97 	bl	8001c90 <HAL_UART_Init>
 8000762:	b900      	cbnz	r0, 8000766 <MX_USART3_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000764:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000766:	f7ff ff71 	bl	800064c <Error_Handler>
}
 800076a:	e7fb      	b.n	8000764 <MX_USART3_UART_Init+0x24>
 800076c:	200001a0 	.word	0x200001a0
 8000770:	40004800 	.word	0x40004800

08000774 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000774:	b570      	push	{r4, r5, r6, lr}
 8000776:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000778:	2300      	movs	r3, #0
 800077a:	9304      	str	r3, [sp, #16]
 800077c:	9305      	str	r3, [sp, #20]
 800077e:	9306      	str	r3, [sp, #24]
 8000780:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART2)
 8000782:	6803      	ldr	r3, [r0, #0]
 8000784:	4a4a      	ldr	r2, [pc, #296]	; (80008b0 <HAL_UART_MspInit+0x13c>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d004      	beq.n	8000794 <HAL_UART_MspInit+0x20>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 800078a:	4a4a      	ldr	r2, [pc, #296]	; (80008b4 <HAL_UART_MspInit+0x140>)
 800078c:	4293      	cmp	r3, r2
 800078e:	d05c      	beq.n	800084a <HAL_UART_MspInit+0xd6>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000790:	b008      	add	sp, #32
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	4604      	mov	r4, r0
    __HAL_RCC_USART2_CLK_ENABLE();
 8000796:	4b48      	ldr	r3, [pc, #288]	; (80008b8 <HAL_UART_MspInit+0x144>)
 8000798:	69da      	ldr	r2, [r3, #28]
 800079a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800079e:	61da      	str	r2, [r3, #28]
 80007a0:	69da      	ldr	r2, [r3, #28]
 80007a2:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80007a6:	9200      	str	r2, [sp, #0]
 80007a8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007aa:	699a      	ldr	r2, [r3, #24]
 80007ac:	f042 0204 	orr.w	r2, r2, #4
 80007b0:	619a      	str	r2, [r3, #24]
 80007b2:	699b      	ldr	r3, [r3, #24]
 80007b4:	f003 0304 	and.w	r3, r3, #4
 80007b8:	9301      	str	r3, [sp, #4]
 80007ba:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007bc:	2304      	movs	r3, #4
 80007be:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c0:	2302      	movs	r3, #2
 80007c2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007c4:	2303      	movs	r3, #3
 80007c6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c8:	4e3c      	ldr	r6, [pc, #240]	; (80008bc <HAL_UART_MspInit+0x148>)
 80007ca:	a904      	add	r1, sp, #16
 80007cc:	4630      	mov	r0, r6
 80007ce:	f000 fc83 	bl	80010d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80007d2:	2308      	movs	r3, #8
 80007d4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d6:	2500      	movs	r5, #0
 80007d8:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007dc:	a904      	add	r1, sp, #16
 80007de:	4630      	mov	r0, r6
 80007e0:	f000 fc7a 	bl	80010d8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80007e4:	4836      	ldr	r0, [pc, #216]	; (80008c0 <HAL_UART_MspInit+0x14c>)
 80007e6:	4b37      	ldr	r3, [pc, #220]	; (80008c4 <HAL_UART_MspInit+0x150>)
 80007e8:	6003      	str	r3, [r0, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007ea:	6045      	str	r5, [r0, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007ec:	6085      	str	r5, [r0, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80007ee:	2380      	movs	r3, #128	; 0x80
 80007f0:	60c3      	str	r3, [r0, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007f2:	6105      	str	r5, [r0, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007f4:	6145      	str	r5, [r0, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80007f6:	6185      	str	r5, [r0, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80007f8:	61c5      	str	r5, [r0, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80007fa:	f000 fae1 	bl	8000dc0 <HAL_DMA_Init>
 80007fe:	b9f0      	cbnz	r0, 800083e <HAL_UART_MspInit+0xca>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000800:	4b2f      	ldr	r3, [pc, #188]	; (80008c0 <HAL_UART_MspInit+0x14c>)
 8000802:	6363      	str	r3, [r4, #52]	; 0x34
 8000804:	625c      	str	r4, [r3, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000806:	4830      	ldr	r0, [pc, #192]	; (80008c8 <HAL_UART_MspInit+0x154>)
 8000808:	4b30      	ldr	r3, [pc, #192]	; (80008cc <HAL_UART_MspInit+0x158>)
 800080a:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800080c:	2310      	movs	r3, #16
 800080e:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000810:	2300      	movs	r3, #0
 8000812:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000814:	2280      	movs	r2, #128	; 0x80
 8000816:	60c2      	str	r2, [r0, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000818:	6103      	str	r3, [r0, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800081a:	6143      	str	r3, [r0, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800081c:	6183      	str	r3, [r0, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800081e:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000820:	f000 face 	bl	8000dc0 <HAL_DMA_Init>
 8000824:	b970      	cbnz	r0, 8000844 <HAL_UART_MspInit+0xd0>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8000826:	4b28      	ldr	r3, [pc, #160]	; (80008c8 <HAL_UART_MspInit+0x154>)
 8000828:	6323      	str	r3, [r4, #48]	; 0x30
 800082a:	625c      	str	r4, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800082c:	2200      	movs	r2, #0
 800082e:	4611      	mov	r1, r2
 8000830:	2026      	movs	r0, #38	; 0x26
 8000832:	f000 fa6f 	bl	8000d14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000836:	2026      	movs	r0, #38	; 0x26
 8000838:	f000 fa9e 	bl	8000d78 <HAL_NVIC_EnableIRQ>
 800083c:	e7a8      	b.n	8000790 <HAL_UART_MspInit+0x1c>
      Error_Handler();
 800083e:	f7ff ff05 	bl	800064c <Error_Handler>
 8000842:	e7dd      	b.n	8000800 <HAL_UART_MspInit+0x8c>
      Error_Handler();
 8000844:	f7ff ff02 	bl	800064c <Error_Handler>
 8000848:	e7ed      	b.n	8000826 <HAL_UART_MspInit+0xb2>
    __HAL_RCC_USART3_CLK_ENABLE();
 800084a:	4b1b      	ldr	r3, [pc, #108]	; (80008b8 <HAL_UART_MspInit+0x144>)
 800084c:	69da      	ldr	r2, [r3, #28]
 800084e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000852:	61da      	str	r2, [r3, #28]
 8000854:	69da      	ldr	r2, [r3, #28]
 8000856:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800085a:	9202      	str	r2, [sp, #8]
 800085c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800085e:	699a      	ldr	r2, [r3, #24]
 8000860:	f042 0208 	orr.w	r2, r2, #8
 8000864:	619a      	str	r2, [r3, #24]
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	f003 0308 	and.w	r3, r3, #8
 800086c:	9303      	str	r3, [sp, #12]
 800086e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000870:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000874:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000876:	2302      	movs	r3, #2
 8000878:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800087a:	2303      	movs	r3, #3
 800087c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800087e:	4d14      	ldr	r5, [pc, #80]	; (80008d0 <HAL_UART_MspInit+0x15c>)
 8000880:	a904      	add	r1, sp, #16
 8000882:	4628      	mov	r0, r5
 8000884:	f000 fc28 	bl	80010d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000888:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800088c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800088e:	2400      	movs	r4, #0
 8000890:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000894:	a904      	add	r1, sp, #16
 8000896:	4628      	mov	r0, r5
 8000898:	f000 fc1e 	bl	80010d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800089c:	4622      	mov	r2, r4
 800089e:	4621      	mov	r1, r4
 80008a0:	2027      	movs	r0, #39	; 0x27
 80008a2:	f000 fa37 	bl	8000d14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80008a6:	2027      	movs	r0, #39	; 0x27
 80008a8:	f000 fa66 	bl	8000d78 <HAL_NVIC_EnableIRQ>
}
 80008ac:	e770      	b.n	8000790 <HAL_UART_MspInit+0x1c>
 80008ae:	bf00      	nop
 80008b0:	40004400 	.word	0x40004400
 80008b4:	40004800 	.word	0x40004800
 80008b8:	40021000 	.word	0x40021000
 80008bc:	40010800 	.word	0x40010800
 80008c0:	2000015c 	.word	0x2000015c
 80008c4:	4002006c 	.word	0x4002006c
 80008c8:	200001e0 	.word	0x200001e0
 80008cc:	40020080 	.word	0x40020080
 80008d0:	40010c00 	.word	0x40010c00

080008d4 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 80008d4:	b508      	push	{r3, lr}
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80008d6:	4809      	ldr	r0, [pc, #36]	; (80008fc <MX_USB_PCD_Init+0x28>)
 80008d8:	4b09      	ldr	r3, [pc, #36]	; (8000900 <MX_USB_PCD_Init+0x2c>)
 80008da:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80008dc:	2308      	movs	r3, #8
 80008de:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80008e0:	2302      	movs	r3, #2
 80008e2:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80008e4:	2300      	movs	r3, #0
 80008e6:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80008e8:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80008ea:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80008ec:	f000 fd19 	bl	8001322 <HAL_PCD_Init>
 80008f0:	b900      	cbnz	r0, 80008f4 <MX_USB_PCD_Init+0x20>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80008f2:	bd08      	pop	{r3, pc}
    Error_Handler();
 80008f4:	f7ff feaa 	bl	800064c <Error_Handler>
}
 80008f8:	e7fb      	b.n	80008f2 <MX_USB_PCD_Init+0x1e>
 80008fa:	bf00      	nop
 80008fc:	20000264 	.word	0x20000264
 8000900:	40005c00 	.word	0x40005c00

08000904 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{

  if(pcdHandle->Instance==USB)
 8000904:	6802      	ldr	r2, [r0, #0]
 8000906:	4b09      	ldr	r3, [pc, #36]	; (800092c <HAL_PCD_MspInit+0x28>)
 8000908:	429a      	cmp	r2, r3
 800090a:	d000      	beq.n	800090e <HAL_PCD_MspInit+0xa>
 800090c:	4770      	bx	lr
{
 800090e:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000910:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8000914:	69da      	ldr	r2, [r3, #28]
 8000916:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800091a:	61da      	str	r2, [r3, #28]
 800091c:	69db      	ldr	r3, [r3, #28]
 800091e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000922:	9301      	str	r3, [sp, #4]
 8000924:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8000926:	b002      	add	sp, #8
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	40005c00 	.word	0x40005c00

08000930 <xbee_options_init>:


//Wpisanie opcji api do tablicy
//Tutaj bez dynamicznych bo nie ma kiedy zwolnić tablicy
void xbee_options_init(uint8_t *options){
	options[0] = START_BYTE;
 8000930:	237e      	movs	r3, #126	; 0x7e
 8000932:	7003      	strb	r3, [r0, #0]
	options[1] = FRAME_TYPE;
 8000934:	2310      	movs	r3, #16
 8000936:	7043      	strb	r3, [r0, #1]
	options[2] = FRAME_ID ;
 8000938:	2300      	movs	r3, #0
 800093a:	7083      	strb	r3, [r0, #2]
	options[3] = BT_1;
 800093c:	22ff      	movs	r2, #255	; 0xff
 800093e:	70c2      	strb	r2, [r0, #3]
	options[4] = BT_2;
 8000940:	22fe      	movs	r2, #254	; 0xfe
 8000942:	7102      	strb	r2, [r0, #4]
	options[5] = BORDCAST_RADIUS;
 8000944:	7143      	strb	r3, [r0, #5]
	options[6] = OPTIONS;
 8000946:	7183      	strb	r3, [r0, #6]
}
 8000948:	4770      	bx	lr

0800094a <xbee_init>:

//Zamiana adresu na tablice
//Ogólna inicjalizacja xbee
void xbee_init(Xbee *sensor, uint64_t address, UART_HandleTypeDef *uart){
 800094a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800094c:	b083      	sub	sp, #12
 800094e:	4606      	mov	r6, r0
 8000950:	4614      	mov	r4, r2
 8000952:	461f      	mov	r7, r3
	  uint8_t temp[8]; //tablica do wczytania oryginalego adresu;
	  int i, j;

	 sensor->huart = uart;
 8000954:	9b08      	ldr	r3, [sp, #32]
 8000956:	6203      	str	r3, [r0, #32]

	  xbee_options_init(sensor->options); //Inicjalizacja opcji, raz wystarczy
 8000958:	f7ff ffea 	bl	8000930 <xbee_options_init>


	  //to idzie jeszcze poprawic do jednej petli
	  for(i=0; i<8; i++){
 800095c:	7f31      	ldrb	r1, [r6, #28]
 800095e:	f10d 35ff 	add.w	r5, sp, #4294967295
 8000962:	f10d 0307 	add.w	r3, sp, #7
		  temp[i] = address;
 8000966:	b2e2      	uxtb	r2, r4
 8000968:	f805 2f01 	strb.w	r2, [r5, #1]!
		  sensor->checksum += temp[i];
 800096c:	4411      	add	r1, r2
 800096e:	b2c9      	uxtb	r1, r1

		  address /= 0x100;
 8000970:	0a24      	lsrs	r4, r4, #8
 8000972:	ea44 6407 	orr.w	r4, r4, r7, lsl #24
 8000976:	0a3f      	lsrs	r7, r7, #8
	  for(i=0; i<8; i++){
 8000978:	429d      	cmp	r5, r3
 800097a:	d1f4      	bne.n	8000966 <xbee_init+0x1c>
 800097c:	7731      	strb	r1, [r6, #28]
 800097e:	f10d 0207 	add.w	r2, sp, #7
 8000982:	f106 0309 	add.w	r3, r6, #9
 8000986:	3611      	adds	r6, #17
	  }

	  //Wpisanie adresu do tablicy dynamicznej
	  for(i=7, j=0; i>=0; i--, j++){
		  sensor->address[j] = temp[i];
 8000988:	f812 1901 	ldrb.w	r1, [r2], #-1
 800098c:	f803 1b01 	strb.w	r1, [r3], #1
	  for(i=7, j=0; i>=0; i--, j++){
 8000990:	42b3      	cmp	r3, r6
 8000992:	d1f9      	bne.n	8000988 <xbee_init+0x3e>
	  }
}
 8000994:	b003      	add	sp, #12
 8000996:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000998 <xbee_length>:

//Obliczenie długości i wpisanie jej do tablicy
void xbee_length(Xbee *sensor){
	//Pierwszy element dlugosci to 0;
	int l;
	l = 14 + sensor->data_length;
 8000998:	6983      	ldr	r3, [r0, #24]
 800099a:	330e      	adds	r3, #14

	//Tworzymy tablice i wpisujemy wartosci
	sensor->length[0] = l/100;
 800099c:	4904      	ldr	r1, [pc, #16]	; (80009b0 <xbee_length+0x18>)
 800099e:	fb81 2103 	smull	r2, r1, r1, r3
 80009a2:	17da      	asrs	r2, r3, #31
 80009a4:	ebc2 1261 	rsb	r2, r2, r1, asr #5
 80009a8:	71c2      	strb	r2, [r0, #7]
	sensor->length[1] = l;
 80009aa:	7203      	strb	r3, [r0, #8]
}
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	51eb851f 	.word	0x51eb851f

080009b4 <xbee_checksum_count>:

//Obliczenie chceksumy
void xbee_checksum_count(Xbee *sensor){
 80009b4:	b410      	push	{r4}
	int i=0;
	for(i=1; i<7; i++){
 80009b6:	7f03      	ldrb	r3, [r0, #28]
 80009b8:	1c42      	adds	r2, r0, #1
 80009ba:	1dc4      	adds	r4, r0, #7
		sensor->checksum += sensor->options[i];
 80009bc:	f812 1b01 	ldrb.w	r1, [r2], #1
 80009c0:	440b      	add	r3, r1
 80009c2:	b2db      	uxtb	r3, r3
	for(i=1; i<7; i++){
 80009c4:	42a2      	cmp	r2, r4
 80009c6:	d1f9      	bne.n	80009bc <xbee_checksum_count+0x8>
 80009c8:	7703      	strb	r3, [r0, #28]
	}
	for(i=0; i<sensor->data_length; i++){
 80009ca:	6983      	ldr	r3, [r0, #24]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	dd0a      	ble.n	80009e6 <xbee_checksum_count+0x32>
		sensor->checksum += sensor->data[i];
 80009d0:	6944      	ldr	r4, [r0, #20]
 80009d2:	1e62      	subs	r2, r4, #1
 80009d4:	441c      	add	r4, r3
 80009d6:	3c01      	subs	r4, #1
 80009d8:	7f03      	ldrb	r3, [r0, #28]
 80009da:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80009de:	440b      	add	r3, r1
 80009e0:	7703      	strb	r3, [r0, #28]
	for(i=0; i<sensor->data_length; i++){
 80009e2:	42a2      	cmp	r2, r4
 80009e4:	d1f8      	bne.n	80009d8 <xbee_checksum_count+0x24>
	}
	sensor->checksum = 0xff - sensor->checksum;
 80009e6:	7f03      	ldrb	r3, [r0, #28]
 80009e8:	43db      	mvns	r3, r3
 80009ea:	7703      	strb	r3, [r0, #28]

}
 80009ec:	bc10      	pop	{r4}
 80009ee:	4770      	bx	lr

080009f0 <xbee_send>:

//Czy tutaj tworzyc tablice z cala wiadomoscia i wysłać całę odrazu
void xbee_send(Xbee *sensor){
 80009f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80009f4:	4604      	mov	r4, r0
	int i;

		//wyslanie znaku start
		HAL_UART_Transmit(sensor->huart, &sensor->options[0], 1, 100);
 80009f6:	2364      	movs	r3, #100	; 0x64
 80009f8:	2201      	movs	r2, #1
 80009fa:	4601      	mov	r1, r0
 80009fc:	6a00      	ldr	r0, [r0, #32]
 80009fe:	f001 f976 	bl	8001cee <HAL_UART_Transmit>

		//wyslanie dlugosci
		for(i=0; i<2; i++){
			HAL_UART_Transmit(sensor->huart, &sensor->length[i], 1, 100);
 8000a02:	2364      	movs	r3, #100	; 0x64
 8000a04:	2201      	movs	r2, #1
 8000a06:	1de1      	adds	r1, r4, #7
 8000a08:	6a20      	ldr	r0, [r4, #32]
 8000a0a:	f001 f970 	bl	8001cee <HAL_UART_Transmit>
 8000a0e:	2364      	movs	r3, #100	; 0x64
 8000a10:	2201      	movs	r2, #1
 8000a12:	f104 0108 	add.w	r1, r4, #8
 8000a16:	6a20      	ldr	r0, [r4, #32]
 8000a18:	f001 f969 	bl	8001cee <HAL_UART_Transmit>
		}

		//wyslanie danych klatki
		HAL_UART_Transmit(sensor->huart, &sensor->options[1], 1, 100);
 8000a1c:	2364      	movs	r3, #100	; 0x64
 8000a1e:	2201      	movs	r2, #1
 8000a20:	18a1      	adds	r1, r4, r2
 8000a22:	6a20      	ldr	r0, [r4, #32]
 8000a24:	f001 f963 	bl	8001cee <HAL_UART_Transmit>
		HAL_UART_Transmit(sensor->huart, &sensor->options[2], 1, 100);
 8000a28:	2364      	movs	r3, #100	; 0x64
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	1ca1      	adds	r1, r4, #2
 8000a2e:	6a20      	ldr	r0, [r4, #32]
 8000a30:	f001 f95d 	bl	8001cee <HAL_UART_Transmit>

		//Wyslanie adresu
		for(i=0; i<8; i++){
 8000a34:	f104 0509 	add.w	r5, r4, #9
 8000a38:	f104 0811 	add.w	r8, r4, #17
			HAL_UART_Transmit(sensor->huart, &sensor->address[i], 1, 100);
 8000a3c:	2764      	movs	r7, #100	; 0x64
 8000a3e:	2601      	movs	r6, #1
 8000a40:	463b      	mov	r3, r7
 8000a42:	4632      	mov	r2, r6
 8000a44:	4629      	mov	r1, r5
 8000a46:	6a20      	ldr	r0, [r4, #32]
 8000a48:	f001 f951 	bl	8001cee <HAL_UART_Transmit>
		for(i=0; i<8; i++){
 8000a4c:	3501      	adds	r5, #1
 8000a4e:	4545      	cmp	r5, r8
 8000a50:	d1f6      	bne.n	8000a40 <xbee_send+0x50>
 8000a52:	1ce5      	adds	r5, r4, #3
 8000a54:	f104 0807 	add.w	r8, r4, #7
		}

		//wyslanie reszty opcji
		for(i=3; i<7; i++){
			HAL_UART_Transmit(sensor->huart, &sensor->options[i], 1, 100);
 8000a58:	2764      	movs	r7, #100	; 0x64
 8000a5a:	2601      	movs	r6, #1
 8000a5c:	463b      	mov	r3, r7
 8000a5e:	4632      	mov	r2, r6
 8000a60:	4629      	mov	r1, r5
 8000a62:	6a20      	ldr	r0, [r4, #32]
 8000a64:	f001 f943 	bl	8001cee <HAL_UART_Transmit>
		for(i=3; i<7; i++){
 8000a68:	3501      	adds	r5, #1
 8000a6a:	4545      	cmp	r5, r8
 8000a6c:	d1f6      	bne.n	8000a5c <xbee_send+0x6c>
		}

		//wyslanie danych
		for(i=0; i<sensor->data_length; i++){
 8000a6e:	69a3      	ldr	r3, [r4, #24]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	dd0d      	ble.n	8000a90 <xbee_send+0xa0>
 8000a74:	2500      	movs	r5, #0
			HAL_UART_Transmit(sensor->huart, (uint8_t *) &sensor->data[i], 1, 100);
 8000a76:	2764      	movs	r7, #100	; 0x64
 8000a78:	2601      	movs	r6, #1
 8000a7a:	6961      	ldr	r1, [r4, #20]
 8000a7c:	463b      	mov	r3, r7
 8000a7e:	4632      	mov	r2, r6
 8000a80:	4429      	add	r1, r5
 8000a82:	6a20      	ldr	r0, [r4, #32]
 8000a84:	f001 f933 	bl	8001cee <HAL_UART_Transmit>
		for(i=0; i<sensor->data_length; i++){
 8000a88:	3501      	adds	r5, #1
 8000a8a:	69a3      	ldr	r3, [r4, #24]
 8000a8c:	42ab      	cmp	r3, r5
 8000a8e:	dcf4      	bgt.n	8000a7a <xbee_send+0x8a>
		}

		//wyslanie checksumy
		HAL_UART_Transmit(sensor->huart, &sensor->checksum, 1, 100);
 8000a90:	2364      	movs	r3, #100	; 0x64
 8000a92:	2201      	movs	r2, #1
 8000a94:	f104 011c 	add.w	r1, r4, #28
 8000a98:	6a20      	ldr	r0, [r4, #32]
 8000a9a:	f001 f928 	bl	8001cee <HAL_UART_Transmit>


		//Czyszczenie pamięci
		free(sensor->data);
 8000a9e:	6960      	ldr	r0, [r4, #20]
 8000aa0:	f001 fbe4 	bl	800226c <free>
}
 8000aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000aa8 <xbee_char_load>:
	xbee_checksum_count(&sensor);
	xbee_send(&sensor);
}

//wczytanie podanych danych do struktury
void xbee_char_load(char *data, Xbee *sensor){
 8000aa8:	b570      	push	{r4, r5, r6, lr}
 8000aaa:	4605      	mov	r5, r0
 8000aac:	460c      	mov	r4, r1
	sensor->data_length = strlen(data); //strlen niby powinien zadziałać bez
 8000aae:	f7ff fb4f 	bl	8000150 <strlen>
 8000ab2:	4606      	mov	r6, r0
 8000ab4:	61a0      	str	r0, [r4, #24]
	sensor->data = (uint8_t*)malloc(sensor->data_length * sizeof(uint8_t));//
 8000ab6:	f001 fbd1 	bl	800225c <malloc>
 8000aba:	6160      	str	r0, [r4, #20]

	for(int i=0; i<sensor->data_length; ++i){
 8000abc:	2e00      	cmp	r6, #0
 8000abe:	dd09      	ble.n	8000ad4 <xbee_char_load+0x2c>
 8000ac0:	1e68      	subs	r0, r5, #1
 8000ac2:	2300      	movs	r3, #0
		sensor->data[i] = data[i];
 8000ac4:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 8000ac8:	6962      	ldr	r2, [r4, #20]
 8000aca:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<sensor->data_length; ++i){
 8000acc:	3301      	adds	r3, #1
 8000ace:	69a2      	ldr	r2, [r4, #24]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	dcf7      	bgt.n	8000ac4 <xbee_char_load+0x1c>
	}
}
 8000ad4:	bd70      	pop	{r4, r5, r6, pc}

08000ad6 <xbee_transmit_char>:
void xbee_transmit_char(Xbee sensor, char *data){
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	b508      	push	{r3, lr}
 8000ada:	f10d 0c08 	add.w	ip, sp, #8
 8000ade:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	xbee_char_load(data, &sensor);
 8000ae2:	4661      	mov	r1, ip
 8000ae4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8000ae6:	f7ff ffdf 	bl	8000aa8 <xbee_char_load>
	xbee_length(&sensor);
 8000aea:	a802      	add	r0, sp, #8
 8000aec:	f7ff ff54 	bl	8000998 <xbee_length>
	xbee_checksum_count(&sensor);
 8000af0:	a802      	add	r0, sp, #8
 8000af2:	f7ff ff5f 	bl	80009b4 <xbee_checksum_count>
	xbee_send(&sensor);
 8000af6:	a802      	add	r0, sp, #8
 8000af8:	f7ff ff7a 	bl	80009f0 <xbee_send>
}
 8000afc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000b00:	b004      	add	sp, #16
 8000b02:	4770      	bx	lr

08000b04 <xbee_receive>:
    return result;
}


///zastanowić się jak sensownie zwracać dane
void xbee_receive(){
 8000b04:	b470      	push	{r4, r5, r6}
	for(int i=0; i<length; i++){
 8000b06:	4b34      	ldr	r3, [pc, #208]	; (8000bd8 <xbee_receive+0xd4>)
 8000b08:	f1a3 0435 	sub.w	r4, r3, #53	; 0x35
 8000b0c:	f103 011e 	add.w	r1, r3, #30
		array[i] = 0;
 8000b10:	2200      	movs	r2, #0
 8000b12:	f803 2f01 	strb.w	r2, [r3, #1]!
	for(int i=0; i<length; i++){
 8000b16:	428b      	cmp	r3, r1
 8000b18:	d1fb      	bne.n	8000b12 <xbee_receive+0xe>
	xbee_clear_array(xbee_rx.data_array, DATA_ARRAY);
	xbee_rx.data_flag = 0;
 8000b1a:	4b30      	ldr	r3, [pc, #192]	; (8000bdc <xbee_receive+0xd8>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	//ogarnięcie długości
	xbee_rx.length = (xbee_rx.mess_loaded[1] << 8) + xbee_rx.mess_loaded[2];
 8000b22:	795a      	ldrb	r2, [r3, #5]
 8000b24:	799d      	ldrb	r5, [r3, #6]
 8000b26:	eb05 2502 	add.w	r5, r5, r2, lsl #8
 8000b2a:	601d      	str	r5, [r3, #0]
	//długość całej tablicy
	int mess_length = xbee_rx.length + 3; //3 bo dodajemy 4 elementy ale musimy odjąć jeden bo tablice sa numerowane od 0
 8000b2c:	1cee      	adds	r6, r5, #3


	//sprawdzenie checksum
	for(int i=3; i<mess_length; i++){
 8000b2e:	2e03      	cmp	r6, #3
 8000b30:	dd0e      	ble.n	8000b50 <xbee_receive+0x4c>
 8000b32:	461a      	mov	r2, r3
 8000b34:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8000b38:	3206      	adds	r2, #6
 8000b3a:	1da0      	adds	r0, r4, #6
 8000b3c:	4428      	add	r0, r5
		xbee_rx.checksum += xbee_rx.mess_loaded[i];
 8000b3e:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8000b42:	440b      	add	r3, r1
 8000b44:	b2db      	uxtb	r3, r3
	for(int i=3; i<mess_length; i++){
 8000b46:	4282      	cmp	r2, r0
 8000b48:	d1f9      	bne.n	8000b3e <xbee_receive+0x3a>
 8000b4a:	4a24      	ldr	r2, [pc, #144]	; (8000bdc <xbee_receive+0xd8>)
 8000b4c:	f882 3055 	strb.w	r3, [r2, #85]	; 0x55
	}
	xbee_rx.checksum = 0xff - xbee_rx.checksum;
 8000b50:	4a22      	ldr	r2, [pc, #136]	; (8000bdc <xbee_receive+0xd8>)
 8000b52:	f892 3055 	ldrb.w	r3, [r2, #85]	; 0x55
 8000b56:	43db      	mvns	r3, r3
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	f882 3055 	strb.w	r3, [r2, #85]	; 0x55
	//sprawdzenie czy checksum sie zgadza
	if(xbee_rx.checksum != xbee_rx.mess_loaded[mess_length]){
 8000b5e:	4432      	add	r2, r6
 8000b60:	7912      	ldrb	r2, [r2, #4]
 8000b62:	429a      	cmp	r2, r3
 8000b64:	d00e      	beq.n	8000b84 <xbee_receive+0x80>
 8000b66:	4b1e      	ldr	r3, [pc, #120]	; (8000be0 <xbee_receive+0xdc>)
 8000b68:	f104 0235 	add.w	r2, r4, #53	; 0x35
		array[i] = 0;
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	f803 1f01 	strb.w	r1, [r3, #1]!
	for(int i=0; i<length; i++){
 8000b72:	429a      	cmp	r2, r3
 8000b74:	d1fb      	bne.n	8000b6e <xbee_receive+0x6a>
	xbee_rx.length = 0;
 8000b76:	4b19      	ldr	r3, [pc, #100]	; (8000bdc <xbee_receive+0xd8>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
	xbee_rx.checksum = 0;
 8000b7c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
		//debug
		//xbee_rx.data_array[k] = '\n';
		//xbee_rx.data = xbee_data_convert(xbee_rx.data_array);
	}
	xbee_clear();
}
 8000b80:	bc70      	pop	{r4, r5, r6}
 8000b82:	4770      	bx	lr
	if(xbee_rx.length == 7){
 8000b84:	2d07      	cmp	r5, #7
 8000b86:	d01c      	beq.n	8000bc2 <xbee_receive+0xbe>
		for(i = 15, k = 0; i<mess_length; ++i, ++k){
 8000b88:	2e0f      	cmp	r6, #15
 8000b8a:	dd08      	ble.n	8000b9e <xbee_receive+0x9a>
 8000b8c:	4b15      	ldr	r3, [pc, #84]	; (8000be4 <xbee_receive+0xe0>)
 8000b8e:	1da2      	adds	r2, r4, #6
 8000b90:	4415      	add	r5, r2
			xbee_rx.data_array[k] = xbee_rx.mess_loaded[i];
 8000b92:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8000b96:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		for(i = 15, k = 0; i<mess_length; ++i, ++k){
 8000b9a:	42ab      	cmp	r3, r5
 8000b9c:	d1f9      	bne.n	8000b92 <xbee_receive+0x8e>
		xbee_rx.data_flag = 1;
 8000b9e:	4b0f      	ldr	r3, [pc, #60]	; (8000bdc <xbee_receive+0xd8>)
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	for(int i=0; i<length; i++){
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <xbee_receive+0xdc>)
 8000ba8:	f104 0235 	add.w	r2, r4, #53	; 0x35
		array[i] = 0;
 8000bac:	2100      	movs	r1, #0
 8000bae:	f803 1f01 	strb.w	r1, [r3, #1]!
	for(int i=0; i<length; i++){
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	d1fb      	bne.n	8000bae <xbee_receive+0xaa>
	xbee_rx.length = 0;
 8000bb6:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <xbee_receive+0xd8>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
	xbee_rx.checksum = 0;
 8000bbc:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
}
 8000bc0:	e7de      	b.n	8000b80 <xbee_receive+0x7c>
		if(xbee_rx.mess_loaded[mess_length-1] == 0 && xbee_rx.mess_loaded[mess_length-2] == 0 && xbee_rx.mess_loaded[mess_length-3] == 0){
 8000bc2:	4a06      	ldr	r2, [pc, #24]	; (8000bdc <xbee_receive+0xd8>)
 8000bc4:	7b53      	ldrb	r3, [r2, #13]
 8000bc6:	7b11      	ldrb	r1, [r2, #12]
 8000bc8:	430b      	orrs	r3, r1
 8000bca:	7ad2      	ldrb	r2, [r2, #11]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	d1ea      	bne.n	8000ba6 <xbee_receive+0xa2>
			xbee_rx.response = 1;
 8000bd0:	4b02      	ldr	r3, [pc, #8]	; (8000bdc <xbee_receive+0xd8>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	659a      	str	r2, [r3, #88]	; 0x58
 8000bd6:	e7e6      	b.n	8000ba6 <xbee_receive+0xa2>
 8000bd8:	200000c1 	.word	0x200000c1
 8000bdc:	2000008c 	.word	0x2000008c
 8000be0:	2000008f 	.word	0x2000008f
 8000be4:	2000009e 	.word	0x2000009e

08000be8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000be8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000bea:	e003      	b.n	8000bf4 <LoopCopyDataInit>

08000bec <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000bec:	4b0b      	ldr	r3, [pc, #44]	; (8000c1c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000bee:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000bf0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000bf2:	3104      	adds	r1, #4

08000bf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000bf4:	480a      	ldr	r0, [pc, #40]	; (8000c20 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000bf6:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000bf8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000bfa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000bfc:	d3f6      	bcc.n	8000bec <CopyDataInit>
  ldr r2, =_sbss
 8000bfe:	4a0a      	ldr	r2, [pc, #40]	; (8000c28 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000c00:	e002      	b.n	8000c08 <LoopFillZerobss>

08000c02 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000c02:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000c04:	f842 3b04 	str.w	r3, [r2], #4

08000c08 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000c08:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000c0a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000c0c:	d3f9      	bcc.n	8000c02 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c0e:	f7ff fd7b 	bl	8000708 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c12:	f001 faff 	bl	8002214 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c16:	f7ff fb4f 	bl	80002b8 <main>
  bx lr
 8000c1a:	4770      	bx	lr
  ldr r3, =_sidata
 8000c1c:	08002c04 	.word	0x08002c04
  ldr r0, =_sdata
 8000c20:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000c24:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000c28:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000c2c:	20000564 	.word	0x20000564

08000c30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c30:	e7fe      	b.n	8000c30 <ADC1_2_IRQHandler>
	...

08000c34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c34:	b510      	push	{r4, lr}
 8000c36:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c38:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <HAL_InitTick+0x40>)
 8000c3a:	7818      	ldrb	r0, [r3, #0]
 8000c3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c40:	fbb3 f3f0 	udiv	r3, r3, r0
 8000c44:	4a0c      	ldr	r2, [pc, #48]	; (8000c78 <HAL_InitTick+0x44>)
 8000c46:	6810      	ldr	r0, [r2, #0]
 8000c48:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c4c:	f000 f8a2 	bl	8000d94 <HAL_SYSTICK_Config>
 8000c50:	b968      	cbnz	r0, 8000c6e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c52:	2c0f      	cmp	r4, #15
 8000c54:	d901      	bls.n	8000c5a <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000c56:	2001      	movs	r0, #1
 8000c58:	e00a      	b.n	8000c70 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	4621      	mov	r1, r4
 8000c5e:	f04f 30ff 	mov.w	r0, #4294967295
 8000c62:	f000 f857 	bl	8000d14 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c66:	4b05      	ldr	r3, [pc, #20]	; (8000c7c <HAL_InitTick+0x48>)
 8000c68:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	e000      	b.n	8000c70 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000c6e:	2001      	movs	r0, #1
}
 8000c70:	bd10      	pop	{r4, pc}
 8000c72:	bf00      	nop
 8000c74:	20000004 	.word	0x20000004
 8000c78:	20000000 	.word	0x20000000
 8000c7c:	20000008 	.word	0x20000008

08000c80 <HAL_Init>:
{
 8000c80:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c82:	4a07      	ldr	r2, [pc, #28]	; (8000ca0 <HAL_Init+0x20>)
 8000c84:	6813      	ldr	r3, [r2, #0]
 8000c86:	f043 0310 	orr.w	r3, r3, #16
 8000c8a:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c8c:	2003      	movs	r0, #3
 8000c8e:	f000 f82f 	bl	8000cf0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c92:	2000      	movs	r0, #0
 8000c94:	f7ff ffce 	bl	8000c34 <HAL_InitTick>
  HAL_MspInit();
 8000c98:	f7ff fcde 	bl	8000658 <HAL_MspInit>
}
 8000c9c:	2000      	movs	r0, #0
 8000c9e:	bd08      	pop	{r3, pc}
 8000ca0:	40022000 	.word	0x40022000

08000ca4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000ca4:	4a03      	ldr	r2, [pc, #12]	; (8000cb4 <HAL_IncTick+0x10>)
 8000ca6:	6811      	ldr	r1, [r2, #0]
 8000ca8:	4b03      	ldr	r3, [pc, #12]	; (8000cb8 <HAL_IncTick+0x14>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	440b      	add	r3, r1
 8000cae:	6013      	str	r3, [r2, #0]
}
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	20000550 	.word	0x20000550
 8000cb8:	20000004 	.word	0x20000004

08000cbc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000cbc:	4b01      	ldr	r3, [pc, #4]	; (8000cc4 <HAL_GetTick+0x8>)
 8000cbe:	6818      	ldr	r0, [r3, #0]
}
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	20000550 	.word	0x20000550

08000cc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000ccc:	f7ff fff6 	bl	8000cbc <HAL_GetTick>
 8000cd0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cd2:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000cd6:	d002      	beq.n	8000cde <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cd8:	4b04      	ldr	r3, [pc, #16]	; (8000cec <HAL_Delay+0x24>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cde:	f7ff ffed 	bl	8000cbc <HAL_GetTick>
 8000ce2:	1b40      	subs	r0, r0, r5
 8000ce4:	42a0      	cmp	r0, r4
 8000ce6:	d3fa      	bcc.n	8000cde <HAL_Delay+0x16>
  {
  }
}
 8000ce8:	bd38      	pop	{r3, r4, r5, pc}
 8000cea:	bf00      	nop
 8000cec:	20000004 	.word	0x20000004

08000cf0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cf0:	4907      	ldr	r1, [pc, #28]	; (8000d10 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000cf2:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000cf4:	0203      	lsls	r3, r0, #8
 8000cf6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cfa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000cfe:	0412      	lsls	r2, r2, #16
 8000d00:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000d0c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000d0e:	4770      	bx	lr
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d14:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d16:	4b16      	ldr	r3, [pc, #88]	; (8000d70 <HAL_NVIC_SetPriority+0x5c>)
 8000d18:	68db      	ldr	r3, [r3, #12]
 8000d1a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d1e:	f1c3 0407 	rsb	r4, r3, #7
 8000d22:	2c04      	cmp	r4, #4
 8000d24:	bf28      	it	cs
 8000d26:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d28:	1d1d      	adds	r5, r3, #4
 8000d2a:	2d06      	cmp	r5, #6
 8000d2c:	bf8c      	ite	hi
 8000d2e:	3b03      	subhi	r3, #3
 8000d30:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d32:	f04f 35ff 	mov.w	r5, #4294967295
 8000d36:	fa05 f404 	lsl.w	r4, r5, r4
 8000d3a:	ea21 0104 	bic.w	r1, r1, r4
 8000d3e:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d40:	fa05 f303 	lsl.w	r3, r5, r3
 8000d44:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d48:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8000d4a:	2800      	cmp	r0, #0
 8000d4c:	db09      	blt.n	8000d62 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4e:	0109      	lsls	r1, r1, #4
 8000d50:	b2c9      	uxtb	r1, r1
 8000d52:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000d56:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000d5a:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000d5e:	bc30      	pop	{r4, r5}
 8000d60:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d62:	f000 000f 	and.w	r0, r0, #15
 8000d66:	0109      	lsls	r1, r1, #4
 8000d68:	b2c9      	uxtb	r1, r1
 8000d6a:	4b02      	ldr	r3, [pc, #8]	; (8000d74 <HAL_NVIC_SetPriority+0x60>)
 8000d6c:	5419      	strb	r1, [r3, r0]
 8000d6e:	e7f6      	b.n	8000d5e <HAL_NVIC_SetPriority+0x4a>
 8000d70:	e000ed00 	.word	0xe000ed00
 8000d74:	e000ed14 	.word	0xe000ed14

08000d78 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000d78:	2800      	cmp	r0, #0
 8000d7a:	db08      	blt.n	8000d8e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d7c:	0942      	lsrs	r2, r0, #5
 8000d7e:	f000 001f 	and.w	r0, r0, #31
 8000d82:	2301      	movs	r3, #1
 8000d84:	fa03 f000 	lsl.w	r0, r3, r0
 8000d88:	4b01      	ldr	r3, [pc, #4]	; (8000d90 <HAL_NVIC_EnableIRQ+0x18>)
 8000d8a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000d8e:	4770      	bx	lr
 8000d90:	e000e100 	.word	0xe000e100

08000d94 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d94:	3801      	subs	r0, #1
 8000d96:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d9a:	d20a      	bcs.n	8000db2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <HAL_SYSTICK_Config+0x24>)
 8000d9e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da0:	4a06      	ldr	r2, [pc, #24]	; (8000dbc <HAL_SYSTICK_Config+0x28>)
 8000da2:	21f0      	movs	r1, #240	; 0xf0
 8000da4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000da8:	2000      	movs	r0, #0
 8000daa:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dac:	2207      	movs	r2, #7
 8000dae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000db0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000db2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	e000e010 	.word	0xe000e010
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000dc0:	b360      	cbz	r0, 8000e1c <HAL_DMA_Init+0x5c>
{
 8000dc2:	b410      	push	{r4}
 8000dc4:	4602      	mov	r2, r0
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000dc6:	6801      	ldr	r1, [r0, #0]
 8000dc8:	4b15      	ldr	r3, [pc, #84]	; (8000e20 <HAL_DMA_Init+0x60>)
 8000dca:	440b      	add	r3, r1
 8000dcc:	4815      	ldr	r0, [pc, #84]	; (8000e24 <HAL_DMA_Init+0x64>)
 8000dce:	fba0 0303 	umull	r0, r3, r0, r3
 8000dd2:	091b      	lsrs	r3, r3, #4
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	6413      	str	r3, [r2, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000dd8:	4b13      	ldr	r3, [pc, #76]	; (8000e28 <HAL_DMA_Init+0x68>)
 8000dda:	63d3      	str	r3, [r2, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000de2:	6808      	ldr	r0, [r1, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000de4:	f420 507f 	bic.w	r0, r0, #16320	; 0x3fc0
 8000de8:	f020 0030 	bic.w	r0, r0, #48	; 0x30
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000dec:	6853      	ldr	r3, [r2, #4]
 8000dee:	6894      	ldr	r4, [r2, #8]
 8000df0:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000df2:	68d4      	ldr	r4, [r2, #12]
 8000df4:	4323      	orrs	r3, r4
 8000df6:	6914      	ldr	r4, [r2, #16]
 8000df8:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dfa:	6954      	ldr	r4, [r2, #20]
 8000dfc:	4323      	orrs	r3, r4
 8000dfe:	6994      	ldr	r4, [r2, #24]
 8000e00:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e02:	69d4      	ldr	r4, [r2, #28]
 8000e04:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8000e06:	4303      	orrs	r3, r0

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000e08:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	6390      	str	r0, [r2, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000e14:	f882 0020 	strb.w	r0, [r2, #32]

  return HAL_OK;
}
 8000e18:	bc10      	pop	{r4}
 8000e1a:	4770      	bx	lr
    return HAL_ERROR;
 8000e1c:	2001      	movs	r0, #1
}
 8000e1e:	4770      	bx	lr
 8000e20:	bffdfff8 	.word	0xbffdfff8
 8000e24:	cccccccd 	.word	0xcccccccd
 8000e28:	40020000 	.word	0x40020000

08000e2c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e2c:	b470      	push	{r4, r5, r6}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000e2e:	f890 4020 	ldrb.w	r4, [r0, #32]
 8000e32:	2c01      	cmp	r4, #1
 8000e34:	d042      	beq.n	8000ebc <HAL_DMA_Start_IT+0x90>
 8000e36:	2401      	movs	r4, #1
 8000e38:	f880 4020 	strb.w	r4, [r0, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000e3c:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
 8000e40:	2c01      	cmp	r4, #1
 8000e42:	d005      	beq.n	8000e50 <HAL_DMA_Start_IT+0x24>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000e44:	2300      	movs	r3, #0
 8000e46:	f880 3020 	strb.w	r3, [r0, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000e4a:	2002      	movs	r0, #2
  }    
  return status;
}
 8000e4c:	bc70      	pop	{r4, r5, r6}
 8000e4e:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e50:	2402      	movs	r4, #2
 8000e52:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e56:	2400      	movs	r4, #0
 8000e58:	6384      	str	r4, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8000e5a:	6805      	ldr	r5, [r0, #0]
 8000e5c:	682c      	ldr	r4, [r5, #0]
 8000e5e:	f024 0401 	bic.w	r4, r4, #1
 8000e62:	602c      	str	r4, [r5, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e64:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8000e66:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8000e68:	2401      	movs	r4, #1
 8000e6a:	40b4      	lsls	r4, r6
 8000e6c:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000e6e:	6804      	ldr	r4, [r0, #0]
 8000e70:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e72:	6843      	ldr	r3, [r0, #4]
 8000e74:	2b10      	cmp	r3, #16
 8000e76:	d011      	beq.n	8000e9c <HAL_DMA_Start_IT+0x70>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8000e78:	6803      	ldr	r3, [r0, #0]
 8000e7a:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8000e7c:	6803      	ldr	r3, [r0, #0]
 8000e7e:	60da      	str	r2, [r3, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8000e80:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000e82:	b183      	cbz	r3, 8000ea6 <HAL_DMA_Start_IT+0x7a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e84:	6802      	ldr	r2, [r0, #0]
 8000e86:	6813      	ldr	r3, [r2, #0]
 8000e88:	f043 030e 	orr.w	r3, r3, #14
 8000e8c:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8000e8e:	6802      	ldr	r2, [r0, #0]
 8000e90:	6813      	ldr	r3, [r2, #0]
 8000e92:	f043 0301 	orr.w	r3, r3, #1
 8000e96:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e98:	2000      	movs	r0, #0
 8000e9a:	e7d7      	b.n	8000e4c <HAL_DMA_Start_IT+0x20>
    hdma->Instance->CPAR = DstAddress;
 8000e9c:	6803      	ldr	r3, [r0, #0]
 8000e9e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000ea0:	6803      	ldr	r3, [r0, #0]
 8000ea2:	60d9      	str	r1, [r3, #12]
 8000ea4:	e7ec      	b.n	8000e80 <HAL_DMA_Start_IT+0x54>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000ea6:	6802      	ldr	r2, [r0, #0]
 8000ea8:	6813      	ldr	r3, [r2, #0]
 8000eaa:	f023 0304 	bic.w	r3, r3, #4
 8000eae:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000eb0:	6802      	ldr	r2, [r0, #0]
 8000eb2:	6813      	ldr	r3, [r2, #0]
 8000eb4:	f043 030a 	orr.w	r3, r3, #10
 8000eb8:	6013      	str	r3, [r2, #0]
 8000eba:	e7e8      	b.n	8000e8e <HAL_DMA_Start_IT+0x62>
  __HAL_LOCK(hdma);
 8000ebc:	2002      	movs	r0, #2
 8000ebe:	e7c5      	b.n	8000e4c <HAL_DMA_Start_IT+0x20>

08000ec0 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ec0:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8000ec4:	2b02      	cmp	r3, #2
 8000ec6:	d006      	beq.n	8000ed6 <HAL_DMA_Abort+0x16>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ec8:	2304      	movs	r3, #4
 8000eca:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8000ecc:	2300      	movs	r3, #0
 8000ece:	f880 3020 	strb.w	r3, [r0, #32]
    return HAL_ERROR;
 8000ed2:	2001      	movs	r0, #1
 8000ed4:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ed6:	6802      	ldr	r2, [r0, #0]
 8000ed8:	6813      	ldr	r3, [r2, #0]
 8000eda:	f023 030e 	bic.w	r3, r3, #14
 8000ede:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8000ee0:	6802      	ldr	r2, [r0, #0]
 8000ee2:	6813      	ldr	r3, [r2, #0]
 8000ee4:	f023 0301 	bic.w	r3, r3, #1
 8000ee8:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000eea:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8000eec:	2201      	movs	r2, #1
 8000eee:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	604b      	str	r3, [r1, #4]
  hdma->State = HAL_DMA_STATE_READY;
 8000ef6:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  __HAL_UNLOCK(hdma);      
 8000efa:	2300      	movs	r3, #0
 8000efc:	f880 3020 	strb.w	r3, [r0, #32]
  return status; 
 8000f00:	4618      	mov	r0, r3
}
 8000f02:	4770      	bx	lr

08000f04 <HAL_DMA_Abort_IT>:
{  
 8000f04:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f06:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d003      	beq.n	8000f16 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f0e:	2304      	movs	r3, #4
 8000f10:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8000f12:	2001      	movs	r0, #1
}
 8000f14:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f16:	6802      	ldr	r2, [r0, #0]
 8000f18:	6813      	ldr	r3, [r2, #0]
 8000f1a:	f023 030e 	bic.w	r3, r3, #14
 8000f1e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8000f20:	6802      	ldr	r2, [r0, #0]
 8000f22:	6813      	ldr	r3, [r2, #0]
 8000f24:	f023 0301 	bic.w	r3, r3, #1
 8000f28:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000f2a:	6803      	ldr	r3, [r0, #0]
 8000f2c:	4a18      	ldr	r2, [pc, #96]	; (8000f90 <HAL_DMA_Abort_IT+0x8c>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d013      	beq.n	8000f5a <HAL_DMA_Abort_IT+0x56>
 8000f32:	3214      	adds	r2, #20
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d01e      	beq.n	8000f76 <HAL_DMA_Abort_IT+0x72>
 8000f38:	3214      	adds	r2, #20
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d01d      	beq.n	8000f7a <HAL_DMA_Abort_IT+0x76>
 8000f3e:	3214      	adds	r2, #20
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d01d      	beq.n	8000f80 <HAL_DMA_Abort_IT+0x7c>
 8000f44:	3214      	adds	r2, #20
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d01d      	beq.n	8000f86 <HAL_DMA_Abort_IT+0x82>
 8000f4a:	3214      	adds	r2, #20
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	bf0c      	ite	eq
 8000f50:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8000f54:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8000f58:	e000      	b.n	8000f5c <HAL_DMA_Abort_IT+0x58>
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	4a0d      	ldr	r2, [pc, #52]	; (8000f94 <HAL_DMA_Abort_IT+0x90>)
 8000f5e:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000f60:	2301      	movs	r3, #1
 8000f62:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000f66:	2300      	movs	r3, #0
 8000f68:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8000f6c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000f6e:	b16b      	cbz	r3, 8000f8c <HAL_DMA_Abort_IT+0x88>
      hdma->XferAbortCallback(hdma);
 8000f70:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000f72:	2000      	movs	r0, #0
 8000f74:	e7ce      	b.n	8000f14 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000f76:	2310      	movs	r3, #16
 8000f78:	e7f0      	b.n	8000f5c <HAL_DMA_Abort_IT+0x58>
 8000f7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f7e:	e7ed      	b.n	8000f5c <HAL_DMA_Abort_IT+0x58>
 8000f80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f84:	e7ea      	b.n	8000f5c <HAL_DMA_Abort_IT+0x58>
 8000f86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f8a:	e7e7      	b.n	8000f5c <HAL_DMA_Abort_IT+0x58>
  HAL_StatusTypeDef status = HAL_OK;
 8000f8c:	2000      	movs	r0, #0
 8000f8e:	e7c1      	b.n	8000f14 <HAL_DMA_Abort_IT+0x10>
 8000f90:	40020008 	.word	0x40020008
 8000f94:	40020000 	.word	0x40020000

08000f98 <HAL_DMA_IRQHandler>:
{
 8000f98:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000f9a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8000f9c:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000f9e:	6804      	ldr	r4, [r0, #0]
 8000fa0:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000fa2:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8000fa4:	2304      	movs	r3, #4
 8000fa6:	408b      	lsls	r3, r1
 8000fa8:	4213      	tst	r3, r2
 8000faa:	d034      	beq.n	8001016 <HAL_DMA_IRQHandler+0x7e>
 8000fac:	f015 0f04 	tst.w	r5, #4
 8000fb0:	d031      	beq.n	8001016 <HAL_DMA_IRQHandler+0x7e>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000fb2:	6823      	ldr	r3, [r4, #0]
 8000fb4:	f013 0f20 	tst.w	r3, #32
 8000fb8:	d103      	bne.n	8000fc2 <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000fba:	6823      	ldr	r3, [r4, #0]
 8000fbc:	f023 0304 	bic.w	r3, r3, #4
 8000fc0:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000fc2:	6803      	ldr	r3, [r0, #0]
 8000fc4:	4a42      	ldr	r2, [pc, #264]	; (80010d0 <HAL_DMA_IRQHandler+0x138>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d013      	beq.n	8000ff2 <HAL_DMA_IRQHandler+0x5a>
 8000fca:	3214      	adds	r2, #20
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d017      	beq.n	8001000 <HAL_DMA_IRQHandler+0x68>
 8000fd0:	3214      	adds	r2, #20
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d016      	beq.n	8001004 <HAL_DMA_IRQHandler+0x6c>
 8000fd6:	3214      	adds	r2, #20
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d016      	beq.n	800100a <HAL_DMA_IRQHandler+0x72>
 8000fdc:	3214      	adds	r2, #20
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d016      	beq.n	8001010 <HAL_DMA_IRQHandler+0x78>
 8000fe2:	3214      	adds	r2, #20
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	bf0c      	ite	eq
 8000fe8:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8000fec:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8000ff0:	e000      	b.n	8000ff4 <HAL_DMA_IRQHandler+0x5c>
 8000ff2:	2304      	movs	r3, #4
 8000ff4:	4a37      	ldr	r2, [pc, #220]	; (80010d4 <HAL_DMA_IRQHandler+0x13c>)
 8000ff6:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8000ff8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000ffa:	b103      	cbz	r3, 8000ffe <HAL_DMA_IRQHandler+0x66>
      hdma->XferHalfCpltCallback(hdma);
 8000ffc:	4798      	blx	r3
}
 8000ffe:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001000:	2340      	movs	r3, #64	; 0x40
 8001002:	e7f7      	b.n	8000ff4 <HAL_DMA_IRQHandler+0x5c>
 8001004:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001008:	e7f4      	b.n	8000ff4 <HAL_DMA_IRQHandler+0x5c>
 800100a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800100e:	e7f1      	b.n	8000ff4 <HAL_DMA_IRQHandler+0x5c>
 8001010:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001014:	e7ee      	b.n	8000ff4 <HAL_DMA_IRQHandler+0x5c>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001016:	2302      	movs	r3, #2
 8001018:	408b      	lsls	r3, r1
 800101a:	4213      	tst	r3, r2
 800101c:	d03b      	beq.n	8001096 <HAL_DMA_IRQHandler+0xfe>
 800101e:	f015 0f02 	tst.w	r5, #2
 8001022:	d038      	beq.n	8001096 <HAL_DMA_IRQHandler+0xfe>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001024:	6823      	ldr	r3, [r4, #0]
 8001026:	f013 0f20 	tst.w	r3, #32
 800102a:	d106      	bne.n	800103a <HAL_DMA_IRQHandler+0xa2>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800102c:	6823      	ldr	r3, [r4, #0]
 800102e:	f023 030a 	bic.w	r3, r3, #10
 8001032:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001034:	2301      	movs	r3, #1
 8001036:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800103a:	6803      	ldr	r3, [r0, #0]
 800103c:	4a24      	ldr	r2, [pc, #144]	; (80010d0 <HAL_DMA_IRQHandler+0x138>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d013      	beq.n	800106a <HAL_DMA_IRQHandler+0xd2>
 8001042:	3214      	adds	r2, #20
 8001044:	4293      	cmp	r3, r2
 8001046:	d01b      	beq.n	8001080 <HAL_DMA_IRQHandler+0xe8>
 8001048:	3214      	adds	r2, #20
 800104a:	4293      	cmp	r3, r2
 800104c:	d01a      	beq.n	8001084 <HAL_DMA_IRQHandler+0xec>
 800104e:	3214      	adds	r2, #20
 8001050:	4293      	cmp	r3, r2
 8001052:	d01a      	beq.n	800108a <HAL_DMA_IRQHandler+0xf2>
 8001054:	3214      	adds	r2, #20
 8001056:	4293      	cmp	r3, r2
 8001058:	d01a      	beq.n	8001090 <HAL_DMA_IRQHandler+0xf8>
 800105a:	3214      	adds	r2, #20
 800105c:	4293      	cmp	r3, r2
 800105e:	bf0c      	ite	eq
 8001060:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8001064:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8001068:	e000      	b.n	800106c <HAL_DMA_IRQHandler+0xd4>
 800106a:	2302      	movs	r3, #2
 800106c:	4a19      	ldr	r2, [pc, #100]	; (80010d4 <HAL_DMA_IRQHandler+0x13c>)
 800106e:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8001070:	2300      	movs	r3, #0
 8001072:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8001076:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001078:	2b00      	cmp	r3, #0
 800107a:	d0c0      	beq.n	8000ffe <HAL_DMA_IRQHandler+0x66>
      hdma->XferCpltCallback(hdma);
 800107c:	4798      	blx	r3
 800107e:	e7be      	b.n	8000ffe <HAL_DMA_IRQHandler+0x66>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001080:	2320      	movs	r3, #32
 8001082:	e7f3      	b.n	800106c <HAL_DMA_IRQHandler+0xd4>
 8001084:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001088:	e7f0      	b.n	800106c <HAL_DMA_IRQHandler+0xd4>
 800108a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800108e:	e7ed      	b.n	800106c <HAL_DMA_IRQHandler+0xd4>
 8001090:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001094:	e7ea      	b.n	800106c <HAL_DMA_IRQHandler+0xd4>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001096:	2308      	movs	r3, #8
 8001098:	fa03 f101 	lsl.w	r1, r3, r1
 800109c:	4211      	tst	r1, r2
 800109e:	d0ae      	beq.n	8000ffe <HAL_DMA_IRQHandler+0x66>
 80010a0:	f015 0f08 	tst.w	r5, #8
 80010a4:	d0ab      	beq.n	8000ffe <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010a6:	6823      	ldr	r3, [r4, #0]
 80010a8:	f023 030e 	bic.w	r3, r3, #14
 80010ac:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80010ae:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80010b0:	2301      	movs	r3, #1
 80010b2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80010b4:	fa03 f202 	lsl.w	r2, r3, r2
 80010b8:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80010ba:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 80010bc:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80010c0:	2300      	movs	r3, #0
 80010c2:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 80010c6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d098      	beq.n	8000ffe <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 80010cc:	4798      	blx	r3
  return;
 80010ce:	e796      	b.n	8000ffe <HAL_DMA_IRQHandler+0x66>
 80010d0:	40020008 	.word	0x40020008
 80010d4:	40020000 	.word	0x40020000

080010d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010dc:	b083      	sub	sp, #12
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010de:	680f      	ldr	r7, [r1, #0]
 80010e0:	2f00      	cmp	r7, #0
 80010e2:	f000 80f8 	beq.w	80012d6 <HAL_GPIO_Init+0x1fe>
  uint32_t config = 0x00u;
 80010e6:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 80010e8:	4613      	mov	r3, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010ea:	f8df c200 	ldr.w	ip, [pc, #512]	; 80012ec <HAL_GPIO_Init+0x214>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010ee:	4d7b      	ldr	r5, [pc, #492]	; (80012dc <HAL_GPIO_Init+0x204>)
      switch (GPIO_Init->Mode)
 80010f0:	4e7b      	ldr	r6, [pc, #492]	; (80012e0 <HAL_GPIO_Init+0x208>)
 80010f2:	f8df e1fc 	ldr.w	lr, [pc, #508]	; 80012f0 <HAL_GPIO_Init+0x218>
 80010f6:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 80012f4 <HAL_GPIO_Init+0x21c>
 80010fa:	e09a      	b.n	8001232 <HAL_GPIO_Init+0x15a>
 80010fc:	2200      	movs	r2, #0
 80010fe:	e01e      	b.n	800113e <HAL_GPIO_Init+0x66>
 8001100:	42b4      	cmp	r4, r6
 8001102:	d00c      	beq.n	800111e <HAL_GPIO_Init+0x46>
 8001104:	d904      	bls.n	8001110 <HAL_GPIO_Init+0x38>
 8001106:	4574      	cmp	r4, lr
 8001108:	d009      	beq.n	800111e <HAL_GPIO_Init+0x46>
 800110a:	4544      	cmp	r4, r8
 800110c:	d007      	beq.n	800111e <HAL_GPIO_Init+0x46>
 800110e:	e016      	b.n	800113e <HAL_GPIO_Init+0x66>
 8001110:	4f74      	ldr	r7, [pc, #464]	; (80012e4 <HAL_GPIO_Init+0x20c>)
 8001112:	42bc      	cmp	r4, r7
 8001114:	d003      	beq.n	800111e <HAL_GPIO_Init+0x46>
 8001116:	f507 2770 	add.w	r7, r7, #983040	; 0xf0000
 800111a:	42bc      	cmp	r4, r7
 800111c:	d10b      	bne.n	8001136 <HAL_GPIO_Init+0x5e>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800111e:	688a      	ldr	r2, [r1, #8]
 8001120:	2a00      	cmp	r2, #0
 8001122:	f000 80ca 	beq.w	80012ba <HAL_GPIO_Init+0x1e2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001126:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8001128:	bf0c      	ite	eq
 800112a:	f8c0 9010 	streq.w	r9, [r0, #16]
            GPIOx->BRR = ioposition;
 800112e:	f8c0 9014 	strne.w	r9, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001132:	2208      	movs	r2, #8
 8001134:	e003      	b.n	800113e <HAL_GPIO_Init+0x66>
      switch (GPIO_Init->Mode)
 8001136:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 800113a:	42bc      	cmp	r4, r7
 800113c:	d0ef      	beq.n	800111e <HAL_GPIO_Init+0x46>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800113e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8001142:	f200 80bc 	bhi.w	80012be <HAL_GPIO_Init+0x1e6>
 8001146:	4607      	mov	r7, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001148:	ea4f 0983 	mov.w	r9, r3, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800114c:	683c      	ldr	r4, [r7, #0]
 800114e:	f04f 0b0f 	mov.w	fp, #15
 8001152:	fa0b fb09 	lsl.w	fp, fp, r9
 8001156:	ea24 040b 	bic.w	r4, r4, fp
 800115a:	fa02 f909 	lsl.w	r9, r2, r9
 800115e:	ea44 0409 	orr.w	r4, r4, r9
 8001162:	603c      	str	r4, [r7, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001164:	684c      	ldr	r4, [r1, #4]
 8001166:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 800116a:	d05d      	beq.n	8001228 <HAL_GPIO_Init+0x150>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800116c:	f8dc 4018 	ldr.w	r4, [ip, #24]
 8001170:	f044 0401 	orr.w	r4, r4, #1
 8001174:	f8cc 4018 	str.w	r4, [ip, #24]
 8001178:	f8dc 4018 	ldr.w	r4, [ip, #24]
 800117c:	f004 0401 	and.w	r4, r4, #1
 8001180:	9401      	str	r4, [sp, #4]
 8001182:	9c01      	ldr	r4, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8001184:	f023 0403 	bic.w	r4, r3, #3
 8001188:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800118c:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 8001190:	f8d4 9008 	ldr.w	r9, [r4, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001194:	f003 0703 	and.w	r7, r3, #3
 8001198:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 800119c:	270f      	movs	r7, #15
 800119e:	fa07 f70b 	lsl.w	r7, r7, fp
 80011a2:	ea29 0907 	bic.w	r9, r9, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011a6:	4f50      	ldr	r7, [pc, #320]	; (80012e8 <HAL_GPIO_Init+0x210>)
 80011a8:	42b8      	cmp	r0, r7
 80011aa:	f000 808e 	beq.w	80012ca <HAL_GPIO_Init+0x1f2>
 80011ae:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80011b2:	42b8      	cmp	r0, r7
 80011b4:	f000 808b 	beq.w	80012ce <HAL_GPIO_Init+0x1f6>
 80011b8:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80011bc:	42b8      	cmp	r0, r7
 80011be:	f000 8088 	beq.w	80012d2 <HAL_GPIO_Init+0x1fa>
 80011c2:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80011c6:	42b8      	cmp	r0, r7
 80011c8:	bf0c      	ite	eq
 80011ca:	2703      	moveq	r7, #3
 80011cc:	2704      	movne	r7, #4
 80011ce:	fa07 f70b 	lsl.w	r7, r7, fp
 80011d2:	ea47 0709 	orr.w	r7, r7, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80011d6:	60a7      	str	r7, [r4, #8]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011d8:	684c      	ldr	r4, [r1, #4]
 80011da:	f414 3f80 	tst.w	r4, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80011de:	682c      	ldr	r4, [r5, #0]
 80011e0:	bf14      	ite	ne
 80011e2:	ea44 040a 	orrne.w	r4, r4, sl
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011e6:	ea24 040a 	biceq.w	r4, r4, sl
 80011ea:	602c      	str	r4, [r5, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011ec:	684c      	ldr	r4, [r1, #4]
 80011ee:	f414 3f00 	tst.w	r4, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80011f2:	686c      	ldr	r4, [r5, #4]
 80011f4:	bf14      	ite	ne
 80011f6:	ea44 040a 	orrne.w	r4, r4, sl
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011fa:	ea24 040a 	biceq.w	r4, r4, sl
 80011fe:	606c      	str	r4, [r5, #4]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001200:	684c      	ldr	r4, [r1, #4]
 8001202:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001206:	68ac      	ldr	r4, [r5, #8]
 8001208:	bf14      	ite	ne
 800120a:	ea44 040a 	orrne.w	r4, r4, sl
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800120e:	ea24 040a 	biceq.w	r4, r4, sl
 8001212:	60ac      	str	r4, [r5, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001214:	684c      	ldr	r4, [r1, #4]
 8001216:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800121a:	68ec      	ldr	r4, [r5, #12]
 800121c:	bf14      	ite	ne
 800121e:	ea44 040a 	orrne.w	r4, r4, sl
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001222:	ea24 040a 	biceq.w	r4, r4, sl
 8001226:	60ec      	str	r4, [r5, #12]
        }
      }
    }

	position++;
 8001228:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800122a:	680f      	ldr	r7, [r1, #0]
 800122c:	fa37 f403 	lsrs.w	r4, r7, r3
 8001230:	d051      	beq.n	80012d6 <HAL_GPIO_Init+0x1fe>
    ioposition = (0x01uL << position);
 8001232:	f04f 0901 	mov.w	r9, #1
 8001236:	fa09 f903 	lsl.w	r9, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800123a:	ea09 0a07 	and.w	sl, r9, r7
    if (iocurrent == ioposition)
 800123e:	ea39 0407 	bics.w	r4, r9, r7
 8001242:	d1f1      	bne.n	8001228 <HAL_GPIO_Init+0x150>
      switch (GPIO_Init->Mode)
 8001244:	684c      	ldr	r4, [r1, #4]
 8001246:	2c12      	cmp	r4, #18
 8001248:	f63f af5a 	bhi.w	8001100 <HAL_GPIO_Init+0x28>
 800124c:	2c12      	cmp	r4, #18
 800124e:	f63f af76 	bhi.w	800113e <HAL_GPIO_Init+0x66>
 8001252:	a701      	add	r7, pc, #4	; (adr r7, 8001258 <HAL_GPIO_Init+0x180>)
 8001254:	f857 f024 	ldr.w	pc, [r7, r4, lsl #2]
 8001258:	0800111f 	.word	0x0800111f
 800125c:	080012a5 	.word	0x080012a5
 8001260:	080012af 	.word	0x080012af
 8001264:	080010fd 	.word	0x080010fd
 8001268:	0800113f 	.word	0x0800113f
 800126c:	0800113f 	.word	0x0800113f
 8001270:	0800113f 	.word	0x0800113f
 8001274:	0800113f 	.word	0x0800113f
 8001278:	0800113f 	.word	0x0800113f
 800127c:	0800113f 	.word	0x0800113f
 8001280:	0800113f 	.word	0x0800113f
 8001284:	0800113f 	.word	0x0800113f
 8001288:	0800113f 	.word	0x0800113f
 800128c:	0800113f 	.word	0x0800113f
 8001290:	0800113f 	.word	0x0800113f
 8001294:	0800113f 	.word	0x0800113f
 8001298:	0800113f 	.word	0x0800113f
 800129c:	080012a9 	.word	0x080012a9
 80012a0:	080012b5 	.word	0x080012b5
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012a4:	68ca      	ldr	r2, [r1, #12]
          break;
 80012a6:	e74a      	b.n	800113e <HAL_GPIO_Init+0x66>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012a8:	68ca      	ldr	r2, [r1, #12]
 80012aa:	3204      	adds	r2, #4
          break;
 80012ac:	e747      	b.n	800113e <HAL_GPIO_Init+0x66>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012ae:	68ca      	ldr	r2, [r1, #12]
 80012b0:	3208      	adds	r2, #8
          break;
 80012b2:	e744      	b.n	800113e <HAL_GPIO_Init+0x66>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012b4:	68ca      	ldr	r2, [r1, #12]
 80012b6:	320c      	adds	r2, #12
          break;
 80012b8:	e741      	b.n	800113e <HAL_GPIO_Init+0x66>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012ba:	2204      	movs	r2, #4
 80012bc:	e73f      	b.n	800113e <HAL_GPIO_Init+0x66>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012be:	1d07      	adds	r7, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012c0:	ea4f 0983 	mov.w	r9, r3, lsl #2
 80012c4:	f1a9 0920 	sub.w	r9, r9, #32
 80012c8:	e740      	b.n	800114c <HAL_GPIO_Init+0x74>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012ca:	2700      	movs	r7, #0
 80012cc:	e77f      	b.n	80011ce <HAL_GPIO_Init+0xf6>
 80012ce:	2701      	movs	r7, #1
 80012d0:	e77d      	b.n	80011ce <HAL_GPIO_Init+0xf6>
 80012d2:	2702      	movs	r7, #2
 80012d4:	e77b      	b.n	80011ce <HAL_GPIO_Init+0xf6>
  }
}
 80012d6:	b003      	add	sp, #12
 80012d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012dc:	40010400 	.word	0x40010400
 80012e0:	10220000 	.word	0x10220000
 80012e4:	10120000 	.word	0x10120000
 80012e8:	40010800 	.word	0x40010800
 80012ec:	40021000 	.word	0x40021000
 80012f0:	10310000 	.word	0x10310000
 80012f4:	10320000 	.word	0x10320000

080012f8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012f8:	6883      	ldr	r3, [r0, #8]
 80012fa:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80012fc:	bf14      	ite	ne
 80012fe:	2001      	movne	r0, #1
 8001300:	2000      	moveq	r0, #0
 8001302:	4770      	bx	lr

08001304 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001304:	b10a      	cbz	r2, 800130a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001306:	6101      	str	r1, [r0, #16]
 8001308:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800130a:	0409      	lsls	r1, r1, #16
 800130c:	6101      	str	r1, [r0, #16]
  }
}
 800130e:	4770      	bx	lr

08001310 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001310:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001312:	ea01 0203 	and.w	r2, r1, r3
 8001316:	ea21 0103 	bic.w	r1, r1, r3
 800131a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800131e:	6101      	str	r1, [r0, #16]
}
 8001320:	4770      	bx	lr

08001322 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001322:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001324:	b087      	sub	sp, #28
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001326:	2800      	cmp	r0, #0
 8001328:	d07a      	beq.n	8001420 <HAL_PCD_Init+0xfe>
 800132a:	4605      	mov	r5, r0

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800132c:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 8001330:	b1db      	cbz	r3, 800136a <HAL_PCD_Init+0x48>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001332:	2303      	movs	r3, #3
 8001334:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001338:	6828      	ldr	r0, [r5, #0]
 800133a:	f000 ff4a 	bl	80021d2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800133e:	462c      	mov	r4, r5
 8001340:	f854 7b10 	ldr.w	r7, [r4], #16
 8001344:	466e      	mov	r6, sp
 8001346:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001348:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800134a:	6823      	ldr	r3, [r4, #0]
 800134c:	6033      	str	r3, [r6, #0]
 800134e:	1d2b      	adds	r3, r5, #4
 8001350:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001352:	4638      	mov	r0, r7
 8001354:	f000 ff36 	bl	80021c4 <USB_CoreInit>
 8001358:	4604      	mov	r4, r0
 800135a:	b158      	cbz	r0, 8001374 <HAL_PCD_Init+0x52>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800135c:	2302      	movs	r3, #2
 800135e:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
    return HAL_ERROR;
 8001362:	2401      	movs	r4, #1
  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8001364:	4620      	mov	r0, r4
 8001366:	b007      	add	sp, #28
 8001368:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 800136a:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 800136e:	f7ff fac9 	bl	8000904 <HAL_PCD_MspInit>
 8001372:	e7de      	b.n	8001332 <HAL_PCD_Init+0x10>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001374:	2100      	movs	r1, #0
 8001376:	6828      	ldr	r0, [r5, #0]
 8001378:	f000 ff35 	bl	80021e6 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800137c:	6868      	ldr	r0, [r5, #4]
 800137e:	b388      	cbz	r0, 80013e4 <HAL_PCD_Init+0xc2>
 8001380:	4623      	mov	r3, r4
    hpcd->IN_ep[i].is_in = 1U;
 8001382:	2601      	movs	r6, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001384:	2100      	movs	r1, #0
    hpcd->IN_ep[i].is_in = 1U;
 8001386:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800138a:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800138e:	f882 6029 	strb.w	r6, [r2, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 8001392:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001396:	86d3      	strh	r3, [r2, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001398:	f882 102b 	strb.w	r1, [r2, #43]	; 0x2b
    hpcd->IN_ep[i].maxpacket = 0U;
 800139c:	6391      	str	r1, [r2, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 800139e:	63d1      	str	r1, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 80013a0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80013a4:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80013a8:	6411      	str	r1, [r2, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013aa:	3301      	adds	r3, #1
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	4283      	cmp	r3, r0
 80013b0:	d3e9      	bcc.n	8001386 <HAL_PCD_Init+0x64>
    hpcd->OUT_ep[i].is_in = 0U;
 80013b2:	2200      	movs	r2, #0
 80013b4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80013b8:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80013bc:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 80013c0:	f883 4168 	strb.w	r4, [r3, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80013c4:	f883 216b 	strb.w	r2, [r3, #363]	; 0x16b
    hpcd->OUT_ep[i].maxpacket = 0U;
 80013c8:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80013cc:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    hpcd->OUT_ep[i].xfer_len = 0U;
 80013d0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80013d4:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80013d8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013dc:	3401      	adds	r4, #1
 80013de:	b2e4      	uxtb	r4, r4
 80013e0:	4284      	cmp	r4, r0
 80013e2:	d3e7      	bcc.n	80013b4 <HAL_PCD_Init+0x92>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013e4:	462c      	mov	r4, r5
 80013e6:	f854 7b10 	ldr.w	r7, [r4], #16
 80013ea:	466e      	mov	r6, sp
 80013ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013ee:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80013f0:	6823      	ldr	r3, [r4, #0]
 80013f2:	6033      	str	r3, [r6, #0]
 80013f4:	1d2b      	adds	r3, r5, #4
 80013f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013f8:	4638      	mov	r0, r7
 80013fa:	f000 fef6 	bl	80021ea <USB_DevInit>
 80013fe:	4604      	mov	r4, r0
 8001400:	b120      	cbz	r0, 800140c <HAL_PCD_Init+0xea>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001402:	2302      	movs	r3, #2
 8001404:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
    return HAL_ERROR;
 8001408:	2401      	movs	r4, #1
 800140a:	e7ab      	b.n	8001364 <HAL_PCD_Init+0x42>
  hpcd->USB_Address = 0U;
 800140c:	2300      	movs	r3, #0
 800140e:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001412:	2301      	movs	r3, #1
 8001414:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001418:	6828      	ldr	r0, [r5, #0]
 800141a:	f000 fef9 	bl	8002210 <USB_DevDisconnect>
  return HAL_OK;
 800141e:	e7a1      	b.n	8001364 <HAL_PCD_Init+0x42>
    return HAL_ERROR;
 8001420:	2401      	movs	r4, #1
 8001422:	e79f      	b.n	8001364 <HAL_PCD_Init+0x42>

08001424 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001424:	2800      	cmp	r0, #0
 8001426:	f000 8201 	beq.w	800182c <HAL_RCC_OscConfig+0x408>
{
 800142a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001432:	6803      	ldr	r3, [r0, #0]
 8001434:	f013 0f01 	tst.w	r3, #1
 8001438:	d02c      	beq.n	8001494 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800143a:	4baa      	ldr	r3, [pc, #680]	; (80016e4 <HAL_RCC_OscConfig+0x2c0>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f003 030c 	and.w	r3, r3, #12
 8001442:	2b04      	cmp	r3, #4
 8001444:	d01d      	beq.n	8001482 <HAL_RCC_OscConfig+0x5e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001446:	4ba7      	ldr	r3, [pc, #668]	; (80016e4 <HAL_RCC_OscConfig+0x2c0>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f003 030c 	and.w	r3, r3, #12
 800144e:	2b08      	cmp	r3, #8
 8001450:	d012      	beq.n	8001478 <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001452:	6863      	ldr	r3, [r4, #4]
 8001454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001458:	d041      	beq.n	80014de <HAL_RCC_OscConfig+0xba>
 800145a:	2b00      	cmp	r3, #0
 800145c:	d155      	bne.n	800150a <HAL_RCC_OscConfig+0xe6>
 800145e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001462:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	e037      	b.n	80014e8 <HAL_RCC_OscConfig+0xc4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001478:	4b9a      	ldr	r3, [pc, #616]	; (80016e4 <HAL_RCC_OscConfig+0x2c0>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001480:	d0e7      	beq.n	8001452 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001482:	4b98      	ldr	r3, [pc, #608]	; (80016e4 <HAL_RCC_OscConfig+0x2c0>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800148a:	d003      	beq.n	8001494 <HAL_RCC_OscConfig+0x70>
 800148c:	6863      	ldr	r3, [r4, #4]
 800148e:	2b00      	cmp	r3, #0
 8001490:	f000 81ce 	beq.w	8001830 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001494:	6823      	ldr	r3, [r4, #0]
 8001496:	f013 0f02 	tst.w	r3, #2
 800149a:	d075      	beq.n	8001588 <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800149c:	4b91      	ldr	r3, [pc, #580]	; (80016e4 <HAL_RCC_OscConfig+0x2c0>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f013 0f0c 	tst.w	r3, #12
 80014a4:	d05f      	beq.n	8001566 <HAL_RCC_OscConfig+0x142>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80014a6:	4b8f      	ldr	r3, [pc, #572]	; (80016e4 <HAL_RCC_OscConfig+0x2c0>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f003 030c 	and.w	r3, r3, #12
 80014ae:	2b08      	cmp	r3, #8
 80014b0:	d054      	beq.n	800155c <HAL_RCC_OscConfig+0x138>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014b2:	6923      	ldr	r3, [r4, #16]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	f000 8089 	beq.w	80015cc <HAL_RCC_OscConfig+0x1a8>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014ba:	4b8b      	ldr	r3, [pc, #556]	; (80016e8 <HAL_RCC_OscConfig+0x2c4>)
 80014bc:	2201      	movs	r2, #1
 80014be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c0:	f7ff fbfc 	bl	8000cbc <HAL_GetTick>
 80014c4:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c6:	4e87      	ldr	r6, [pc, #540]	; (80016e4 <HAL_RCC_OscConfig+0x2c0>)
 80014c8:	6833      	ldr	r3, [r6, #0]
 80014ca:	f013 0f02 	tst.w	r3, #2
 80014ce:	d174      	bne.n	80015ba <HAL_RCC_OscConfig+0x196>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014d0:	f7ff fbf4 	bl	8000cbc <HAL_GetTick>
 80014d4:	1b40      	subs	r0, r0, r5
 80014d6:	2802      	cmp	r0, #2
 80014d8:	d9f6      	bls.n	80014c8 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_TIMEOUT;
 80014da:	2003      	movs	r0, #3
 80014dc:	e1ad      	b.n	800183a <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014de:	4a81      	ldr	r2, [pc, #516]	; (80016e4 <HAL_RCC_OscConfig+0x2c0>)
 80014e0:	6813      	ldr	r3, [r2, #0]
 80014e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014e6:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014e8:	6863      	ldr	r3, [r4, #4]
 80014ea:	b343      	cbz	r3, 800153e <HAL_RCC_OscConfig+0x11a>
        tickstart = HAL_GetTick();
 80014ec:	f7ff fbe6 	bl	8000cbc <HAL_GetTick>
 80014f0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014f2:	4e7c      	ldr	r6, [pc, #496]	; (80016e4 <HAL_RCC_OscConfig+0x2c0>)
 80014f4:	6833      	ldr	r3, [r6, #0]
 80014f6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80014fa:	d1cb      	bne.n	8001494 <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014fc:	f7ff fbde 	bl	8000cbc <HAL_GetTick>
 8001500:	1b40      	subs	r0, r0, r5
 8001502:	2864      	cmp	r0, #100	; 0x64
 8001504:	d9f6      	bls.n	80014f4 <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 8001506:	2003      	movs	r0, #3
 8001508:	e197      	b.n	800183a <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800150a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800150e:	d009      	beq.n	8001524 <HAL_RCC_OscConfig+0x100>
 8001510:	4b74      	ldr	r3, [pc, #464]	; (80016e4 <HAL_RCC_OscConfig+0x2c0>)
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	e7e1      	b.n	80014e8 <HAL_RCC_OscConfig+0xc4>
 8001524:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001528:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	e7d4      	b.n	80014e8 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 800153e:	f7ff fbbd 	bl	8000cbc <HAL_GetTick>
 8001542:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001544:	4e67      	ldr	r6, [pc, #412]	; (80016e4 <HAL_RCC_OscConfig+0x2c0>)
 8001546:	6833      	ldr	r3, [r6, #0]
 8001548:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800154c:	d0a2      	beq.n	8001494 <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800154e:	f7ff fbb5 	bl	8000cbc <HAL_GetTick>
 8001552:	1b40      	subs	r0, r0, r5
 8001554:	2864      	cmp	r0, #100	; 0x64
 8001556:	d9f6      	bls.n	8001546 <HAL_RCC_OscConfig+0x122>
            return HAL_TIMEOUT;
 8001558:	2003      	movs	r0, #3
 800155a:	e16e      	b.n	800183a <HAL_RCC_OscConfig+0x416>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800155c:	4b61      	ldr	r3, [pc, #388]	; (80016e4 <HAL_RCC_OscConfig+0x2c0>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001564:	d1a5      	bne.n	80014b2 <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001566:	4b5f      	ldr	r3, [pc, #380]	; (80016e4 <HAL_RCC_OscConfig+0x2c0>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f013 0f02 	tst.w	r3, #2
 800156e:	d003      	beq.n	8001578 <HAL_RCC_OscConfig+0x154>
 8001570:	6923      	ldr	r3, [r4, #16]
 8001572:	2b01      	cmp	r3, #1
 8001574:	f040 815e 	bne.w	8001834 <HAL_RCC_OscConfig+0x410>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001578:	4a5a      	ldr	r2, [pc, #360]	; (80016e4 <HAL_RCC_OscConfig+0x2c0>)
 800157a:	6813      	ldr	r3, [r2, #0]
 800157c:	6961      	ldr	r1, [r4, #20]
 800157e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001582:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001586:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001588:	6823      	ldr	r3, [r4, #0]
 800158a:	f013 0f08 	tst.w	r3, #8
 800158e:	d03c      	beq.n	800160a <HAL_RCC_OscConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001590:	69a3      	ldr	r3, [r4, #24]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d04f      	beq.n	8001636 <HAL_RCC_OscConfig+0x212>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001596:	4b55      	ldr	r3, [pc, #340]	; (80016ec <HAL_RCC_OscConfig+0x2c8>)
 8001598:	2201      	movs	r2, #1
 800159a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800159c:	f7ff fb8e 	bl	8000cbc <HAL_GetTick>
 80015a0:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015a2:	4e50      	ldr	r6, [pc, #320]	; (80016e4 <HAL_RCC_OscConfig+0x2c0>)
 80015a4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80015a6:	f013 0f02 	tst.w	r3, #2
 80015aa:	d121      	bne.n	80015f0 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015ac:	f7ff fb86 	bl	8000cbc <HAL_GetTick>
 80015b0:	1b40      	subs	r0, r0, r5
 80015b2:	2802      	cmp	r0, #2
 80015b4:	d9f6      	bls.n	80015a4 <HAL_RCC_OscConfig+0x180>
        {
          return HAL_TIMEOUT;
 80015b6:	2003      	movs	r0, #3
 80015b8:	e13f      	b.n	800183a <HAL_RCC_OscConfig+0x416>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ba:	4a4a      	ldr	r2, [pc, #296]	; (80016e4 <HAL_RCC_OscConfig+0x2c0>)
 80015bc:	6813      	ldr	r3, [r2, #0]
 80015be:	6961      	ldr	r1, [r4, #20]
 80015c0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80015c4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80015c8:	6013      	str	r3, [r2, #0]
 80015ca:	e7dd      	b.n	8001588 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 80015cc:	4b46      	ldr	r3, [pc, #280]	; (80016e8 <HAL_RCC_OscConfig+0x2c4>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80015d2:	f7ff fb73 	bl	8000cbc <HAL_GetTick>
 80015d6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015d8:	4e42      	ldr	r6, [pc, #264]	; (80016e4 <HAL_RCC_OscConfig+0x2c0>)
 80015da:	6833      	ldr	r3, [r6, #0]
 80015dc:	f013 0f02 	tst.w	r3, #2
 80015e0:	d0d2      	beq.n	8001588 <HAL_RCC_OscConfig+0x164>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015e2:	f7ff fb6b 	bl	8000cbc <HAL_GetTick>
 80015e6:	1b40      	subs	r0, r0, r5
 80015e8:	2802      	cmp	r0, #2
 80015ea:	d9f6      	bls.n	80015da <HAL_RCC_OscConfig+0x1b6>
            return HAL_TIMEOUT;
 80015ec:	2003      	movs	r0, #3
 80015ee:	e124      	b.n	800183a <HAL_RCC_OscConfig+0x416>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80015f0:	4b3f      	ldr	r3, [pc, #252]	; (80016f0 <HAL_RCC_OscConfig+0x2cc>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a3f      	ldr	r2, [pc, #252]	; (80016f4 <HAL_RCC_OscConfig+0x2d0>)
 80015f6:	fba2 2303 	umull	r2, r3, r2, r3
 80015fa:	0a5b      	lsrs	r3, r3, #9
 80015fc:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80015fe:	bf00      	nop
  }
  while (Delay --);
 8001600:	9b01      	ldr	r3, [sp, #4]
 8001602:	1e5a      	subs	r2, r3, #1
 8001604:	9201      	str	r2, [sp, #4]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d1f9      	bne.n	80015fe <HAL_RCC_OscConfig+0x1da>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800160a:	6823      	ldr	r3, [r4, #0]
 800160c:	f013 0f04 	tst.w	r3, #4
 8001610:	f000 809c 	beq.w	800174c <HAL_RCC_OscConfig+0x328>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001614:	4b33      	ldr	r3, [pc, #204]	; (80016e4 <HAL_RCC_OscConfig+0x2c0>)
 8001616:	69db      	ldr	r3, [r3, #28]
 8001618:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800161c:	d11d      	bne.n	800165a <HAL_RCC_OscConfig+0x236>
      __HAL_RCC_PWR_CLK_ENABLE();
 800161e:	4b31      	ldr	r3, [pc, #196]	; (80016e4 <HAL_RCC_OscConfig+0x2c0>)
 8001620:	69da      	ldr	r2, [r3, #28]
 8001622:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001626:	61da      	str	r2, [r3, #28]
 8001628:	69db      	ldr	r3, [r3, #28]
 800162a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162e:	9300      	str	r3, [sp, #0]
 8001630:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 8001632:	2501      	movs	r5, #1
 8001634:	e012      	b.n	800165c <HAL_RCC_OscConfig+0x238>
      __HAL_RCC_LSI_DISABLE();
 8001636:	4b2d      	ldr	r3, [pc, #180]	; (80016ec <HAL_RCC_OscConfig+0x2c8>)
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800163c:	f7ff fb3e 	bl	8000cbc <HAL_GetTick>
 8001640:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001642:	4e28      	ldr	r6, [pc, #160]	; (80016e4 <HAL_RCC_OscConfig+0x2c0>)
 8001644:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001646:	f013 0f02 	tst.w	r3, #2
 800164a:	d0de      	beq.n	800160a <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800164c:	f7ff fb36 	bl	8000cbc <HAL_GetTick>
 8001650:	1b40      	subs	r0, r0, r5
 8001652:	2802      	cmp	r0, #2
 8001654:	d9f6      	bls.n	8001644 <HAL_RCC_OscConfig+0x220>
          return HAL_TIMEOUT;
 8001656:	2003      	movs	r0, #3
 8001658:	e0ef      	b.n	800183a <HAL_RCC_OscConfig+0x416>
    FlagStatus       pwrclkchanged = RESET;
 800165a:	2500      	movs	r5, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800165c:	4b26      	ldr	r3, [pc, #152]	; (80016f8 <HAL_RCC_OscConfig+0x2d4>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001664:	d011      	beq.n	800168a <HAL_RCC_OscConfig+0x266>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001666:	68e3      	ldr	r3, [r4, #12]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d022      	beq.n	80016b2 <HAL_RCC_OscConfig+0x28e>
 800166c:	2b00      	cmp	r3, #0
 800166e:	d145      	bne.n	80016fc <HAL_RCC_OscConfig+0x2d8>
 8001670:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001674:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001678:	6a1a      	ldr	r2, [r3, #32]
 800167a:	f022 0201 	bic.w	r2, r2, #1
 800167e:	621a      	str	r2, [r3, #32]
 8001680:	6a1a      	ldr	r2, [r3, #32]
 8001682:	f022 0204 	bic.w	r2, r2, #4
 8001686:	621a      	str	r2, [r3, #32]
 8001688:	e018      	b.n	80016bc <HAL_RCC_OscConfig+0x298>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800168a:	4a1b      	ldr	r2, [pc, #108]	; (80016f8 <HAL_RCC_OscConfig+0x2d4>)
 800168c:	6813      	ldr	r3, [r2, #0]
 800168e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001692:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001694:	f7ff fb12 	bl	8000cbc <HAL_GetTick>
 8001698:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800169a:	4f17      	ldr	r7, [pc, #92]	; (80016f8 <HAL_RCC_OscConfig+0x2d4>)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	f413 7f80 	tst.w	r3, #256	; 0x100
 80016a2:	d1e0      	bne.n	8001666 <HAL_RCC_OscConfig+0x242>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016a4:	f7ff fb0a 	bl	8000cbc <HAL_GetTick>
 80016a8:	1b80      	subs	r0, r0, r6
 80016aa:	2864      	cmp	r0, #100	; 0x64
 80016ac:	d9f6      	bls.n	800169c <HAL_RCC_OscConfig+0x278>
          return HAL_TIMEOUT;
 80016ae:	2003      	movs	r0, #3
 80016b0:	e0c3      	b.n	800183a <HAL_RCC_OscConfig+0x416>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016b2:	4a0c      	ldr	r2, [pc, #48]	; (80016e4 <HAL_RCC_OscConfig+0x2c0>)
 80016b4:	6a13      	ldr	r3, [r2, #32]
 80016b6:	f043 0301 	orr.w	r3, r3, #1
 80016ba:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016bc:	68e3      	ldr	r3, [r4, #12]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d032      	beq.n	8001728 <HAL_RCC_OscConfig+0x304>
      tickstart = HAL_GetTick();
 80016c2:	f7ff fafb 	bl	8000cbc <HAL_GetTick>
 80016c6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016c8:	4f06      	ldr	r7, [pc, #24]	; (80016e4 <HAL_RCC_OscConfig+0x2c0>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ca:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ce:	6a3b      	ldr	r3, [r7, #32]
 80016d0:	f013 0f02 	tst.w	r3, #2
 80016d4:	d139      	bne.n	800174a <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016d6:	f7ff faf1 	bl	8000cbc <HAL_GetTick>
 80016da:	1b80      	subs	r0, r0, r6
 80016dc:	4540      	cmp	r0, r8
 80016de:	d9f6      	bls.n	80016ce <HAL_RCC_OscConfig+0x2aa>
          return HAL_TIMEOUT;
 80016e0:	2003      	movs	r0, #3
 80016e2:	e0aa      	b.n	800183a <HAL_RCC_OscConfig+0x416>
 80016e4:	40021000 	.word	0x40021000
 80016e8:	42420000 	.word	0x42420000
 80016ec:	42420480 	.word	0x42420480
 80016f0:	20000000 	.word	0x20000000
 80016f4:	10624dd3 	.word	0x10624dd3
 80016f8:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016fc:	2b05      	cmp	r3, #5
 80016fe:	d009      	beq.n	8001714 <HAL_RCC_OscConfig+0x2f0>
 8001700:	4b51      	ldr	r3, [pc, #324]	; (8001848 <HAL_RCC_OscConfig+0x424>)
 8001702:	6a1a      	ldr	r2, [r3, #32]
 8001704:	f022 0201 	bic.w	r2, r2, #1
 8001708:	621a      	str	r2, [r3, #32]
 800170a:	6a1a      	ldr	r2, [r3, #32]
 800170c:	f022 0204 	bic.w	r2, r2, #4
 8001710:	621a      	str	r2, [r3, #32]
 8001712:	e7d3      	b.n	80016bc <HAL_RCC_OscConfig+0x298>
 8001714:	4b4c      	ldr	r3, [pc, #304]	; (8001848 <HAL_RCC_OscConfig+0x424>)
 8001716:	6a1a      	ldr	r2, [r3, #32]
 8001718:	f042 0204 	orr.w	r2, r2, #4
 800171c:	621a      	str	r2, [r3, #32]
 800171e:	6a1a      	ldr	r2, [r3, #32]
 8001720:	f042 0201 	orr.w	r2, r2, #1
 8001724:	621a      	str	r2, [r3, #32]
 8001726:	e7c9      	b.n	80016bc <HAL_RCC_OscConfig+0x298>
      tickstart = HAL_GetTick();
 8001728:	f7ff fac8 	bl	8000cbc <HAL_GetTick>
 800172c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800172e:	4f46      	ldr	r7, [pc, #280]	; (8001848 <HAL_RCC_OscConfig+0x424>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001730:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001734:	6a3b      	ldr	r3, [r7, #32]
 8001736:	f013 0f02 	tst.w	r3, #2
 800173a:	d006      	beq.n	800174a <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800173c:	f7ff fabe 	bl	8000cbc <HAL_GetTick>
 8001740:	1b80      	subs	r0, r0, r6
 8001742:	4540      	cmp	r0, r8
 8001744:	d9f6      	bls.n	8001734 <HAL_RCC_OscConfig+0x310>
          return HAL_TIMEOUT;
 8001746:	2003      	movs	r0, #3
 8001748:	e077      	b.n	800183a <HAL_RCC_OscConfig+0x416>
    if (pwrclkchanged == SET)
 800174a:	b9e5      	cbnz	r5, 8001786 <HAL_RCC_OscConfig+0x362>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800174c:	69e3      	ldr	r3, [r4, #28]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d072      	beq.n	8001838 <HAL_RCC_OscConfig+0x414>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001752:	4a3d      	ldr	r2, [pc, #244]	; (8001848 <HAL_RCC_OscConfig+0x424>)
 8001754:	6852      	ldr	r2, [r2, #4]
 8001756:	f002 020c 	and.w	r2, r2, #12
 800175a:	2a08      	cmp	r2, #8
 800175c:	d056      	beq.n	800180c <HAL_RCC_OscConfig+0x3e8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800175e:	2b02      	cmp	r3, #2
 8001760:	d017      	beq.n	8001792 <HAL_RCC_OscConfig+0x36e>
        __HAL_RCC_PLL_DISABLE();
 8001762:	4b3a      	ldr	r3, [pc, #232]	; (800184c <HAL_RCC_OscConfig+0x428>)
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001768:	f7ff faa8 	bl	8000cbc <HAL_GetTick>
 800176c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800176e:	4d36      	ldr	r5, [pc, #216]	; (8001848 <HAL_RCC_OscConfig+0x424>)
 8001770:	682b      	ldr	r3, [r5, #0]
 8001772:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001776:	d047      	beq.n	8001808 <HAL_RCC_OscConfig+0x3e4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001778:	f7ff faa0 	bl	8000cbc <HAL_GetTick>
 800177c:	1b00      	subs	r0, r0, r4
 800177e:	2802      	cmp	r0, #2
 8001780:	d9f6      	bls.n	8001770 <HAL_RCC_OscConfig+0x34c>
            return HAL_TIMEOUT;
 8001782:	2003      	movs	r0, #3
 8001784:	e059      	b.n	800183a <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001786:	4a30      	ldr	r2, [pc, #192]	; (8001848 <HAL_RCC_OscConfig+0x424>)
 8001788:	69d3      	ldr	r3, [r2, #28]
 800178a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800178e:	61d3      	str	r3, [r2, #28]
 8001790:	e7dc      	b.n	800174c <HAL_RCC_OscConfig+0x328>
        __HAL_RCC_PLL_DISABLE();
 8001792:	4b2e      	ldr	r3, [pc, #184]	; (800184c <HAL_RCC_OscConfig+0x428>)
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001798:	f7ff fa90 	bl	8000cbc <HAL_GetTick>
 800179c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800179e:	4e2a      	ldr	r6, [pc, #168]	; (8001848 <HAL_RCC_OscConfig+0x424>)
 80017a0:	6833      	ldr	r3, [r6, #0]
 80017a2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80017a6:	d006      	beq.n	80017b6 <HAL_RCC_OscConfig+0x392>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017a8:	f7ff fa88 	bl	8000cbc <HAL_GetTick>
 80017ac:	1b40      	subs	r0, r0, r5
 80017ae:	2802      	cmp	r0, #2
 80017b0:	d9f6      	bls.n	80017a0 <HAL_RCC_OscConfig+0x37c>
            return HAL_TIMEOUT;
 80017b2:	2003      	movs	r0, #3
 80017b4:	e041      	b.n	800183a <HAL_RCC_OscConfig+0x416>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80017b6:	6a23      	ldr	r3, [r4, #32]
 80017b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017bc:	d01a      	beq.n	80017f4 <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017be:	4922      	ldr	r1, [pc, #136]	; (8001848 <HAL_RCC_OscConfig+0x424>)
 80017c0:	684a      	ldr	r2, [r1, #4]
 80017c2:	6a23      	ldr	r3, [r4, #32]
 80017c4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80017c6:	4303      	orrs	r3, r0
 80017c8:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80017cc:	4313      	orrs	r3, r2
 80017ce:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 80017d0:	4b1e      	ldr	r3, [pc, #120]	; (800184c <HAL_RCC_OscConfig+0x428>)
 80017d2:	2201      	movs	r2, #1
 80017d4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80017d6:	f7ff fa71 	bl	8000cbc <HAL_GetTick>
 80017da:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017dc:	4d1a      	ldr	r5, [pc, #104]	; (8001848 <HAL_RCC_OscConfig+0x424>)
 80017de:	682b      	ldr	r3, [r5, #0]
 80017e0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80017e4:	d10e      	bne.n	8001804 <HAL_RCC_OscConfig+0x3e0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017e6:	f7ff fa69 	bl	8000cbc <HAL_GetTick>
 80017ea:	1b00      	subs	r0, r0, r4
 80017ec:	2802      	cmp	r0, #2
 80017ee:	d9f6      	bls.n	80017de <HAL_RCC_OscConfig+0x3ba>
            return HAL_TIMEOUT;
 80017f0:	2003      	movs	r0, #3
 80017f2:	e022      	b.n	800183a <HAL_RCC_OscConfig+0x416>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017f4:	4a14      	ldr	r2, [pc, #80]	; (8001848 <HAL_RCC_OscConfig+0x424>)
 80017f6:	6853      	ldr	r3, [r2, #4]
 80017f8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80017fc:	68a1      	ldr	r1, [r4, #8]
 80017fe:	430b      	orrs	r3, r1
 8001800:	6053      	str	r3, [r2, #4]
 8001802:	e7dc      	b.n	80017be <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 8001804:	2000      	movs	r0, #0
 8001806:	e018      	b.n	800183a <HAL_RCC_OscConfig+0x416>
 8001808:	2000      	movs	r0, #0
 800180a:	e016      	b.n	800183a <HAL_RCC_OscConfig+0x416>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800180c:	2b01      	cmp	r3, #1
 800180e:	d017      	beq.n	8001840 <HAL_RCC_OscConfig+0x41c>
        pll_config = RCC->CFGR;
 8001810:	4b0d      	ldr	r3, [pc, #52]	; (8001848 <HAL_RCC_OscConfig+0x424>)
 8001812:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001814:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8001818:	6a22      	ldr	r2, [r4, #32]
 800181a:	4291      	cmp	r1, r2
 800181c:	d112      	bne.n	8001844 <HAL_RCC_OscConfig+0x420>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800181e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001822:	6a60      	ldr	r0, [r4, #36]	; 0x24
        return HAL_ERROR;
 8001824:	1a18      	subs	r0, r3, r0
 8001826:	bf18      	it	ne
 8001828:	2001      	movne	r0, #1
 800182a:	e006      	b.n	800183a <HAL_RCC_OscConfig+0x416>
    return HAL_ERROR;
 800182c:	2001      	movs	r0, #1
}
 800182e:	4770      	bx	lr
        return HAL_ERROR;
 8001830:	2001      	movs	r0, #1
 8001832:	e002      	b.n	800183a <HAL_RCC_OscConfig+0x416>
        return HAL_ERROR;
 8001834:	2001      	movs	r0, #1
 8001836:	e000      	b.n	800183a <HAL_RCC_OscConfig+0x416>
  return HAL_OK;
 8001838:	2000      	movs	r0, #0
}
 800183a:	b002      	add	sp, #8
 800183c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 8001840:	2001      	movs	r0, #1
 8001842:	e7fa      	b.n	800183a <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
 8001844:	2001      	movs	r0, #1
 8001846:	e7f8      	b.n	800183a <HAL_RCC_OscConfig+0x416>
 8001848:	40021000 	.word	0x40021000
 800184c:	42420060 	.word	0x42420060

08001850 <HAL_RCC_GetSysClockFreq>:
{
 8001850:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001852:	4b16      	ldr	r3, [pc, #88]	; (80018ac <HAL_RCC_GetSysClockFreq+0x5c>)
 8001854:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001856:	f10d 0c18 	add.w	ip, sp, #24
 800185a:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800185e:	f240 2301 	movw	r3, #513	; 0x201
 8001862:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8001866:	4b12      	ldr	r3, [pc, #72]	; (80018b0 <HAL_RCC_GetSysClockFreq+0x60>)
 8001868:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800186a:	f003 020c 	and.w	r2, r3, #12
 800186e:	2a08      	cmp	r2, #8
 8001870:	d002      	beq.n	8001878 <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 8001872:	4810      	ldr	r0, [pc, #64]	; (80018b4 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8001874:	b006      	add	sp, #24
 8001876:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001878:	f3c3 4283 	ubfx	r2, r3, #18, #4
 800187c:	4462      	add	r2, ip
 800187e:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001882:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001886:	d00c      	beq.n	80018a2 <HAL_RCC_GetSysClockFreq+0x52>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001888:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <HAL_RCC_GetSysClockFreq+0x60>)
 800188a:	685b      	ldr	r3, [r3, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800188c:	4809      	ldr	r0, [pc, #36]	; (80018b4 <HAL_RCC_GetSysClockFreq+0x64>)
 800188e:	fb00 f002 	mul.w	r0, r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001892:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8001896:	4463      	add	r3, ip
 8001898:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800189c:	fbb0 f0f3 	udiv	r0, r0, r3
 80018a0:	e7e8      	b.n	8001874 <HAL_RCC_GetSysClockFreq+0x24>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80018a2:	4805      	ldr	r0, [pc, #20]	; (80018b8 <HAL_RCC_GetSysClockFreq+0x68>)
 80018a4:	fb00 f002 	mul.w	r0, r0, r2
 80018a8:	e7e4      	b.n	8001874 <HAL_RCC_GetSysClockFreq+0x24>
 80018aa:	bf00      	nop
 80018ac:	08002bb8 	.word	0x08002bb8
 80018b0:	40021000 	.word	0x40021000
 80018b4:	007a1200 	.word	0x007a1200
 80018b8:	003d0900 	.word	0x003d0900

080018bc <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80018bc:	2800      	cmp	r0, #0
 80018be:	f000 80a2 	beq.w	8001a06 <HAL_RCC_ClockConfig+0x14a>
{
 80018c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018c6:	460d      	mov	r5, r1
 80018c8:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018ca:	4b53      	ldr	r3, [pc, #332]	; (8001a18 <HAL_RCC_ClockConfig+0x15c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	428b      	cmp	r3, r1
 80018d4:	d20b      	bcs.n	80018ee <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018d6:	4a50      	ldr	r2, [pc, #320]	; (8001a18 <HAL_RCC_ClockConfig+0x15c>)
 80018d8:	6813      	ldr	r3, [r2, #0]
 80018da:	f023 0307 	bic.w	r3, r3, #7
 80018de:	430b      	orrs	r3, r1
 80018e0:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018e2:	6813      	ldr	r3, [r2, #0]
 80018e4:	f003 0307 	and.w	r3, r3, #7
 80018e8:	428b      	cmp	r3, r1
 80018ea:	f040 808e 	bne.w	8001a0a <HAL_RCC_ClockConfig+0x14e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018ee:	6823      	ldr	r3, [r4, #0]
 80018f0:	f013 0f02 	tst.w	r3, #2
 80018f4:	d017      	beq.n	8001926 <HAL_RCC_ClockConfig+0x6a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018f6:	f013 0f04 	tst.w	r3, #4
 80018fa:	d004      	beq.n	8001906 <HAL_RCC_ClockConfig+0x4a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018fc:	4a47      	ldr	r2, [pc, #284]	; (8001a1c <HAL_RCC_ClockConfig+0x160>)
 80018fe:	6853      	ldr	r3, [r2, #4]
 8001900:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001904:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001906:	6823      	ldr	r3, [r4, #0]
 8001908:	f013 0f08 	tst.w	r3, #8
 800190c:	d004      	beq.n	8001918 <HAL_RCC_ClockConfig+0x5c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800190e:	4a43      	ldr	r2, [pc, #268]	; (8001a1c <HAL_RCC_ClockConfig+0x160>)
 8001910:	6853      	ldr	r3, [r2, #4]
 8001912:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001916:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001918:	4a40      	ldr	r2, [pc, #256]	; (8001a1c <HAL_RCC_ClockConfig+0x160>)
 800191a:	6853      	ldr	r3, [r2, #4]
 800191c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001920:	68a1      	ldr	r1, [r4, #8]
 8001922:	430b      	orrs	r3, r1
 8001924:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001926:	6823      	ldr	r3, [r4, #0]
 8001928:	f013 0f01 	tst.w	r3, #1
 800192c:	d031      	beq.n	8001992 <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800192e:	6862      	ldr	r2, [r4, #4]
 8001930:	2a01      	cmp	r2, #1
 8001932:	d020      	beq.n	8001976 <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001934:	2a02      	cmp	r2, #2
 8001936:	d025      	beq.n	8001984 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001938:	4b38      	ldr	r3, [pc, #224]	; (8001a1c <HAL_RCC_ClockConfig+0x160>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f013 0f02 	tst.w	r3, #2
 8001940:	d065      	beq.n	8001a0e <HAL_RCC_ClockConfig+0x152>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001942:	4936      	ldr	r1, [pc, #216]	; (8001a1c <HAL_RCC_ClockConfig+0x160>)
 8001944:	684b      	ldr	r3, [r1, #4]
 8001946:	f023 0303 	bic.w	r3, r3, #3
 800194a:	4313      	orrs	r3, r2
 800194c:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 800194e:	f7ff f9b5 	bl	8000cbc <HAL_GetTick>
 8001952:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001954:	4f31      	ldr	r7, [pc, #196]	; (8001a1c <HAL_RCC_ClockConfig+0x160>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001956:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	f003 030c 	and.w	r3, r3, #12
 8001960:	6862      	ldr	r2, [r4, #4]
 8001962:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001966:	d014      	beq.n	8001992 <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001968:	f7ff f9a8 	bl	8000cbc <HAL_GetTick>
 800196c:	1b80      	subs	r0, r0, r6
 800196e:	4540      	cmp	r0, r8
 8001970:	d9f3      	bls.n	800195a <HAL_RCC_ClockConfig+0x9e>
        return HAL_TIMEOUT;
 8001972:	2003      	movs	r0, #3
 8001974:	e045      	b.n	8001a02 <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001976:	4b29      	ldr	r3, [pc, #164]	; (8001a1c <HAL_RCC_ClockConfig+0x160>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800197e:	d1e0      	bne.n	8001942 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8001980:	2001      	movs	r0, #1
 8001982:	e03e      	b.n	8001a02 <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001984:	4b25      	ldr	r3, [pc, #148]	; (8001a1c <HAL_RCC_ClockConfig+0x160>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800198c:	d1d9      	bne.n	8001942 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 800198e:	2001      	movs	r0, #1
 8001990:	e037      	b.n	8001a02 <HAL_RCC_ClockConfig+0x146>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001992:	4b21      	ldr	r3, [pc, #132]	; (8001a18 <HAL_RCC_ClockConfig+0x15c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0307 	and.w	r3, r3, #7
 800199a:	42ab      	cmp	r3, r5
 800199c:	d90a      	bls.n	80019b4 <HAL_RCC_ClockConfig+0xf8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800199e:	4a1e      	ldr	r2, [pc, #120]	; (8001a18 <HAL_RCC_ClockConfig+0x15c>)
 80019a0:	6813      	ldr	r3, [r2, #0]
 80019a2:	f023 0307 	bic.w	r3, r3, #7
 80019a6:	432b      	orrs	r3, r5
 80019a8:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019aa:	6813      	ldr	r3, [r2, #0]
 80019ac:	f003 0307 	and.w	r3, r3, #7
 80019b0:	42ab      	cmp	r3, r5
 80019b2:	d12e      	bne.n	8001a12 <HAL_RCC_ClockConfig+0x156>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019b4:	6823      	ldr	r3, [r4, #0]
 80019b6:	f013 0f04 	tst.w	r3, #4
 80019ba:	d006      	beq.n	80019ca <HAL_RCC_ClockConfig+0x10e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019bc:	4a17      	ldr	r2, [pc, #92]	; (8001a1c <HAL_RCC_ClockConfig+0x160>)
 80019be:	6853      	ldr	r3, [r2, #4]
 80019c0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80019c4:	68e1      	ldr	r1, [r4, #12]
 80019c6:	430b      	orrs	r3, r1
 80019c8:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ca:	6823      	ldr	r3, [r4, #0]
 80019cc:	f013 0f08 	tst.w	r3, #8
 80019d0:	d007      	beq.n	80019e2 <HAL_RCC_ClockConfig+0x126>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019d2:	4a12      	ldr	r2, [pc, #72]	; (8001a1c <HAL_RCC_ClockConfig+0x160>)
 80019d4:	6853      	ldr	r3, [r2, #4]
 80019d6:	6921      	ldr	r1, [r4, #16]
 80019d8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80019dc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80019e0:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019e2:	f7ff ff35 	bl	8001850 <HAL_RCC_GetSysClockFreq>
 80019e6:	4b0d      	ldr	r3, [pc, #52]	; (8001a1c <HAL_RCC_ClockConfig+0x160>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80019ee:	4a0c      	ldr	r2, [pc, #48]	; (8001a20 <HAL_RCC_ClockConfig+0x164>)
 80019f0:	5cd3      	ldrb	r3, [r2, r3]
 80019f2:	40d8      	lsrs	r0, r3
 80019f4:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <HAL_RCC_ClockConfig+0x168>)
 80019f6:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80019f8:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <HAL_RCC_ClockConfig+0x16c>)
 80019fa:	6818      	ldr	r0, [r3, #0]
 80019fc:	f7ff f91a 	bl	8000c34 <HAL_InitTick>
  return HAL_OK;
 8001a00:	2000      	movs	r0, #0
}
 8001a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8001a06:	2001      	movs	r0, #1
}
 8001a08:	4770      	bx	lr
    return HAL_ERROR;
 8001a0a:	2001      	movs	r0, #1
 8001a0c:	e7f9      	b.n	8001a02 <HAL_RCC_ClockConfig+0x146>
        return HAL_ERROR;
 8001a0e:	2001      	movs	r0, #1
 8001a10:	e7f7      	b.n	8001a02 <HAL_RCC_ClockConfig+0x146>
    return HAL_ERROR;
 8001a12:	2001      	movs	r0, #1
 8001a14:	e7f5      	b.n	8001a02 <HAL_RCC_ClockConfig+0x146>
 8001a16:	bf00      	nop
 8001a18:	40022000 	.word	0x40022000
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	08002ba0 	.word	0x08002ba0
 8001a24:	20000000 	.word	0x20000000
 8001a28:	20000008 	.word	0x20000008

08001a2c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a2c:	4b04      	ldr	r3, [pc, #16]	; (8001a40 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001a34:	4a03      	ldr	r2, [pc, #12]	; (8001a44 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001a36:	5cd3      	ldrb	r3, [r2, r3]
 8001a38:	4a03      	ldr	r2, [pc, #12]	; (8001a48 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001a3a:	6810      	ldr	r0, [r2, #0]
}
 8001a3c:	40d8      	lsrs	r0, r3
 8001a3e:	4770      	bx	lr
 8001a40:	40021000 	.word	0x40021000
 8001a44:	08002bb0 	.word	0x08002bb0
 8001a48:	20000000 	.word	0x20000000

08001a4c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a4c:	4b04      	ldr	r3, [pc, #16]	; (8001a60 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001a54:	4a03      	ldr	r2, [pc, #12]	; (8001a64 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001a56:	5cd3      	ldrb	r3, [r2, r3]
 8001a58:	4a03      	ldr	r2, [pc, #12]	; (8001a68 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001a5a:	6810      	ldr	r0, [r2, #0]
}
 8001a5c:	40d8      	lsrs	r0, r3
 8001a5e:	4770      	bx	lr
 8001a60:	40021000 	.word	0x40021000
 8001a64:	08002bb0 	.word	0x08002bb0
 8001a68:	20000000 	.word	0x20000000

08001a6c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a70:	b082      	sub	sp, #8
 8001a72:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001a74:	6803      	ldr	r3, [r0, #0]
 8001a76:	f013 0f01 	tst.w	r3, #1
 8001a7a:	d034      	beq.n	8001ae6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a7c:	4b3e      	ldr	r3, [pc, #248]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001a7e:	69db      	ldr	r3, [r3, #28]
 8001a80:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001a84:	d147      	bne.n	8001b16 <HAL_RCCEx_PeriphCLKConfig+0xaa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a86:	4b3c      	ldr	r3, [pc, #240]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001a88:	69da      	ldr	r2, [r3, #28]
 8001a8a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a8e:	61da      	str	r2, [r3, #28]
 8001a90:	69db      	ldr	r3, [r3, #28]
 8001a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a96:	9301      	str	r3, [sp, #4]
 8001a98:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001a9a:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a9c:	4b37      	ldr	r3, [pc, #220]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001aa4:	d039      	beq.n	8001b1a <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001aa6:	4b34      	ldr	r3, [pc, #208]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001aa8:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001aaa:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001aae:	d011      	beq.n	8001ad4 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8001ab0:	6862      	ldr	r2, [r4, #4]
 8001ab2:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d00c      	beq.n	8001ad4 <HAL_RCCEx_PeriphCLKConfig+0x68>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001aba:	4a2f      	ldr	r2, [pc, #188]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001abc:	6a13      	ldr	r3, [r2, #32]
 8001abe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ac2:	492f      	ldr	r1, [pc, #188]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8001ac4:	2601      	movs	r6, #1
 8001ac6:	600e      	str	r6, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ac8:	2600      	movs	r6, #0
 8001aca:	600e      	str	r6, [r1, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001acc:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001ace:	f013 0f01 	tst.w	r3, #1
 8001ad2:	d136      	bne.n	8001b42 <HAL_RCCEx_PeriphCLKConfig+0xd6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ad4:	4a28      	ldr	r2, [pc, #160]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001ad6:	6a13      	ldr	r3, [r2, #32]
 8001ad8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001adc:	6861      	ldr	r1, [r4, #4]
 8001ade:	430b      	orrs	r3, r1
 8001ae0:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ae2:	2d00      	cmp	r5, #0
 8001ae4:	d13e      	bne.n	8001b64 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001ae6:	6823      	ldr	r3, [r4, #0]
 8001ae8:	f013 0f02 	tst.w	r3, #2
 8001aec:	d006      	beq.n	8001afc <HAL_RCCEx_PeriphCLKConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001aee:	4a22      	ldr	r2, [pc, #136]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001af0:	6853      	ldr	r3, [r2, #4]
 8001af2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001af6:	68a1      	ldr	r1, [r4, #8]
 8001af8:	430b      	orrs	r3, r1
 8001afa:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001afc:	6823      	ldr	r3, [r4, #0]
 8001afe:	f013 0f10 	tst.w	r3, #16
 8001b02:	d034      	beq.n	8001b6e <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001b04:	4a1c      	ldr	r2, [pc, #112]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001b06:	6853      	ldr	r3, [r2, #4]
 8001b08:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001b0c:	68e1      	ldr	r1, [r4, #12]
 8001b0e:	430b      	orrs	r3, r1
 8001b10:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001b12:	2000      	movs	r0, #0
 8001b14:	e02c      	b.n	8001b70 <HAL_RCCEx_PeriphCLKConfig+0x104>
    FlagStatus       pwrclkchanged = RESET;
 8001b16:	2500      	movs	r5, #0
 8001b18:	e7c0      	b.n	8001a9c <HAL_RCCEx_PeriphCLKConfig+0x30>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b1a:	4a18      	ldr	r2, [pc, #96]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8001b1c:	6813      	ldr	r3, [r2, #0]
 8001b1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b22:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001b24:	f7ff f8ca 	bl	8000cbc <HAL_GetTick>
 8001b28:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b2a:	4f14      	ldr	r7, [pc, #80]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001b32:	d1b8      	bne.n	8001aa6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b34:	f7ff f8c2 	bl	8000cbc <HAL_GetTick>
 8001b38:	1b80      	subs	r0, r0, r6
 8001b3a:	2864      	cmp	r0, #100	; 0x64
 8001b3c:	d9f6      	bls.n	8001b2c <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 8001b3e:	2003      	movs	r0, #3
 8001b40:	e016      	b.n	8001b70 <HAL_RCCEx_PeriphCLKConfig+0x104>
        tickstart = HAL_GetTick();
 8001b42:	f7ff f8bb 	bl	8000cbc <HAL_GetTick>
 8001b46:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b48:	4f0b      	ldr	r7, [pc, #44]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b4a:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b4e:	6a3b      	ldr	r3, [r7, #32]
 8001b50:	f013 0f02 	tst.w	r3, #2
 8001b54:	d1be      	bne.n	8001ad4 <HAL_RCCEx_PeriphCLKConfig+0x68>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b56:	f7ff f8b1 	bl	8000cbc <HAL_GetTick>
 8001b5a:	1b80      	subs	r0, r0, r6
 8001b5c:	4540      	cmp	r0, r8
 8001b5e:	d9f6      	bls.n	8001b4e <HAL_RCCEx_PeriphCLKConfig+0xe2>
            return HAL_TIMEOUT;
 8001b60:	2003      	movs	r0, #3
 8001b62:	e005      	b.n	8001b70 <HAL_RCCEx_PeriphCLKConfig+0x104>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b64:	69d3      	ldr	r3, [r2, #28]
 8001b66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b6a:	61d3      	str	r3, [r2, #28]
 8001b6c:	e7bb      	b.n	8001ae6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
  return HAL_OK;
 8001b6e:	2000      	movs	r0, #0
}
 8001b70:	b002      	add	sp, #8
 8001b72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b76:	bf00      	nop
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	40007000 	.word	0x40007000
 8001b80:	42420440 	.word	0x42420440

08001b84 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001b84:	6802      	ldr	r2, [r0, #0]
 8001b86:	68d3      	ldr	r3, [r2, #12]
 8001b88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001b8c:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b8e:	6802      	ldr	r2, [r0, #0]
 8001b90:	6953      	ldr	r3, [r2, #20]
 8001b92:	f023 0301 	bic.w	r3, r3, #1
 8001b96:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001b98:	2320      	movs	r3, #32
 8001b9a:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 8001b9e:	4770      	bx	lr

08001ba0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001ba0:	b510      	push	{r4, lr}
 8001ba2:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ba4:	6802      	ldr	r2, [r0, #0]
 8001ba6:	6913      	ldr	r3, [r2, #16]
 8001ba8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001bac:	68c1      	ldr	r1, [r0, #12]
 8001bae:	430b      	orrs	r3, r1
 8001bb0:	6113      	str	r3, [r2, #16]
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
  MODIFY_REG(huart->Instance->CR1,
 8001bb2:	6801      	ldr	r1, [r0, #0]
 8001bb4:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001bb6:	6883      	ldr	r3, [r0, #8]
 8001bb8:	6900      	ldr	r0, [r0, #16]
 8001bba:	4303      	orrs	r3, r0
 8001bbc:	6960      	ldr	r0, [r4, #20]
 8001bbe:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8001bc0:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8001bc4:	f022 020c 	bic.w	r2, r2, #12
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001bcc:	6822      	ldr	r2, [r4, #0]
 8001bce:	6953      	ldr	r3, [r2, #20]
 8001bd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bd4:	69a1      	ldr	r1, [r4, #24]
 8001bd6:	430b      	orrs	r3, r1
 8001bd8:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 8001bda:	6822      	ldr	r2, [r4, #0]
 8001bdc:	4b10      	ldr	r3, [pc, #64]	; (8001c20 <UART_SetConfig+0x80>)
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d01a      	beq.n	8001c18 <UART_SetConfig+0x78>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001be2:	f7ff ff23 	bl	8001a2c <HAL_RCC_GetPCLK1Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001be6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001bea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001bee:	6863      	ldr	r3, [r4, #4]
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bf6:	6824      	ldr	r4, [r4, #0]
 8001bf8:	480a      	ldr	r0, [pc, #40]	; (8001c24 <UART_SetConfig+0x84>)
 8001bfa:	fba0 2103 	umull	r2, r1, r0, r3
 8001bfe:	0949      	lsrs	r1, r1, #5
 8001c00:	2264      	movs	r2, #100	; 0x64
 8001c02:	fb02 3311 	mls	r3, r2, r1, r3
 8001c06:	011b      	lsls	r3, r3, #4
 8001c08:	3332      	adds	r3, #50	; 0x32
 8001c0a:	fba0 2303 	umull	r2, r3, r0, r3
 8001c0e:	0109      	lsls	r1, r1, #4
 8001c10:	eb01 1353 	add.w	r3, r1, r3, lsr #5
 8001c14:	60a3      	str	r3, [r4, #8]
#endif /* USART_CR1_OVER8 */
}
 8001c16:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8001c18:	f7ff ff18 	bl	8001a4c <HAL_RCC_GetPCLK2Freq>
 8001c1c:	e7e3      	b.n	8001be6 <UART_SetConfig+0x46>
 8001c1e:	bf00      	nop
 8001c20:	40013800 	.word	0x40013800
 8001c24:	51eb851f 	.word	0x51eb851f

08001c28 <UART_WaitOnFlagUntilTimeout>:
{
 8001c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001c2c:	4680      	mov	r8, r0
 8001c2e:	460e      	mov	r6, r1
 8001c30:	4615      	mov	r5, r2
 8001c32:	4699      	mov	r9, r3
 8001c34:	9f08      	ldr	r7, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c36:	f8d8 2000 	ldr.w	r2, [r8]
 8001c3a:	6814      	ldr	r4, [r2, #0]
 8001c3c:	ea36 0304 	bics.w	r3, r6, r4
 8001c40:	bf0c      	ite	eq
 8001c42:	2401      	moveq	r4, #1
 8001c44:	2400      	movne	r4, #0
 8001c46:	42ac      	cmp	r4, r5
 8001c48:	d11f      	bne.n	8001c8a <UART_WaitOnFlagUntilTimeout+0x62>
    if (Timeout != HAL_MAX_DELAY)
 8001c4a:	f1b7 3fff 	cmp.w	r7, #4294967295
 8001c4e:	d0f4      	beq.n	8001c3a <UART_WaitOnFlagUntilTimeout+0x12>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001c50:	b12f      	cbz	r7, 8001c5e <UART_WaitOnFlagUntilTimeout+0x36>
 8001c52:	f7ff f833 	bl	8000cbc <HAL_GetTick>
 8001c56:	eba0 0009 	sub.w	r0, r0, r9
 8001c5a:	42b8      	cmp	r0, r7
 8001c5c:	d9eb      	bls.n	8001c36 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c5e:	f8d8 2000 	ldr.w	r2, [r8]
 8001c62:	68d3      	ldr	r3, [r2, #12]
 8001c64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001c68:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c6a:	f8d8 2000 	ldr.w	r2, [r8]
 8001c6e:	6953      	ldr	r3, [r2, #20]
 8001c70:	f023 0301 	bic.w	r3, r3, #1
 8001c74:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001c76:	2320      	movs	r3, #32
 8001c78:	f888 3039 	strb.w	r3, [r8, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001c7c:	f888 303a 	strb.w	r3, [r8, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001c80:	2300      	movs	r3, #0
 8001c82:	f888 3038 	strb.w	r3, [r8, #56]	; 0x38
        return HAL_TIMEOUT;
 8001c86:	2003      	movs	r0, #3
 8001c88:	e000      	b.n	8001c8c <UART_WaitOnFlagUntilTimeout+0x64>
  return HAL_OK;
 8001c8a:	2000      	movs	r0, #0
}
 8001c8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001c90 <HAL_UART_Init>:
  if (huart == NULL)
 8001c90:	b358      	cbz	r0, 8001cea <HAL_UART_Init+0x5a>
{
 8001c92:	b510      	push	{r4, lr}
 8001c94:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8001c96:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001c9a:	b30b      	cbz	r3, 8001ce0 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8001c9c:	2324      	movs	r3, #36	; 0x24
 8001c9e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001ca2:	6822      	ldr	r2, [r4, #0]
 8001ca4:	68d3      	ldr	r3, [r2, #12]
 8001ca6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001caa:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001cac:	4620      	mov	r0, r4
 8001cae:	f7ff ff77 	bl	8001ba0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001cb2:	6822      	ldr	r2, [r4, #0]
 8001cb4:	6913      	ldr	r3, [r2, #16]
 8001cb6:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001cba:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001cbc:	6822      	ldr	r2, [r4, #0]
 8001cbe:	6953      	ldr	r3, [r2, #20]
 8001cc0:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001cc4:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8001cc6:	6822      	ldr	r2, [r4, #0]
 8001cc8:	68d3      	ldr	r3, [r2, #12]
 8001cca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001cce:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cd0:	2000      	movs	r0, #0
 8001cd2:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001cd4:	2320      	movs	r3, #32
 8001cd6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001cda:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8001cde:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001ce0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001ce4:	f7fe fd46 	bl	8000774 <HAL_UART_MspInit>
 8001ce8:	e7d8      	b.n	8001c9c <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8001cea:	2001      	movs	r0, #1
}
 8001cec:	4770      	bx	lr

08001cee <HAL_UART_Transmit>:
{
 8001cee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001cf6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b20      	cmp	r3, #32
 8001cfe:	d15a      	bne.n	8001db6 <HAL_UART_Transmit+0xc8>
 8001d00:	4604      	mov	r4, r0
 8001d02:	460d      	mov	r5, r1
 8001d04:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8001d06:	2900      	cmp	r1, #0
 8001d08:	d059      	beq.n	8001dbe <HAL_UART_Transmit+0xd0>
 8001d0a:	2a00      	cmp	r2, #0
 8001d0c:	d059      	beq.n	8001dc2 <HAL_UART_Transmit+0xd4>
    __HAL_LOCK(huart);
 8001d0e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d057      	beq.n	8001dc6 <HAL_UART_Transmit+0xd8>
 8001d16:	2301      	movs	r3, #1
 8001d18:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d20:	2321      	movs	r3, #33	; 0x21
 8001d22:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001d26:	f7fe ffc9 	bl	8000cbc <HAL_GetTick>
 8001d2a:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8001d2c:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8001d30:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d34:	68a3      	ldr	r3, [r4, #8]
 8001d36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d3a:	d00c      	beq.n	8001d56 <HAL_UART_Transmit+0x68>
      pdata16bits = NULL;
 8001d3c:	f04f 0a00 	mov.w	sl, #0
    __HAL_UNLOCK(huart);
 8001d40:	2300      	movs	r3, #0
 8001d42:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 8001d46:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	b343      	cbz	r3, 8001d9e <HAL_UART_Transmit+0xb0>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d4c:	f04f 0900 	mov.w	r9, #0
 8001d50:	f04f 0880 	mov.w	r8, #128	; 0x80
 8001d54:	e014      	b.n	8001d80 <HAL_UART_Transmit+0x92>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d56:	6923      	ldr	r3, [r4, #16]
 8001d58:	b913      	cbnz	r3, 8001d60 <HAL_UART_Transmit+0x72>
      pdata16bits = (uint16_t *) pData;
 8001d5a:	46aa      	mov	sl, r5
      pdata8bits  = NULL;
 8001d5c:	2500      	movs	r5, #0
 8001d5e:	e7ef      	b.n	8001d40 <HAL_UART_Transmit+0x52>
      pdata16bits = NULL;
 8001d60:	f04f 0a00 	mov.w	sl, #0
 8001d64:	e7ec      	b.n	8001d40 <HAL_UART_Transmit+0x52>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001d66:	6822      	ldr	r2, [r4, #0]
 8001d68:	f83a 3b02 	ldrh.w	r3, [sl], #2
 8001d6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d70:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8001d72:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8001d74:	3a01      	subs	r2, #1
 8001d76:	b292      	uxth	r2, r2
 8001d78:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001d7a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	b173      	cbz	r3, 8001d9e <HAL_UART_Transmit+0xb0>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d80:	9600      	str	r6, [sp, #0]
 8001d82:	463b      	mov	r3, r7
 8001d84:	464a      	mov	r2, r9
 8001d86:	4641      	mov	r1, r8
 8001d88:	4620      	mov	r0, r4
 8001d8a:	f7ff ff4d 	bl	8001c28 <UART_WaitOnFlagUntilTimeout>
 8001d8e:	b9e0      	cbnz	r0, 8001dca <HAL_UART_Transmit+0xdc>
      if (pdata8bits == NULL)
 8001d90:	2d00      	cmp	r5, #0
 8001d92:	d0e8      	beq.n	8001d66 <HAL_UART_Transmit+0x78>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d94:	6823      	ldr	r3, [r4, #0]
 8001d96:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001d9a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001d9c:	e7e9      	b.n	8001d72 <HAL_UART_Transmit+0x84>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d9e:	9600      	str	r6, [sp, #0]
 8001da0:	463b      	mov	r3, r7
 8001da2:	2200      	movs	r2, #0
 8001da4:	2140      	movs	r1, #64	; 0x40
 8001da6:	4620      	mov	r0, r4
 8001da8:	f7ff ff3e 	bl	8001c28 <UART_WaitOnFlagUntilTimeout>
 8001dac:	b978      	cbnz	r0, 8001dce <HAL_UART_Transmit+0xe0>
    huart->gState = HAL_UART_STATE_READY;
 8001dae:	2320      	movs	r3, #32
 8001db0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8001db4:	e000      	b.n	8001db8 <HAL_UART_Transmit+0xca>
    return HAL_BUSY;
 8001db6:	2002      	movs	r0, #2
}
 8001db8:	b002      	add	sp, #8
 8001dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return  HAL_ERROR;
 8001dbe:	2001      	movs	r0, #1
 8001dc0:	e7fa      	b.n	8001db8 <HAL_UART_Transmit+0xca>
 8001dc2:	2001      	movs	r0, #1
 8001dc4:	e7f8      	b.n	8001db8 <HAL_UART_Transmit+0xca>
    __HAL_LOCK(huart);
 8001dc6:	2002      	movs	r0, #2
 8001dc8:	e7f6      	b.n	8001db8 <HAL_UART_Transmit+0xca>
        return HAL_TIMEOUT;
 8001dca:	2003      	movs	r0, #3
 8001dcc:	e7f4      	b.n	8001db8 <HAL_UART_Transmit+0xca>
      return HAL_TIMEOUT;
 8001dce:	2003      	movs	r0, #3
 8001dd0:	e7f2      	b.n	8001db8 <HAL_UART_Transmit+0xca>
	...

08001dd4 <HAL_UART_Receive_DMA>:
{
 8001dd4:	b530      	push	{r4, r5, lr}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 8001dda:	f890 003a 	ldrb.w	r0, [r0, #58]	; 0x3a
 8001dde:	b2c0      	uxtb	r0, r0
 8001de0:	2820      	cmp	r0, #32
 8001de2:	d13c      	bne.n	8001e5e <HAL_UART_Receive_DMA+0x8a>
    if ((pData == NULL) || (Size == 0U))
 8001de4:	2900      	cmp	r1, #0
 8001de6:	d03d      	beq.n	8001e64 <HAL_UART_Receive_DMA+0x90>
 8001de8:	2a00      	cmp	r2, #0
 8001dea:	d03d      	beq.n	8001e68 <HAL_UART_Receive_DMA+0x94>
    __HAL_LOCK(huart);
 8001dec:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d03b      	beq.n	8001e6c <HAL_UART_Receive_DMA+0x98>
 8001df4:	2301      	movs	r3, #1
 8001df6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    huart->pRxBuffPtr = pData;
 8001dfa:	62a1      	str	r1, [r4, #40]	; 0x28
    huart->RxXferSize = Size;
 8001dfc:	85a2      	strh	r2, [r4, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dfe:	2500      	movs	r5, #0
 8001e00:	63e5      	str	r5, [r4, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001e02:	2322      	movs	r3, #34	; 0x22
 8001e04:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8001e08:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001e0a:	4819      	ldr	r0, [pc, #100]	; (8001e70 <HAL_UART_Receive_DMA+0x9c>)
 8001e0c:	6298      	str	r0, [r3, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8001e0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001e10:	4818      	ldr	r0, [pc, #96]	; (8001e74 <HAL_UART_Receive_DMA+0xa0>)
 8001e12:	62d8      	str	r0, [r3, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8001e14:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001e16:	4818      	ldr	r0, [pc, #96]	; (8001e78 <HAL_UART_Receive_DMA+0xa4>)
 8001e18:	6318      	str	r0, [r3, #48]	; 0x30
    huart->hdmarx->XferAbortCallback = NULL;
 8001e1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001e1c:	635d      	str	r5, [r3, #52]	; 0x34
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8001e1e:	6820      	ldr	r0, [r4, #0]
 8001e20:	4613      	mov	r3, r2
 8001e22:	460a      	mov	r2, r1
 8001e24:	1d01      	adds	r1, r0, #4
 8001e26:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001e28:	f7ff f800 	bl	8000e2c <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_OREFLAG(huart);
 8001e2c:	9501      	str	r5, [sp, #4]
 8001e2e:	6823      	ldr	r3, [r4, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	9201      	str	r2, [sp, #4]
 8001e34:	685a      	ldr	r2, [r3, #4]
 8001e36:	9201      	str	r2, [sp, #4]
 8001e38:	9a01      	ldr	r2, [sp, #4]
    __HAL_UNLOCK(huart);
 8001e3a:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001e3e:	68da      	ldr	r2, [r3, #12]
 8001e40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e44:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e46:	6822      	ldr	r2, [r4, #0]
 8001e48:	6953      	ldr	r3, [r2, #20]
 8001e4a:	f043 0301 	orr.w	r3, r3, #1
 8001e4e:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e50:	6822      	ldr	r2, [r4, #0]
 8001e52:	6953      	ldr	r3, [r2, #20]
 8001e54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e58:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 8001e5a:	4628      	mov	r0, r5
 8001e5c:	e000      	b.n	8001e60 <HAL_UART_Receive_DMA+0x8c>
    return HAL_BUSY;
 8001e5e:	2002      	movs	r0, #2
}
 8001e60:	b003      	add	sp, #12
 8001e62:	bd30      	pop	{r4, r5, pc}
      return HAL_ERROR;
 8001e64:	2001      	movs	r0, #1
 8001e66:	e7fb      	b.n	8001e60 <HAL_UART_Receive_DMA+0x8c>
 8001e68:	2001      	movs	r0, #1
 8001e6a:	e7f9      	b.n	8001e60 <HAL_UART_Receive_DMA+0x8c>
    __HAL_LOCK(huart);
 8001e6c:	2002      	movs	r0, #2
 8001e6e:	e7f7      	b.n	8001e60 <HAL_UART_Receive_DMA+0x8c>
 8001e70:	08001ee9 	.word	0x08001ee9
 8001e74:	08001fbb 	.word	0x08001fbb
 8001e78:	08001fc7 	.word	0x08001fc7

08001e7c <HAL_UART_DMAStop>:
{
 8001e7c:	b510      	push	{r4, lr}
 8001e7e:	4604      	mov	r4, r0
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8001e80:	6802      	ldr	r2, [r0, #0]
 8001e82:	6951      	ldr	r1, [r2, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8001e84:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b21      	cmp	r3, #33	; 0x21
 8001e8c:	d008      	beq.n	8001ea0 <HAL_UART_DMAStop+0x24>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001e8e:	6822      	ldr	r2, [r4, #0]
 8001e90:	6951      	ldr	r1, [r2, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001e92:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	2b22      	cmp	r3, #34	; 0x22
 8001e9a:	d015      	beq.n	8001ec8 <HAL_UART_DMAStop+0x4c>
}
 8001e9c:	2000      	movs	r0, #0
 8001e9e:	bd10      	pop	{r4, pc}
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8001ea0:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001ea4:	d0f3      	beq.n	8001e8e <HAL_UART_DMAStop+0x12>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001ea6:	6953      	ldr	r3, [r2, #20]
 8001ea8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001eac:	6153      	str	r3, [r2, #20]
    if (huart->hdmatx != NULL)
 8001eae:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8001eb0:	b108      	cbz	r0, 8001eb6 <HAL_UART_DMAStop+0x3a>
      HAL_DMA_Abort(huart->hdmatx);
 8001eb2:	f7ff f805 	bl	8000ec0 <HAL_DMA_Abort>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8001eb6:	6822      	ldr	r2, [r4, #0]
 8001eb8:	68d3      	ldr	r3, [r2, #12]
 8001eba:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001ebe:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001ec0:	2320      	movs	r3, #32
 8001ec2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 8001ec6:	e7e2      	b.n	8001e8e <HAL_UART_DMAStop+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001ec8:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001ecc:	d0e6      	beq.n	8001e9c <HAL_UART_DMAStop+0x20>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001ece:	6953      	ldr	r3, [r2, #20]
 8001ed0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ed4:	6153      	str	r3, [r2, #20]
    if (huart->hdmarx != NULL)
 8001ed6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001ed8:	b108      	cbz	r0, 8001ede <HAL_UART_DMAStop+0x62>
      HAL_DMA_Abort(huart->hdmarx);
 8001eda:	f7fe fff1 	bl	8000ec0 <HAL_DMA_Abort>
    UART_EndRxTransfer(huart);
 8001ede:	4620      	mov	r0, r4
 8001ee0:	f7ff fe50 	bl	8001b84 <UART_EndRxTransfer>
 8001ee4:	e7da      	b.n	8001e9c <HAL_UART_DMAStop+0x20>

08001ee6 <HAL_UART_TxCpltCallback>:
}
 8001ee6:	4770      	bx	lr

08001ee8 <UART_DMAReceiveCplt>:
{
 8001ee8:	b508      	push	{r3, lr}
 8001eea:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001eec:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f013 0f20 	tst.w	r3, #32
 8001ef6:	d113      	bne.n	8001f20 <UART_DMAReceiveCplt+0x38>
    huart->RxXferCount = 0U;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	85c3      	strh	r3, [r0, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001efc:	6802      	ldr	r2, [r0, #0]
 8001efe:	68d3      	ldr	r3, [r2, #12]
 8001f00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f04:	60d3      	str	r3, [r2, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f06:	6802      	ldr	r2, [r0, #0]
 8001f08:	6953      	ldr	r3, [r2, #20]
 8001f0a:	f023 0301 	bic.w	r3, r3, #1
 8001f0e:	6153      	str	r3, [r2, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f10:	6802      	ldr	r2, [r0, #0]
 8001f12:	6953      	ldr	r3, [r2, #20]
 8001f14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f18:	6153      	str	r3, [r2, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8001f1a:	2320      	movs	r3, #32
 8001f1c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 8001f20:	f7fe fb58 	bl	80005d4 <HAL_UART_RxCpltCallback>
}
 8001f24:	bd08      	pop	{r3, pc}

08001f26 <UART_Receive_IT>:
{
 8001f26:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001f28:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b22      	cmp	r3, #34	; 0x22
 8001f30:	d130      	bne.n	8001f94 <UART_Receive_IT+0x6e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f32:	6883      	ldr	r3, [r0, #8]
 8001f34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f38:	d006      	beq.n	8001f48 <UART_Receive_IT+0x22>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001f3a:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001f3c:	b183      	cbz	r3, 8001f60 <UART_Receive_IT+0x3a>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001f3e:	6803      	ldr	r3, [r0, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f46:	e02b      	b.n	8001fa0 <UART_Receive_IT+0x7a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f48:	6903      	ldr	r3, [r0, #16]
 8001f4a:	bb2b      	cbnz	r3, 8001f98 <UART_Receive_IT+0x72>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8001f4c:	6a82      	ldr	r2, [r0, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001f4e:	6803      	ldr	r3, [r0, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f56:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8001f58:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001f5a:	3302      	adds	r3, #2
 8001f5c:	6283      	str	r3, [r0, #40]	; 0x28
 8001f5e:	e023      	b.n	8001fa8 <UART_Receive_IT+0x82>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001f60:	6903      	ldr	r3, [r0, #16]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1eb      	bne.n	8001f3e <UART_Receive_IT+0x18>
 8001f66:	e018      	b.n	8001f9a <UART_Receive_IT+0x74>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001f68:	6802      	ldr	r2, [r0, #0]
 8001f6a:	68d3      	ldr	r3, [r2, #12]
 8001f6c:	f023 0320 	bic.w	r3, r3, #32
 8001f70:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001f72:	6802      	ldr	r2, [r0, #0]
 8001f74:	68d3      	ldr	r3, [r2, #12]
 8001f76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f7a:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001f7c:	6802      	ldr	r2, [r0, #0]
 8001f7e:	6953      	ldr	r3, [r2, #20]
 8001f80:	f023 0301 	bic.w	r3, r3, #1
 8001f84:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001f86:	2320      	movs	r3, #32
 8001f88:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8001f8c:	f7fe fb22 	bl	80005d4 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8001f90:	2000      	movs	r0, #0
 8001f92:	e010      	b.n	8001fb6 <UART_Receive_IT+0x90>
    return HAL_BUSY;
 8001f94:	2002      	movs	r0, #2
 8001f96:	e00e      	b.n	8001fb6 <UART_Receive_IT+0x90>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001f98:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001f9a:	6803      	ldr	r3, [r0, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8001fa2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8001fa8:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8001faa:	3b01      	subs	r3, #1
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d0d9      	beq.n	8001f68 <UART_Receive_IT+0x42>
    return HAL_OK;
 8001fb4:	2000      	movs	r0, #0
}
 8001fb6:	bd08      	pop	{r3, pc}

08001fb8 <HAL_UART_RxHalfCpltCallback>:
}
 8001fb8:	4770      	bx	lr

08001fba <UART_DMARxHalfCplt>:
{
 8001fba:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 8001fbc:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001fbe:	f7ff fffb 	bl	8001fb8 <HAL_UART_RxHalfCpltCallback>
}
 8001fc2:	bd08      	pop	{r3, pc}

08001fc4 <HAL_UART_ErrorCallback>:
}
 8001fc4:	4770      	bx	lr

08001fc6 <UART_DMAError>:
{
 8001fc6:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001fc8:	6a44      	ldr	r4, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8001fca:	6822      	ldr	r2, [r4, #0]
 8001fcc:	6951      	ldr	r1, [r2, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8001fce:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	2b21      	cmp	r3, #33	; 0x21
 8001fd6:	d00e      	beq.n	8001ff6 <UART_DMAError+0x30>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001fd8:	6823      	ldr	r3, [r4, #0]
 8001fda:	695a      	ldr	r2, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001fdc:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	2b22      	cmp	r3, #34	; 0x22
 8001fe4:	d014      	beq.n	8002010 <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8001fe6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001fe8:	f043 0310 	orr.w	r3, r3, #16
 8001fec:	63e3      	str	r3, [r4, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8001fee:	4620      	mov	r0, r4
 8001ff0:	f7ff ffe8 	bl	8001fc4 <HAL_UART_ErrorCallback>
}
 8001ff4:	bd10      	pop	{r4, pc}
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8001ff6:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001ffa:	d0ed      	beq.n	8001fd8 <UART_DMAError+0x12>
    huart->TxXferCount = 0x00U;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	84e3      	strh	r3, [r4, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002000:	68d3      	ldr	r3, [r2, #12]
 8002002:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002006:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002008:	2320      	movs	r3, #32
 800200a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 800200e:	e7e3      	b.n	8001fd8 <UART_DMAError+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002010:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002014:	d0e7      	beq.n	8001fe6 <UART_DMAError+0x20>
    huart->RxXferCount = 0x00U;
 8002016:	2300      	movs	r3, #0
 8002018:	85e3      	strh	r3, [r4, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800201a:	4620      	mov	r0, r4
 800201c:	f7ff fdb2 	bl	8001b84 <UART_EndRxTransfer>
 8002020:	e7e1      	b.n	8001fe6 <UART_DMAError+0x20>
	...

08002024 <HAL_UART_IRQHandler>:
{
 8002024:	b538      	push	{r3, r4, r5, lr}
 8002026:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002028:	6802      	ldr	r2, [r0, #0]
 800202a:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800202c:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800202e:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 8002030:	f013 0f0f 	tst.w	r3, #15
 8002034:	d109      	bne.n	800204a <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002036:	f013 0f20 	tst.w	r3, #32
 800203a:	d00c      	beq.n	8002056 <HAL_UART_IRQHandler+0x32>
 800203c:	f010 0f20 	tst.w	r0, #32
 8002040:	d009      	beq.n	8002056 <HAL_UART_IRQHandler+0x32>
      UART_Receive_IT(huart);
 8002042:	4620      	mov	r0, r4
 8002044:	f7ff ff6f 	bl	8001f26 <UART_Receive_IT>
      return;
 8002048:	e012      	b.n	8002070 <HAL_UART_IRQHandler+0x4c>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800204a:	f001 0101 	and.w	r1, r1, #1
 800204e:	f400 7590 	and.w	r5, r0, #288	; 0x120
 8002052:	430d      	orrs	r5, r1
 8002054:	d10d      	bne.n	8002072 <HAL_UART_IRQHandler+0x4e>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002056:	f013 0f80 	tst.w	r3, #128	; 0x80
 800205a:	d002      	beq.n	8002062 <HAL_UART_IRQHandler+0x3e>
 800205c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002060:	d170      	bne.n	8002144 <HAL_UART_IRQHandler+0x120>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002062:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002066:	d003      	beq.n	8002070 <HAL_UART_IRQHandler+0x4c>
 8002068:	f010 0f40 	tst.w	r0, #64	; 0x40
 800206c:	f040 8095 	bne.w	800219a <HAL_UART_IRQHandler+0x176>
}
 8002070:	bd38      	pop	{r3, r4, r5, pc}
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002072:	f013 0f01 	tst.w	r3, #1
 8002076:	d006      	beq.n	8002086 <HAL_UART_IRQHandler+0x62>
 8002078:	f410 7f80 	tst.w	r0, #256	; 0x100
 800207c:	d003      	beq.n	8002086 <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800207e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002080:	f042 0201 	orr.w	r2, r2, #1
 8002084:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002086:	f013 0f04 	tst.w	r3, #4
 800208a:	d00b      	beq.n	80020a4 <HAL_UART_IRQHandler+0x80>
 800208c:	b191      	cbz	r1, 80020b4 <HAL_UART_IRQHandler+0x90>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800208e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002090:	f042 0202 	orr.w	r2, r2, #2
 8002094:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002096:	f013 0f02 	tst.w	r3, #2
 800209a:	d107      	bne.n	80020ac <HAL_UART_IRQHandler+0x88>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800209c:	f013 0f08 	tst.w	r3, #8
 80020a0:	d10f      	bne.n	80020c2 <HAL_UART_IRQHandler+0x9e>
 80020a2:	e012      	b.n	80020ca <HAL_UART_IRQHandler+0xa6>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80020a4:	f013 0f02 	tst.w	r3, #2
 80020a8:	d004      	beq.n	80020b4 <HAL_UART_IRQHandler+0x90>
 80020aa:	b119      	cbz	r1, 80020b4 <HAL_UART_IRQHandler+0x90>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80020ac:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80020ae:	f042 0204 	orr.w	r2, r2, #4
 80020b2:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80020b4:	f013 0f08 	tst.w	r3, #8
 80020b8:	d007      	beq.n	80020ca <HAL_UART_IRQHandler+0xa6>
 80020ba:	f000 0220 	and.w	r2, r0, #32
 80020be:	430a      	orrs	r2, r1
 80020c0:	d003      	beq.n	80020ca <HAL_UART_IRQHandler+0xa6>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80020c2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80020c4:	f042 0208 	orr.w	r2, r2, #8
 80020c8:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80020ca:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80020cc:	2a00      	cmp	r2, #0
 80020ce:	d0cf      	beq.n	8002070 <HAL_UART_IRQHandler+0x4c>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80020d0:	f013 0f20 	tst.w	r3, #32
 80020d4:	d002      	beq.n	80020dc <HAL_UART_IRQHandler+0xb8>
 80020d6:	f010 0f20 	tst.w	r0, #32
 80020da:	d10e      	bne.n	80020fa <HAL_UART_IRQHandler+0xd6>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80020dc:	6823      	ldr	r3, [r4, #0]
 80020de:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80020e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80020e2:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80020e6:	f003 0308 	and.w	r3, r3, #8
 80020ea:	4313      	orrs	r3, r2
 80020ec:	d109      	bne.n	8002102 <HAL_UART_IRQHandler+0xde>
        HAL_UART_ErrorCallback(huart);
 80020ee:	4620      	mov	r0, r4
 80020f0:	f7ff ff68 	bl	8001fc4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020f4:	2300      	movs	r3, #0
 80020f6:	63e3      	str	r3, [r4, #60]	; 0x3c
 80020f8:	e7ba      	b.n	8002070 <HAL_UART_IRQHandler+0x4c>
        UART_Receive_IT(huart);
 80020fa:	4620      	mov	r0, r4
 80020fc:	f7ff ff13 	bl	8001f26 <UART_Receive_IT>
 8002100:	e7ec      	b.n	80020dc <HAL_UART_IRQHandler+0xb8>
        UART_EndRxTransfer(huart);
 8002102:	4620      	mov	r0, r4
 8002104:	f7ff fd3e 	bl	8001b84 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002108:	6823      	ldr	r3, [r4, #0]
 800210a:	695a      	ldr	r2, [r3, #20]
 800210c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002110:	d014      	beq.n	800213c <HAL_UART_IRQHandler+0x118>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002112:	695a      	ldr	r2, [r3, #20]
 8002114:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002118:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800211a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800211c:	b153      	cbz	r3, 8002134 <HAL_UART_IRQHandler+0x110>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800211e:	4a24      	ldr	r2, [pc, #144]	; (80021b0 <HAL_UART_IRQHandler+0x18c>)
 8002120:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002122:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002124:	f7fe feee 	bl	8000f04 <HAL_DMA_Abort_IT>
 8002128:	2800      	cmp	r0, #0
 800212a:	d0a1      	beq.n	8002070 <HAL_UART_IRQHandler+0x4c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800212c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800212e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002130:	4798      	blx	r3
 8002132:	e79d      	b.n	8002070 <HAL_UART_IRQHandler+0x4c>
            HAL_UART_ErrorCallback(huart);
 8002134:	4620      	mov	r0, r4
 8002136:	f7ff ff45 	bl	8001fc4 <HAL_UART_ErrorCallback>
 800213a:	e799      	b.n	8002070 <HAL_UART_IRQHandler+0x4c>
          HAL_UART_ErrorCallback(huart);
 800213c:	4620      	mov	r0, r4
 800213e:	f7ff ff41 	bl	8001fc4 <HAL_UART_ErrorCallback>
 8002142:	e795      	b.n	8002070 <HAL_UART_IRQHandler+0x4c>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002144:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b21      	cmp	r3, #33	; 0x21
 800214c:	d190      	bne.n	8002070 <HAL_UART_IRQHandler+0x4c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800214e:	68a3      	ldr	r3, [r4, #8]
 8002150:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002154:	d015      	beq.n	8002182 <HAL_UART_IRQHandler+0x15e>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002156:	6a23      	ldr	r3, [r4, #32]
 8002158:	1c59      	adds	r1, r3, #1
 800215a:	6221      	str	r1, [r4, #32]
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	6053      	str	r3, [r2, #4]
    if (--huart->TxXferCount == 0U)
 8002160:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002162:	3b01      	subs	r3, #1
 8002164:	b29b      	uxth	r3, r3
 8002166:	84e3      	strh	r3, [r4, #38]	; 0x26
 8002168:	2b00      	cmp	r3, #0
 800216a:	d181      	bne.n	8002070 <HAL_UART_IRQHandler+0x4c>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800216c:	6822      	ldr	r2, [r4, #0]
 800216e:	68d3      	ldr	r3, [r2, #12]
 8002170:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002174:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002176:	6822      	ldr	r2, [r4, #0]
 8002178:	68d3      	ldr	r3, [r2, #12]
 800217a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800217e:	60d3      	str	r3, [r2, #12]
 8002180:	e776      	b.n	8002070 <HAL_UART_IRQHandler+0x4c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002182:	6923      	ldr	r3, [r4, #16]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d1e6      	bne.n	8002156 <HAL_UART_IRQHandler+0x132>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002188:	6a23      	ldr	r3, [r4, #32]
 800218a:	881b      	ldrh	r3, [r3, #0]
 800218c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002190:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 8002192:	6a23      	ldr	r3, [r4, #32]
 8002194:	3302      	adds	r3, #2
 8002196:	6223      	str	r3, [r4, #32]
 8002198:	e7e2      	b.n	8002160 <HAL_UART_IRQHandler+0x13c>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800219a:	68d3      	ldr	r3, [r2, #12]
 800219c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80021a0:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 80021a2:	2320      	movs	r3, #32
 80021a4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80021a8:	4620      	mov	r0, r4
 80021aa:	f7ff fe9c 	bl	8001ee6 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 80021ae:	e75f      	b.n	8002070 <HAL_UART_IRQHandler+0x4c>
 80021b0:	080021b5 	.word	0x080021b5

080021b4 <UART_DMAAbortOnError>:
{
 80021b4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021b6:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 80021b8:	2300      	movs	r3, #0
 80021ba:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80021bc:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80021be:	f7ff ff01 	bl	8001fc4 <HAL_UART_ErrorCallback>
}
 80021c2:	bd08      	pop	{r3, pc}

080021c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80021c4:	b084      	sub	sp, #16
 80021c6:	a801      	add	r0, sp, #4
 80021c8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 80021cc:	2000      	movs	r0, #0
 80021ce:	b004      	add	sp, #16
 80021d0:	4770      	bx	lr

080021d2 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80021d2:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80021d6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80021da:	045b      	lsls	r3, r3, #17
 80021dc:	0c5b      	lsrs	r3, r3, #17
 80021de:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 80021e2:	2000      	movs	r0, #0
 80021e4:	4770      	bx	lr

080021e6 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80021e6:	2000      	movs	r0, #0
 80021e8:	4770      	bx	lr

080021ea <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80021ea:	b084      	sub	sp, #16
 80021ec:	b410      	push	{r4}
 80021ee:	4604      	mov	r4, r0
 80021f0:	a802      	add	r0, sp, #8
 80021f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80021f6:	2301      	movs	r3, #1
 80021f8:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80021fc:	2000      	movs	r0, #0
 80021fe:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002202:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002206:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50

  return HAL_OK;
}
 800220a:	bc10      	pop	{r4}
 800220c:	b004      	add	sp, #16
 800220e:	4770      	bx	lr

08002210 <USB_DevDisconnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8002210:	2000      	movs	r0, #0
 8002212:	4770      	bx	lr

08002214 <__libc_init_array>:
 8002214:	b570      	push	{r4, r5, r6, lr}
 8002216:	2600      	movs	r6, #0
 8002218:	4d0c      	ldr	r5, [pc, #48]	; (800224c <__libc_init_array+0x38>)
 800221a:	4c0d      	ldr	r4, [pc, #52]	; (8002250 <__libc_init_array+0x3c>)
 800221c:	1b64      	subs	r4, r4, r5
 800221e:	10a4      	asrs	r4, r4, #2
 8002220:	42a6      	cmp	r6, r4
 8002222:	d109      	bne.n	8002238 <__libc_init_array+0x24>
 8002224:	f000 fc94 	bl	8002b50 <_init>
 8002228:	2600      	movs	r6, #0
 800222a:	4d0a      	ldr	r5, [pc, #40]	; (8002254 <__libc_init_array+0x40>)
 800222c:	4c0a      	ldr	r4, [pc, #40]	; (8002258 <__libc_init_array+0x44>)
 800222e:	1b64      	subs	r4, r4, r5
 8002230:	10a4      	asrs	r4, r4, #2
 8002232:	42a6      	cmp	r6, r4
 8002234:	d105      	bne.n	8002242 <__libc_init_array+0x2e>
 8002236:	bd70      	pop	{r4, r5, r6, pc}
 8002238:	f855 3b04 	ldr.w	r3, [r5], #4
 800223c:	4798      	blx	r3
 800223e:	3601      	adds	r6, #1
 8002240:	e7ee      	b.n	8002220 <__libc_init_array+0xc>
 8002242:	f855 3b04 	ldr.w	r3, [r5], #4
 8002246:	4798      	blx	r3
 8002248:	3601      	adds	r6, #1
 800224a:	e7f2      	b.n	8002232 <__libc_init_array+0x1e>
 800224c:	08002bfc 	.word	0x08002bfc
 8002250:	08002bfc 	.word	0x08002bfc
 8002254:	08002bfc 	.word	0x08002bfc
 8002258:	08002c00 	.word	0x08002c00

0800225c <malloc>:
 800225c:	4b02      	ldr	r3, [pc, #8]	; (8002268 <malloc+0xc>)
 800225e:	4601      	mov	r1, r0
 8002260:	6818      	ldr	r0, [r3, #0]
 8002262:	f000 b85f 	b.w	8002324 <_malloc_r>
 8002266:	bf00      	nop
 8002268:	2000000c 	.word	0x2000000c

0800226c <free>:
 800226c:	4b02      	ldr	r3, [pc, #8]	; (8002278 <free+0xc>)
 800226e:	4601      	mov	r1, r0
 8002270:	6818      	ldr	r0, [r3, #0]
 8002272:	f000 b80b 	b.w	800228c <_free_r>
 8002276:	bf00      	nop
 8002278:	2000000c 	.word	0x2000000c

0800227c <memset>:
 800227c:	4603      	mov	r3, r0
 800227e:	4402      	add	r2, r0
 8002280:	4293      	cmp	r3, r2
 8002282:	d100      	bne.n	8002286 <memset+0xa>
 8002284:	4770      	bx	lr
 8002286:	f803 1b01 	strb.w	r1, [r3], #1
 800228a:	e7f9      	b.n	8002280 <memset+0x4>

0800228c <_free_r>:
 800228c:	b538      	push	{r3, r4, r5, lr}
 800228e:	4605      	mov	r5, r0
 8002290:	2900      	cmp	r1, #0
 8002292:	d043      	beq.n	800231c <_free_r+0x90>
 8002294:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002298:	1f0c      	subs	r4, r1, #4
 800229a:	2b00      	cmp	r3, #0
 800229c:	bfb8      	it	lt
 800229e:	18e4      	addlt	r4, r4, r3
 80022a0:	f000 f8e4 	bl	800246c <__malloc_lock>
 80022a4:	4a1e      	ldr	r2, [pc, #120]	; (8002320 <_free_r+0x94>)
 80022a6:	6813      	ldr	r3, [r2, #0]
 80022a8:	4610      	mov	r0, r2
 80022aa:	b933      	cbnz	r3, 80022ba <_free_r+0x2e>
 80022ac:	6063      	str	r3, [r4, #4]
 80022ae:	6014      	str	r4, [r2, #0]
 80022b0:	4628      	mov	r0, r5
 80022b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80022b6:	f000 b8df 	b.w	8002478 <__malloc_unlock>
 80022ba:	42a3      	cmp	r3, r4
 80022bc:	d90a      	bls.n	80022d4 <_free_r+0x48>
 80022be:	6821      	ldr	r1, [r4, #0]
 80022c0:	1862      	adds	r2, r4, r1
 80022c2:	4293      	cmp	r3, r2
 80022c4:	bf01      	itttt	eq
 80022c6:	681a      	ldreq	r2, [r3, #0]
 80022c8:	685b      	ldreq	r3, [r3, #4]
 80022ca:	1852      	addeq	r2, r2, r1
 80022cc:	6022      	streq	r2, [r4, #0]
 80022ce:	6063      	str	r3, [r4, #4]
 80022d0:	6004      	str	r4, [r0, #0]
 80022d2:	e7ed      	b.n	80022b0 <_free_r+0x24>
 80022d4:	461a      	mov	r2, r3
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	b10b      	cbz	r3, 80022de <_free_r+0x52>
 80022da:	42a3      	cmp	r3, r4
 80022dc:	d9fa      	bls.n	80022d4 <_free_r+0x48>
 80022de:	6811      	ldr	r1, [r2, #0]
 80022e0:	1850      	adds	r0, r2, r1
 80022e2:	42a0      	cmp	r0, r4
 80022e4:	d10b      	bne.n	80022fe <_free_r+0x72>
 80022e6:	6820      	ldr	r0, [r4, #0]
 80022e8:	4401      	add	r1, r0
 80022ea:	1850      	adds	r0, r2, r1
 80022ec:	4283      	cmp	r3, r0
 80022ee:	6011      	str	r1, [r2, #0]
 80022f0:	d1de      	bne.n	80022b0 <_free_r+0x24>
 80022f2:	6818      	ldr	r0, [r3, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	4401      	add	r1, r0
 80022f8:	6011      	str	r1, [r2, #0]
 80022fa:	6053      	str	r3, [r2, #4]
 80022fc:	e7d8      	b.n	80022b0 <_free_r+0x24>
 80022fe:	d902      	bls.n	8002306 <_free_r+0x7a>
 8002300:	230c      	movs	r3, #12
 8002302:	602b      	str	r3, [r5, #0]
 8002304:	e7d4      	b.n	80022b0 <_free_r+0x24>
 8002306:	6820      	ldr	r0, [r4, #0]
 8002308:	1821      	adds	r1, r4, r0
 800230a:	428b      	cmp	r3, r1
 800230c:	bf01      	itttt	eq
 800230e:	6819      	ldreq	r1, [r3, #0]
 8002310:	685b      	ldreq	r3, [r3, #4]
 8002312:	1809      	addeq	r1, r1, r0
 8002314:	6021      	streq	r1, [r4, #0]
 8002316:	6063      	str	r3, [r4, #4]
 8002318:	6054      	str	r4, [r2, #4]
 800231a:	e7c9      	b.n	80022b0 <_free_r+0x24>
 800231c:	bd38      	pop	{r3, r4, r5, pc}
 800231e:	bf00      	nop
 8002320:	20000150 	.word	0x20000150

08002324 <_malloc_r>:
 8002324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002326:	1ccd      	adds	r5, r1, #3
 8002328:	f025 0503 	bic.w	r5, r5, #3
 800232c:	3508      	adds	r5, #8
 800232e:	2d0c      	cmp	r5, #12
 8002330:	bf38      	it	cc
 8002332:	250c      	movcc	r5, #12
 8002334:	2d00      	cmp	r5, #0
 8002336:	4606      	mov	r6, r0
 8002338:	db01      	blt.n	800233e <_malloc_r+0x1a>
 800233a:	42a9      	cmp	r1, r5
 800233c:	d903      	bls.n	8002346 <_malloc_r+0x22>
 800233e:	230c      	movs	r3, #12
 8002340:	6033      	str	r3, [r6, #0]
 8002342:	2000      	movs	r0, #0
 8002344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002346:	f000 f891 	bl	800246c <__malloc_lock>
 800234a:	4921      	ldr	r1, [pc, #132]	; (80023d0 <_malloc_r+0xac>)
 800234c:	680a      	ldr	r2, [r1, #0]
 800234e:	4614      	mov	r4, r2
 8002350:	b99c      	cbnz	r4, 800237a <_malloc_r+0x56>
 8002352:	4f20      	ldr	r7, [pc, #128]	; (80023d4 <_malloc_r+0xb0>)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	b923      	cbnz	r3, 8002362 <_malloc_r+0x3e>
 8002358:	4621      	mov	r1, r4
 800235a:	4630      	mov	r0, r6
 800235c:	f000 f83c 	bl	80023d8 <_sbrk_r>
 8002360:	6038      	str	r0, [r7, #0]
 8002362:	4629      	mov	r1, r5
 8002364:	4630      	mov	r0, r6
 8002366:	f000 f837 	bl	80023d8 <_sbrk_r>
 800236a:	1c43      	adds	r3, r0, #1
 800236c:	d123      	bne.n	80023b6 <_malloc_r+0x92>
 800236e:	230c      	movs	r3, #12
 8002370:	4630      	mov	r0, r6
 8002372:	6033      	str	r3, [r6, #0]
 8002374:	f000 f880 	bl	8002478 <__malloc_unlock>
 8002378:	e7e3      	b.n	8002342 <_malloc_r+0x1e>
 800237a:	6823      	ldr	r3, [r4, #0]
 800237c:	1b5b      	subs	r3, r3, r5
 800237e:	d417      	bmi.n	80023b0 <_malloc_r+0x8c>
 8002380:	2b0b      	cmp	r3, #11
 8002382:	d903      	bls.n	800238c <_malloc_r+0x68>
 8002384:	6023      	str	r3, [r4, #0]
 8002386:	441c      	add	r4, r3
 8002388:	6025      	str	r5, [r4, #0]
 800238a:	e004      	b.n	8002396 <_malloc_r+0x72>
 800238c:	6863      	ldr	r3, [r4, #4]
 800238e:	42a2      	cmp	r2, r4
 8002390:	bf0c      	ite	eq
 8002392:	600b      	streq	r3, [r1, #0]
 8002394:	6053      	strne	r3, [r2, #4]
 8002396:	4630      	mov	r0, r6
 8002398:	f000 f86e 	bl	8002478 <__malloc_unlock>
 800239c:	f104 000b 	add.w	r0, r4, #11
 80023a0:	1d23      	adds	r3, r4, #4
 80023a2:	f020 0007 	bic.w	r0, r0, #7
 80023a6:	1ac2      	subs	r2, r0, r3
 80023a8:	d0cc      	beq.n	8002344 <_malloc_r+0x20>
 80023aa:	1a1b      	subs	r3, r3, r0
 80023ac:	50a3      	str	r3, [r4, r2]
 80023ae:	e7c9      	b.n	8002344 <_malloc_r+0x20>
 80023b0:	4622      	mov	r2, r4
 80023b2:	6864      	ldr	r4, [r4, #4]
 80023b4:	e7cc      	b.n	8002350 <_malloc_r+0x2c>
 80023b6:	1cc4      	adds	r4, r0, #3
 80023b8:	f024 0403 	bic.w	r4, r4, #3
 80023bc:	42a0      	cmp	r0, r4
 80023be:	d0e3      	beq.n	8002388 <_malloc_r+0x64>
 80023c0:	1a21      	subs	r1, r4, r0
 80023c2:	4630      	mov	r0, r6
 80023c4:	f000 f808 	bl	80023d8 <_sbrk_r>
 80023c8:	3001      	adds	r0, #1
 80023ca:	d1dd      	bne.n	8002388 <_malloc_r+0x64>
 80023cc:	e7cf      	b.n	800236e <_malloc_r+0x4a>
 80023ce:	bf00      	nop
 80023d0:	20000150 	.word	0x20000150
 80023d4:	20000154 	.word	0x20000154

080023d8 <_sbrk_r>:
 80023d8:	b538      	push	{r3, r4, r5, lr}
 80023da:	2300      	movs	r3, #0
 80023dc:	4d05      	ldr	r5, [pc, #20]	; (80023f4 <_sbrk_r+0x1c>)
 80023de:	4604      	mov	r4, r0
 80023e0:	4608      	mov	r0, r1
 80023e2:	602b      	str	r3, [r5, #0]
 80023e4:	f000 fba6 	bl	8002b34 <_sbrk>
 80023e8:	1c43      	adds	r3, r0, #1
 80023ea:	d102      	bne.n	80023f2 <_sbrk_r+0x1a>
 80023ec:	682b      	ldr	r3, [r5, #0]
 80023ee:	b103      	cbz	r3, 80023f2 <_sbrk_r+0x1a>
 80023f0:	6023      	str	r3, [r4, #0]
 80023f2:	bd38      	pop	{r3, r4, r5, pc}
 80023f4:	20000554 	.word	0x20000554

080023f8 <siprintf>:
 80023f8:	b40e      	push	{r1, r2, r3}
 80023fa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80023fe:	b500      	push	{lr}
 8002400:	b09c      	sub	sp, #112	; 0x70
 8002402:	ab1d      	add	r3, sp, #116	; 0x74
 8002404:	9002      	str	r0, [sp, #8]
 8002406:	9006      	str	r0, [sp, #24]
 8002408:	9107      	str	r1, [sp, #28]
 800240a:	9104      	str	r1, [sp, #16]
 800240c:	4808      	ldr	r0, [pc, #32]	; (8002430 <siprintf+0x38>)
 800240e:	4909      	ldr	r1, [pc, #36]	; (8002434 <siprintf+0x3c>)
 8002410:	f853 2b04 	ldr.w	r2, [r3], #4
 8002414:	9105      	str	r1, [sp, #20]
 8002416:	6800      	ldr	r0, [r0, #0]
 8002418:	a902      	add	r1, sp, #8
 800241a:	9301      	str	r3, [sp, #4]
 800241c:	f000 f88e 	bl	800253c <_svfiprintf_r>
 8002420:	2200      	movs	r2, #0
 8002422:	9b02      	ldr	r3, [sp, #8]
 8002424:	701a      	strb	r2, [r3, #0]
 8002426:	b01c      	add	sp, #112	; 0x70
 8002428:	f85d eb04 	ldr.w	lr, [sp], #4
 800242c:	b003      	add	sp, #12
 800242e:	4770      	bx	lr
 8002430:	2000000c 	.word	0x2000000c
 8002434:	ffff0208 	.word	0xffff0208

08002438 <strcpy>:
 8002438:	4603      	mov	r3, r0
 800243a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800243e:	f803 2b01 	strb.w	r2, [r3], #1
 8002442:	2a00      	cmp	r2, #0
 8002444:	d1f9      	bne.n	800243a <strcpy+0x2>
 8002446:	4770      	bx	lr

08002448 <strncmp>:
 8002448:	b510      	push	{r4, lr}
 800244a:	b16a      	cbz	r2, 8002468 <strncmp+0x20>
 800244c:	3901      	subs	r1, #1
 800244e:	1884      	adds	r4, r0, r2
 8002450:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002454:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8002458:	4293      	cmp	r3, r2
 800245a:	d103      	bne.n	8002464 <strncmp+0x1c>
 800245c:	42a0      	cmp	r0, r4
 800245e:	d001      	beq.n	8002464 <strncmp+0x1c>
 8002460:	2b00      	cmp	r3, #0
 8002462:	d1f5      	bne.n	8002450 <strncmp+0x8>
 8002464:	1a98      	subs	r0, r3, r2
 8002466:	bd10      	pop	{r4, pc}
 8002468:	4610      	mov	r0, r2
 800246a:	e7fc      	b.n	8002466 <strncmp+0x1e>

0800246c <__malloc_lock>:
 800246c:	4801      	ldr	r0, [pc, #4]	; (8002474 <__malloc_lock+0x8>)
 800246e:	f000 bafb 	b.w	8002a68 <__retarget_lock_acquire_recursive>
 8002472:	bf00      	nop
 8002474:	2000055c 	.word	0x2000055c

08002478 <__malloc_unlock>:
 8002478:	4801      	ldr	r0, [pc, #4]	; (8002480 <__malloc_unlock+0x8>)
 800247a:	f000 baf6 	b.w	8002a6a <__retarget_lock_release_recursive>
 800247e:	bf00      	nop
 8002480:	2000055c 	.word	0x2000055c

08002484 <__ssputs_r>:
 8002484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002488:	688e      	ldr	r6, [r1, #8]
 800248a:	4682      	mov	sl, r0
 800248c:	429e      	cmp	r6, r3
 800248e:	460c      	mov	r4, r1
 8002490:	4690      	mov	r8, r2
 8002492:	461f      	mov	r7, r3
 8002494:	d838      	bhi.n	8002508 <__ssputs_r+0x84>
 8002496:	898a      	ldrh	r2, [r1, #12]
 8002498:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800249c:	d032      	beq.n	8002504 <__ssputs_r+0x80>
 800249e:	6825      	ldr	r5, [r4, #0]
 80024a0:	6909      	ldr	r1, [r1, #16]
 80024a2:	3301      	adds	r3, #1
 80024a4:	eba5 0901 	sub.w	r9, r5, r1
 80024a8:	6965      	ldr	r5, [r4, #20]
 80024aa:	444b      	add	r3, r9
 80024ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80024b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80024b4:	106d      	asrs	r5, r5, #1
 80024b6:	429d      	cmp	r5, r3
 80024b8:	bf38      	it	cc
 80024ba:	461d      	movcc	r5, r3
 80024bc:	0553      	lsls	r3, r2, #21
 80024be:	d531      	bpl.n	8002524 <__ssputs_r+0xa0>
 80024c0:	4629      	mov	r1, r5
 80024c2:	f7ff ff2f 	bl	8002324 <_malloc_r>
 80024c6:	4606      	mov	r6, r0
 80024c8:	b950      	cbnz	r0, 80024e0 <__ssputs_r+0x5c>
 80024ca:	230c      	movs	r3, #12
 80024cc:	f04f 30ff 	mov.w	r0, #4294967295
 80024d0:	f8ca 3000 	str.w	r3, [sl]
 80024d4:	89a3      	ldrh	r3, [r4, #12]
 80024d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024da:	81a3      	strh	r3, [r4, #12]
 80024dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024e0:	464a      	mov	r2, r9
 80024e2:	6921      	ldr	r1, [r4, #16]
 80024e4:	f000 fad0 	bl	8002a88 <memcpy>
 80024e8:	89a3      	ldrh	r3, [r4, #12]
 80024ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80024ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024f2:	81a3      	strh	r3, [r4, #12]
 80024f4:	6126      	str	r6, [r4, #16]
 80024f6:	444e      	add	r6, r9
 80024f8:	6026      	str	r6, [r4, #0]
 80024fa:	463e      	mov	r6, r7
 80024fc:	6165      	str	r5, [r4, #20]
 80024fe:	eba5 0509 	sub.w	r5, r5, r9
 8002502:	60a5      	str	r5, [r4, #8]
 8002504:	42be      	cmp	r6, r7
 8002506:	d900      	bls.n	800250a <__ssputs_r+0x86>
 8002508:	463e      	mov	r6, r7
 800250a:	4632      	mov	r2, r6
 800250c:	4641      	mov	r1, r8
 800250e:	6820      	ldr	r0, [r4, #0]
 8002510:	f000 fac8 	bl	8002aa4 <memmove>
 8002514:	68a3      	ldr	r3, [r4, #8]
 8002516:	6822      	ldr	r2, [r4, #0]
 8002518:	1b9b      	subs	r3, r3, r6
 800251a:	4432      	add	r2, r6
 800251c:	2000      	movs	r0, #0
 800251e:	60a3      	str	r3, [r4, #8]
 8002520:	6022      	str	r2, [r4, #0]
 8002522:	e7db      	b.n	80024dc <__ssputs_r+0x58>
 8002524:	462a      	mov	r2, r5
 8002526:	f000 fad7 	bl	8002ad8 <_realloc_r>
 800252a:	4606      	mov	r6, r0
 800252c:	2800      	cmp	r0, #0
 800252e:	d1e1      	bne.n	80024f4 <__ssputs_r+0x70>
 8002530:	4650      	mov	r0, sl
 8002532:	6921      	ldr	r1, [r4, #16]
 8002534:	f7ff feaa 	bl	800228c <_free_r>
 8002538:	e7c7      	b.n	80024ca <__ssputs_r+0x46>
	...

0800253c <_svfiprintf_r>:
 800253c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002540:	4698      	mov	r8, r3
 8002542:	898b      	ldrh	r3, [r1, #12]
 8002544:	4607      	mov	r7, r0
 8002546:	061b      	lsls	r3, r3, #24
 8002548:	460d      	mov	r5, r1
 800254a:	4614      	mov	r4, r2
 800254c:	b09d      	sub	sp, #116	; 0x74
 800254e:	d50e      	bpl.n	800256e <_svfiprintf_r+0x32>
 8002550:	690b      	ldr	r3, [r1, #16]
 8002552:	b963      	cbnz	r3, 800256e <_svfiprintf_r+0x32>
 8002554:	2140      	movs	r1, #64	; 0x40
 8002556:	f7ff fee5 	bl	8002324 <_malloc_r>
 800255a:	6028      	str	r0, [r5, #0]
 800255c:	6128      	str	r0, [r5, #16]
 800255e:	b920      	cbnz	r0, 800256a <_svfiprintf_r+0x2e>
 8002560:	230c      	movs	r3, #12
 8002562:	603b      	str	r3, [r7, #0]
 8002564:	f04f 30ff 	mov.w	r0, #4294967295
 8002568:	e0d1      	b.n	800270e <_svfiprintf_r+0x1d2>
 800256a:	2340      	movs	r3, #64	; 0x40
 800256c:	616b      	str	r3, [r5, #20]
 800256e:	2300      	movs	r3, #0
 8002570:	9309      	str	r3, [sp, #36]	; 0x24
 8002572:	2320      	movs	r3, #32
 8002574:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002578:	2330      	movs	r3, #48	; 0x30
 800257a:	f04f 0901 	mov.w	r9, #1
 800257e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002582:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002728 <_svfiprintf_r+0x1ec>
 8002586:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800258a:	4623      	mov	r3, r4
 800258c:	469a      	mov	sl, r3
 800258e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002592:	b10a      	cbz	r2, 8002598 <_svfiprintf_r+0x5c>
 8002594:	2a25      	cmp	r2, #37	; 0x25
 8002596:	d1f9      	bne.n	800258c <_svfiprintf_r+0x50>
 8002598:	ebba 0b04 	subs.w	fp, sl, r4
 800259c:	d00b      	beq.n	80025b6 <_svfiprintf_r+0x7a>
 800259e:	465b      	mov	r3, fp
 80025a0:	4622      	mov	r2, r4
 80025a2:	4629      	mov	r1, r5
 80025a4:	4638      	mov	r0, r7
 80025a6:	f7ff ff6d 	bl	8002484 <__ssputs_r>
 80025aa:	3001      	adds	r0, #1
 80025ac:	f000 80aa 	beq.w	8002704 <_svfiprintf_r+0x1c8>
 80025b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80025b2:	445a      	add	r2, fp
 80025b4:	9209      	str	r2, [sp, #36]	; 0x24
 80025b6:	f89a 3000 	ldrb.w	r3, [sl]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f000 80a2 	beq.w	8002704 <_svfiprintf_r+0x1c8>
 80025c0:	2300      	movs	r3, #0
 80025c2:	f04f 32ff 	mov.w	r2, #4294967295
 80025c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80025ca:	f10a 0a01 	add.w	sl, sl, #1
 80025ce:	9304      	str	r3, [sp, #16]
 80025d0:	9307      	str	r3, [sp, #28]
 80025d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80025d6:	931a      	str	r3, [sp, #104]	; 0x68
 80025d8:	4654      	mov	r4, sl
 80025da:	2205      	movs	r2, #5
 80025dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80025e0:	4851      	ldr	r0, [pc, #324]	; (8002728 <_svfiprintf_r+0x1ec>)
 80025e2:	f000 fa43 	bl	8002a6c <memchr>
 80025e6:	9a04      	ldr	r2, [sp, #16]
 80025e8:	b9d8      	cbnz	r0, 8002622 <_svfiprintf_r+0xe6>
 80025ea:	06d0      	lsls	r0, r2, #27
 80025ec:	bf44      	itt	mi
 80025ee:	2320      	movmi	r3, #32
 80025f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80025f4:	0711      	lsls	r1, r2, #28
 80025f6:	bf44      	itt	mi
 80025f8:	232b      	movmi	r3, #43	; 0x2b
 80025fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80025fe:	f89a 3000 	ldrb.w	r3, [sl]
 8002602:	2b2a      	cmp	r3, #42	; 0x2a
 8002604:	d015      	beq.n	8002632 <_svfiprintf_r+0xf6>
 8002606:	4654      	mov	r4, sl
 8002608:	2000      	movs	r0, #0
 800260a:	f04f 0c0a 	mov.w	ip, #10
 800260e:	9a07      	ldr	r2, [sp, #28]
 8002610:	4621      	mov	r1, r4
 8002612:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002616:	3b30      	subs	r3, #48	; 0x30
 8002618:	2b09      	cmp	r3, #9
 800261a:	d94e      	bls.n	80026ba <_svfiprintf_r+0x17e>
 800261c:	b1b0      	cbz	r0, 800264c <_svfiprintf_r+0x110>
 800261e:	9207      	str	r2, [sp, #28]
 8002620:	e014      	b.n	800264c <_svfiprintf_r+0x110>
 8002622:	eba0 0308 	sub.w	r3, r0, r8
 8002626:	fa09 f303 	lsl.w	r3, r9, r3
 800262a:	4313      	orrs	r3, r2
 800262c:	46a2      	mov	sl, r4
 800262e:	9304      	str	r3, [sp, #16]
 8002630:	e7d2      	b.n	80025d8 <_svfiprintf_r+0x9c>
 8002632:	9b03      	ldr	r3, [sp, #12]
 8002634:	1d19      	adds	r1, r3, #4
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	9103      	str	r1, [sp, #12]
 800263a:	2b00      	cmp	r3, #0
 800263c:	bfbb      	ittet	lt
 800263e:	425b      	neglt	r3, r3
 8002640:	f042 0202 	orrlt.w	r2, r2, #2
 8002644:	9307      	strge	r3, [sp, #28]
 8002646:	9307      	strlt	r3, [sp, #28]
 8002648:	bfb8      	it	lt
 800264a:	9204      	strlt	r2, [sp, #16]
 800264c:	7823      	ldrb	r3, [r4, #0]
 800264e:	2b2e      	cmp	r3, #46	; 0x2e
 8002650:	d10c      	bne.n	800266c <_svfiprintf_r+0x130>
 8002652:	7863      	ldrb	r3, [r4, #1]
 8002654:	2b2a      	cmp	r3, #42	; 0x2a
 8002656:	d135      	bne.n	80026c4 <_svfiprintf_r+0x188>
 8002658:	9b03      	ldr	r3, [sp, #12]
 800265a:	3402      	adds	r4, #2
 800265c:	1d1a      	adds	r2, r3, #4
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	9203      	str	r2, [sp, #12]
 8002662:	2b00      	cmp	r3, #0
 8002664:	bfb8      	it	lt
 8002666:	f04f 33ff 	movlt.w	r3, #4294967295
 800266a:	9305      	str	r3, [sp, #20]
 800266c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002738 <_svfiprintf_r+0x1fc>
 8002670:	2203      	movs	r2, #3
 8002672:	4650      	mov	r0, sl
 8002674:	7821      	ldrb	r1, [r4, #0]
 8002676:	f000 f9f9 	bl	8002a6c <memchr>
 800267a:	b140      	cbz	r0, 800268e <_svfiprintf_r+0x152>
 800267c:	2340      	movs	r3, #64	; 0x40
 800267e:	eba0 000a 	sub.w	r0, r0, sl
 8002682:	fa03 f000 	lsl.w	r0, r3, r0
 8002686:	9b04      	ldr	r3, [sp, #16]
 8002688:	3401      	adds	r4, #1
 800268a:	4303      	orrs	r3, r0
 800268c:	9304      	str	r3, [sp, #16]
 800268e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002692:	2206      	movs	r2, #6
 8002694:	4825      	ldr	r0, [pc, #148]	; (800272c <_svfiprintf_r+0x1f0>)
 8002696:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800269a:	f000 f9e7 	bl	8002a6c <memchr>
 800269e:	2800      	cmp	r0, #0
 80026a0:	d038      	beq.n	8002714 <_svfiprintf_r+0x1d8>
 80026a2:	4b23      	ldr	r3, [pc, #140]	; (8002730 <_svfiprintf_r+0x1f4>)
 80026a4:	bb1b      	cbnz	r3, 80026ee <_svfiprintf_r+0x1b2>
 80026a6:	9b03      	ldr	r3, [sp, #12]
 80026a8:	3307      	adds	r3, #7
 80026aa:	f023 0307 	bic.w	r3, r3, #7
 80026ae:	3308      	adds	r3, #8
 80026b0:	9303      	str	r3, [sp, #12]
 80026b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80026b4:	4433      	add	r3, r6
 80026b6:	9309      	str	r3, [sp, #36]	; 0x24
 80026b8:	e767      	b.n	800258a <_svfiprintf_r+0x4e>
 80026ba:	460c      	mov	r4, r1
 80026bc:	2001      	movs	r0, #1
 80026be:	fb0c 3202 	mla	r2, ip, r2, r3
 80026c2:	e7a5      	b.n	8002610 <_svfiprintf_r+0xd4>
 80026c4:	2300      	movs	r3, #0
 80026c6:	f04f 0c0a 	mov.w	ip, #10
 80026ca:	4619      	mov	r1, r3
 80026cc:	3401      	adds	r4, #1
 80026ce:	9305      	str	r3, [sp, #20]
 80026d0:	4620      	mov	r0, r4
 80026d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80026d6:	3a30      	subs	r2, #48	; 0x30
 80026d8:	2a09      	cmp	r2, #9
 80026da:	d903      	bls.n	80026e4 <_svfiprintf_r+0x1a8>
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d0c5      	beq.n	800266c <_svfiprintf_r+0x130>
 80026e0:	9105      	str	r1, [sp, #20]
 80026e2:	e7c3      	b.n	800266c <_svfiprintf_r+0x130>
 80026e4:	4604      	mov	r4, r0
 80026e6:	2301      	movs	r3, #1
 80026e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80026ec:	e7f0      	b.n	80026d0 <_svfiprintf_r+0x194>
 80026ee:	ab03      	add	r3, sp, #12
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	462a      	mov	r2, r5
 80026f4:	4638      	mov	r0, r7
 80026f6:	4b0f      	ldr	r3, [pc, #60]	; (8002734 <_svfiprintf_r+0x1f8>)
 80026f8:	a904      	add	r1, sp, #16
 80026fa:	f3af 8000 	nop.w
 80026fe:	1c42      	adds	r2, r0, #1
 8002700:	4606      	mov	r6, r0
 8002702:	d1d6      	bne.n	80026b2 <_svfiprintf_r+0x176>
 8002704:	89ab      	ldrh	r3, [r5, #12]
 8002706:	065b      	lsls	r3, r3, #25
 8002708:	f53f af2c 	bmi.w	8002564 <_svfiprintf_r+0x28>
 800270c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800270e:	b01d      	add	sp, #116	; 0x74
 8002710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002714:	ab03      	add	r3, sp, #12
 8002716:	9300      	str	r3, [sp, #0]
 8002718:	462a      	mov	r2, r5
 800271a:	4638      	mov	r0, r7
 800271c:	4b05      	ldr	r3, [pc, #20]	; (8002734 <_svfiprintf_r+0x1f8>)
 800271e:	a904      	add	r1, sp, #16
 8002720:	f000 f87c 	bl	800281c <_printf_i>
 8002724:	e7eb      	b.n	80026fe <_svfiprintf_r+0x1c2>
 8002726:	bf00      	nop
 8002728:	08002bc9 	.word	0x08002bc9
 800272c:	08002bd3 	.word	0x08002bd3
 8002730:	00000000 	.word	0x00000000
 8002734:	08002485 	.word	0x08002485
 8002738:	08002bcf 	.word	0x08002bcf

0800273c <_printf_common>:
 800273c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002740:	4616      	mov	r6, r2
 8002742:	4699      	mov	r9, r3
 8002744:	688a      	ldr	r2, [r1, #8]
 8002746:	690b      	ldr	r3, [r1, #16]
 8002748:	4607      	mov	r7, r0
 800274a:	4293      	cmp	r3, r2
 800274c:	bfb8      	it	lt
 800274e:	4613      	movlt	r3, r2
 8002750:	6033      	str	r3, [r6, #0]
 8002752:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002756:	460c      	mov	r4, r1
 8002758:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800275c:	b10a      	cbz	r2, 8002762 <_printf_common+0x26>
 800275e:	3301      	adds	r3, #1
 8002760:	6033      	str	r3, [r6, #0]
 8002762:	6823      	ldr	r3, [r4, #0]
 8002764:	0699      	lsls	r1, r3, #26
 8002766:	bf42      	ittt	mi
 8002768:	6833      	ldrmi	r3, [r6, #0]
 800276a:	3302      	addmi	r3, #2
 800276c:	6033      	strmi	r3, [r6, #0]
 800276e:	6825      	ldr	r5, [r4, #0]
 8002770:	f015 0506 	ands.w	r5, r5, #6
 8002774:	d106      	bne.n	8002784 <_printf_common+0x48>
 8002776:	f104 0a19 	add.w	sl, r4, #25
 800277a:	68e3      	ldr	r3, [r4, #12]
 800277c:	6832      	ldr	r2, [r6, #0]
 800277e:	1a9b      	subs	r3, r3, r2
 8002780:	42ab      	cmp	r3, r5
 8002782:	dc28      	bgt.n	80027d6 <_printf_common+0x9a>
 8002784:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002788:	1e13      	subs	r3, r2, #0
 800278a:	6822      	ldr	r2, [r4, #0]
 800278c:	bf18      	it	ne
 800278e:	2301      	movne	r3, #1
 8002790:	0692      	lsls	r2, r2, #26
 8002792:	d42d      	bmi.n	80027f0 <_printf_common+0xb4>
 8002794:	4649      	mov	r1, r9
 8002796:	4638      	mov	r0, r7
 8002798:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800279c:	47c0      	blx	r8
 800279e:	3001      	adds	r0, #1
 80027a0:	d020      	beq.n	80027e4 <_printf_common+0xa8>
 80027a2:	6823      	ldr	r3, [r4, #0]
 80027a4:	68e5      	ldr	r5, [r4, #12]
 80027a6:	f003 0306 	and.w	r3, r3, #6
 80027aa:	2b04      	cmp	r3, #4
 80027ac:	bf18      	it	ne
 80027ae:	2500      	movne	r5, #0
 80027b0:	6832      	ldr	r2, [r6, #0]
 80027b2:	f04f 0600 	mov.w	r6, #0
 80027b6:	68a3      	ldr	r3, [r4, #8]
 80027b8:	bf08      	it	eq
 80027ba:	1aad      	subeq	r5, r5, r2
 80027bc:	6922      	ldr	r2, [r4, #16]
 80027be:	bf08      	it	eq
 80027c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80027c4:	4293      	cmp	r3, r2
 80027c6:	bfc4      	itt	gt
 80027c8:	1a9b      	subgt	r3, r3, r2
 80027ca:	18ed      	addgt	r5, r5, r3
 80027cc:	341a      	adds	r4, #26
 80027ce:	42b5      	cmp	r5, r6
 80027d0:	d11a      	bne.n	8002808 <_printf_common+0xcc>
 80027d2:	2000      	movs	r0, #0
 80027d4:	e008      	b.n	80027e8 <_printf_common+0xac>
 80027d6:	2301      	movs	r3, #1
 80027d8:	4652      	mov	r2, sl
 80027da:	4649      	mov	r1, r9
 80027dc:	4638      	mov	r0, r7
 80027de:	47c0      	blx	r8
 80027e0:	3001      	adds	r0, #1
 80027e2:	d103      	bne.n	80027ec <_printf_common+0xb0>
 80027e4:	f04f 30ff 	mov.w	r0, #4294967295
 80027e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027ec:	3501      	adds	r5, #1
 80027ee:	e7c4      	b.n	800277a <_printf_common+0x3e>
 80027f0:	2030      	movs	r0, #48	; 0x30
 80027f2:	18e1      	adds	r1, r4, r3
 80027f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80027f8:	1c5a      	adds	r2, r3, #1
 80027fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80027fe:	4422      	add	r2, r4
 8002800:	3302      	adds	r3, #2
 8002802:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002806:	e7c5      	b.n	8002794 <_printf_common+0x58>
 8002808:	2301      	movs	r3, #1
 800280a:	4622      	mov	r2, r4
 800280c:	4649      	mov	r1, r9
 800280e:	4638      	mov	r0, r7
 8002810:	47c0      	blx	r8
 8002812:	3001      	adds	r0, #1
 8002814:	d0e6      	beq.n	80027e4 <_printf_common+0xa8>
 8002816:	3601      	adds	r6, #1
 8002818:	e7d9      	b.n	80027ce <_printf_common+0x92>
	...

0800281c <_printf_i>:
 800281c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002820:	460c      	mov	r4, r1
 8002822:	7e27      	ldrb	r7, [r4, #24]
 8002824:	4691      	mov	r9, r2
 8002826:	2f78      	cmp	r7, #120	; 0x78
 8002828:	4680      	mov	r8, r0
 800282a:	469a      	mov	sl, r3
 800282c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800282e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002832:	d807      	bhi.n	8002844 <_printf_i+0x28>
 8002834:	2f62      	cmp	r7, #98	; 0x62
 8002836:	d80a      	bhi.n	800284e <_printf_i+0x32>
 8002838:	2f00      	cmp	r7, #0
 800283a:	f000 80d9 	beq.w	80029f0 <_printf_i+0x1d4>
 800283e:	2f58      	cmp	r7, #88	; 0x58
 8002840:	f000 80a4 	beq.w	800298c <_printf_i+0x170>
 8002844:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002848:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800284c:	e03a      	b.n	80028c4 <_printf_i+0xa8>
 800284e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002852:	2b15      	cmp	r3, #21
 8002854:	d8f6      	bhi.n	8002844 <_printf_i+0x28>
 8002856:	a001      	add	r0, pc, #4	; (adr r0, 800285c <_printf_i+0x40>)
 8002858:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800285c:	080028b5 	.word	0x080028b5
 8002860:	080028c9 	.word	0x080028c9
 8002864:	08002845 	.word	0x08002845
 8002868:	08002845 	.word	0x08002845
 800286c:	08002845 	.word	0x08002845
 8002870:	08002845 	.word	0x08002845
 8002874:	080028c9 	.word	0x080028c9
 8002878:	08002845 	.word	0x08002845
 800287c:	08002845 	.word	0x08002845
 8002880:	08002845 	.word	0x08002845
 8002884:	08002845 	.word	0x08002845
 8002888:	080029d7 	.word	0x080029d7
 800288c:	080028f9 	.word	0x080028f9
 8002890:	080029b9 	.word	0x080029b9
 8002894:	08002845 	.word	0x08002845
 8002898:	08002845 	.word	0x08002845
 800289c:	080029f9 	.word	0x080029f9
 80028a0:	08002845 	.word	0x08002845
 80028a4:	080028f9 	.word	0x080028f9
 80028a8:	08002845 	.word	0x08002845
 80028ac:	08002845 	.word	0x08002845
 80028b0:	080029c1 	.word	0x080029c1
 80028b4:	680b      	ldr	r3, [r1, #0]
 80028b6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80028ba:	1d1a      	adds	r2, r3, #4
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	600a      	str	r2, [r1, #0]
 80028c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80028c4:	2301      	movs	r3, #1
 80028c6:	e0a4      	b.n	8002a12 <_printf_i+0x1f6>
 80028c8:	6825      	ldr	r5, [r4, #0]
 80028ca:	6808      	ldr	r0, [r1, #0]
 80028cc:	062e      	lsls	r6, r5, #24
 80028ce:	f100 0304 	add.w	r3, r0, #4
 80028d2:	d50a      	bpl.n	80028ea <_printf_i+0xce>
 80028d4:	6805      	ldr	r5, [r0, #0]
 80028d6:	600b      	str	r3, [r1, #0]
 80028d8:	2d00      	cmp	r5, #0
 80028da:	da03      	bge.n	80028e4 <_printf_i+0xc8>
 80028dc:	232d      	movs	r3, #45	; 0x2d
 80028de:	426d      	negs	r5, r5
 80028e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80028e4:	230a      	movs	r3, #10
 80028e6:	485e      	ldr	r0, [pc, #376]	; (8002a60 <_printf_i+0x244>)
 80028e8:	e019      	b.n	800291e <_printf_i+0x102>
 80028ea:	f015 0f40 	tst.w	r5, #64	; 0x40
 80028ee:	6805      	ldr	r5, [r0, #0]
 80028f0:	600b      	str	r3, [r1, #0]
 80028f2:	bf18      	it	ne
 80028f4:	b22d      	sxthne	r5, r5
 80028f6:	e7ef      	b.n	80028d8 <_printf_i+0xbc>
 80028f8:	680b      	ldr	r3, [r1, #0]
 80028fa:	6825      	ldr	r5, [r4, #0]
 80028fc:	1d18      	adds	r0, r3, #4
 80028fe:	6008      	str	r0, [r1, #0]
 8002900:	0628      	lsls	r0, r5, #24
 8002902:	d501      	bpl.n	8002908 <_printf_i+0xec>
 8002904:	681d      	ldr	r5, [r3, #0]
 8002906:	e002      	b.n	800290e <_printf_i+0xf2>
 8002908:	0669      	lsls	r1, r5, #25
 800290a:	d5fb      	bpl.n	8002904 <_printf_i+0xe8>
 800290c:	881d      	ldrh	r5, [r3, #0]
 800290e:	2f6f      	cmp	r7, #111	; 0x6f
 8002910:	bf0c      	ite	eq
 8002912:	2308      	moveq	r3, #8
 8002914:	230a      	movne	r3, #10
 8002916:	4852      	ldr	r0, [pc, #328]	; (8002a60 <_printf_i+0x244>)
 8002918:	2100      	movs	r1, #0
 800291a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800291e:	6866      	ldr	r6, [r4, #4]
 8002920:	2e00      	cmp	r6, #0
 8002922:	bfa8      	it	ge
 8002924:	6821      	ldrge	r1, [r4, #0]
 8002926:	60a6      	str	r6, [r4, #8]
 8002928:	bfa4      	itt	ge
 800292a:	f021 0104 	bicge.w	r1, r1, #4
 800292e:	6021      	strge	r1, [r4, #0]
 8002930:	b90d      	cbnz	r5, 8002936 <_printf_i+0x11a>
 8002932:	2e00      	cmp	r6, #0
 8002934:	d04d      	beq.n	80029d2 <_printf_i+0x1b6>
 8002936:	4616      	mov	r6, r2
 8002938:	fbb5 f1f3 	udiv	r1, r5, r3
 800293c:	fb03 5711 	mls	r7, r3, r1, r5
 8002940:	5dc7      	ldrb	r7, [r0, r7]
 8002942:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002946:	462f      	mov	r7, r5
 8002948:	42bb      	cmp	r3, r7
 800294a:	460d      	mov	r5, r1
 800294c:	d9f4      	bls.n	8002938 <_printf_i+0x11c>
 800294e:	2b08      	cmp	r3, #8
 8002950:	d10b      	bne.n	800296a <_printf_i+0x14e>
 8002952:	6823      	ldr	r3, [r4, #0]
 8002954:	07df      	lsls	r7, r3, #31
 8002956:	d508      	bpl.n	800296a <_printf_i+0x14e>
 8002958:	6923      	ldr	r3, [r4, #16]
 800295a:	6861      	ldr	r1, [r4, #4]
 800295c:	4299      	cmp	r1, r3
 800295e:	bfde      	ittt	le
 8002960:	2330      	movle	r3, #48	; 0x30
 8002962:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002966:	f106 36ff 	addle.w	r6, r6, #4294967295
 800296a:	1b92      	subs	r2, r2, r6
 800296c:	6122      	str	r2, [r4, #16]
 800296e:	464b      	mov	r3, r9
 8002970:	4621      	mov	r1, r4
 8002972:	4640      	mov	r0, r8
 8002974:	f8cd a000 	str.w	sl, [sp]
 8002978:	aa03      	add	r2, sp, #12
 800297a:	f7ff fedf 	bl	800273c <_printf_common>
 800297e:	3001      	adds	r0, #1
 8002980:	d14c      	bne.n	8002a1c <_printf_i+0x200>
 8002982:	f04f 30ff 	mov.w	r0, #4294967295
 8002986:	b004      	add	sp, #16
 8002988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800298c:	4834      	ldr	r0, [pc, #208]	; (8002a60 <_printf_i+0x244>)
 800298e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002992:	680e      	ldr	r6, [r1, #0]
 8002994:	6823      	ldr	r3, [r4, #0]
 8002996:	f856 5b04 	ldr.w	r5, [r6], #4
 800299a:	061f      	lsls	r7, r3, #24
 800299c:	600e      	str	r6, [r1, #0]
 800299e:	d514      	bpl.n	80029ca <_printf_i+0x1ae>
 80029a0:	07d9      	lsls	r1, r3, #31
 80029a2:	bf44      	itt	mi
 80029a4:	f043 0320 	orrmi.w	r3, r3, #32
 80029a8:	6023      	strmi	r3, [r4, #0]
 80029aa:	b91d      	cbnz	r5, 80029b4 <_printf_i+0x198>
 80029ac:	6823      	ldr	r3, [r4, #0]
 80029ae:	f023 0320 	bic.w	r3, r3, #32
 80029b2:	6023      	str	r3, [r4, #0]
 80029b4:	2310      	movs	r3, #16
 80029b6:	e7af      	b.n	8002918 <_printf_i+0xfc>
 80029b8:	6823      	ldr	r3, [r4, #0]
 80029ba:	f043 0320 	orr.w	r3, r3, #32
 80029be:	6023      	str	r3, [r4, #0]
 80029c0:	2378      	movs	r3, #120	; 0x78
 80029c2:	4828      	ldr	r0, [pc, #160]	; (8002a64 <_printf_i+0x248>)
 80029c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80029c8:	e7e3      	b.n	8002992 <_printf_i+0x176>
 80029ca:	065e      	lsls	r6, r3, #25
 80029cc:	bf48      	it	mi
 80029ce:	b2ad      	uxthmi	r5, r5
 80029d0:	e7e6      	b.n	80029a0 <_printf_i+0x184>
 80029d2:	4616      	mov	r6, r2
 80029d4:	e7bb      	b.n	800294e <_printf_i+0x132>
 80029d6:	680b      	ldr	r3, [r1, #0]
 80029d8:	6826      	ldr	r6, [r4, #0]
 80029da:	1d1d      	adds	r5, r3, #4
 80029dc:	6960      	ldr	r0, [r4, #20]
 80029de:	600d      	str	r5, [r1, #0]
 80029e0:	0635      	lsls	r5, r6, #24
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	d501      	bpl.n	80029ea <_printf_i+0x1ce>
 80029e6:	6018      	str	r0, [r3, #0]
 80029e8:	e002      	b.n	80029f0 <_printf_i+0x1d4>
 80029ea:	0671      	lsls	r1, r6, #25
 80029ec:	d5fb      	bpl.n	80029e6 <_printf_i+0x1ca>
 80029ee:	8018      	strh	r0, [r3, #0]
 80029f0:	2300      	movs	r3, #0
 80029f2:	4616      	mov	r6, r2
 80029f4:	6123      	str	r3, [r4, #16]
 80029f6:	e7ba      	b.n	800296e <_printf_i+0x152>
 80029f8:	680b      	ldr	r3, [r1, #0]
 80029fa:	1d1a      	adds	r2, r3, #4
 80029fc:	600a      	str	r2, [r1, #0]
 80029fe:	681e      	ldr	r6, [r3, #0]
 8002a00:	2100      	movs	r1, #0
 8002a02:	4630      	mov	r0, r6
 8002a04:	6862      	ldr	r2, [r4, #4]
 8002a06:	f000 f831 	bl	8002a6c <memchr>
 8002a0a:	b108      	cbz	r0, 8002a10 <_printf_i+0x1f4>
 8002a0c:	1b80      	subs	r0, r0, r6
 8002a0e:	6060      	str	r0, [r4, #4]
 8002a10:	6863      	ldr	r3, [r4, #4]
 8002a12:	6123      	str	r3, [r4, #16]
 8002a14:	2300      	movs	r3, #0
 8002a16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a1a:	e7a8      	b.n	800296e <_printf_i+0x152>
 8002a1c:	4632      	mov	r2, r6
 8002a1e:	4649      	mov	r1, r9
 8002a20:	4640      	mov	r0, r8
 8002a22:	6923      	ldr	r3, [r4, #16]
 8002a24:	47d0      	blx	sl
 8002a26:	3001      	adds	r0, #1
 8002a28:	d0ab      	beq.n	8002982 <_printf_i+0x166>
 8002a2a:	6823      	ldr	r3, [r4, #0]
 8002a2c:	079b      	lsls	r3, r3, #30
 8002a2e:	d413      	bmi.n	8002a58 <_printf_i+0x23c>
 8002a30:	68e0      	ldr	r0, [r4, #12]
 8002a32:	9b03      	ldr	r3, [sp, #12]
 8002a34:	4298      	cmp	r0, r3
 8002a36:	bfb8      	it	lt
 8002a38:	4618      	movlt	r0, r3
 8002a3a:	e7a4      	b.n	8002986 <_printf_i+0x16a>
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	4632      	mov	r2, r6
 8002a40:	4649      	mov	r1, r9
 8002a42:	4640      	mov	r0, r8
 8002a44:	47d0      	blx	sl
 8002a46:	3001      	adds	r0, #1
 8002a48:	d09b      	beq.n	8002982 <_printf_i+0x166>
 8002a4a:	3501      	adds	r5, #1
 8002a4c:	68e3      	ldr	r3, [r4, #12]
 8002a4e:	9903      	ldr	r1, [sp, #12]
 8002a50:	1a5b      	subs	r3, r3, r1
 8002a52:	42ab      	cmp	r3, r5
 8002a54:	dcf2      	bgt.n	8002a3c <_printf_i+0x220>
 8002a56:	e7eb      	b.n	8002a30 <_printf_i+0x214>
 8002a58:	2500      	movs	r5, #0
 8002a5a:	f104 0619 	add.w	r6, r4, #25
 8002a5e:	e7f5      	b.n	8002a4c <_printf_i+0x230>
 8002a60:	08002bda 	.word	0x08002bda
 8002a64:	08002beb 	.word	0x08002beb

08002a68 <__retarget_lock_acquire_recursive>:
 8002a68:	4770      	bx	lr

08002a6a <__retarget_lock_release_recursive>:
 8002a6a:	4770      	bx	lr

08002a6c <memchr>:
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	b510      	push	{r4, lr}
 8002a70:	b2c9      	uxtb	r1, r1
 8002a72:	4402      	add	r2, r0
 8002a74:	4293      	cmp	r3, r2
 8002a76:	4618      	mov	r0, r3
 8002a78:	d101      	bne.n	8002a7e <memchr+0x12>
 8002a7a:	2000      	movs	r0, #0
 8002a7c:	e003      	b.n	8002a86 <memchr+0x1a>
 8002a7e:	7804      	ldrb	r4, [r0, #0]
 8002a80:	3301      	adds	r3, #1
 8002a82:	428c      	cmp	r4, r1
 8002a84:	d1f6      	bne.n	8002a74 <memchr+0x8>
 8002a86:	bd10      	pop	{r4, pc}

08002a88 <memcpy>:
 8002a88:	440a      	add	r2, r1
 8002a8a:	4291      	cmp	r1, r2
 8002a8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002a90:	d100      	bne.n	8002a94 <memcpy+0xc>
 8002a92:	4770      	bx	lr
 8002a94:	b510      	push	{r4, lr}
 8002a96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002a9a:	4291      	cmp	r1, r2
 8002a9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002aa0:	d1f9      	bne.n	8002a96 <memcpy+0xe>
 8002aa2:	bd10      	pop	{r4, pc}

08002aa4 <memmove>:
 8002aa4:	4288      	cmp	r0, r1
 8002aa6:	b510      	push	{r4, lr}
 8002aa8:	eb01 0402 	add.w	r4, r1, r2
 8002aac:	d902      	bls.n	8002ab4 <memmove+0x10>
 8002aae:	4284      	cmp	r4, r0
 8002ab0:	4623      	mov	r3, r4
 8002ab2:	d807      	bhi.n	8002ac4 <memmove+0x20>
 8002ab4:	1e43      	subs	r3, r0, #1
 8002ab6:	42a1      	cmp	r1, r4
 8002ab8:	d008      	beq.n	8002acc <memmove+0x28>
 8002aba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002abe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002ac2:	e7f8      	b.n	8002ab6 <memmove+0x12>
 8002ac4:	4601      	mov	r1, r0
 8002ac6:	4402      	add	r2, r0
 8002ac8:	428a      	cmp	r2, r1
 8002aca:	d100      	bne.n	8002ace <memmove+0x2a>
 8002acc:	bd10      	pop	{r4, pc}
 8002ace:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002ad2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002ad6:	e7f7      	b.n	8002ac8 <memmove+0x24>

08002ad8 <_realloc_r>:
 8002ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ada:	4607      	mov	r7, r0
 8002adc:	4614      	mov	r4, r2
 8002ade:	460e      	mov	r6, r1
 8002ae0:	b921      	cbnz	r1, 8002aec <_realloc_r+0x14>
 8002ae2:	4611      	mov	r1, r2
 8002ae4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002ae8:	f7ff bc1c 	b.w	8002324 <_malloc_r>
 8002aec:	b922      	cbnz	r2, 8002af8 <_realloc_r+0x20>
 8002aee:	f7ff fbcd 	bl	800228c <_free_r>
 8002af2:	4625      	mov	r5, r4
 8002af4:	4628      	mov	r0, r5
 8002af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002af8:	f000 f814 	bl	8002b24 <_malloc_usable_size_r>
 8002afc:	42a0      	cmp	r0, r4
 8002afe:	d20f      	bcs.n	8002b20 <_realloc_r+0x48>
 8002b00:	4621      	mov	r1, r4
 8002b02:	4638      	mov	r0, r7
 8002b04:	f7ff fc0e 	bl	8002324 <_malloc_r>
 8002b08:	4605      	mov	r5, r0
 8002b0a:	2800      	cmp	r0, #0
 8002b0c:	d0f2      	beq.n	8002af4 <_realloc_r+0x1c>
 8002b0e:	4631      	mov	r1, r6
 8002b10:	4622      	mov	r2, r4
 8002b12:	f7ff ffb9 	bl	8002a88 <memcpy>
 8002b16:	4631      	mov	r1, r6
 8002b18:	4638      	mov	r0, r7
 8002b1a:	f7ff fbb7 	bl	800228c <_free_r>
 8002b1e:	e7e9      	b.n	8002af4 <_realloc_r+0x1c>
 8002b20:	4635      	mov	r5, r6
 8002b22:	e7e7      	b.n	8002af4 <_realloc_r+0x1c>

08002b24 <_malloc_usable_size_r>:
 8002b24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b28:	1f18      	subs	r0, r3, #4
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	bfbc      	itt	lt
 8002b2e:	580b      	ldrlt	r3, [r1, r0]
 8002b30:	18c0      	addlt	r0, r0, r3
 8002b32:	4770      	bx	lr

08002b34 <_sbrk>:
 8002b34:	4b04      	ldr	r3, [pc, #16]	; (8002b48 <_sbrk+0x14>)
 8002b36:	4602      	mov	r2, r0
 8002b38:	6819      	ldr	r1, [r3, #0]
 8002b3a:	b909      	cbnz	r1, 8002b40 <_sbrk+0xc>
 8002b3c:	4903      	ldr	r1, [pc, #12]	; (8002b4c <_sbrk+0x18>)
 8002b3e:	6019      	str	r1, [r3, #0]
 8002b40:	6818      	ldr	r0, [r3, #0]
 8002b42:	4402      	add	r2, r0
 8002b44:	601a      	str	r2, [r3, #0]
 8002b46:	4770      	bx	lr
 8002b48:	20000158 	.word	0x20000158
 8002b4c:	20000568 	.word	0x20000568

08002b50 <_init>:
 8002b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b52:	bf00      	nop
 8002b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b56:	bc08      	pop	{r3}
 8002b58:	469e      	mov	lr, r3
 8002b5a:	4770      	bx	lr

08002b5c <_fini>:
 8002b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b5e:	bf00      	nop
 8002b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b62:	bc08      	pop	{r3}
 8002b64:	469e      	mov	lr, r3
 8002b66:	4770      	bx	lr
