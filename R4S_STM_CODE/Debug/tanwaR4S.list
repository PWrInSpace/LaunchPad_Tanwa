
tanwaR4S.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a2c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08002b3c  08002b3c  00012b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bc8  08002bc8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002bc8  08002bc8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002bc8  08002bc8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bc8  08002bc8  00012bc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002bcc  08002bcc  00012bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002bd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f0  20000070  08002c40  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000560  08002c40  00020560  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001018e  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e94  00000000  00000000  00030227  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000930  00000000  00000000  000330c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c80  00000000  00000000  000339f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005d5a  00000000  00000000  00034670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f943  00000000  00000000  0003a3ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a583  00000000  00000000  00049d0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d4290  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b0c  00000000  00000000  000d42e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000076cd  00000000  00000000  000d5df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08002b24 	.word	0x08002b24

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08002b24 	.word	0x08002b24

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <_ZN7IgniterC1EP12GPIO_TypeDeftS1_t>:
#include <Igniter.hh>

//(names of args start with '_' sign)
Igniter::Igniter(GPIO_TypeDef* _GPIO_PORT_IGNITER, uint16_t _PIN_IGNITER, GPIO_TypeDef* _IGN_GPIO_PORT_TEST_CON, uint16_t _IGN_PIN_TEST_CON){
 8000160:	b480      	push	{r7}
 8000162:	b085      	sub	sp, #20
 8000164:	af00      	add	r7, sp, #0
 8000166:	60f8      	str	r0, [r7, #12]
 8000168:	60b9      	str	r1, [r7, #8]
 800016a:	603b      	str	r3, [r7, #0]
 800016c:	4613      	mov	r3, r2
 800016e:	80fb      	strh	r3, [r7, #6]
	GPIO_PORT_IGNITER = _GPIO_PORT_IGNITER;
 8000170:	68fb      	ldr	r3, [r7, #12]
 8000172:	68ba      	ldr	r2, [r7, #8]
 8000174:	601a      	str	r2, [r3, #0]
	PIN_IGNITER = _PIN_IGNITER;
 8000176:	68fb      	ldr	r3, [r7, #12]
 8000178:	88fa      	ldrh	r2, [r7, #6]
 800017a:	809a      	strh	r2, [r3, #4]
	GPIO_PORT_TEST_CON = _IGN_GPIO_PORT_TEST_CON;
 800017c:	68fb      	ldr	r3, [r7, #12]
 800017e:	683a      	ldr	r2, [r7, #0]
 8000180:	609a      	str	r2, [r3, #8]
	PIN_TEST_CON = _IGN_PIN_TEST_CON;
 8000182:	68fb      	ldr	r3, [r7, #12]
 8000184:	8b3a      	ldrh	r2, [r7, #24]
 8000186:	819a      	strh	r2, [r3, #12]
}
 8000188:	68fb      	ldr	r3, [r7, #12]
 800018a:	4618      	mov	r0, r3
 800018c:	3714      	adds	r7, #20
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr

08000194 <_ZNK7Igniter12is_connectedEv>:

bool Igniter::is_connected() const{
 8000194:	b580      	push	{r7, lr}
 8000196:	b082      	sub	sp, #8
 8000198:	af00      	add	r7, sp, #0
 800019a:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(GPIO_PORT_TEST_CON, PIN_TEST_CON) == GPIO_PIN_SET)
 800019c:	687b      	ldr	r3, [r7, #4]
 800019e:	689a      	ldr	r2, [r3, #8]
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	899b      	ldrh	r3, [r3, #12]
 80001a4:	4619      	mov	r1, r3
 80001a6:	4610      	mov	r0, r2
 80001a8:	f001 f890 	bl	80012cc <HAL_GPIO_ReadPin>
 80001ac:	4603      	mov	r3, r0
 80001ae:	2b01      	cmp	r3, #1
 80001b0:	bf0c      	ite	eq
 80001b2:	2301      	moveq	r3, #1
 80001b4:	2300      	movne	r3, #0
 80001b6:	b2db      	uxtb	r3, r3
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d001      	beq.n	80001c0 <_ZNK7Igniter12is_connectedEv+0x2c>
		return 1;
 80001bc:	2301      	movs	r3, #1
 80001be:	e000      	b.n	80001c2 <_ZNK7Igniter12is_connectedEv+0x2e>
	else
		return 0;
 80001c0:	2300      	movs	r3, #0
}
 80001c2:	4618      	mov	r0, r3
 80001c4:	3708      	adds	r7, #8
 80001c6:	46bd      	mov	sp, r7
 80001c8:	bd80      	pop	{r7, pc}

080001ca <_ZN7Igniter4FIREEv>:

void Igniter::FIRE(){
 80001ca:	b580      	push	{r7, lr}
 80001cc:	b082      	sub	sp, #8
 80001ce:	af00      	add	r7, sp, #0
 80001d0:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIO_PORT_IGNITER, PIN_IGNITER, GPIO_PIN_SET);
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	6818      	ldr	r0, [r3, #0]
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	889b      	ldrh	r3, [r3, #4]
 80001da:	2201      	movs	r2, #1
 80001dc:	4619      	mov	r1, r3
 80001de:	f001 f87b 	bl	80012d8 <HAL_GPIO_WritePin>
}
 80001e2:	bf00      	nop
 80001e4:	3708      	adds	r7, #8
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bd80      	pop	{r7, pc}
	...

080001ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80001f0:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001f2:	2400      	movs	r4, #0
 80001f4:	9404      	str	r4, [sp, #16]
 80001f6:	9405      	str	r4, [sp, #20]
 80001f8:	9406      	str	r4, [sp, #24]
 80001fa:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001fc:	4b2b      	ldr	r3, [pc, #172]	; (80002ac <MX_GPIO_Init+0xc0>)
 80001fe:	699a      	ldr	r2, [r3, #24]
 8000200:	f042 0210 	orr.w	r2, r2, #16
 8000204:	619a      	str	r2, [r3, #24]
 8000206:	699a      	ldr	r2, [r3, #24]
 8000208:	f002 0210 	and.w	r2, r2, #16
 800020c:	9200      	str	r2, [sp, #0]
 800020e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000210:	699a      	ldr	r2, [r3, #24]
 8000212:	f042 0220 	orr.w	r2, r2, #32
 8000216:	619a      	str	r2, [r3, #24]
 8000218:	699a      	ldr	r2, [r3, #24]
 800021a:	f002 0220 	and.w	r2, r2, #32
 800021e:	9201      	str	r2, [sp, #4]
 8000220:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000222:	699a      	ldr	r2, [r3, #24]
 8000224:	f042 0204 	orr.w	r2, r2, #4
 8000228:	619a      	str	r2, [r3, #24]
 800022a:	699a      	ldr	r2, [r3, #24]
 800022c:	f002 0204 	and.w	r2, r2, #4
 8000230:	9202      	str	r2, [sp, #8]
 8000232:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000234:	699a      	ldr	r2, [r3, #24]
 8000236:	f042 0208 	orr.w	r2, r2, #8
 800023a:	619a      	str	r2, [r3, #24]
 800023c:	699b      	ldr	r3, [r3, #24]
 800023e:	f003 0308 	and.w	r3, r3, #8
 8000242:	9303      	str	r3, [sp, #12]
 8000244:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUILD_IN_LED_GPIO_Port, BUILD_IN_LED_Pin, GPIO_PIN_RESET);
 8000246:	4d1a      	ldr	r5, [pc, #104]	; (80002b0 <MX_GPIO_Init+0xc4>)
 8000248:	4622      	mov	r2, r4
 800024a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800024e:	4628      	mov	r0, r5
 8000250:	f001 f842 	bl	80012d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IGN_FIRE_GPIO_Port, IGN_FIRE_Pin, GPIO_PIN_RESET);
 8000254:	4e17      	ldr	r6, [pc, #92]	; (80002b4 <MX_GPIO_Init+0xc8>)
 8000256:	4622      	mov	r2, r4
 8000258:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800025c:	4630      	mov	r0, r6
 800025e:	f001 f83b 	bl	80012d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUILD_IN_LED_Pin;
 8000262:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000266:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000268:	f04f 0801 	mov.w	r8, #1
 800026c:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000270:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000272:	2702      	movs	r7, #2
 8000274:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(BUILD_IN_LED_GPIO_Port, &GPIO_InitStruct);
 8000276:	a904      	add	r1, sp, #16
 8000278:	4628      	mov	r0, r5
 800027a:	f000 ff17 	bl	80010ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IGN_TEST_CON_Pin;
 800027e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000282:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000284:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000286:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(IGN_TEST_CON_GPIO_Port, &GPIO_InitStruct);
 8000288:	a904      	add	r1, sp, #16
 800028a:	4628      	mov	r0, r5
 800028c:	f000 ff0e 	bl	80010ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IGN_FIRE_Pin;
 8000290:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000294:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000296:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800029a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800029c:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(IGN_FIRE_GPIO_Port, &GPIO_InitStruct);
 800029e:	a904      	add	r1, sp, #16
 80002a0:	4630      	mov	r0, r6
 80002a2:	f000 ff03 	bl	80010ac <HAL_GPIO_Init>

}
 80002a6:	b008      	add	sp, #32
 80002a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80002ac:	40021000 	.word	0x40021000
 80002b0:	40011000 	.word	0x40011000
 80002b4:	40010800 	.word	0x40010800

080002b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ba:	b08d      	sub	sp, #52	; 0x34
 80002bc:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */
	  HAL_Delay(1000);
 80002be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002c2:	f000 fceb 	bl	8000c9c <HAL_Delay>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002c6:	f000 fcc5 	bl	8000c54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002ca:	f000 f901 	bl	80004d0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ce:	f7ff ff8d 	bl	80001ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002d2:	f000 fa05 	bl	80006e0 <MX_USART2_UART_Init>
  MX_USB_PCD_Init();
 80002d6:	f000 fae7 	bl	80008a8 <MX_USB_PCD_Init>
  MX_USART3_UART_Init();
 80002da:	f000 fa1b 	bl	8000714 <MX_USART3_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  __HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);
 80002de:	4b6e      	ldr	r3, [pc, #440]	; (8000498 <main+0x1e0>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	68da      	ldr	r2, [r3, #12]
 80002e4:	4b6c      	ldr	r3, [pc, #432]	; (8000498 <main+0x1e0>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	f042 0210 	orr.w	r2, r2, #16
 80002ec:	60da      	str	r2, [r3, #12]
  HAL_UART_Receive_DMA(&huart2, (uint8_t*) xbee_rx.mess_loaded, DATA_LENGTH);
 80002ee:	2232      	movs	r2, #50	; 0x32
 80002f0:	496a      	ldr	r1, [pc, #424]	; (800049c <main+0x1e4>)
 80002f2:	4869      	ldr	r0, [pc, #420]	; (8000498 <main+0x1e0>)
 80002f4:	f001 fd58 	bl	8001da8 <HAL_UART_Receive_DMA>
  xbee_init(&communication, 0x0013A20041C283E5, &huart2); //inicjalizacja modułu xbee
 80002f8:	4b67      	ldr	r3, [pc, #412]	; (8000498 <main+0x1e0>)
 80002fa:	9300      	str	r3, [sp, #0]
 80002fc:	a364      	add	r3, pc, #400	; (adr r3, 8000490 <main+0x1d8>)
 80002fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000302:	4867      	ldr	r0, [pc, #412]	; (80004a0 <main+0x1e8>)
 8000304:	f000 fb0b 	bl	800091e <xbee_init>
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 8000308:	4b63      	ldr	r3, [pc, #396]	; (8000498 <main+0x1e0>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	68da      	ldr	r2, [r3, #12]
 800030e:	4b62      	ldr	r3, [pc, #392]	; (8000498 <main+0x1e0>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	f042 0220 	orr.w	r2, r2, #32
 8000316:	60da      	str	r2, [r3, #12]

  /* USER CODE END 2 */

  /* USER CODE BEGIN WHILE */

  Igniter igniter(IGN_FIRE_GPIO_Port, IGN_FIRE_Pin, IGN_TEST_CON_GPIO_Port, IGN_TEST_CON_Pin);
 8000318:	1d38      	adds	r0, r7, #4
 800031a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800031e:	9300      	str	r3, [sp, #0]
 8000320:	4b60      	ldr	r3, [pc, #384]	; (80004a4 <main+0x1ec>)
 8000322:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000326:	4960      	ldr	r1, [pc, #384]	; (80004a8 <main+0x1f0>)
 8000328:	f7ff ff1a 	bl	8000160 <_ZN7IgniterC1EP12GPIO_TypeDeftS1_t>


  state currState = Init;
 800032c:	2301      	movs	r3, #1
 800032e:	75fb      	strb	r3, [r7, #23]
  while (1)
  {
	  sprintf(dataOut,"D;%i;%i", currState, igniter.is_connected());
 8000330:	7dfc      	ldrb	r4, [r7, #23]
 8000332:	1d3b      	adds	r3, r7, #4
 8000334:	4618      	mov	r0, r3
 8000336:	f7ff ff2d 	bl	8000194 <_ZNK7Igniter12is_connectedEv>
 800033a:	4603      	mov	r3, r0
 800033c:	4622      	mov	r2, r4
 800033e:	495b      	ldr	r1, [pc, #364]	; (80004ac <main+0x1f4>)
 8000340:	485b      	ldr	r0, [pc, #364]	; (80004b0 <main+0x1f8>)
 8000342:	f002 f843 	bl	80023cc <siprintf>
	  xbee_transmit_char(communication, dataOut);
 8000346:	4e56      	ldr	r6, [pc, #344]	; (80004a0 <main+0x1e8>)
 8000348:	4b59      	ldr	r3, [pc, #356]	; (80004b0 <main+0x1f8>)
 800034a:	9305      	str	r3, [sp, #20]
 800034c:	466d      	mov	r5, sp
 800034e:	f106 0410 	add.w	r4, r6, #16
 8000352:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000354:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000356:	6823      	ldr	r3, [r4, #0]
 8000358:	602b      	str	r3, [r5, #0]
 800035a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800035e:	f000 fba4 	bl	8000aaa <xbee_transmit_char>
	  HAL_Delay(50);
 8000362:	2032      	movs	r0, #50	; 0x32
 8000364:	f000 fc9a 	bl	8000c9c <HAL_Delay>

	  switch(currState){
 8000368:	7dfb      	ldrb	r3, [r7, #23]
 800036a:	3b01      	subs	r3, #1
 800036c:	2b06      	cmp	r3, #6
 800036e:	f200 8088 	bhi.w	8000482 <main+0x1ca>
 8000372:	a201      	add	r2, pc, #4	; (adr r2, 8000378 <main+0xc0>)
 8000374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000378:	08000395 	.word	0x08000395
 800037c:	080003b3 	.word	0x080003b3
 8000380:	080003d1 	.word	0x080003d1
 8000384:	08000405 	.word	0x08000405
 8000388:	08000411 	.word	0x08000411
 800038c:	08000471 	.word	0x08000471
 8000390:	08000479 	.word	0x08000479
		  case Init: //test state		//1:INIT

			  //place for random tests	//
			  if(igniter.is_connected()){
 8000394:	1d3b      	adds	r3, r7, #4
 8000396:	4618      	mov	r0, r3
 8000398:	f7ff fefc 	bl	8000194 <_ZNK7Igniter12is_connectedEv>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d004      	beq.n	80003ac <main+0xf4>
   				  HAL_GPIO_TogglePin(BUILD_IN_LED_GPIO_Port, BUILD_IN_LED_Pin);
 80003a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003a6:	483f      	ldr	r0, [pc, #252]	; (80004a4 <main+0x1ec>)
 80003a8:	f000 ff9c 	bl	80012e4 <HAL_GPIO_TogglePin>

			  //strcpy(dataIn, "DINI");	//xd

			  // (end) place for random test //

   			  currState = Idle;
 80003ac:	2302      	movs	r3, #2
 80003ae:	75fb      	strb	r3, [r7, #23]
   			  break;
 80003b0:	e06a      	b.n	8000488 <main+0x1d0>
   		  case Idle:{	//2:IDLE
   			  if(strncmp(dataIn, "DINI", 4) == 0){ // signal == init
 80003b2:	2204      	movs	r2, #4
 80003b4:	493f      	ldr	r1, [pc, #252]	; (80004b4 <main+0x1fc>)
 80003b6:	4840      	ldr	r0, [pc, #256]	; (80004b8 <main+0x200>)
 80003b8:	f002 f830 	bl	800241c <strncmp>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d101      	bne.n	80003c6 <main+0x10e>
   				currState = ArmedHard;
 80003c2:	2303      	movs	r3, #3
 80003c4:	75fb      	strb	r3, [r7, #23]
   			  }
   			  HAL_Delay(1000);
 80003c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003ca:	f000 fc67 	bl	8000c9c <HAL_Delay>
   			  break;
 80003ce:	e05b      	b.n	8000488 <main+0x1d0>
   		  }
   		  case ArmedHard:{	//3:ARMED(hard)
   			  if(strncmp(dataIn, "DARM", 4) == 0){ // signal == arm
 80003d0:	2204      	movs	r2, #4
 80003d2:	493a      	ldr	r1, [pc, #232]	; (80004bc <main+0x204>)
 80003d4:	4838      	ldr	r0, [pc, #224]	; (80004b8 <main+0x200>)
 80003d6:	f002 f821 	bl	800241c <strncmp>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d102      	bne.n	80003e6 <main+0x12e>
   				currState = ArmedSoft;
 80003e0:	2304      	movs	r3, #4
 80003e2:	75fb      	strb	r3, [r7, #23]
 80003e4:	e009      	b.n	80003fa <main+0x142>
   			  }
   			  else if(strncmp (dataIn, "DABR", 4) == 0){	//signal == abort
 80003e6:	2204      	movs	r2, #4
 80003e8:	4935      	ldr	r1, [pc, #212]	; (80004c0 <main+0x208>)
 80003ea:	4833      	ldr	r0, [pc, #204]	; (80004b8 <main+0x200>)
 80003ec:	f002 f816 	bl	800241c <strncmp>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d101      	bne.n	80003fa <main+0x142>
   				currState = Abort;
 80003f6:	2307      	movs	r3, #7
 80003f8:	75fb      	strb	r3, [r7, #23]
			  }
   			  HAL_Delay(1000);
 80003fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003fe:	f000 fc4d 	bl	8000c9c <HAL_Delay>
   			  break;
 8000402:	e041      	b.n	8000488 <main+0x1d0>
   		  }
   		  case ArmedSoft:{	//4:ARMED(soft)
   			  currState = Ready; // there should be a signal for this (at least in R4 it necessary)
 8000404:	2305      	movs	r3, #5
 8000406:	75fb      	strb	r3, [r7, #23]
   			  HAL_Delay(100);
 8000408:	2064      	movs	r0, #100	; 0x64
 800040a:	f000 fc47 	bl	8000c9c <HAL_Delay>
   			  break;
 800040e:	e03b      	b.n	8000488 <main+0x1d0>
   		  }
   		  case Ready:{	//5:Ready
			  if(strncmp (dataIn, "DSTA", 4) == 0){	//signal == fire
 8000410:	2204      	movs	r2, #4
 8000412:	492c      	ldr	r1, [pc, #176]	; (80004c4 <main+0x20c>)
 8000414:	4828      	ldr	r0, [pc, #160]	; (80004b8 <main+0x200>)
 8000416:	f002 f801 	bl	800241c <strncmp>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d118      	bne.n	8000452 <main+0x19a>
				  igniter.FIRE();
 8000420:	1d3b      	adds	r3, r7, #4
 8000422:	4618      	mov	r0, r3
 8000424:	f7ff fed1 	bl	80001ca <_ZN7Igniter4FIREEv>
				  sprintf(dataOut,"ASTB");
 8000428:	4927      	ldr	r1, [pc, #156]	; (80004c8 <main+0x210>)
 800042a:	4821      	ldr	r0, [pc, #132]	; (80004b0 <main+0x1f8>)
 800042c:	f001 ffce 	bl	80023cc <siprintf>
				  xbee_transmit_char(communication, dataOut);
 8000430:	4e1b      	ldr	r6, [pc, #108]	; (80004a0 <main+0x1e8>)
 8000432:	4b1f      	ldr	r3, [pc, #124]	; (80004b0 <main+0x1f8>)
 8000434:	9305      	str	r3, [sp, #20]
 8000436:	466d      	mov	r5, sp
 8000438:	f106 0410 	add.w	r4, r6, #16
 800043c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800043e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000440:	6823      	ldr	r3, [r4, #0]
 8000442:	602b      	str	r3, [r5, #0]
 8000444:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000448:	f000 fb2f 	bl	8000aaa <xbee_transmit_char>
				  currState = End;
 800044c:	2306      	movs	r3, #6
 800044e:	75fb      	strb	r3, [r7, #23]
 8000450:	e009      	b.n	8000466 <main+0x1ae>
			  }
			  else if(strncmp (dataIn, "DABR", 4) == 0){	//signal == abort
 8000452:	2204      	movs	r2, #4
 8000454:	491a      	ldr	r1, [pc, #104]	; (80004c0 <main+0x208>)
 8000456:	4818      	ldr	r0, [pc, #96]	; (80004b8 <main+0x200>)
 8000458:	f001 ffe0 	bl	800241c <strncmp>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d101      	bne.n	8000466 <main+0x1ae>
				  currState = Abort;
 8000462:	2307      	movs	r3, #7
 8000464:	75fb      	strb	r3, [r7, #23]
			  }
			  HAL_Delay(1000);
 8000466:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800046a:	f000 fc17 	bl	8000c9c <HAL_Delay>
			  break;
 800046e:	e00b      	b.n	8000488 <main+0x1d0>
		  }
   		  case End:{	//6:END aka FIRED
   			  HAL_Delay(1000000);
 8000470:	4816      	ldr	r0, [pc, #88]	; (80004cc <main+0x214>)
 8000472:	f000 fc13 	bl	8000c9c <HAL_Delay>
   			  break;
 8000476:	e007      	b.n	8000488 <main+0x1d0>
   		  }
   		  case Abort:{	//7:ABORT
			  HAL_Delay(1000);
 8000478:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800047c:	f000 fc0e 	bl	8000c9c <HAL_Delay>
			  break;
 8000480:	e002      	b.n	8000488 <main+0x1d0>
		  }
   		  default:{
   			  currState = Abort;
 8000482:	2307      	movs	r3, #7
 8000484:	75fb      	strb	r3, [r7, #23]
   			  break;
 8000486:	bf00      	nop
	  sprintf(dataOut,"D;%i;%i", currState, igniter.is_connected());
 8000488:	e752      	b.n	8000330 <main+0x78>
 800048a:	bf00      	nop
 800048c:	f3af 8000 	nop.w
 8000490:	41c283e5 	.word	0x41c283e5
 8000494:	0013a200 	.word	0x0013a200
 8000498:	20000220 	.word	0x20000220
 800049c:	20000090 	.word	0x20000090
 80004a0:	20000128 	.word	0x20000128
 80004a4:	40011000 	.word	0x40011000
 80004a8:	40010800 	.word	0x40010800
 80004ac:	08002b3c 	.word	0x08002b3c
 80004b0:	20000108 	.word	0x20000108
 80004b4:	08002b44 	.word	0x08002b44
 80004b8:	200000e8 	.word	0x200000e8
 80004bc:	08002b4c 	.word	0x08002b4c
 80004c0:	08002b54 	.word	0x08002b54
 80004c4:	08002b5c 	.word	0x08002b5c
 80004c8:	08002b64 	.word	0x08002b64
 80004cc:	000f4240 	.word	0x000f4240

080004d0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b094      	sub	sp, #80	; 0x50
 80004d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004da:	2228      	movs	r2, #40	; 0x28
 80004dc:	2100      	movs	r1, #0
 80004de:	4618      	mov	r0, r3
 80004e0:	f001 feb6 	bl	8002250 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e4:	f107 0314 	add.w	r3, r7, #20
 80004e8:	2200      	movs	r2, #0
 80004ea:	601a      	str	r2, [r3, #0]
 80004ec:	605a      	str	r2, [r3, #4]
 80004ee:	609a      	str	r2, [r3, #8]
 80004f0:	60da      	str	r2, [r3, #12]
 80004f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004f4:	1d3b      	adds	r3, r7, #4
 80004f6:	2200      	movs	r2, #0
 80004f8:	601a      	str	r2, [r3, #0]
 80004fa:	605a      	str	r2, [r3, #4]
 80004fc:	609a      	str	r2, [r3, #8]
 80004fe:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000500:	2301      	movs	r3, #1
 8000502:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000504:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000508:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800050a:	2300      	movs	r3, #0
 800050c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800050e:	2301      	movs	r3, #1
 8000510:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000512:	2302      	movs	r3, #2
 8000514:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000516:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800051a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800051c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000520:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000522:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000526:	4618      	mov	r0, r3
 8000528:	f000 ff66 	bl	80013f8 <HAL_RCC_OscConfig>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	bf14      	ite	ne
 8000532:	2301      	movne	r3, #1
 8000534:	2300      	moveq	r3, #0
 8000536:	b2db      	uxtb	r3, r3
 8000538:	2b00      	cmp	r3, #0
 800053a:	d001      	beq.n	8000540 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 800053c:	f000 f870 	bl	8000620 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000540:	230f      	movs	r3, #15
 8000542:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000544:	2302      	movs	r3, #2
 8000546:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000548:	2300      	movs	r3, #0
 800054a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800054c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000550:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000552:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000556:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000558:	f107 0314 	add.w	r3, r7, #20
 800055c:	2101      	movs	r1, #1
 800055e:	4618      	mov	r0, r3
 8000560:	f001 f996 	bl	8001890 <HAL_RCC_ClockConfig>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	bf14      	ite	ne
 800056a:	2301      	movne	r3, #1
 800056c:	2300      	moveq	r3, #0
 800056e:	b2db      	uxtb	r3, r3
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <_Z18SystemClock_Configv+0xa8>
  {
    Error_Handler();
 8000574:	f000 f854 	bl	8000620 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000578:	2310      	movs	r3, #16
 800057a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800057c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000580:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000582:	1d3b      	adds	r3, r7, #4
 8000584:	4618      	mov	r0, r3
 8000586:	f001 fa5b 	bl	8001a40 <HAL_RCCEx_PeriphCLKConfig>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	bf14      	ite	ne
 8000590:	2301      	movne	r3, #1
 8000592:	2300      	moveq	r3, #0
 8000594:	b2db      	uxtb	r3, r3
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <_Z18SystemClock_Configv+0xce>
  {
    Error_Handler();
 800059a:	f000 f841 	bl	8000620 <Error_Handler>
  }
}
 800059e:	bf00      	nop
 80005a0:	3750      	adds	r7, #80	; 0x50
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
	...

080005a8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a14      	ldr	r2, [pc, #80]	; (8000608 <HAL_UART_RxCpltCallback+0x60>)
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d122      	bne.n	8000600 <HAL_UART_RxCpltCallback+0x58>
		__HAL_UART_CLEAR_IDLEFLAG(&huart2);
 80005ba:	2300      	movs	r3, #0
 80005bc:	60fb      	str	r3, [r7, #12]
 80005be:	4b13      	ldr	r3, [pc, #76]	; (800060c <HAL_UART_RxCpltCallback+0x64>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	60fb      	str	r3, [r7, #12]
 80005c6:	4b11      	ldr	r3, [pc, #68]	; (800060c <HAL_UART_RxCpltCallback+0x64>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	685b      	ldr	r3, [r3, #4]
 80005cc:	60fb      	str	r3, [r7, #12]
 80005ce:	68fb      	ldr	r3, [r7, #12]
		HAL_UART_DMAStop(&huart2);
 80005d0:	480e      	ldr	r0, [pc, #56]	; (800060c <HAL_UART_RxCpltCallback+0x64>)
 80005d2:	f001 fc3d 	bl	8001e50 <HAL_UART_DMAStop>

		xbee_receive(); //odebranie całej wiadomości
 80005d6:	f000 fa7f 	bl	8000ad8 <xbee_receive>
		if(xbee_rx.data_flag){  //jeżeli wiadomość była danymi to ta zmienna będzie miała wartość 1
 80005da:	4b0d      	ldr	r3, [pc, #52]	; (8000610 <HAL_UART_RxCpltCallback+0x68>)
 80005dc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d008      	beq.n	80005f6 <HAL_UART_RxCpltCallback+0x4e>
			TUTAJ WEDLE UZNANIA PRZECHWYTUJECIE DANE KTORE PRZYSZŁY
			macie do dyspozycji tablice 'xbee_rx.data_array' o wielkości 'DATA_ARRAY' - 30, w której są wartości
			jeżeli chcecie zatrzymać te dane musicie skopiować wartości tej tabilicy
			pobranie adresu jest złym pomysłem bo przy każdym odebraniu tablica zmienia swoją zawartosć
			*/
			if(xbee_rx.data_array[0] == 'D'){
 80005e4:	4b0a      	ldr	r3, [pc, #40]	; (8000610 <HAL_UART_RxCpltCallback+0x68>)
 80005e6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80005ea:	2b44      	cmp	r3, #68	; 0x44
 80005ec:	d103      	bne.n	80005f6 <HAL_UART_RxCpltCallback+0x4e>
				strcpy(dataIn, xbee_rx.data_array);
 80005ee:	4909      	ldr	r1, [pc, #36]	; (8000614 <HAL_UART_RxCpltCallback+0x6c>)
 80005f0:	4809      	ldr	r0, [pc, #36]	; (8000618 <HAL_UART_RxCpltCallback+0x70>)
 80005f2:	f001 ff0b 	bl	800240c <strcpy>
			}
		}
		//tutaj zmienić tylko huart
		HAL_UART_Receive_DMA(&huart2, (uint8_t*) xbee_rx.mess_loaded, DATA_LENGTH);
 80005f6:	2232      	movs	r2, #50	; 0x32
 80005f8:	4908      	ldr	r1, [pc, #32]	; (800061c <HAL_UART_RxCpltCallback+0x74>)
 80005fa:	4804      	ldr	r0, [pc, #16]	; (800060c <HAL_UART_RxCpltCallback+0x64>)
 80005fc:	f001 fbd4 	bl	8001da8 <HAL_UART_Receive_DMA>
	}
}
 8000600:	bf00      	nop
 8000602:	3710      	adds	r7, #16
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40004400 	.word	0x40004400
 800060c:	20000220 	.word	0x20000220
 8000610:	2000008c 	.word	0x2000008c
 8000614:	200000c2 	.word	0x200000c2
 8000618:	200000e8 	.word	0x200000e8
 800061c:	20000090 	.word	0x20000090

08000620 <Error_Handler>:

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void){
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000624:	b672      	cpsid	i
}
 8000626:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000628:	e7fe      	b.n	8000628 <Error_Handler+0x8>
	...

0800062c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800062c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800062e:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <HAL_MspInit+0x3c>)
 8000630:	699a      	ldr	r2, [r3, #24]
 8000632:	f042 0201 	orr.w	r2, r2, #1
 8000636:	619a      	str	r2, [r3, #24]
 8000638:	699a      	ldr	r2, [r3, #24]
 800063a:	f002 0201 	and.w	r2, r2, #1
 800063e:	9200      	str	r2, [sp, #0]
 8000640:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000642:	69da      	ldr	r2, [r3, #28]
 8000644:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000648:	61da      	str	r2, [r3, #28]
 800064a:	69db      	ldr	r3, [r3, #28]
 800064c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000650:	9301      	str	r3, [sp, #4]
 8000652:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000654:	4a05      	ldr	r2, [pc, #20]	; (800066c <HAL_MspInit+0x40>)
 8000656:	6853      	ldr	r3, [r2, #4]
 8000658:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800065c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000660:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000662:	b002      	add	sp, #8
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	40021000 	.word	0x40021000
 800066c:	40010000 	.word	0x40010000

08000670 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000670:	e7fe      	b.n	8000670 <NMI_Handler>

08000672 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000672:	e7fe      	b.n	8000672 <HardFault_Handler>

08000674 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000674:	e7fe      	b.n	8000674 <MemManage_Handler>

08000676 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000676:	e7fe      	b.n	8000676 <BusFault_Handler>

08000678 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000678:	e7fe      	b.n	8000678 <UsageFault_Handler>

0800067a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800067a:	4770      	bx	lr

0800067c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800067c:	4770      	bx	lr

0800067e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800067e:	4770      	bx	lr

08000680 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000680:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000682:	f000 faf9 	bl	8000c78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000686:	bd08      	pop	{r3, pc}

08000688 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000688:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800068a:	4802      	ldr	r0, [pc, #8]	; (8000694 <DMA1_Channel6_IRQHandler+0xc>)
 800068c:	f000 fc6e 	bl	8000f6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000690:	bd08      	pop	{r3, pc}
 8000692:	bf00      	nop
 8000694:	20000158 	.word	0x20000158

08000698 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000698:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800069a:	4802      	ldr	r0, [pc, #8]	; (80006a4 <DMA1_Channel7_IRQHandler+0xc>)
 800069c:	f000 fc66 	bl	8000f6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80006a0:	bd08      	pop	{r3, pc}
 80006a2:	bf00      	nop
 80006a4:	200001dc 	.word	0x200001dc

080006a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80006a8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80006aa:	4c07      	ldr	r4, [pc, #28]	; (80006c8 <USART2_IRQHandler+0x20>)
 80006ac:	4620      	mov	r0, r4
 80006ae:	f001 fca3 	bl	8001ff8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  if(__HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE))
 80006b2:	6823      	ldr	r3, [r4, #0]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	f013 0f10 	tst.w	r3, #16
 80006ba:	d100      	bne.n	80006be <USART2_IRQHandler+0x16>
	  HAL_UART_RxCpltCallback(&huart2);

  /* USER CODE END USART2_IRQn 1 */
}
 80006bc:	bd10      	pop	{r4, pc}
	  HAL_UART_RxCpltCallback(&huart2);
 80006be:	4620      	mov	r0, r4
 80006c0:	f7ff ff72 	bl	80005a8 <HAL_UART_RxCpltCallback>
}
 80006c4:	e7fa      	b.n	80006bc <USART2_IRQHandler+0x14>
 80006c6:	bf00      	nop
 80006c8:	20000220 	.word	0x20000220

080006cc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80006cc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80006ce:	4802      	ldr	r0, [pc, #8]	; (80006d8 <USART3_IRQHandler+0xc>)
 80006d0:	f001 fc92 	bl	8001ff8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80006d4:	bd08      	pop	{r3, pc}
 80006d6:	bf00      	nop
 80006d8:	2000019c 	.word	0x2000019c

080006dc <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006dc:	4770      	bx	lr
	...

080006e0 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80006e0:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006e2:	480a      	ldr	r0, [pc, #40]	; (800070c <MX_USART2_UART_Init+0x2c>)
 80006e4:	4b0a      	ldr	r3, [pc, #40]	; (8000710 <MX_USART2_UART_Init+0x30>)
 80006e6:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 80006e8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80006ec:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ee:	2300      	movs	r3, #0
 80006f0:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006f2:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006f4:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006f6:	220c      	movs	r2, #12
 80006f8:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fa:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006fc:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006fe:	f001 fab1 	bl	8001c64 <HAL_UART_Init>
 8000702:	b900      	cbnz	r0, 8000706 <MX_USART2_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000704:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000706:	f7ff ff8b 	bl	8000620 <Error_Handler>
}
 800070a:	e7fb      	b.n	8000704 <MX_USART2_UART_Init+0x24>
 800070c:	20000220 	.word	0x20000220
 8000710:	40004400 	.word	0x40004400

08000714 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000714:	b508      	push	{r3, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000716:	480a      	ldr	r0, [pc, #40]	; (8000740 <MX_USART3_UART_Init+0x2c>)
 8000718:	4b0a      	ldr	r3, [pc, #40]	; (8000744 <MX_USART3_UART_Init+0x30>)
 800071a:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 800071c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000720:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000722:	2300      	movs	r3, #0
 8000724:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000726:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000728:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800072a:	220c      	movs	r2, #12
 800072c:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072e:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000730:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000732:	f001 fa97 	bl	8001c64 <HAL_UART_Init>
 8000736:	b900      	cbnz	r0, 800073a <MX_USART3_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000738:	bd08      	pop	{r3, pc}
    Error_Handler();
 800073a:	f7ff ff71 	bl	8000620 <Error_Handler>
}
 800073e:	e7fb      	b.n	8000738 <MX_USART3_UART_Init+0x24>
 8000740:	2000019c 	.word	0x2000019c
 8000744:	40004800 	.word	0x40004800

08000748 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000748:	b570      	push	{r4, r5, r6, lr}
 800074a:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074c:	2300      	movs	r3, #0
 800074e:	9304      	str	r3, [sp, #16]
 8000750:	9305      	str	r3, [sp, #20]
 8000752:	9306      	str	r3, [sp, #24]
 8000754:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART2)
 8000756:	6803      	ldr	r3, [r0, #0]
 8000758:	4a4a      	ldr	r2, [pc, #296]	; (8000884 <HAL_UART_MspInit+0x13c>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d004      	beq.n	8000768 <HAL_UART_MspInit+0x20>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 800075e:	4a4a      	ldr	r2, [pc, #296]	; (8000888 <HAL_UART_MspInit+0x140>)
 8000760:	4293      	cmp	r3, r2
 8000762:	d05c      	beq.n	800081e <HAL_UART_MspInit+0xd6>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000764:	b008      	add	sp, #32
 8000766:	bd70      	pop	{r4, r5, r6, pc}
 8000768:	4604      	mov	r4, r0
    __HAL_RCC_USART2_CLK_ENABLE();
 800076a:	4b48      	ldr	r3, [pc, #288]	; (800088c <HAL_UART_MspInit+0x144>)
 800076c:	69da      	ldr	r2, [r3, #28]
 800076e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000772:	61da      	str	r2, [r3, #28]
 8000774:	69da      	ldr	r2, [r3, #28]
 8000776:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800077a:	9200      	str	r2, [sp, #0]
 800077c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	699a      	ldr	r2, [r3, #24]
 8000780:	f042 0204 	orr.w	r2, r2, #4
 8000784:	619a      	str	r2, [r3, #24]
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	f003 0304 	and.w	r3, r3, #4
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000790:	2304      	movs	r3, #4
 8000792:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000794:	2302      	movs	r3, #2
 8000796:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000798:	2303      	movs	r3, #3
 800079a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800079c:	4e3c      	ldr	r6, [pc, #240]	; (8000890 <HAL_UART_MspInit+0x148>)
 800079e:	a904      	add	r1, sp, #16
 80007a0:	4630      	mov	r0, r6
 80007a2:	f000 fc83 	bl	80010ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80007a6:	2308      	movs	r3, #8
 80007a8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007aa:	2500      	movs	r5, #0
 80007ac:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b0:	a904      	add	r1, sp, #16
 80007b2:	4630      	mov	r0, r6
 80007b4:	f000 fc7a 	bl	80010ac <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80007b8:	4836      	ldr	r0, [pc, #216]	; (8000894 <HAL_UART_MspInit+0x14c>)
 80007ba:	4b37      	ldr	r3, [pc, #220]	; (8000898 <HAL_UART_MspInit+0x150>)
 80007bc:	6003      	str	r3, [r0, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007be:	6045      	str	r5, [r0, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007c0:	6085      	str	r5, [r0, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80007c2:	2380      	movs	r3, #128	; 0x80
 80007c4:	60c3      	str	r3, [r0, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007c6:	6105      	str	r5, [r0, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007c8:	6145      	str	r5, [r0, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80007ca:	6185      	str	r5, [r0, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80007cc:	61c5      	str	r5, [r0, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80007ce:	f000 fae1 	bl	8000d94 <HAL_DMA_Init>
 80007d2:	b9f0      	cbnz	r0, 8000812 <HAL_UART_MspInit+0xca>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80007d4:	4b2f      	ldr	r3, [pc, #188]	; (8000894 <HAL_UART_MspInit+0x14c>)
 80007d6:	6363      	str	r3, [r4, #52]	; 0x34
 80007d8:	625c      	str	r4, [r3, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80007da:	4830      	ldr	r0, [pc, #192]	; (800089c <HAL_UART_MspInit+0x154>)
 80007dc:	4b30      	ldr	r3, [pc, #192]	; (80008a0 <HAL_UART_MspInit+0x158>)
 80007de:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80007e0:	2310      	movs	r3, #16
 80007e2:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007e4:	2300      	movs	r3, #0
 80007e6:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80007e8:	2280      	movs	r2, #128	; 0x80
 80007ea:	60c2      	str	r2, [r0, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007ec:	6103      	str	r3, [r0, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007ee:	6143      	str	r3, [r0, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80007f0:	6183      	str	r3, [r0, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80007f2:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80007f4:	f000 face 	bl	8000d94 <HAL_DMA_Init>
 80007f8:	b970      	cbnz	r0, 8000818 <HAL_UART_MspInit+0xd0>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80007fa:	4b28      	ldr	r3, [pc, #160]	; (800089c <HAL_UART_MspInit+0x154>)
 80007fc:	6323      	str	r3, [r4, #48]	; 0x30
 80007fe:	625c      	str	r4, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000800:	2200      	movs	r2, #0
 8000802:	4611      	mov	r1, r2
 8000804:	2026      	movs	r0, #38	; 0x26
 8000806:	f000 fa6f 	bl	8000ce8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800080a:	2026      	movs	r0, #38	; 0x26
 800080c:	f000 fa9e 	bl	8000d4c <HAL_NVIC_EnableIRQ>
 8000810:	e7a8      	b.n	8000764 <HAL_UART_MspInit+0x1c>
      Error_Handler();
 8000812:	f7ff ff05 	bl	8000620 <Error_Handler>
 8000816:	e7dd      	b.n	80007d4 <HAL_UART_MspInit+0x8c>
      Error_Handler();
 8000818:	f7ff ff02 	bl	8000620 <Error_Handler>
 800081c:	e7ed      	b.n	80007fa <HAL_UART_MspInit+0xb2>
    __HAL_RCC_USART3_CLK_ENABLE();
 800081e:	4b1b      	ldr	r3, [pc, #108]	; (800088c <HAL_UART_MspInit+0x144>)
 8000820:	69da      	ldr	r2, [r3, #28]
 8000822:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000826:	61da      	str	r2, [r3, #28]
 8000828:	69da      	ldr	r2, [r3, #28]
 800082a:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800082e:	9202      	str	r2, [sp, #8]
 8000830:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000832:	699a      	ldr	r2, [r3, #24]
 8000834:	f042 0208 	orr.w	r2, r2, #8
 8000838:	619a      	str	r2, [r3, #24]
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	f003 0308 	and.w	r3, r3, #8
 8000840:	9303      	str	r3, [sp, #12]
 8000842:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000844:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000848:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084a:	2302      	movs	r3, #2
 800084c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800084e:	2303      	movs	r3, #3
 8000850:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000852:	4d14      	ldr	r5, [pc, #80]	; (80008a4 <HAL_UART_MspInit+0x15c>)
 8000854:	a904      	add	r1, sp, #16
 8000856:	4628      	mov	r0, r5
 8000858:	f000 fc28 	bl	80010ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800085c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000860:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000862:	2400      	movs	r4, #0
 8000864:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000868:	a904      	add	r1, sp, #16
 800086a:	4628      	mov	r0, r5
 800086c:	f000 fc1e 	bl	80010ac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000870:	4622      	mov	r2, r4
 8000872:	4621      	mov	r1, r4
 8000874:	2027      	movs	r0, #39	; 0x27
 8000876:	f000 fa37 	bl	8000ce8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800087a:	2027      	movs	r0, #39	; 0x27
 800087c:	f000 fa66 	bl	8000d4c <HAL_NVIC_EnableIRQ>
}
 8000880:	e770      	b.n	8000764 <HAL_UART_MspInit+0x1c>
 8000882:	bf00      	nop
 8000884:	40004400 	.word	0x40004400
 8000888:	40004800 	.word	0x40004800
 800088c:	40021000 	.word	0x40021000
 8000890:	40010800 	.word	0x40010800
 8000894:	20000158 	.word	0x20000158
 8000898:	4002006c 	.word	0x4002006c
 800089c:	200001dc 	.word	0x200001dc
 80008a0:	40020080 	.word	0x40020080
 80008a4:	40010c00 	.word	0x40010c00

080008a8 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 80008a8:	b508      	push	{r3, lr}
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80008aa:	4809      	ldr	r0, [pc, #36]	; (80008d0 <MX_USB_PCD_Init+0x28>)
 80008ac:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <MX_USB_PCD_Init+0x2c>)
 80008ae:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80008b0:	2308      	movs	r3, #8
 80008b2:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80008b4:	2302      	movs	r3, #2
 80008b6:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80008b8:	2300      	movs	r3, #0
 80008ba:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80008bc:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80008be:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80008c0:	f000 fd19 	bl	80012f6 <HAL_PCD_Init>
 80008c4:	b900      	cbnz	r0, 80008c8 <MX_USB_PCD_Init+0x20>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80008c6:	bd08      	pop	{r3, pc}
    Error_Handler();
 80008c8:	f7ff feaa 	bl	8000620 <Error_Handler>
}
 80008cc:	e7fb      	b.n	80008c6 <MX_USB_PCD_Init+0x1e>
 80008ce:	bf00      	nop
 80008d0:	20000260 	.word	0x20000260
 80008d4:	40005c00 	.word	0x40005c00

080008d8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{

  if(pcdHandle->Instance==USB)
 80008d8:	6802      	ldr	r2, [r0, #0]
 80008da:	4b09      	ldr	r3, [pc, #36]	; (8000900 <HAL_PCD_MspInit+0x28>)
 80008dc:	429a      	cmp	r2, r3
 80008de:	d000      	beq.n	80008e2 <HAL_PCD_MspInit+0xa>
 80008e0:	4770      	bx	lr
{
 80008e2:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80008e4:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80008e8:	69da      	ldr	r2, [r3, #28]
 80008ea:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80008ee:	61da      	str	r2, [r3, #28]
 80008f0:	69db      	ldr	r3, [r3, #28]
 80008f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80008f6:	9301      	str	r3, [sp, #4]
 80008f8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80008fa:	b002      	add	sp, #8
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	40005c00 	.word	0x40005c00

08000904 <xbee_options_init>:


//Wpisanie opcji api do tablicy
//Tutaj bez dynamicznych bo nie ma kiedy zwolnić tablicy
void xbee_options_init(uint8_t *options){
	options[0] = START_BYTE;
 8000904:	237e      	movs	r3, #126	; 0x7e
 8000906:	7003      	strb	r3, [r0, #0]
	options[1] = FRAME_TYPE;
 8000908:	2310      	movs	r3, #16
 800090a:	7043      	strb	r3, [r0, #1]
	options[2] = FRAME_ID ;
 800090c:	2300      	movs	r3, #0
 800090e:	7083      	strb	r3, [r0, #2]
	options[3] = BT_1;
 8000910:	22ff      	movs	r2, #255	; 0xff
 8000912:	70c2      	strb	r2, [r0, #3]
	options[4] = BT_2;
 8000914:	22fe      	movs	r2, #254	; 0xfe
 8000916:	7102      	strb	r2, [r0, #4]
	options[5] = BORDCAST_RADIUS;
 8000918:	7143      	strb	r3, [r0, #5]
	options[6] = OPTIONS;
 800091a:	7183      	strb	r3, [r0, #6]
}
 800091c:	4770      	bx	lr

0800091e <xbee_init>:

//Zamiana adresu na tablice
//Ogólna inicjalizacja xbee
void xbee_init(Xbee *sensor, uint64_t address, UART_HandleTypeDef *uart){
 800091e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000920:	b083      	sub	sp, #12
 8000922:	4606      	mov	r6, r0
 8000924:	4614      	mov	r4, r2
 8000926:	461f      	mov	r7, r3
	  uint8_t temp[8]; //tablica do wczytania oryginalego adresu;
	  int i, j;

	 sensor->huart = uart;
 8000928:	9b08      	ldr	r3, [sp, #32]
 800092a:	6203      	str	r3, [r0, #32]

	  xbee_options_init(sensor->options); //Inicjalizacja opcji, raz wystarczy
 800092c:	f7ff ffea 	bl	8000904 <xbee_options_init>


	  //to idzie jeszcze poprawic do jednej petli
	  for(i=0; i<8; i++){
 8000930:	7f31      	ldrb	r1, [r6, #28]
 8000932:	f10d 35ff 	add.w	r5, sp, #4294967295
 8000936:	f10d 0307 	add.w	r3, sp, #7
		  temp[i] = address;
 800093a:	b2e2      	uxtb	r2, r4
 800093c:	f805 2f01 	strb.w	r2, [r5, #1]!
		  sensor->checksum += temp[i];
 8000940:	4411      	add	r1, r2
 8000942:	b2c9      	uxtb	r1, r1

		  address /= 0x100;
 8000944:	0a24      	lsrs	r4, r4, #8
 8000946:	ea44 6407 	orr.w	r4, r4, r7, lsl #24
 800094a:	0a3f      	lsrs	r7, r7, #8
	  for(i=0; i<8; i++){
 800094c:	429d      	cmp	r5, r3
 800094e:	d1f4      	bne.n	800093a <xbee_init+0x1c>
 8000950:	7731      	strb	r1, [r6, #28]
 8000952:	f10d 0207 	add.w	r2, sp, #7
 8000956:	f106 0309 	add.w	r3, r6, #9
 800095a:	3611      	adds	r6, #17
	  }

	  //Wpisanie adresu do tablicy dynamicznej
	  for(i=7, j=0; i>=0; i--, j++){
		  sensor->address[j] = temp[i];
 800095c:	f812 1901 	ldrb.w	r1, [r2], #-1
 8000960:	f803 1b01 	strb.w	r1, [r3], #1
	  for(i=7, j=0; i>=0; i--, j++){
 8000964:	42b3      	cmp	r3, r6
 8000966:	d1f9      	bne.n	800095c <xbee_init+0x3e>
	  }
}
 8000968:	b003      	add	sp, #12
 800096a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800096c <xbee_length>:

//Obliczenie długości i wpisanie jej do tablicy
void xbee_length(Xbee *sensor){
	//Pierwszy element dlugosci to 0;
	int l;
	l = 14 + sensor->data_length;
 800096c:	6983      	ldr	r3, [r0, #24]
 800096e:	330e      	adds	r3, #14

	//Tworzymy tablice i wpisujemy wartosci
	sensor->length[0] = l/100;
 8000970:	4904      	ldr	r1, [pc, #16]	; (8000984 <xbee_length+0x18>)
 8000972:	fb81 2103 	smull	r2, r1, r1, r3
 8000976:	17da      	asrs	r2, r3, #31
 8000978:	ebc2 1261 	rsb	r2, r2, r1, asr #5
 800097c:	71c2      	strb	r2, [r0, #7]
	sensor->length[1] = l;
 800097e:	7203      	strb	r3, [r0, #8]
}
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	51eb851f 	.word	0x51eb851f

08000988 <xbee_checksum_count>:

//Obliczenie chceksumy
void xbee_checksum_count(Xbee *sensor){
 8000988:	b410      	push	{r4}
	int i=0;
	for(i=1; i<7; i++){
 800098a:	7f03      	ldrb	r3, [r0, #28]
 800098c:	1c42      	adds	r2, r0, #1
 800098e:	1dc4      	adds	r4, r0, #7
		sensor->checksum += sensor->options[i];
 8000990:	f812 1b01 	ldrb.w	r1, [r2], #1
 8000994:	440b      	add	r3, r1
 8000996:	b2db      	uxtb	r3, r3
	for(i=1; i<7; i++){
 8000998:	42a2      	cmp	r2, r4
 800099a:	d1f9      	bne.n	8000990 <xbee_checksum_count+0x8>
 800099c:	7703      	strb	r3, [r0, #28]
	}
	for(i=0; i<sensor->data_length; i++){
 800099e:	6983      	ldr	r3, [r0, #24]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	dd0a      	ble.n	80009ba <xbee_checksum_count+0x32>
		sensor->checksum += sensor->data[i];
 80009a4:	6944      	ldr	r4, [r0, #20]
 80009a6:	1e62      	subs	r2, r4, #1
 80009a8:	441c      	add	r4, r3
 80009aa:	3c01      	subs	r4, #1
 80009ac:	7f03      	ldrb	r3, [r0, #28]
 80009ae:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80009b2:	440b      	add	r3, r1
 80009b4:	7703      	strb	r3, [r0, #28]
	for(i=0; i<sensor->data_length; i++){
 80009b6:	42a2      	cmp	r2, r4
 80009b8:	d1f8      	bne.n	80009ac <xbee_checksum_count+0x24>
	}
	sensor->checksum = 0xff - sensor->checksum;
 80009ba:	7f03      	ldrb	r3, [r0, #28]
 80009bc:	43db      	mvns	r3, r3
 80009be:	7703      	strb	r3, [r0, #28]

}
 80009c0:	bc10      	pop	{r4}
 80009c2:	4770      	bx	lr

080009c4 <xbee_send>:

//Czy tutaj tworzyc tablice z cala wiadomoscia i wysłać całę odrazu
void xbee_send(Xbee *sensor){
 80009c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80009c8:	4604      	mov	r4, r0
	int i;

		//wyslanie znaku start
		HAL_UART_Transmit(sensor->huart, &sensor->options[0], 1, 100);
 80009ca:	2364      	movs	r3, #100	; 0x64
 80009cc:	2201      	movs	r2, #1
 80009ce:	4601      	mov	r1, r0
 80009d0:	6a00      	ldr	r0, [r0, #32]
 80009d2:	f001 f976 	bl	8001cc2 <HAL_UART_Transmit>

		//wyslanie dlugosci
		for(i=0; i<2; i++){
			HAL_UART_Transmit(sensor->huart, &sensor->length[i], 1, 100);
 80009d6:	2364      	movs	r3, #100	; 0x64
 80009d8:	2201      	movs	r2, #1
 80009da:	1de1      	adds	r1, r4, #7
 80009dc:	6a20      	ldr	r0, [r4, #32]
 80009de:	f001 f970 	bl	8001cc2 <HAL_UART_Transmit>
 80009e2:	2364      	movs	r3, #100	; 0x64
 80009e4:	2201      	movs	r2, #1
 80009e6:	f104 0108 	add.w	r1, r4, #8
 80009ea:	6a20      	ldr	r0, [r4, #32]
 80009ec:	f001 f969 	bl	8001cc2 <HAL_UART_Transmit>
		}

		//wyslanie danych klatki
		HAL_UART_Transmit(sensor->huart, &sensor->options[1], 1, 100);
 80009f0:	2364      	movs	r3, #100	; 0x64
 80009f2:	2201      	movs	r2, #1
 80009f4:	18a1      	adds	r1, r4, r2
 80009f6:	6a20      	ldr	r0, [r4, #32]
 80009f8:	f001 f963 	bl	8001cc2 <HAL_UART_Transmit>
		HAL_UART_Transmit(sensor->huart, &sensor->options[2], 1, 100);
 80009fc:	2364      	movs	r3, #100	; 0x64
 80009fe:	2201      	movs	r2, #1
 8000a00:	1ca1      	adds	r1, r4, #2
 8000a02:	6a20      	ldr	r0, [r4, #32]
 8000a04:	f001 f95d 	bl	8001cc2 <HAL_UART_Transmit>

		//Wyslanie adresu
		for(i=0; i<8; i++){
 8000a08:	f104 0509 	add.w	r5, r4, #9
 8000a0c:	f104 0811 	add.w	r8, r4, #17
			HAL_UART_Transmit(sensor->huart, &sensor->address[i], 1, 100);
 8000a10:	2764      	movs	r7, #100	; 0x64
 8000a12:	2601      	movs	r6, #1
 8000a14:	463b      	mov	r3, r7
 8000a16:	4632      	mov	r2, r6
 8000a18:	4629      	mov	r1, r5
 8000a1a:	6a20      	ldr	r0, [r4, #32]
 8000a1c:	f001 f951 	bl	8001cc2 <HAL_UART_Transmit>
		for(i=0; i<8; i++){
 8000a20:	3501      	adds	r5, #1
 8000a22:	4545      	cmp	r5, r8
 8000a24:	d1f6      	bne.n	8000a14 <xbee_send+0x50>
 8000a26:	1ce5      	adds	r5, r4, #3
 8000a28:	f104 0807 	add.w	r8, r4, #7
		}

		//wyslanie reszty opcji
		for(i=3; i<7; i++){
			HAL_UART_Transmit(sensor->huart, &sensor->options[i], 1, 100);
 8000a2c:	2764      	movs	r7, #100	; 0x64
 8000a2e:	2601      	movs	r6, #1
 8000a30:	463b      	mov	r3, r7
 8000a32:	4632      	mov	r2, r6
 8000a34:	4629      	mov	r1, r5
 8000a36:	6a20      	ldr	r0, [r4, #32]
 8000a38:	f001 f943 	bl	8001cc2 <HAL_UART_Transmit>
		for(i=3; i<7; i++){
 8000a3c:	3501      	adds	r5, #1
 8000a3e:	4545      	cmp	r5, r8
 8000a40:	d1f6      	bne.n	8000a30 <xbee_send+0x6c>
		}

		//wyslanie danych
		for(i=0; i<sensor->data_length; i++){
 8000a42:	69a3      	ldr	r3, [r4, #24]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	dd0d      	ble.n	8000a64 <xbee_send+0xa0>
 8000a48:	2500      	movs	r5, #0
			HAL_UART_Transmit(sensor->huart, (uint8_t *) &sensor->data[i], 1, 100);
 8000a4a:	2764      	movs	r7, #100	; 0x64
 8000a4c:	2601      	movs	r6, #1
 8000a4e:	6961      	ldr	r1, [r4, #20]
 8000a50:	463b      	mov	r3, r7
 8000a52:	4632      	mov	r2, r6
 8000a54:	4429      	add	r1, r5
 8000a56:	6a20      	ldr	r0, [r4, #32]
 8000a58:	f001 f933 	bl	8001cc2 <HAL_UART_Transmit>
		for(i=0; i<sensor->data_length; i++){
 8000a5c:	3501      	adds	r5, #1
 8000a5e:	69a3      	ldr	r3, [r4, #24]
 8000a60:	42ab      	cmp	r3, r5
 8000a62:	dcf4      	bgt.n	8000a4e <xbee_send+0x8a>
		}

		//wyslanie checksumy
		HAL_UART_Transmit(sensor->huart, &sensor->checksum, 1, 100);
 8000a64:	2364      	movs	r3, #100	; 0x64
 8000a66:	2201      	movs	r2, #1
 8000a68:	f104 011c 	add.w	r1, r4, #28
 8000a6c:	6a20      	ldr	r0, [r4, #32]
 8000a6e:	f001 f928 	bl	8001cc2 <HAL_UART_Transmit>


		//Czyszczenie pamięci
		free(sensor->data);
 8000a72:	6960      	ldr	r0, [r4, #20]
 8000a74:	f001 fbe4 	bl	8002240 <free>
}
 8000a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000a7c <xbee_char_load>:
	xbee_checksum_count(&sensor);
	xbee_send(&sensor);
}

//wczytanie podanych danych do struktury
void xbee_char_load(char *data, Xbee *sensor){
 8000a7c:	b570      	push	{r4, r5, r6, lr}
 8000a7e:	4605      	mov	r5, r0
 8000a80:	460c      	mov	r4, r1
	sensor->data_length = strlen(data); //strlen niby powinien zadziałać bez
 8000a82:	f7ff fb65 	bl	8000150 <strlen>
 8000a86:	4606      	mov	r6, r0
 8000a88:	61a0      	str	r0, [r4, #24]
	sensor->data = (uint8_t*)malloc(sensor->data_length * sizeof(uint8_t));//
 8000a8a:	f001 fbd1 	bl	8002230 <malloc>
 8000a8e:	6160      	str	r0, [r4, #20]

	for(int i=0; i<sensor->data_length; ++i){
 8000a90:	2e00      	cmp	r6, #0
 8000a92:	dd09      	ble.n	8000aa8 <xbee_char_load+0x2c>
 8000a94:	1e68      	subs	r0, r5, #1
 8000a96:	2300      	movs	r3, #0
		sensor->data[i] = data[i];
 8000a98:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 8000a9c:	6962      	ldr	r2, [r4, #20]
 8000a9e:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<sensor->data_length; ++i){
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	69a2      	ldr	r2, [r4, #24]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	dcf7      	bgt.n	8000a98 <xbee_char_load+0x1c>
	}
}
 8000aa8:	bd70      	pop	{r4, r5, r6, pc}

08000aaa <xbee_transmit_char>:
void xbee_transmit_char(Xbee sensor, char *data){
 8000aaa:	b084      	sub	sp, #16
 8000aac:	b508      	push	{r3, lr}
 8000aae:	f10d 0c08 	add.w	ip, sp, #8
 8000ab2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	xbee_char_load(data, &sensor);
 8000ab6:	4661      	mov	r1, ip
 8000ab8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8000aba:	f7ff ffdf 	bl	8000a7c <xbee_char_load>
	xbee_length(&sensor);
 8000abe:	a802      	add	r0, sp, #8
 8000ac0:	f7ff ff54 	bl	800096c <xbee_length>
	xbee_checksum_count(&sensor);
 8000ac4:	a802      	add	r0, sp, #8
 8000ac6:	f7ff ff5f 	bl	8000988 <xbee_checksum_count>
	xbee_send(&sensor);
 8000aca:	a802      	add	r0, sp, #8
 8000acc:	f7ff ff7a 	bl	80009c4 <xbee_send>
}
 8000ad0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000ad4:	b004      	add	sp, #16
 8000ad6:	4770      	bx	lr

08000ad8 <xbee_receive>:
    return result;
}


///zastanowić się jak sensownie zwracać dane
void xbee_receive(){
 8000ad8:	b470      	push	{r4, r5, r6}
	for(int i=0; i<length; i++){
 8000ada:	4b34      	ldr	r3, [pc, #208]	; (8000bac <xbee_receive+0xd4>)
 8000adc:	f1a3 0435 	sub.w	r4, r3, #53	; 0x35
 8000ae0:	f103 011e 	add.w	r1, r3, #30
		array[i] = 0;
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	f803 2f01 	strb.w	r2, [r3, #1]!
	for(int i=0; i<length; i++){
 8000aea:	428b      	cmp	r3, r1
 8000aec:	d1fb      	bne.n	8000ae6 <xbee_receive+0xe>
	xbee_clear_array(xbee_rx.data_array, DATA_ARRAY);
	xbee_rx.data_flag = 0;
 8000aee:	4b30      	ldr	r3, [pc, #192]	; (8000bb0 <xbee_receive+0xd8>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	//ogarnięcie długości
	xbee_rx.length = (xbee_rx.mess_loaded[1] << 8) + xbee_rx.mess_loaded[2];
 8000af6:	795a      	ldrb	r2, [r3, #5]
 8000af8:	799d      	ldrb	r5, [r3, #6]
 8000afa:	eb05 2502 	add.w	r5, r5, r2, lsl #8
 8000afe:	601d      	str	r5, [r3, #0]
	//długość całej tablicy
	int mess_length = xbee_rx.length + 3; //3 bo dodajemy 4 elementy ale musimy odjąć jeden bo tablice sa numerowane od 0
 8000b00:	1cee      	adds	r6, r5, #3


	//sprawdzenie checksum
	for(int i=3; i<mess_length; i++){
 8000b02:	2e03      	cmp	r6, #3
 8000b04:	dd0e      	ble.n	8000b24 <xbee_receive+0x4c>
 8000b06:	461a      	mov	r2, r3
 8000b08:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8000b0c:	3206      	adds	r2, #6
 8000b0e:	1da0      	adds	r0, r4, #6
 8000b10:	4428      	add	r0, r5
		xbee_rx.checksum += xbee_rx.mess_loaded[i];
 8000b12:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8000b16:	440b      	add	r3, r1
 8000b18:	b2db      	uxtb	r3, r3
	for(int i=3; i<mess_length; i++){
 8000b1a:	4282      	cmp	r2, r0
 8000b1c:	d1f9      	bne.n	8000b12 <xbee_receive+0x3a>
 8000b1e:	4a24      	ldr	r2, [pc, #144]	; (8000bb0 <xbee_receive+0xd8>)
 8000b20:	f882 3055 	strb.w	r3, [r2, #85]	; 0x55
	}
	xbee_rx.checksum = 0xff - xbee_rx.checksum;
 8000b24:	4a22      	ldr	r2, [pc, #136]	; (8000bb0 <xbee_receive+0xd8>)
 8000b26:	f892 3055 	ldrb.w	r3, [r2, #85]	; 0x55
 8000b2a:	43db      	mvns	r3, r3
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	f882 3055 	strb.w	r3, [r2, #85]	; 0x55
	//sprawdzenie czy checksum sie zgadza
	if(xbee_rx.checksum != xbee_rx.mess_loaded[mess_length]){
 8000b32:	4432      	add	r2, r6
 8000b34:	7912      	ldrb	r2, [r2, #4]
 8000b36:	429a      	cmp	r2, r3
 8000b38:	d00e      	beq.n	8000b58 <xbee_receive+0x80>
 8000b3a:	4b1e      	ldr	r3, [pc, #120]	; (8000bb4 <xbee_receive+0xdc>)
 8000b3c:	f104 0235 	add.w	r2, r4, #53	; 0x35
		array[i] = 0;
 8000b40:	2100      	movs	r1, #0
 8000b42:	f803 1f01 	strb.w	r1, [r3, #1]!
	for(int i=0; i<length; i++){
 8000b46:	429a      	cmp	r2, r3
 8000b48:	d1fb      	bne.n	8000b42 <xbee_receive+0x6a>
	xbee_rx.length = 0;
 8000b4a:	4b19      	ldr	r3, [pc, #100]	; (8000bb0 <xbee_receive+0xd8>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
	xbee_rx.checksum = 0;
 8000b50:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
		//debug
		//xbee_rx.data_array[k] = '\n';
		//xbee_rx.data = xbee_data_convert(xbee_rx.data_array);
	}
	xbee_clear();
}
 8000b54:	bc70      	pop	{r4, r5, r6}
 8000b56:	4770      	bx	lr
	if(xbee_rx.length == 7){
 8000b58:	2d07      	cmp	r5, #7
 8000b5a:	d01c      	beq.n	8000b96 <xbee_receive+0xbe>
		for(i = 15, k = 0; i<mess_length; ++i, ++k){
 8000b5c:	2e0f      	cmp	r6, #15
 8000b5e:	dd08      	ble.n	8000b72 <xbee_receive+0x9a>
 8000b60:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <xbee_receive+0xe0>)
 8000b62:	1da2      	adds	r2, r4, #6
 8000b64:	4415      	add	r5, r2
			xbee_rx.data_array[k] = xbee_rx.mess_loaded[i];
 8000b66:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8000b6a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		for(i = 15, k = 0; i<mess_length; ++i, ++k){
 8000b6e:	42ab      	cmp	r3, r5
 8000b70:	d1f9      	bne.n	8000b66 <xbee_receive+0x8e>
		xbee_rx.data_flag = 1;
 8000b72:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <xbee_receive+0xd8>)
 8000b74:	2201      	movs	r2, #1
 8000b76:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	for(int i=0; i<length; i++){
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <xbee_receive+0xdc>)
 8000b7c:	f104 0235 	add.w	r2, r4, #53	; 0x35
		array[i] = 0;
 8000b80:	2100      	movs	r1, #0
 8000b82:	f803 1f01 	strb.w	r1, [r3, #1]!
	for(int i=0; i<length; i++){
 8000b86:	429a      	cmp	r2, r3
 8000b88:	d1fb      	bne.n	8000b82 <xbee_receive+0xaa>
	xbee_rx.length = 0;
 8000b8a:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <xbee_receive+0xd8>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
	xbee_rx.checksum = 0;
 8000b90:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
}
 8000b94:	e7de      	b.n	8000b54 <xbee_receive+0x7c>
		if(xbee_rx.mess_loaded[mess_length-1] == 0 && xbee_rx.mess_loaded[mess_length-2] == 0 && xbee_rx.mess_loaded[mess_length-3] == 0){
 8000b96:	4a06      	ldr	r2, [pc, #24]	; (8000bb0 <xbee_receive+0xd8>)
 8000b98:	7b53      	ldrb	r3, [r2, #13]
 8000b9a:	7b11      	ldrb	r1, [r2, #12]
 8000b9c:	430b      	orrs	r3, r1
 8000b9e:	7ad2      	ldrb	r2, [r2, #11]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	d1ea      	bne.n	8000b7a <xbee_receive+0xa2>
			xbee_rx.response = 1;
 8000ba4:	4b02      	ldr	r3, [pc, #8]	; (8000bb0 <xbee_receive+0xd8>)
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	659a      	str	r2, [r3, #88]	; 0x58
 8000baa:	e7e6      	b.n	8000b7a <xbee_receive+0xa2>
 8000bac:	200000c1 	.word	0x200000c1
 8000bb0:	2000008c 	.word	0x2000008c
 8000bb4:	2000008f 	.word	0x2000008f
 8000bb8:	2000009e 	.word	0x2000009e

08000bbc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000bbc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000bbe:	e003      	b.n	8000bc8 <LoopCopyDataInit>

08000bc0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000bc0:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000bc2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000bc4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000bc6:	3104      	adds	r1, #4

08000bc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000bc8:	480a      	ldr	r0, [pc, #40]	; (8000bf4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000bca:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000bcc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000bce:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000bd0:	d3f6      	bcc.n	8000bc0 <CopyDataInit>
  ldr r2, =_sbss
 8000bd2:	4a0a      	ldr	r2, [pc, #40]	; (8000bfc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000bd4:	e002      	b.n	8000bdc <LoopFillZerobss>

08000bd6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000bd6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000bd8:	f842 3b04 	str.w	r3, [r2], #4

08000bdc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000bdc:	4b08      	ldr	r3, [pc, #32]	; (8000c00 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000bde:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000be0:	d3f9      	bcc.n	8000bd6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000be2:	f7ff fd7b 	bl	80006dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000be6:	f001 faff 	bl	80021e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bea:	f7ff fb65 	bl	80002b8 <main>
  bx lr
 8000bee:	4770      	bx	lr
  ldr r3, =_sidata
 8000bf0:	08002bd0 	.word	0x08002bd0
  ldr r0, =_sdata
 8000bf4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000bf8:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000bfc:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000c00:	20000560 	.word	0x20000560

08000c04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c04:	e7fe      	b.n	8000c04 <ADC1_2_IRQHandler>
	...

08000c08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c08:	b510      	push	{r4, lr}
 8000c0a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c0c:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <HAL_InitTick+0x40>)
 8000c0e:	7818      	ldrb	r0, [r3, #0]
 8000c10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c14:	fbb3 f3f0 	udiv	r3, r3, r0
 8000c18:	4a0c      	ldr	r2, [pc, #48]	; (8000c4c <HAL_InitTick+0x44>)
 8000c1a:	6810      	ldr	r0, [r2, #0]
 8000c1c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c20:	f000 f8a2 	bl	8000d68 <HAL_SYSTICK_Config>
 8000c24:	b968      	cbnz	r0, 8000c42 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c26:	2c0f      	cmp	r4, #15
 8000c28:	d901      	bls.n	8000c2e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000c2a:	2001      	movs	r0, #1
 8000c2c:	e00a      	b.n	8000c44 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	4621      	mov	r1, r4
 8000c32:	f04f 30ff 	mov.w	r0, #4294967295
 8000c36:	f000 f857 	bl	8000ce8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c3a:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <HAL_InitTick+0x48>)
 8000c3c:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000c3e:	2000      	movs	r0, #0
 8000c40:	e000      	b.n	8000c44 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000c42:	2001      	movs	r0, #1
}
 8000c44:	bd10      	pop	{r4, pc}
 8000c46:	bf00      	nop
 8000c48:	20000004 	.word	0x20000004
 8000c4c:	20000000 	.word	0x20000000
 8000c50:	20000008 	.word	0x20000008

08000c54 <HAL_Init>:
{
 8000c54:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c56:	4a07      	ldr	r2, [pc, #28]	; (8000c74 <HAL_Init+0x20>)
 8000c58:	6813      	ldr	r3, [r2, #0]
 8000c5a:	f043 0310 	orr.w	r3, r3, #16
 8000c5e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c60:	2003      	movs	r0, #3
 8000c62:	f000 f82f 	bl	8000cc4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c66:	2000      	movs	r0, #0
 8000c68:	f7ff ffce 	bl	8000c08 <HAL_InitTick>
  HAL_MspInit();
 8000c6c:	f7ff fcde 	bl	800062c <HAL_MspInit>
}
 8000c70:	2000      	movs	r0, #0
 8000c72:	bd08      	pop	{r3, pc}
 8000c74:	40022000 	.word	0x40022000

08000c78 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000c78:	4a03      	ldr	r2, [pc, #12]	; (8000c88 <HAL_IncTick+0x10>)
 8000c7a:	6811      	ldr	r1, [r2, #0]
 8000c7c:	4b03      	ldr	r3, [pc, #12]	; (8000c8c <HAL_IncTick+0x14>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	440b      	add	r3, r1
 8000c82:	6013      	str	r3, [r2, #0]
}
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	2000054c 	.word	0x2000054c
 8000c8c:	20000004 	.word	0x20000004

08000c90 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000c90:	4b01      	ldr	r3, [pc, #4]	; (8000c98 <HAL_GetTick+0x8>)
 8000c92:	6818      	ldr	r0, [r3, #0]
}
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	2000054c 	.word	0x2000054c

08000c9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c9c:	b538      	push	{r3, r4, r5, lr}
 8000c9e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000ca0:	f7ff fff6 	bl	8000c90 <HAL_GetTick>
 8000ca4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ca6:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000caa:	d002      	beq.n	8000cb2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cac:	4b04      	ldr	r3, [pc, #16]	; (8000cc0 <HAL_Delay+0x24>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cb2:	f7ff ffed 	bl	8000c90 <HAL_GetTick>
 8000cb6:	1b40      	subs	r0, r0, r5
 8000cb8:	42a0      	cmp	r0, r4
 8000cba:	d3fa      	bcc.n	8000cb2 <HAL_Delay+0x16>
  {
  }
}
 8000cbc:	bd38      	pop	{r3, r4, r5, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000004 	.word	0x20000004

08000cc4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cc4:	4907      	ldr	r1, [pc, #28]	; (8000ce4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000cc6:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000cc8:	0203      	lsls	r3, r0, #8
 8000cca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000cd2:	0412      	lsls	r2, r2, #16
 8000cd4:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000ce0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000ce2:	4770      	bx	lr
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ce8:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cea:	4b16      	ldr	r3, [pc, #88]	; (8000d44 <HAL_NVIC_SetPriority+0x5c>)
 8000cec:	68db      	ldr	r3, [r3, #12]
 8000cee:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cf2:	f1c3 0407 	rsb	r4, r3, #7
 8000cf6:	2c04      	cmp	r4, #4
 8000cf8:	bf28      	it	cs
 8000cfa:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cfc:	1d1d      	adds	r5, r3, #4
 8000cfe:	2d06      	cmp	r5, #6
 8000d00:	bf8c      	ite	hi
 8000d02:	3b03      	subhi	r3, #3
 8000d04:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d06:	f04f 35ff 	mov.w	r5, #4294967295
 8000d0a:	fa05 f404 	lsl.w	r4, r5, r4
 8000d0e:	ea21 0104 	bic.w	r1, r1, r4
 8000d12:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d14:	fa05 f303 	lsl.w	r3, r5, r3
 8000d18:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d1c:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8000d1e:	2800      	cmp	r0, #0
 8000d20:	db09      	blt.n	8000d36 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d22:	0109      	lsls	r1, r1, #4
 8000d24:	b2c9      	uxtb	r1, r1
 8000d26:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000d2a:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000d2e:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000d32:	bc30      	pop	{r4, r5}
 8000d34:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d36:	f000 000f 	and.w	r0, r0, #15
 8000d3a:	0109      	lsls	r1, r1, #4
 8000d3c:	b2c9      	uxtb	r1, r1
 8000d3e:	4b02      	ldr	r3, [pc, #8]	; (8000d48 <HAL_NVIC_SetPriority+0x60>)
 8000d40:	5419      	strb	r1, [r3, r0]
 8000d42:	e7f6      	b.n	8000d32 <HAL_NVIC_SetPriority+0x4a>
 8000d44:	e000ed00 	.word	0xe000ed00
 8000d48:	e000ed14 	.word	0xe000ed14

08000d4c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000d4c:	2800      	cmp	r0, #0
 8000d4e:	db08      	blt.n	8000d62 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d50:	0942      	lsrs	r2, r0, #5
 8000d52:	f000 001f 	and.w	r0, r0, #31
 8000d56:	2301      	movs	r3, #1
 8000d58:	fa03 f000 	lsl.w	r0, r3, r0
 8000d5c:	4b01      	ldr	r3, [pc, #4]	; (8000d64 <HAL_NVIC_EnableIRQ+0x18>)
 8000d5e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000d62:	4770      	bx	lr
 8000d64:	e000e100 	.word	0xe000e100

08000d68 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d68:	3801      	subs	r0, #1
 8000d6a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d6e:	d20a      	bcs.n	8000d86 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d70:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <HAL_SYSTICK_Config+0x24>)
 8000d72:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d74:	4a06      	ldr	r2, [pc, #24]	; (8000d90 <HAL_SYSTICK_Config+0x28>)
 8000d76:	21f0      	movs	r1, #240	; 0xf0
 8000d78:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d7c:	2000      	movs	r0, #0
 8000d7e:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d80:	2207      	movs	r2, #7
 8000d82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d84:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000d86:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	e000e010 	.word	0xe000e010
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000d94:	b360      	cbz	r0, 8000df0 <HAL_DMA_Init+0x5c>
{
 8000d96:	b410      	push	{r4}
 8000d98:	4602      	mov	r2, r0
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000d9a:	6801      	ldr	r1, [r0, #0]
 8000d9c:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <HAL_DMA_Init+0x60>)
 8000d9e:	440b      	add	r3, r1
 8000da0:	4815      	ldr	r0, [pc, #84]	; (8000df8 <HAL_DMA_Init+0x64>)
 8000da2:	fba0 0303 	umull	r0, r3, r0, r3
 8000da6:	091b      	lsrs	r3, r3, #4
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	6413      	str	r3, [r2, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000dac:	4b13      	ldr	r3, [pc, #76]	; (8000dfc <HAL_DMA_Init+0x68>)
 8000dae:	63d3      	str	r3, [r2, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000db0:	2302      	movs	r3, #2
 8000db2:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000db6:	6808      	ldr	r0, [r1, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000db8:	f420 507f 	bic.w	r0, r0, #16320	; 0x3fc0
 8000dbc:	f020 0030 	bic.w	r0, r0, #48	; 0x30
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000dc0:	6853      	ldr	r3, [r2, #4]
 8000dc2:	6894      	ldr	r4, [r2, #8]
 8000dc4:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dc6:	68d4      	ldr	r4, [r2, #12]
 8000dc8:	4323      	orrs	r3, r4
 8000dca:	6914      	ldr	r4, [r2, #16]
 8000dcc:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dce:	6954      	ldr	r4, [r2, #20]
 8000dd0:	4323      	orrs	r3, r4
 8000dd2:	6994      	ldr	r4, [r2, #24]
 8000dd4:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8000dd6:	69d4      	ldr	r4, [r2, #28]
 8000dd8:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8000dda:	4303      	orrs	r3, r0

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000ddc:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000dde:	2000      	movs	r0, #0
 8000de0:	6390      	str	r0, [r2, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000de2:	2301      	movs	r3, #1
 8000de4:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000de8:	f882 0020 	strb.w	r0, [r2, #32]

  return HAL_OK;
}
 8000dec:	bc10      	pop	{r4}
 8000dee:	4770      	bx	lr
    return HAL_ERROR;
 8000df0:	2001      	movs	r0, #1
}
 8000df2:	4770      	bx	lr
 8000df4:	bffdfff8 	.word	0xbffdfff8
 8000df8:	cccccccd 	.word	0xcccccccd
 8000dfc:	40020000 	.word	0x40020000

08000e00 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e00:	b470      	push	{r4, r5, r6}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000e02:	f890 4020 	ldrb.w	r4, [r0, #32]
 8000e06:	2c01      	cmp	r4, #1
 8000e08:	d042      	beq.n	8000e90 <HAL_DMA_Start_IT+0x90>
 8000e0a:	2401      	movs	r4, #1
 8000e0c:	f880 4020 	strb.w	r4, [r0, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000e10:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
 8000e14:	2c01      	cmp	r4, #1
 8000e16:	d005      	beq.n	8000e24 <HAL_DMA_Start_IT+0x24>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000e18:	2300      	movs	r3, #0
 8000e1a:	f880 3020 	strb.w	r3, [r0, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000e1e:	2002      	movs	r0, #2
  }    
  return status;
}
 8000e20:	bc70      	pop	{r4, r5, r6}
 8000e22:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e24:	2402      	movs	r4, #2
 8000e26:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e2a:	2400      	movs	r4, #0
 8000e2c:	6384      	str	r4, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8000e2e:	6805      	ldr	r5, [r0, #0]
 8000e30:	682c      	ldr	r4, [r5, #0]
 8000e32:	f024 0401 	bic.w	r4, r4, #1
 8000e36:	602c      	str	r4, [r5, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e38:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8000e3a:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8000e3c:	2401      	movs	r4, #1
 8000e3e:	40b4      	lsls	r4, r6
 8000e40:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000e42:	6804      	ldr	r4, [r0, #0]
 8000e44:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e46:	6843      	ldr	r3, [r0, #4]
 8000e48:	2b10      	cmp	r3, #16
 8000e4a:	d011      	beq.n	8000e70 <HAL_DMA_Start_IT+0x70>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8000e4c:	6803      	ldr	r3, [r0, #0]
 8000e4e:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8000e50:	6803      	ldr	r3, [r0, #0]
 8000e52:	60da      	str	r2, [r3, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8000e54:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000e56:	b183      	cbz	r3, 8000e7a <HAL_DMA_Start_IT+0x7a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e58:	6802      	ldr	r2, [r0, #0]
 8000e5a:	6813      	ldr	r3, [r2, #0]
 8000e5c:	f043 030e 	orr.w	r3, r3, #14
 8000e60:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8000e62:	6802      	ldr	r2, [r0, #0]
 8000e64:	6813      	ldr	r3, [r2, #0]
 8000e66:	f043 0301 	orr.w	r3, r3, #1
 8000e6a:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e6c:	2000      	movs	r0, #0
 8000e6e:	e7d7      	b.n	8000e20 <HAL_DMA_Start_IT+0x20>
    hdma->Instance->CPAR = DstAddress;
 8000e70:	6803      	ldr	r3, [r0, #0]
 8000e72:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000e74:	6803      	ldr	r3, [r0, #0]
 8000e76:	60d9      	str	r1, [r3, #12]
 8000e78:	e7ec      	b.n	8000e54 <HAL_DMA_Start_IT+0x54>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e7a:	6802      	ldr	r2, [r0, #0]
 8000e7c:	6813      	ldr	r3, [r2, #0]
 8000e7e:	f023 0304 	bic.w	r3, r3, #4
 8000e82:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000e84:	6802      	ldr	r2, [r0, #0]
 8000e86:	6813      	ldr	r3, [r2, #0]
 8000e88:	f043 030a 	orr.w	r3, r3, #10
 8000e8c:	6013      	str	r3, [r2, #0]
 8000e8e:	e7e8      	b.n	8000e62 <HAL_DMA_Start_IT+0x62>
  __HAL_LOCK(hdma);
 8000e90:	2002      	movs	r0, #2
 8000e92:	e7c5      	b.n	8000e20 <HAL_DMA_Start_IT+0x20>

08000e94 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e94:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	d006      	beq.n	8000eaa <HAL_DMA_Abort+0x16>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e9c:	2304      	movs	r3, #4
 8000e9e:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	f880 3020 	strb.w	r3, [r0, #32]
    return HAL_ERROR;
 8000ea6:	2001      	movs	r0, #1
 8000ea8:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000eaa:	6802      	ldr	r2, [r0, #0]
 8000eac:	6813      	ldr	r3, [r2, #0]
 8000eae:	f023 030e 	bic.w	r3, r3, #14
 8000eb2:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8000eb4:	6802      	ldr	r2, [r0, #0]
 8000eb6:	6813      	ldr	r3, [r2, #0]
 8000eb8:	f023 0301 	bic.w	r3, r3, #1
 8000ebc:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000ebe:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	604b      	str	r3, [r1, #4]
  hdma->State = HAL_DMA_STATE_READY;
 8000eca:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  __HAL_UNLOCK(hdma);      
 8000ece:	2300      	movs	r3, #0
 8000ed0:	f880 3020 	strb.w	r3, [r0, #32]
  return status; 
 8000ed4:	4618      	mov	r0, r3
}
 8000ed6:	4770      	bx	lr

08000ed8 <HAL_DMA_Abort_IT>:
{  
 8000ed8:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000eda:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8000ede:	2b02      	cmp	r3, #2
 8000ee0:	d003      	beq.n	8000eea <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ee2:	2304      	movs	r3, #4
 8000ee4:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8000ee6:	2001      	movs	r0, #1
}
 8000ee8:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000eea:	6802      	ldr	r2, [r0, #0]
 8000eec:	6813      	ldr	r3, [r2, #0]
 8000eee:	f023 030e 	bic.w	r3, r3, #14
 8000ef2:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8000ef4:	6802      	ldr	r2, [r0, #0]
 8000ef6:	6813      	ldr	r3, [r2, #0]
 8000ef8:	f023 0301 	bic.w	r3, r3, #1
 8000efc:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000efe:	6803      	ldr	r3, [r0, #0]
 8000f00:	4a18      	ldr	r2, [pc, #96]	; (8000f64 <HAL_DMA_Abort_IT+0x8c>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d013      	beq.n	8000f2e <HAL_DMA_Abort_IT+0x56>
 8000f06:	3214      	adds	r2, #20
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d01e      	beq.n	8000f4a <HAL_DMA_Abort_IT+0x72>
 8000f0c:	3214      	adds	r2, #20
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d01d      	beq.n	8000f4e <HAL_DMA_Abort_IT+0x76>
 8000f12:	3214      	adds	r2, #20
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d01d      	beq.n	8000f54 <HAL_DMA_Abort_IT+0x7c>
 8000f18:	3214      	adds	r2, #20
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d01d      	beq.n	8000f5a <HAL_DMA_Abort_IT+0x82>
 8000f1e:	3214      	adds	r2, #20
 8000f20:	4293      	cmp	r3, r2
 8000f22:	bf0c      	ite	eq
 8000f24:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8000f28:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8000f2c:	e000      	b.n	8000f30 <HAL_DMA_Abort_IT+0x58>
 8000f2e:	2301      	movs	r3, #1
 8000f30:	4a0d      	ldr	r2, [pc, #52]	; (8000f68 <HAL_DMA_Abort_IT+0x90>)
 8000f32:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000f34:	2301      	movs	r3, #1
 8000f36:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8000f40:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000f42:	b16b      	cbz	r3, 8000f60 <HAL_DMA_Abort_IT+0x88>
      hdma->XferAbortCallback(hdma);
 8000f44:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000f46:	2000      	movs	r0, #0
 8000f48:	e7ce      	b.n	8000ee8 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000f4a:	2310      	movs	r3, #16
 8000f4c:	e7f0      	b.n	8000f30 <HAL_DMA_Abort_IT+0x58>
 8000f4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f52:	e7ed      	b.n	8000f30 <HAL_DMA_Abort_IT+0x58>
 8000f54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f58:	e7ea      	b.n	8000f30 <HAL_DMA_Abort_IT+0x58>
 8000f5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f5e:	e7e7      	b.n	8000f30 <HAL_DMA_Abort_IT+0x58>
  HAL_StatusTypeDef status = HAL_OK;
 8000f60:	2000      	movs	r0, #0
 8000f62:	e7c1      	b.n	8000ee8 <HAL_DMA_Abort_IT+0x10>
 8000f64:	40020008 	.word	0x40020008
 8000f68:	40020000 	.word	0x40020000

08000f6c <HAL_DMA_IRQHandler>:
{
 8000f6c:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000f6e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8000f70:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000f72:	6804      	ldr	r4, [r0, #0]
 8000f74:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000f76:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8000f78:	2304      	movs	r3, #4
 8000f7a:	408b      	lsls	r3, r1
 8000f7c:	4213      	tst	r3, r2
 8000f7e:	d034      	beq.n	8000fea <HAL_DMA_IRQHandler+0x7e>
 8000f80:	f015 0f04 	tst.w	r5, #4
 8000f84:	d031      	beq.n	8000fea <HAL_DMA_IRQHandler+0x7e>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f86:	6823      	ldr	r3, [r4, #0]
 8000f88:	f013 0f20 	tst.w	r3, #32
 8000f8c:	d103      	bne.n	8000f96 <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f8e:	6823      	ldr	r3, [r4, #0]
 8000f90:	f023 0304 	bic.w	r3, r3, #4
 8000f94:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000f96:	6803      	ldr	r3, [r0, #0]
 8000f98:	4a42      	ldr	r2, [pc, #264]	; (80010a4 <HAL_DMA_IRQHandler+0x138>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d013      	beq.n	8000fc6 <HAL_DMA_IRQHandler+0x5a>
 8000f9e:	3214      	adds	r2, #20
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d017      	beq.n	8000fd4 <HAL_DMA_IRQHandler+0x68>
 8000fa4:	3214      	adds	r2, #20
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d016      	beq.n	8000fd8 <HAL_DMA_IRQHandler+0x6c>
 8000faa:	3214      	adds	r2, #20
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d016      	beq.n	8000fde <HAL_DMA_IRQHandler+0x72>
 8000fb0:	3214      	adds	r2, #20
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d016      	beq.n	8000fe4 <HAL_DMA_IRQHandler+0x78>
 8000fb6:	3214      	adds	r2, #20
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	bf0c      	ite	eq
 8000fbc:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8000fc0:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8000fc4:	e000      	b.n	8000fc8 <HAL_DMA_IRQHandler+0x5c>
 8000fc6:	2304      	movs	r3, #4
 8000fc8:	4a37      	ldr	r2, [pc, #220]	; (80010a8 <HAL_DMA_IRQHandler+0x13c>)
 8000fca:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8000fcc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000fce:	b103      	cbz	r3, 8000fd2 <HAL_DMA_IRQHandler+0x66>
      hdma->XferHalfCpltCallback(hdma);
 8000fd0:	4798      	blx	r3
}
 8000fd2:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000fd4:	2340      	movs	r3, #64	; 0x40
 8000fd6:	e7f7      	b.n	8000fc8 <HAL_DMA_IRQHandler+0x5c>
 8000fd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fdc:	e7f4      	b.n	8000fc8 <HAL_DMA_IRQHandler+0x5c>
 8000fde:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fe2:	e7f1      	b.n	8000fc8 <HAL_DMA_IRQHandler+0x5c>
 8000fe4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000fe8:	e7ee      	b.n	8000fc8 <HAL_DMA_IRQHandler+0x5c>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000fea:	2302      	movs	r3, #2
 8000fec:	408b      	lsls	r3, r1
 8000fee:	4213      	tst	r3, r2
 8000ff0:	d03b      	beq.n	800106a <HAL_DMA_IRQHandler+0xfe>
 8000ff2:	f015 0f02 	tst.w	r5, #2
 8000ff6:	d038      	beq.n	800106a <HAL_DMA_IRQHandler+0xfe>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ff8:	6823      	ldr	r3, [r4, #0]
 8000ffa:	f013 0f20 	tst.w	r3, #32
 8000ffe:	d106      	bne.n	800100e <HAL_DMA_IRQHandler+0xa2>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001000:	6823      	ldr	r3, [r4, #0]
 8001002:	f023 030a 	bic.w	r3, r3, #10
 8001006:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001008:	2301      	movs	r3, #1
 800100a:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800100e:	6803      	ldr	r3, [r0, #0]
 8001010:	4a24      	ldr	r2, [pc, #144]	; (80010a4 <HAL_DMA_IRQHandler+0x138>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d013      	beq.n	800103e <HAL_DMA_IRQHandler+0xd2>
 8001016:	3214      	adds	r2, #20
 8001018:	4293      	cmp	r3, r2
 800101a:	d01b      	beq.n	8001054 <HAL_DMA_IRQHandler+0xe8>
 800101c:	3214      	adds	r2, #20
 800101e:	4293      	cmp	r3, r2
 8001020:	d01a      	beq.n	8001058 <HAL_DMA_IRQHandler+0xec>
 8001022:	3214      	adds	r2, #20
 8001024:	4293      	cmp	r3, r2
 8001026:	d01a      	beq.n	800105e <HAL_DMA_IRQHandler+0xf2>
 8001028:	3214      	adds	r2, #20
 800102a:	4293      	cmp	r3, r2
 800102c:	d01a      	beq.n	8001064 <HAL_DMA_IRQHandler+0xf8>
 800102e:	3214      	adds	r2, #20
 8001030:	4293      	cmp	r3, r2
 8001032:	bf0c      	ite	eq
 8001034:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8001038:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 800103c:	e000      	b.n	8001040 <HAL_DMA_IRQHandler+0xd4>
 800103e:	2302      	movs	r3, #2
 8001040:	4a19      	ldr	r2, [pc, #100]	; (80010a8 <HAL_DMA_IRQHandler+0x13c>)
 8001042:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8001044:	2300      	movs	r3, #0
 8001046:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 800104a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800104c:	2b00      	cmp	r3, #0
 800104e:	d0c0      	beq.n	8000fd2 <HAL_DMA_IRQHandler+0x66>
      hdma->XferCpltCallback(hdma);
 8001050:	4798      	blx	r3
 8001052:	e7be      	b.n	8000fd2 <HAL_DMA_IRQHandler+0x66>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001054:	2320      	movs	r3, #32
 8001056:	e7f3      	b.n	8001040 <HAL_DMA_IRQHandler+0xd4>
 8001058:	f44f 7300 	mov.w	r3, #512	; 0x200
 800105c:	e7f0      	b.n	8001040 <HAL_DMA_IRQHandler+0xd4>
 800105e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001062:	e7ed      	b.n	8001040 <HAL_DMA_IRQHandler+0xd4>
 8001064:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001068:	e7ea      	b.n	8001040 <HAL_DMA_IRQHandler+0xd4>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800106a:	2308      	movs	r3, #8
 800106c:	fa03 f101 	lsl.w	r1, r3, r1
 8001070:	4211      	tst	r1, r2
 8001072:	d0ae      	beq.n	8000fd2 <HAL_DMA_IRQHandler+0x66>
 8001074:	f015 0f08 	tst.w	r5, #8
 8001078:	d0ab      	beq.n	8000fd2 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800107a:	6823      	ldr	r3, [r4, #0]
 800107c:	f023 030e 	bic.w	r3, r3, #14
 8001080:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001082:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001084:	2301      	movs	r3, #1
 8001086:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001088:	fa03 f202 	lsl.w	r2, r3, r2
 800108c:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800108e:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8001090:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001094:	2300      	movs	r3, #0
 8001096:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 800109a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800109c:	2b00      	cmp	r3, #0
 800109e:	d098      	beq.n	8000fd2 <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 80010a0:	4798      	blx	r3
  return;
 80010a2:	e796      	b.n	8000fd2 <HAL_DMA_IRQHandler+0x66>
 80010a4:	40020008 	.word	0x40020008
 80010a8:	40020000 	.word	0x40020000

080010ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010b0:	b083      	sub	sp, #12
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010b2:	680f      	ldr	r7, [r1, #0]
 80010b4:	2f00      	cmp	r7, #0
 80010b6:	f000 80f8 	beq.w	80012aa <HAL_GPIO_Init+0x1fe>
  uint32_t config = 0x00u;
 80010ba:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 80010bc:	4613      	mov	r3, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010be:	f8df c200 	ldr.w	ip, [pc, #512]	; 80012c0 <HAL_GPIO_Init+0x214>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010c2:	4d7b      	ldr	r5, [pc, #492]	; (80012b0 <HAL_GPIO_Init+0x204>)
      switch (GPIO_Init->Mode)
 80010c4:	4e7b      	ldr	r6, [pc, #492]	; (80012b4 <HAL_GPIO_Init+0x208>)
 80010c6:	f8df e1fc 	ldr.w	lr, [pc, #508]	; 80012c4 <HAL_GPIO_Init+0x218>
 80010ca:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 80012c8 <HAL_GPIO_Init+0x21c>
 80010ce:	e09a      	b.n	8001206 <HAL_GPIO_Init+0x15a>
 80010d0:	2200      	movs	r2, #0
 80010d2:	e01e      	b.n	8001112 <HAL_GPIO_Init+0x66>
 80010d4:	42b4      	cmp	r4, r6
 80010d6:	d00c      	beq.n	80010f2 <HAL_GPIO_Init+0x46>
 80010d8:	d904      	bls.n	80010e4 <HAL_GPIO_Init+0x38>
 80010da:	4574      	cmp	r4, lr
 80010dc:	d009      	beq.n	80010f2 <HAL_GPIO_Init+0x46>
 80010de:	4544      	cmp	r4, r8
 80010e0:	d007      	beq.n	80010f2 <HAL_GPIO_Init+0x46>
 80010e2:	e016      	b.n	8001112 <HAL_GPIO_Init+0x66>
 80010e4:	4f74      	ldr	r7, [pc, #464]	; (80012b8 <HAL_GPIO_Init+0x20c>)
 80010e6:	42bc      	cmp	r4, r7
 80010e8:	d003      	beq.n	80010f2 <HAL_GPIO_Init+0x46>
 80010ea:	f507 2770 	add.w	r7, r7, #983040	; 0xf0000
 80010ee:	42bc      	cmp	r4, r7
 80010f0:	d10b      	bne.n	800110a <HAL_GPIO_Init+0x5e>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010f2:	688a      	ldr	r2, [r1, #8]
 80010f4:	2a00      	cmp	r2, #0
 80010f6:	f000 80ca 	beq.w	800128e <HAL_GPIO_Init+0x1e2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010fa:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80010fc:	bf0c      	ite	eq
 80010fe:	f8c0 9010 	streq.w	r9, [r0, #16]
            GPIOx->BRR = ioposition;
 8001102:	f8c0 9014 	strne.w	r9, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001106:	2208      	movs	r2, #8
 8001108:	e003      	b.n	8001112 <HAL_GPIO_Init+0x66>
      switch (GPIO_Init->Mode)
 800110a:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 800110e:	42bc      	cmp	r4, r7
 8001110:	d0ef      	beq.n	80010f2 <HAL_GPIO_Init+0x46>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001112:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8001116:	f200 80bc 	bhi.w	8001292 <HAL_GPIO_Init+0x1e6>
 800111a:	4607      	mov	r7, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800111c:	ea4f 0983 	mov.w	r9, r3, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001120:	683c      	ldr	r4, [r7, #0]
 8001122:	f04f 0b0f 	mov.w	fp, #15
 8001126:	fa0b fb09 	lsl.w	fp, fp, r9
 800112a:	ea24 040b 	bic.w	r4, r4, fp
 800112e:	fa02 f909 	lsl.w	r9, r2, r9
 8001132:	ea44 0409 	orr.w	r4, r4, r9
 8001136:	603c      	str	r4, [r7, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001138:	684c      	ldr	r4, [r1, #4]
 800113a:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 800113e:	d05d      	beq.n	80011fc <HAL_GPIO_Init+0x150>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001140:	f8dc 4018 	ldr.w	r4, [ip, #24]
 8001144:	f044 0401 	orr.w	r4, r4, #1
 8001148:	f8cc 4018 	str.w	r4, [ip, #24]
 800114c:	f8dc 4018 	ldr.w	r4, [ip, #24]
 8001150:	f004 0401 	and.w	r4, r4, #1
 8001154:	9401      	str	r4, [sp, #4]
 8001156:	9c01      	ldr	r4, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8001158:	f023 0403 	bic.w	r4, r3, #3
 800115c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8001160:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 8001164:	f8d4 9008 	ldr.w	r9, [r4, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001168:	f003 0703 	and.w	r7, r3, #3
 800116c:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 8001170:	270f      	movs	r7, #15
 8001172:	fa07 f70b 	lsl.w	r7, r7, fp
 8001176:	ea29 0907 	bic.w	r9, r9, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800117a:	4f50      	ldr	r7, [pc, #320]	; (80012bc <HAL_GPIO_Init+0x210>)
 800117c:	42b8      	cmp	r0, r7
 800117e:	f000 808e 	beq.w	800129e <HAL_GPIO_Init+0x1f2>
 8001182:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001186:	42b8      	cmp	r0, r7
 8001188:	f000 808b 	beq.w	80012a2 <HAL_GPIO_Init+0x1f6>
 800118c:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001190:	42b8      	cmp	r0, r7
 8001192:	f000 8088 	beq.w	80012a6 <HAL_GPIO_Init+0x1fa>
 8001196:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800119a:	42b8      	cmp	r0, r7
 800119c:	bf0c      	ite	eq
 800119e:	2703      	moveq	r7, #3
 80011a0:	2704      	movne	r7, #4
 80011a2:	fa07 f70b 	lsl.w	r7, r7, fp
 80011a6:	ea47 0709 	orr.w	r7, r7, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80011aa:	60a7      	str	r7, [r4, #8]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011ac:	684c      	ldr	r4, [r1, #4]
 80011ae:	f414 3f80 	tst.w	r4, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80011b2:	682c      	ldr	r4, [r5, #0]
 80011b4:	bf14      	ite	ne
 80011b6:	ea44 040a 	orrne.w	r4, r4, sl
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011ba:	ea24 040a 	biceq.w	r4, r4, sl
 80011be:	602c      	str	r4, [r5, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011c0:	684c      	ldr	r4, [r1, #4]
 80011c2:	f414 3f00 	tst.w	r4, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80011c6:	686c      	ldr	r4, [r5, #4]
 80011c8:	bf14      	ite	ne
 80011ca:	ea44 040a 	orrne.w	r4, r4, sl
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011ce:	ea24 040a 	biceq.w	r4, r4, sl
 80011d2:	606c      	str	r4, [r5, #4]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011d4:	684c      	ldr	r4, [r1, #4]
 80011d6:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80011da:	68ac      	ldr	r4, [r5, #8]
 80011dc:	bf14      	ite	ne
 80011de:	ea44 040a 	orrne.w	r4, r4, sl
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011e2:	ea24 040a 	biceq.w	r4, r4, sl
 80011e6:	60ac      	str	r4, [r5, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011e8:	684c      	ldr	r4, [r1, #4]
 80011ea:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80011ee:	68ec      	ldr	r4, [r5, #12]
 80011f0:	bf14      	ite	ne
 80011f2:	ea44 040a 	orrne.w	r4, r4, sl
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011f6:	ea24 040a 	biceq.w	r4, r4, sl
 80011fa:	60ec      	str	r4, [r5, #12]
        }
      }
    }

	position++;
 80011fc:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011fe:	680f      	ldr	r7, [r1, #0]
 8001200:	fa37 f403 	lsrs.w	r4, r7, r3
 8001204:	d051      	beq.n	80012aa <HAL_GPIO_Init+0x1fe>
    ioposition = (0x01uL << position);
 8001206:	f04f 0901 	mov.w	r9, #1
 800120a:	fa09 f903 	lsl.w	r9, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800120e:	ea09 0a07 	and.w	sl, r9, r7
    if (iocurrent == ioposition)
 8001212:	ea39 0407 	bics.w	r4, r9, r7
 8001216:	d1f1      	bne.n	80011fc <HAL_GPIO_Init+0x150>
      switch (GPIO_Init->Mode)
 8001218:	684c      	ldr	r4, [r1, #4]
 800121a:	2c12      	cmp	r4, #18
 800121c:	f63f af5a 	bhi.w	80010d4 <HAL_GPIO_Init+0x28>
 8001220:	2c12      	cmp	r4, #18
 8001222:	f63f af76 	bhi.w	8001112 <HAL_GPIO_Init+0x66>
 8001226:	a701      	add	r7, pc, #4	; (adr r7, 800122c <HAL_GPIO_Init+0x180>)
 8001228:	f857 f024 	ldr.w	pc, [r7, r4, lsl #2]
 800122c:	080010f3 	.word	0x080010f3
 8001230:	08001279 	.word	0x08001279
 8001234:	08001283 	.word	0x08001283
 8001238:	080010d1 	.word	0x080010d1
 800123c:	08001113 	.word	0x08001113
 8001240:	08001113 	.word	0x08001113
 8001244:	08001113 	.word	0x08001113
 8001248:	08001113 	.word	0x08001113
 800124c:	08001113 	.word	0x08001113
 8001250:	08001113 	.word	0x08001113
 8001254:	08001113 	.word	0x08001113
 8001258:	08001113 	.word	0x08001113
 800125c:	08001113 	.word	0x08001113
 8001260:	08001113 	.word	0x08001113
 8001264:	08001113 	.word	0x08001113
 8001268:	08001113 	.word	0x08001113
 800126c:	08001113 	.word	0x08001113
 8001270:	0800127d 	.word	0x0800127d
 8001274:	08001289 	.word	0x08001289
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001278:	68ca      	ldr	r2, [r1, #12]
          break;
 800127a:	e74a      	b.n	8001112 <HAL_GPIO_Init+0x66>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800127c:	68ca      	ldr	r2, [r1, #12]
 800127e:	3204      	adds	r2, #4
          break;
 8001280:	e747      	b.n	8001112 <HAL_GPIO_Init+0x66>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001282:	68ca      	ldr	r2, [r1, #12]
 8001284:	3208      	adds	r2, #8
          break;
 8001286:	e744      	b.n	8001112 <HAL_GPIO_Init+0x66>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001288:	68ca      	ldr	r2, [r1, #12]
 800128a:	320c      	adds	r2, #12
          break;
 800128c:	e741      	b.n	8001112 <HAL_GPIO_Init+0x66>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800128e:	2204      	movs	r2, #4
 8001290:	e73f      	b.n	8001112 <HAL_GPIO_Init+0x66>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001292:	1d07      	adds	r7, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001294:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8001298:	f1a9 0920 	sub.w	r9, r9, #32
 800129c:	e740      	b.n	8001120 <HAL_GPIO_Init+0x74>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800129e:	2700      	movs	r7, #0
 80012a0:	e77f      	b.n	80011a2 <HAL_GPIO_Init+0xf6>
 80012a2:	2701      	movs	r7, #1
 80012a4:	e77d      	b.n	80011a2 <HAL_GPIO_Init+0xf6>
 80012a6:	2702      	movs	r7, #2
 80012a8:	e77b      	b.n	80011a2 <HAL_GPIO_Init+0xf6>
  }
}
 80012aa:	b003      	add	sp, #12
 80012ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012b0:	40010400 	.word	0x40010400
 80012b4:	10220000 	.word	0x10220000
 80012b8:	10120000 	.word	0x10120000
 80012bc:	40010800 	.word	0x40010800
 80012c0:	40021000 	.word	0x40021000
 80012c4:	10310000 	.word	0x10310000
 80012c8:	10320000 	.word	0x10320000

080012cc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012cc:	6883      	ldr	r3, [r0, #8]
 80012ce:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80012d0:	bf14      	ite	ne
 80012d2:	2001      	movne	r0, #1
 80012d4:	2000      	moveq	r0, #0
 80012d6:	4770      	bx	lr

080012d8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012d8:	b10a      	cbz	r2, 80012de <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012da:	6101      	str	r1, [r0, #16]
 80012dc:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012de:	0409      	lsls	r1, r1, #16
 80012e0:	6101      	str	r1, [r0, #16]
  }
}
 80012e2:	4770      	bx	lr

080012e4 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80012e4:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012e6:	ea01 0203 	and.w	r2, r1, r3
 80012ea:	ea21 0103 	bic.w	r1, r1, r3
 80012ee:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80012f2:	6101      	str	r1, [r0, #16]
}
 80012f4:	4770      	bx	lr

080012f6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80012f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012f8:	b087      	sub	sp, #28
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80012fa:	2800      	cmp	r0, #0
 80012fc:	d07a      	beq.n	80013f4 <HAL_PCD_Init+0xfe>
 80012fe:	4605      	mov	r5, r0

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001300:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 8001304:	b1db      	cbz	r3, 800133e <HAL_PCD_Init+0x48>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001306:	2303      	movs	r3, #3
 8001308:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800130c:	6828      	ldr	r0, [r5, #0]
 800130e:	f000 ff4a 	bl	80021a6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001312:	462c      	mov	r4, r5
 8001314:	f854 7b10 	ldr.w	r7, [r4], #16
 8001318:	466e      	mov	r6, sp
 800131a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800131c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800131e:	6823      	ldr	r3, [r4, #0]
 8001320:	6033      	str	r3, [r6, #0]
 8001322:	1d2b      	adds	r3, r5, #4
 8001324:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001326:	4638      	mov	r0, r7
 8001328:	f000 ff36 	bl	8002198 <USB_CoreInit>
 800132c:	4604      	mov	r4, r0
 800132e:	b158      	cbz	r0, 8001348 <HAL_PCD_Init+0x52>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001330:	2302      	movs	r3, #2
 8001332:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
    return HAL_ERROR;
 8001336:	2401      	movs	r4, #1
  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8001338:	4620      	mov	r0, r4
 800133a:	b007      	add	sp, #28
 800133c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 800133e:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 8001342:	f7ff fac9 	bl	80008d8 <HAL_PCD_MspInit>
 8001346:	e7de      	b.n	8001306 <HAL_PCD_Init+0x10>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001348:	2100      	movs	r1, #0
 800134a:	6828      	ldr	r0, [r5, #0]
 800134c:	f000 ff35 	bl	80021ba <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001350:	6868      	ldr	r0, [r5, #4]
 8001352:	b388      	cbz	r0, 80013b8 <HAL_PCD_Init+0xc2>
 8001354:	4623      	mov	r3, r4
    hpcd->IN_ep[i].is_in = 1U;
 8001356:	2601      	movs	r6, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001358:	2100      	movs	r1, #0
    hpcd->IN_ep[i].is_in = 1U;
 800135a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800135e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8001362:	f882 6029 	strb.w	r6, [r2, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 8001366:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 800136a:	86d3      	strh	r3, [r2, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800136c:	f882 102b 	strb.w	r1, [r2, #43]	; 0x2b
    hpcd->IN_ep[i].maxpacket = 0U;
 8001370:	6391      	str	r1, [r2, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001372:	63d1      	str	r1, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 8001374:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8001378:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800137c:	6411      	str	r1, [r2, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800137e:	3301      	adds	r3, #1
 8001380:	b2db      	uxtb	r3, r3
 8001382:	4283      	cmp	r3, r0
 8001384:	d3e9      	bcc.n	800135a <HAL_PCD_Init+0x64>
    hpcd->OUT_ep[i].is_in = 0U;
 8001386:	2200      	movs	r2, #0
 8001388:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800138c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8001390:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 8001394:	f883 4168 	strb.w	r4, [r3, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001398:	f883 216b 	strb.w	r2, [r3, #363]	; 0x16b
    hpcd->OUT_ep[i].maxpacket = 0U;
 800139c:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80013a0:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    hpcd->OUT_ep[i].xfer_len = 0U;
 80013a4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80013a8:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80013ac:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013b0:	3401      	adds	r4, #1
 80013b2:	b2e4      	uxtb	r4, r4
 80013b4:	4284      	cmp	r4, r0
 80013b6:	d3e7      	bcc.n	8001388 <HAL_PCD_Init+0x92>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013b8:	462c      	mov	r4, r5
 80013ba:	f854 7b10 	ldr.w	r7, [r4], #16
 80013be:	466e      	mov	r6, sp
 80013c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013c2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80013c4:	6823      	ldr	r3, [r4, #0]
 80013c6:	6033      	str	r3, [r6, #0]
 80013c8:	1d2b      	adds	r3, r5, #4
 80013ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013cc:	4638      	mov	r0, r7
 80013ce:	f000 fef6 	bl	80021be <USB_DevInit>
 80013d2:	4604      	mov	r4, r0
 80013d4:	b120      	cbz	r0, 80013e0 <HAL_PCD_Init+0xea>
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013d6:	2302      	movs	r3, #2
 80013d8:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
    return HAL_ERROR;
 80013dc:	2401      	movs	r4, #1
 80013de:	e7ab      	b.n	8001338 <HAL_PCD_Init+0x42>
  hpcd->USB_Address = 0U;
 80013e0:	2300      	movs	r3, #0
 80013e2:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80013e6:	2301      	movs	r3, #1
 80013e8:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80013ec:	6828      	ldr	r0, [r5, #0]
 80013ee:	f000 fef9 	bl	80021e4 <USB_DevDisconnect>
  return HAL_OK;
 80013f2:	e7a1      	b.n	8001338 <HAL_PCD_Init+0x42>
    return HAL_ERROR;
 80013f4:	2401      	movs	r4, #1
 80013f6:	e79f      	b.n	8001338 <HAL_PCD_Init+0x42>

080013f8 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013f8:	2800      	cmp	r0, #0
 80013fa:	f000 8201 	beq.w	8001800 <HAL_RCC_OscConfig+0x408>
{
 80013fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001406:	6803      	ldr	r3, [r0, #0]
 8001408:	f013 0f01 	tst.w	r3, #1
 800140c:	d02c      	beq.n	8001468 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800140e:	4baa      	ldr	r3, [pc, #680]	; (80016b8 <HAL_RCC_OscConfig+0x2c0>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f003 030c 	and.w	r3, r3, #12
 8001416:	2b04      	cmp	r3, #4
 8001418:	d01d      	beq.n	8001456 <HAL_RCC_OscConfig+0x5e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800141a:	4ba7      	ldr	r3, [pc, #668]	; (80016b8 <HAL_RCC_OscConfig+0x2c0>)
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f003 030c 	and.w	r3, r3, #12
 8001422:	2b08      	cmp	r3, #8
 8001424:	d012      	beq.n	800144c <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001426:	6863      	ldr	r3, [r4, #4]
 8001428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800142c:	d041      	beq.n	80014b2 <HAL_RCC_OscConfig+0xba>
 800142e:	2b00      	cmp	r3, #0
 8001430:	d155      	bne.n	80014de <HAL_RCC_OscConfig+0xe6>
 8001432:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001436:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	e037      	b.n	80014bc <HAL_RCC_OscConfig+0xc4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800144c:	4b9a      	ldr	r3, [pc, #616]	; (80016b8 <HAL_RCC_OscConfig+0x2c0>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001454:	d0e7      	beq.n	8001426 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001456:	4b98      	ldr	r3, [pc, #608]	; (80016b8 <HAL_RCC_OscConfig+0x2c0>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800145e:	d003      	beq.n	8001468 <HAL_RCC_OscConfig+0x70>
 8001460:	6863      	ldr	r3, [r4, #4]
 8001462:	2b00      	cmp	r3, #0
 8001464:	f000 81ce 	beq.w	8001804 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001468:	6823      	ldr	r3, [r4, #0]
 800146a:	f013 0f02 	tst.w	r3, #2
 800146e:	d075      	beq.n	800155c <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001470:	4b91      	ldr	r3, [pc, #580]	; (80016b8 <HAL_RCC_OscConfig+0x2c0>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f013 0f0c 	tst.w	r3, #12
 8001478:	d05f      	beq.n	800153a <HAL_RCC_OscConfig+0x142>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800147a:	4b8f      	ldr	r3, [pc, #572]	; (80016b8 <HAL_RCC_OscConfig+0x2c0>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f003 030c 	and.w	r3, r3, #12
 8001482:	2b08      	cmp	r3, #8
 8001484:	d054      	beq.n	8001530 <HAL_RCC_OscConfig+0x138>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001486:	6923      	ldr	r3, [r4, #16]
 8001488:	2b00      	cmp	r3, #0
 800148a:	f000 8089 	beq.w	80015a0 <HAL_RCC_OscConfig+0x1a8>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800148e:	4b8b      	ldr	r3, [pc, #556]	; (80016bc <HAL_RCC_OscConfig+0x2c4>)
 8001490:	2201      	movs	r2, #1
 8001492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001494:	f7ff fbfc 	bl	8000c90 <HAL_GetTick>
 8001498:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800149a:	4e87      	ldr	r6, [pc, #540]	; (80016b8 <HAL_RCC_OscConfig+0x2c0>)
 800149c:	6833      	ldr	r3, [r6, #0]
 800149e:	f013 0f02 	tst.w	r3, #2
 80014a2:	d174      	bne.n	800158e <HAL_RCC_OscConfig+0x196>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014a4:	f7ff fbf4 	bl	8000c90 <HAL_GetTick>
 80014a8:	1b40      	subs	r0, r0, r5
 80014aa:	2802      	cmp	r0, #2
 80014ac:	d9f6      	bls.n	800149c <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_TIMEOUT;
 80014ae:	2003      	movs	r0, #3
 80014b0:	e1ad      	b.n	800180e <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014b2:	4a81      	ldr	r2, [pc, #516]	; (80016b8 <HAL_RCC_OscConfig+0x2c0>)
 80014b4:	6813      	ldr	r3, [r2, #0]
 80014b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014ba:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014bc:	6863      	ldr	r3, [r4, #4]
 80014be:	b343      	cbz	r3, 8001512 <HAL_RCC_OscConfig+0x11a>
        tickstart = HAL_GetTick();
 80014c0:	f7ff fbe6 	bl	8000c90 <HAL_GetTick>
 80014c4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014c6:	4e7c      	ldr	r6, [pc, #496]	; (80016b8 <HAL_RCC_OscConfig+0x2c0>)
 80014c8:	6833      	ldr	r3, [r6, #0]
 80014ca:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80014ce:	d1cb      	bne.n	8001468 <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014d0:	f7ff fbde 	bl	8000c90 <HAL_GetTick>
 80014d4:	1b40      	subs	r0, r0, r5
 80014d6:	2864      	cmp	r0, #100	; 0x64
 80014d8:	d9f6      	bls.n	80014c8 <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 80014da:	2003      	movs	r0, #3
 80014dc:	e197      	b.n	800180e <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014e2:	d009      	beq.n	80014f8 <HAL_RCC_OscConfig+0x100>
 80014e4:	4b74      	ldr	r3, [pc, #464]	; (80016b8 <HAL_RCC_OscConfig+0x2c0>)
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	e7e1      	b.n	80014bc <HAL_RCC_OscConfig+0xc4>
 80014f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80014fc:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	e7d4      	b.n	80014bc <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 8001512:	f7ff fbbd 	bl	8000c90 <HAL_GetTick>
 8001516:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001518:	4e67      	ldr	r6, [pc, #412]	; (80016b8 <HAL_RCC_OscConfig+0x2c0>)
 800151a:	6833      	ldr	r3, [r6, #0]
 800151c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001520:	d0a2      	beq.n	8001468 <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001522:	f7ff fbb5 	bl	8000c90 <HAL_GetTick>
 8001526:	1b40      	subs	r0, r0, r5
 8001528:	2864      	cmp	r0, #100	; 0x64
 800152a:	d9f6      	bls.n	800151a <HAL_RCC_OscConfig+0x122>
            return HAL_TIMEOUT;
 800152c:	2003      	movs	r0, #3
 800152e:	e16e      	b.n	800180e <HAL_RCC_OscConfig+0x416>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001530:	4b61      	ldr	r3, [pc, #388]	; (80016b8 <HAL_RCC_OscConfig+0x2c0>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001538:	d1a5      	bne.n	8001486 <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800153a:	4b5f      	ldr	r3, [pc, #380]	; (80016b8 <HAL_RCC_OscConfig+0x2c0>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f013 0f02 	tst.w	r3, #2
 8001542:	d003      	beq.n	800154c <HAL_RCC_OscConfig+0x154>
 8001544:	6923      	ldr	r3, [r4, #16]
 8001546:	2b01      	cmp	r3, #1
 8001548:	f040 815e 	bne.w	8001808 <HAL_RCC_OscConfig+0x410>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800154c:	4a5a      	ldr	r2, [pc, #360]	; (80016b8 <HAL_RCC_OscConfig+0x2c0>)
 800154e:	6813      	ldr	r3, [r2, #0]
 8001550:	6961      	ldr	r1, [r4, #20]
 8001552:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001556:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800155a:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800155c:	6823      	ldr	r3, [r4, #0]
 800155e:	f013 0f08 	tst.w	r3, #8
 8001562:	d03c      	beq.n	80015de <HAL_RCC_OscConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001564:	69a3      	ldr	r3, [r4, #24]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d04f      	beq.n	800160a <HAL_RCC_OscConfig+0x212>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800156a:	4b55      	ldr	r3, [pc, #340]	; (80016c0 <HAL_RCC_OscConfig+0x2c8>)
 800156c:	2201      	movs	r2, #1
 800156e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001570:	f7ff fb8e 	bl	8000c90 <HAL_GetTick>
 8001574:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001576:	4e50      	ldr	r6, [pc, #320]	; (80016b8 <HAL_RCC_OscConfig+0x2c0>)
 8001578:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800157a:	f013 0f02 	tst.w	r3, #2
 800157e:	d121      	bne.n	80015c4 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001580:	f7ff fb86 	bl	8000c90 <HAL_GetTick>
 8001584:	1b40      	subs	r0, r0, r5
 8001586:	2802      	cmp	r0, #2
 8001588:	d9f6      	bls.n	8001578 <HAL_RCC_OscConfig+0x180>
        {
          return HAL_TIMEOUT;
 800158a:	2003      	movs	r0, #3
 800158c:	e13f      	b.n	800180e <HAL_RCC_OscConfig+0x416>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800158e:	4a4a      	ldr	r2, [pc, #296]	; (80016b8 <HAL_RCC_OscConfig+0x2c0>)
 8001590:	6813      	ldr	r3, [r2, #0]
 8001592:	6961      	ldr	r1, [r4, #20]
 8001594:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001598:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800159c:	6013      	str	r3, [r2, #0]
 800159e:	e7dd      	b.n	800155c <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 80015a0:	4b46      	ldr	r3, [pc, #280]	; (80016bc <HAL_RCC_OscConfig+0x2c4>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80015a6:	f7ff fb73 	bl	8000c90 <HAL_GetTick>
 80015aa:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ac:	4e42      	ldr	r6, [pc, #264]	; (80016b8 <HAL_RCC_OscConfig+0x2c0>)
 80015ae:	6833      	ldr	r3, [r6, #0]
 80015b0:	f013 0f02 	tst.w	r3, #2
 80015b4:	d0d2      	beq.n	800155c <HAL_RCC_OscConfig+0x164>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015b6:	f7ff fb6b 	bl	8000c90 <HAL_GetTick>
 80015ba:	1b40      	subs	r0, r0, r5
 80015bc:	2802      	cmp	r0, #2
 80015be:	d9f6      	bls.n	80015ae <HAL_RCC_OscConfig+0x1b6>
            return HAL_TIMEOUT;
 80015c0:	2003      	movs	r0, #3
 80015c2:	e124      	b.n	800180e <HAL_RCC_OscConfig+0x416>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80015c4:	4b3f      	ldr	r3, [pc, #252]	; (80016c4 <HAL_RCC_OscConfig+0x2cc>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a3f      	ldr	r2, [pc, #252]	; (80016c8 <HAL_RCC_OscConfig+0x2d0>)
 80015ca:	fba2 2303 	umull	r2, r3, r2, r3
 80015ce:	0a5b      	lsrs	r3, r3, #9
 80015d0:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80015d2:	bf00      	nop
  }
  while (Delay --);
 80015d4:	9b01      	ldr	r3, [sp, #4]
 80015d6:	1e5a      	subs	r2, r3, #1
 80015d8:	9201      	str	r2, [sp, #4]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d1f9      	bne.n	80015d2 <HAL_RCC_OscConfig+0x1da>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015de:	6823      	ldr	r3, [r4, #0]
 80015e0:	f013 0f04 	tst.w	r3, #4
 80015e4:	f000 809c 	beq.w	8001720 <HAL_RCC_OscConfig+0x328>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015e8:	4b33      	ldr	r3, [pc, #204]	; (80016b8 <HAL_RCC_OscConfig+0x2c0>)
 80015ea:	69db      	ldr	r3, [r3, #28]
 80015ec:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80015f0:	d11d      	bne.n	800162e <HAL_RCC_OscConfig+0x236>
      __HAL_RCC_PWR_CLK_ENABLE();
 80015f2:	4b31      	ldr	r3, [pc, #196]	; (80016b8 <HAL_RCC_OscConfig+0x2c0>)
 80015f4:	69da      	ldr	r2, [r3, #28]
 80015f6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80015fa:	61da      	str	r2, [r3, #28]
 80015fc:	69db      	ldr	r3, [r3, #28]
 80015fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001602:	9300      	str	r3, [sp, #0]
 8001604:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 8001606:	2501      	movs	r5, #1
 8001608:	e012      	b.n	8001630 <HAL_RCC_OscConfig+0x238>
      __HAL_RCC_LSI_DISABLE();
 800160a:	4b2d      	ldr	r3, [pc, #180]	; (80016c0 <HAL_RCC_OscConfig+0x2c8>)
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001610:	f7ff fb3e 	bl	8000c90 <HAL_GetTick>
 8001614:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001616:	4e28      	ldr	r6, [pc, #160]	; (80016b8 <HAL_RCC_OscConfig+0x2c0>)
 8001618:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800161a:	f013 0f02 	tst.w	r3, #2
 800161e:	d0de      	beq.n	80015de <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001620:	f7ff fb36 	bl	8000c90 <HAL_GetTick>
 8001624:	1b40      	subs	r0, r0, r5
 8001626:	2802      	cmp	r0, #2
 8001628:	d9f6      	bls.n	8001618 <HAL_RCC_OscConfig+0x220>
          return HAL_TIMEOUT;
 800162a:	2003      	movs	r0, #3
 800162c:	e0ef      	b.n	800180e <HAL_RCC_OscConfig+0x416>
    FlagStatus       pwrclkchanged = RESET;
 800162e:	2500      	movs	r5, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001630:	4b26      	ldr	r3, [pc, #152]	; (80016cc <HAL_RCC_OscConfig+0x2d4>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001638:	d011      	beq.n	800165e <HAL_RCC_OscConfig+0x266>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800163a:	68e3      	ldr	r3, [r4, #12]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d022      	beq.n	8001686 <HAL_RCC_OscConfig+0x28e>
 8001640:	2b00      	cmp	r3, #0
 8001642:	d145      	bne.n	80016d0 <HAL_RCC_OscConfig+0x2d8>
 8001644:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001648:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800164c:	6a1a      	ldr	r2, [r3, #32]
 800164e:	f022 0201 	bic.w	r2, r2, #1
 8001652:	621a      	str	r2, [r3, #32]
 8001654:	6a1a      	ldr	r2, [r3, #32]
 8001656:	f022 0204 	bic.w	r2, r2, #4
 800165a:	621a      	str	r2, [r3, #32]
 800165c:	e018      	b.n	8001690 <HAL_RCC_OscConfig+0x298>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800165e:	4a1b      	ldr	r2, [pc, #108]	; (80016cc <HAL_RCC_OscConfig+0x2d4>)
 8001660:	6813      	ldr	r3, [r2, #0]
 8001662:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001666:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001668:	f7ff fb12 	bl	8000c90 <HAL_GetTick>
 800166c:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800166e:	4f17      	ldr	r7, [pc, #92]	; (80016cc <HAL_RCC_OscConfig+0x2d4>)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001676:	d1e0      	bne.n	800163a <HAL_RCC_OscConfig+0x242>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001678:	f7ff fb0a 	bl	8000c90 <HAL_GetTick>
 800167c:	1b80      	subs	r0, r0, r6
 800167e:	2864      	cmp	r0, #100	; 0x64
 8001680:	d9f6      	bls.n	8001670 <HAL_RCC_OscConfig+0x278>
          return HAL_TIMEOUT;
 8001682:	2003      	movs	r0, #3
 8001684:	e0c3      	b.n	800180e <HAL_RCC_OscConfig+0x416>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001686:	4a0c      	ldr	r2, [pc, #48]	; (80016b8 <HAL_RCC_OscConfig+0x2c0>)
 8001688:	6a13      	ldr	r3, [r2, #32]
 800168a:	f043 0301 	orr.w	r3, r3, #1
 800168e:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001690:	68e3      	ldr	r3, [r4, #12]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d032      	beq.n	80016fc <HAL_RCC_OscConfig+0x304>
      tickstart = HAL_GetTick();
 8001696:	f7ff fafb 	bl	8000c90 <HAL_GetTick>
 800169a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800169c:	4f06      	ldr	r7, [pc, #24]	; (80016b8 <HAL_RCC_OscConfig+0x2c0>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800169e:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016a2:	6a3b      	ldr	r3, [r7, #32]
 80016a4:	f013 0f02 	tst.w	r3, #2
 80016a8:	d139      	bne.n	800171e <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016aa:	f7ff faf1 	bl	8000c90 <HAL_GetTick>
 80016ae:	1b80      	subs	r0, r0, r6
 80016b0:	4540      	cmp	r0, r8
 80016b2:	d9f6      	bls.n	80016a2 <HAL_RCC_OscConfig+0x2aa>
          return HAL_TIMEOUT;
 80016b4:	2003      	movs	r0, #3
 80016b6:	e0aa      	b.n	800180e <HAL_RCC_OscConfig+0x416>
 80016b8:	40021000 	.word	0x40021000
 80016bc:	42420000 	.word	0x42420000
 80016c0:	42420480 	.word	0x42420480
 80016c4:	20000000 	.word	0x20000000
 80016c8:	10624dd3 	.word	0x10624dd3
 80016cc:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016d0:	2b05      	cmp	r3, #5
 80016d2:	d009      	beq.n	80016e8 <HAL_RCC_OscConfig+0x2f0>
 80016d4:	4b51      	ldr	r3, [pc, #324]	; (800181c <HAL_RCC_OscConfig+0x424>)
 80016d6:	6a1a      	ldr	r2, [r3, #32]
 80016d8:	f022 0201 	bic.w	r2, r2, #1
 80016dc:	621a      	str	r2, [r3, #32]
 80016de:	6a1a      	ldr	r2, [r3, #32]
 80016e0:	f022 0204 	bic.w	r2, r2, #4
 80016e4:	621a      	str	r2, [r3, #32]
 80016e6:	e7d3      	b.n	8001690 <HAL_RCC_OscConfig+0x298>
 80016e8:	4b4c      	ldr	r3, [pc, #304]	; (800181c <HAL_RCC_OscConfig+0x424>)
 80016ea:	6a1a      	ldr	r2, [r3, #32]
 80016ec:	f042 0204 	orr.w	r2, r2, #4
 80016f0:	621a      	str	r2, [r3, #32]
 80016f2:	6a1a      	ldr	r2, [r3, #32]
 80016f4:	f042 0201 	orr.w	r2, r2, #1
 80016f8:	621a      	str	r2, [r3, #32]
 80016fa:	e7c9      	b.n	8001690 <HAL_RCC_OscConfig+0x298>
      tickstart = HAL_GetTick();
 80016fc:	f7ff fac8 	bl	8000c90 <HAL_GetTick>
 8001700:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001702:	4f46      	ldr	r7, [pc, #280]	; (800181c <HAL_RCC_OscConfig+0x424>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001704:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001708:	6a3b      	ldr	r3, [r7, #32]
 800170a:	f013 0f02 	tst.w	r3, #2
 800170e:	d006      	beq.n	800171e <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001710:	f7ff fabe 	bl	8000c90 <HAL_GetTick>
 8001714:	1b80      	subs	r0, r0, r6
 8001716:	4540      	cmp	r0, r8
 8001718:	d9f6      	bls.n	8001708 <HAL_RCC_OscConfig+0x310>
          return HAL_TIMEOUT;
 800171a:	2003      	movs	r0, #3
 800171c:	e077      	b.n	800180e <HAL_RCC_OscConfig+0x416>
    if (pwrclkchanged == SET)
 800171e:	b9e5      	cbnz	r5, 800175a <HAL_RCC_OscConfig+0x362>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001720:	69e3      	ldr	r3, [r4, #28]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d072      	beq.n	800180c <HAL_RCC_OscConfig+0x414>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001726:	4a3d      	ldr	r2, [pc, #244]	; (800181c <HAL_RCC_OscConfig+0x424>)
 8001728:	6852      	ldr	r2, [r2, #4]
 800172a:	f002 020c 	and.w	r2, r2, #12
 800172e:	2a08      	cmp	r2, #8
 8001730:	d056      	beq.n	80017e0 <HAL_RCC_OscConfig+0x3e8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001732:	2b02      	cmp	r3, #2
 8001734:	d017      	beq.n	8001766 <HAL_RCC_OscConfig+0x36e>
        __HAL_RCC_PLL_DISABLE();
 8001736:	4b3a      	ldr	r3, [pc, #232]	; (8001820 <HAL_RCC_OscConfig+0x428>)
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800173c:	f7ff faa8 	bl	8000c90 <HAL_GetTick>
 8001740:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001742:	4d36      	ldr	r5, [pc, #216]	; (800181c <HAL_RCC_OscConfig+0x424>)
 8001744:	682b      	ldr	r3, [r5, #0]
 8001746:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800174a:	d047      	beq.n	80017dc <HAL_RCC_OscConfig+0x3e4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800174c:	f7ff faa0 	bl	8000c90 <HAL_GetTick>
 8001750:	1b00      	subs	r0, r0, r4
 8001752:	2802      	cmp	r0, #2
 8001754:	d9f6      	bls.n	8001744 <HAL_RCC_OscConfig+0x34c>
            return HAL_TIMEOUT;
 8001756:	2003      	movs	r0, #3
 8001758:	e059      	b.n	800180e <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_PWR_CLK_DISABLE();
 800175a:	4a30      	ldr	r2, [pc, #192]	; (800181c <HAL_RCC_OscConfig+0x424>)
 800175c:	69d3      	ldr	r3, [r2, #28]
 800175e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001762:	61d3      	str	r3, [r2, #28]
 8001764:	e7dc      	b.n	8001720 <HAL_RCC_OscConfig+0x328>
        __HAL_RCC_PLL_DISABLE();
 8001766:	4b2e      	ldr	r3, [pc, #184]	; (8001820 <HAL_RCC_OscConfig+0x428>)
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800176c:	f7ff fa90 	bl	8000c90 <HAL_GetTick>
 8001770:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001772:	4e2a      	ldr	r6, [pc, #168]	; (800181c <HAL_RCC_OscConfig+0x424>)
 8001774:	6833      	ldr	r3, [r6, #0]
 8001776:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800177a:	d006      	beq.n	800178a <HAL_RCC_OscConfig+0x392>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800177c:	f7ff fa88 	bl	8000c90 <HAL_GetTick>
 8001780:	1b40      	subs	r0, r0, r5
 8001782:	2802      	cmp	r0, #2
 8001784:	d9f6      	bls.n	8001774 <HAL_RCC_OscConfig+0x37c>
            return HAL_TIMEOUT;
 8001786:	2003      	movs	r0, #3
 8001788:	e041      	b.n	800180e <HAL_RCC_OscConfig+0x416>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800178a:	6a23      	ldr	r3, [r4, #32]
 800178c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001790:	d01a      	beq.n	80017c8 <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001792:	4922      	ldr	r1, [pc, #136]	; (800181c <HAL_RCC_OscConfig+0x424>)
 8001794:	684a      	ldr	r2, [r1, #4]
 8001796:	6a23      	ldr	r3, [r4, #32]
 8001798:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800179a:	4303      	orrs	r3, r0
 800179c:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80017a0:	4313      	orrs	r3, r2
 80017a2:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 80017a4:	4b1e      	ldr	r3, [pc, #120]	; (8001820 <HAL_RCC_OscConfig+0x428>)
 80017a6:	2201      	movs	r2, #1
 80017a8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80017aa:	f7ff fa71 	bl	8000c90 <HAL_GetTick>
 80017ae:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017b0:	4d1a      	ldr	r5, [pc, #104]	; (800181c <HAL_RCC_OscConfig+0x424>)
 80017b2:	682b      	ldr	r3, [r5, #0]
 80017b4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80017b8:	d10e      	bne.n	80017d8 <HAL_RCC_OscConfig+0x3e0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ba:	f7ff fa69 	bl	8000c90 <HAL_GetTick>
 80017be:	1b00      	subs	r0, r0, r4
 80017c0:	2802      	cmp	r0, #2
 80017c2:	d9f6      	bls.n	80017b2 <HAL_RCC_OscConfig+0x3ba>
            return HAL_TIMEOUT;
 80017c4:	2003      	movs	r0, #3
 80017c6:	e022      	b.n	800180e <HAL_RCC_OscConfig+0x416>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017c8:	4a14      	ldr	r2, [pc, #80]	; (800181c <HAL_RCC_OscConfig+0x424>)
 80017ca:	6853      	ldr	r3, [r2, #4]
 80017cc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80017d0:	68a1      	ldr	r1, [r4, #8]
 80017d2:	430b      	orrs	r3, r1
 80017d4:	6053      	str	r3, [r2, #4]
 80017d6:	e7dc      	b.n	8001792 <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 80017d8:	2000      	movs	r0, #0
 80017da:	e018      	b.n	800180e <HAL_RCC_OscConfig+0x416>
 80017dc:	2000      	movs	r0, #0
 80017de:	e016      	b.n	800180e <HAL_RCC_OscConfig+0x416>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d017      	beq.n	8001814 <HAL_RCC_OscConfig+0x41c>
        pll_config = RCC->CFGR;
 80017e4:	4b0d      	ldr	r3, [pc, #52]	; (800181c <HAL_RCC_OscConfig+0x424>)
 80017e6:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017e8:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80017ec:	6a22      	ldr	r2, [r4, #32]
 80017ee:	4291      	cmp	r1, r2
 80017f0:	d112      	bne.n	8001818 <HAL_RCC_OscConfig+0x420>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80017f2:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017f6:	6a60      	ldr	r0, [r4, #36]	; 0x24
        return HAL_ERROR;
 80017f8:	1a18      	subs	r0, r3, r0
 80017fa:	bf18      	it	ne
 80017fc:	2001      	movne	r0, #1
 80017fe:	e006      	b.n	800180e <HAL_RCC_OscConfig+0x416>
    return HAL_ERROR;
 8001800:	2001      	movs	r0, #1
}
 8001802:	4770      	bx	lr
        return HAL_ERROR;
 8001804:	2001      	movs	r0, #1
 8001806:	e002      	b.n	800180e <HAL_RCC_OscConfig+0x416>
        return HAL_ERROR;
 8001808:	2001      	movs	r0, #1
 800180a:	e000      	b.n	800180e <HAL_RCC_OscConfig+0x416>
  return HAL_OK;
 800180c:	2000      	movs	r0, #0
}
 800180e:	b002      	add	sp, #8
 8001810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 8001814:	2001      	movs	r0, #1
 8001816:	e7fa      	b.n	800180e <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
 8001818:	2001      	movs	r0, #1
 800181a:	e7f8      	b.n	800180e <HAL_RCC_OscConfig+0x416>
 800181c:	40021000 	.word	0x40021000
 8001820:	42420060 	.word	0x42420060

08001824 <HAL_RCC_GetSysClockFreq>:
{
 8001824:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001826:	4b16      	ldr	r3, [pc, #88]	; (8001880 <HAL_RCC_GetSysClockFreq+0x5c>)
 8001828:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800182a:	f10d 0c18 	add.w	ip, sp, #24
 800182e:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001832:	f240 2301 	movw	r3, #513	; 0x201
 8001836:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 800183a:	4b12      	ldr	r3, [pc, #72]	; (8001884 <HAL_RCC_GetSysClockFreq+0x60>)
 800183c:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800183e:	f003 020c 	and.w	r2, r3, #12
 8001842:	2a08      	cmp	r2, #8
 8001844:	d002      	beq.n	800184c <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 8001846:	4810      	ldr	r0, [pc, #64]	; (8001888 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8001848:	b006      	add	sp, #24
 800184a:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800184c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001850:	4462      	add	r2, ip
 8001852:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001856:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800185a:	d00c      	beq.n	8001876 <HAL_RCC_GetSysClockFreq+0x52>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800185c:	4b09      	ldr	r3, [pc, #36]	; (8001884 <HAL_RCC_GetSysClockFreq+0x60>)
 800185e:	685b      	ldr	r3, [r3, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001860:	4809      	ldr	r0, [pc, #36]	; (8001888 <HAL_RCC_GetSysClockFreq+0x64>)
 8001862:	fb00 f002 	mul.w	r0, r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001866:	f3c3 4340 	ubfx	r3, r3, #17, #1
 800186a:	4463      	add	r3, ip
 800186c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001870:	fbb0 f0f3 	udiv	r0, r0, r3
 8001874:	e7e8      	b.n	8001848 <HAL_RCC_GetSysClockFreq+0x24>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001876:	4805      	ldr	r0, [pc, #20]	; (800188c <HAL_RCC_GetSysClockFreq+0x68>)
 8001878:	fb00 f002 	mul.w	r0, r0, r2
 800187c:	e7e4      	b.n	8001848 <HAL_RCC_GetSysClockFreq+0x24>
 800187e:	bf00      	nop
 8001880:	08002b84 	.word	0x08002b84
 8001884:	40021000 	.word	0x40021000
 8001888:	007a1200 	.word	0x007a1200
 800188c:	003d0900 	.word	0x003d0900

08001890 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001890:	2800      	cmp	r0, #0
 8001892:	f000 80a2 	beq.w	80019da <HAL_RCC_ClockConfig+0x14a>
{
 8001896:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800189a:	460d      	mov	r5, r1
 800189c:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800189e:	4b53      	ldr	r3, [pc, #332]	; (80019ec <HAL_RCC_ClockConfig+0x15c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	428b      	cmp	r3, r1
 80018a8:	d20b      	bcs.n	80018c2 <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018aa:	4a50      	ldr	r2, [pc, #320]	; (80019ec <HAL_RCC_ClockConfig+0x15c>)
 80018ac:	6813      	ldr	r3, [r2, #0]
 80018ae:	f023 0307 	bic.w	r3, r3, #7
 80018b2:	430b      	orrs	r3, r1
 80018b4:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018b6:	6813      	ldr	r3, [r2, #0]
 80018b8:	f003 0307 	and.w	r3, r3, #7
 80018bc:	428b      	cmp	r3, r1
 80018be:	f040 808e 	bne.w	80019de <HAL_RCC_ClockConfig+0x14e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018c2:	6823      	ldr	r3, [r4, #0]
 80018c4:	f013 0f02 	tst.w	r3, #2
 80018c8:	d017      	beq.n	80018fa <HAL_RCC_ClockConfig+0x6a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018ca:	f013 0f04 	tst.w	r3, #4
 80018ce:	d004      	beq.n	80018da <HAL_RCC_ClockConfig+0x4a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018d0:	4a47      	ldr	r2, [pc, #284]	; (80019f0 <HAL_RCC_ClockConfig+0x160>)
 80018d2:	6853      	ldr	r3, [r2, #4]
 80018d4:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018d8:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018da:	6823      	ldr	r3, [r4, #0]
 80018dc:	f013 0f08 	tst.w	r3, #8
 80018e0:	d004      	beq.n	80018ec <HAL_RCC_ClockConfig+0x5c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018e2:	4a43      	ldr	r2, [pc, #268]	; (80019f0 <HAL_RCC_ClockConfig+0x160>)
 80018e4:	6853      	ldr	r3, [r2, #4]
 80018e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80018ea:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018ec:	4a40      	ldr	r2, [pc, #256]	; (80019f0 <HAL_RCC_ClockConfig+0x160>)
 80018ee:	6853      	ldr	r3, [r2, #4]
 80018f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018f4:	68a1      	ldr	r1, [r4, #8]
 80018f6:	430b      	orrs	r3, r1
 80018f8:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018fa:	6823      	ldr	r3, [r4, #0]
 80018fc:	f013 0f01 	tst.w	r3, #1
 8001900:	d031      	beq.n	8001966 <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001902:	6862      	ldr	r2, [r4, #4]
 8001904:	2a01      	cmp	r2, #1
 8001906:	d020      	beq.n	800194a <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001908:	2a02      	cmp	r2, #2
 800190a:	d025      	beq.n	8001958 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800190c:	4b38      	ldr	r3, [pc, #224]	; (80019f0 <HAL_RCC_ClockConfig+0x160>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f013 0f02 	tst.w	r3, #2
 8001914:	d065      	beq.n	80019e2 <HAL_RCC_ClockConfig+0x152>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001916:	4936      	ldr	r1, [pc, #216]	; (80019f0 <HAL_RCC_ClockConfig+0x160>)
 8001918:	684b      	ldr	r3, [r1, #4]
 800191a:	f023 0303 	bic.w	r3, r3, #3
 800191e:	4313      	orrs	r3, r2
 8001920:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8001922:	f7ff f9b5 	bl	8000c90 <HAL_GetTick>
 8001926:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001928:	4f31      	ldr	r7, [pc, #196]	; (80019f0 <HAL_RCC_ClockConfig+0x160>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800192a:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f003 030c 	and.w	r3, r3, #12
 8001934:	6862      	ldr	r2, [r4, #4]
 8001936:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800193a:	d014      	beq.n	8001966 <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800193c:	f7ff f9a8 	bl	8000c90 <HAL_GetTick>
 8001940:	1b80      	subs	r0, r0, r6
 8001942:	4540      	cmp	r0, r8
 8001944:	d9f3      	bls.n	800192e <HAL_RCC_ClockConfig+0x9e>
        return HAL_TIMEOUT;
 8001946:	2003      	movs	r0, #3
 8001948:	e045      	b.n	80019d6 <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800194a:	4b29      	ldr	r3, [pc, #164]	; (80019f0 <HAL_RCC_ClockConfig+0x160>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001952:	d1e0      	bne.n	8001916 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8001954:	2001      	movs	r0, #1
 8001956:	e03e      	b.n	80019d6 <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001958:	4b25      	ldr	r3, [pc, #148]	; (80019f0 <HAL_RCC_ClockConfig+0x160>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001960:	d1d9      	bne.n	8001916 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8001962:	2001      	movs	r0, #1
 8001964:	e037      	b.n	80019d6 <HAL_RCC_ClockConfig+0x146>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001966:	4b21      	ldr	r3, [pc, #132]	; (80019ec <HAL_RCC_ClockConfig+0x15c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	42ab      	cmp	r3, r5
 8001970:	d90a      	bls.n	8001988 <HAL_RCC_ClockConfig+0xf8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001972:	4a1e      	ldr	r2, [pc, #120]	; (80019ec <HAL_RCC_ClockConfig+0x15c>)
 8001974:	6813      	ldr	r3, [r2, #0]
 8001976:	f023 0307 	bic.w	r3, r3, #7
 800197a:	432b      	orrs	r3, r5
 800197c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800197e:	6813      	ldr	r3, [r2, #0]
 8001980:	f003 0307 	and.w	r3, r3, #7
 8001984:	42ab      	cmp	r3, r5
 8001986:	d12e      	bne.n	80019e6 <HAL_RCC_ClockConfig+0x156>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001988:	6823      	ldr	r3, [r4, #0]
 800198a:	f013 0f04 	tst.w	r3, #4
 800198e:	d006      	beq.n	800199e <HAL_RCC_ClockConfig+0x10e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001990:	4a17      	ldr	r2, [pc, #92]	; (80019f0 <HAL_RCC_ClockConfig+0x160>)
 8001992:	6853      	ldr	r3, [r2, #4]
 8001994:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001998:	68e1      	ldr	r1, [r4, #12]
 800199a:	430b      	orrs	r3, r1
 800199c:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800199e:	6823      	ldr	r3, [r4, #0]
 80019a0:	f013 0f08 	tst.w	r3, #8
 80019a4:	d007      	beq.n	80019b6 <HAL_RCC_ClockConfig+0x126>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019a6:	4a12      	ldr	r2, [pc, #72]	; (80019f0 <HAL_RCC_ClockConfig+0x160>)
 80019a8:	6853      	ldr	r3, [r2, #4]
 80019aa:	6921      	ldr	r1, [r4, #16]
 80019ac:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80019b0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80019b4:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019b6:	f7ff ff35 	bl	8001824 <HAL_RCC_GetSysClockFreq>
 80019ba:	4b0d      	ldr	r3, [pc, #52]	; (80019f0 <HAL_RCC_ClockConfig+0x160>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80019c2:	4a0c      	ldr	r2, [pc, #48]	; (80019f4 <HAL_RCC_ClockConfig+0x164>)
 80019c4:	5cd3      	ldrb	r3, [r2, r3]
 80019c6:	40d8      	lsrs	r0, r3
 80019c8:	4b0b      	ldr	r3, [pc, #44]	; (80019f8 <HAL_RCC_ClockConfig+0x168>)
 80019ca:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80019cc:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <HAL_RCC_ClockConfig+0x16c>)
 80019ce:	6818      	ldr	r0, [r3, #0]
 80019d0:	f7ff f91a 	bl	8000c08 <HAL_InitTick>
  return HAL_OK;
 80019d4:	2000      	movs	r0, #0
}
 80019d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 80019da:	2001      	movs	r0, #1
}
 80019dc:	4770      	bx	lr
    return HAL_ERROR;
 80019de:	2001      	movs	r0, #1
 80019e0:	e7f9      	b.n	80019d6 <HAL_RCC_ClockConfig+0x146>
        return HAL_ERROR;
 80019e2:	2001      	movs	r0, #1
 80019e4:	e7f7      	b.n	80019d6 <HAL_RCC_ClockConfig+0x146>
    return HAL_ERROR;
 80019e6:	2001      	movs	r0, #1
 80019e8:	e7f5      	b.n	80019d6 <HAL_RCC_ClockConfig+0x146>
 80019ea:	bf00      	nop
 80019ec:	40022000 	.word	0x40022000
 80019f0:	40021000 	.word	0x40021000
 80019f4:	08002b6c 	.word	0x08002b6c
 80019f8:	20000000 	.word	0x20000000
 80019fc:	20000008 	.word	0x20000008

08001a00 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a00:	4b04      	ldr	r3, [pc, #16]	; (8001a14 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001a08:	4a03      	ldr	r2, [pc, #12]	; (8001a18 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001a0a:	5cd3      	ldrb	r3, [r2, r3]
 8001a0c:	4a03      	ldr	r2, [pc, #12]	; (8001a1c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001a0e:	6810      	ldr	r0, [r2, #0]
}
 8001a10:	40d8      	lsrs	r0, r3
 8001a12:	4770      	bx	lr
 8001a14:	40021000 	.word	0x40021000
 8001a18:	08002b7c 	.word	0x08002b7c
 8001a1c:	20000000 	.word	0x20000000

08001a20 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a20:	4b04      	ldr	r3, [pc, #16]	; (8001a34 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001a28:	4a03      	ldr	r2, [pc, #12]	; (8001a38 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001a2a:	5cd3      	ldrb	r3, [r2, r3]
 8001a2c:	4a03      	ldr	r2, [pc, #12]	; (8001a3c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001a2e:	6810      	ldr	r0, [r2, #0]
}
 8001a30:	40d8      	lsrs	r0, r3
 8001a32:	4770      	bx	lr
 8001a34:	40021000 	.word	0x40021000
 8001a38:	08002b7c 	.word	0x08002b7c
 8001a3c:	20000000 	.word	0x20000000

08001a40 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001a48:	6803      	ldr	r3, [r0, #0]
 8001a4a:	f013 0f01 	tst.w	r3, #1
 8001a4e:	d034      	beq.n	8001aba <HAL_RCCEx_PeriphCLKConfig+0x7a>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a50:	4b3e      	ldr	r3, [pc, #248]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001a52:	69db      	ldr	r3, [r3, #28]
 8001a54:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001a58:	d147      	bne.n	8001aea <HAL_RCCEx_PeriphCLKConfig+0xaa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a5a:	4b3c      	ldr	r3, [pc, #240]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001a5c:	69da      	ldr	r2, [r3, #28]
 8001a5e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a62:	61da      	str	r2, [r3, #28]
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a6a:	9301      	str	r3, [sp, #4]
 8001a6c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001a6e:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a70:	4b37      	ldr	r3, [pc, #220]	; (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001a78:	d039      	beq.n	8001aee <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001a7a:	4b34      	ldr	r3, [pc, #208]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001a7c:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a7e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001a82:	d011      	beq.n	8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8001a84:	6862      	ldr	r2, [r4, #4]
 8001a86:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d00c      	beq.n	8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x68>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a8e:	4a2f      	ldr	r2, [pc, #188]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001a90:	6a13      	ldr	r3, [r2, #32]
 8001a92:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a96:	492f      	ldr	r1, [pc, #188]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8001a98:	2601      	movs	r6, #1
 8001a9a:	600e      	str	r6, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a9c:	2600      	movs	r6, #0
 8001a9e:	600e      	str	r6, [r1, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001aa0:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001aa2:	f013 0f01 	tst.w	r3, #1
 8001aa6:	d136      	bne.n	8001b16 <HAL_RCCEx_PeriphCLKConfig+0xd6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001aa8:	4a28      	ldr	r2, [pc, #160]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001aaa:	6a13      	ldr	r3, [r2, #32]
 8001aac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ab0:	6861      	ldr	r1, [r4, #4]
 8001ab2:	430b      	orrs	r3, r1
 8001ab4:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ab6:	2d00      	cmp	r5, #0
 8001ab8:	d13e      	bne.n	8001b38 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001aba:	6823      	ldr	r3, [r4, #0]
 8001abc:	f013 0f02 	tst.w	r3, #2
 8001ac0:	d006      	beq.n	8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001ac2:	4a22      	ldr	r2, [pc, #136]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001ac4:	6853      	ldr	r3, [r2, #4]
 8001ac6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001aca:	68a1      	ldr	r1, [r4, #8]
 8001acc:	430b      	orrs	r3, r1
 8001ace:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001ad0:	6823      	ldr	r3, [r4, #0]
 8001ad2:	f013 0f10 	tst.w	r3, #16
 8001ad6:	d034      	beq.n	8001b42 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001ad8:	4a1c      	ldr	r2, [pc, #112]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001ada:	6853      	ldr	r3, [r2, #4]
 8001adc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001ae0:	68e1      	ldr	r1, [r4, #12]
 8001ae2:	430b      	orrs	r3, r1
 8001ae4:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001ae6:	2000      	movs	r0, #0
 8001ae8:	e02c      	b.n	8001b44 <HAL_RCCEx_PeriphCLKConfig+0x104>
    FlagStatus       pwrclkchanged = RESET;
 8001aea:	2500      	movs	r5, #0
 8001aec:	e7c0      	b.n	8001a70 <HAL_RCCEx_PeriphCLKConfig+0x30>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aee:	4a18      	ldr	r2, [pc, #96]	; (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8001af0:	6813      	ldr	r3, [r2, #0]
 8001af2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001af6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001af8:	f7ff f8ca 	bl	8000c90 <HAL_GetTick>
 8001afc:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001afe:	4f14      	ldr	r7, [pc, #80]	; (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001b06:	d1b8      	bne.n	8001a7a <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b08:	f7ff f8c2 	bl	8000c90 <HAL_GetTick>
 8001b0c:	1b80      	subs	r0, r0, r6
 8001b0e:	2864      	cmp	r0, #100	; 0x64
 8001b10:	d9f6      	bls.n	8001b00 <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 8001b12:	2003      	movs	r0, #3
 8001b14:	e016      	b.n	8001b44 <HAL_RCCEx_PeriphCLKConfig+0x104>
        tickstart = HAL_GetTick();
 8001b16:	f7ff f8bb 	bl	8000c90 <HAL_GetTick>
 8001b1a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b1c:	4f0b      	ldr	r7, [pc, #44]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b1e:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b22:	6a3b      	ldr	r3, [r7, #32]
 8001b24:	f013 0f02 	tst.w	r3, #2
 8001b28:	d1be      	bne.n	8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x68>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b2a:	f7ff f8b1 	bl	8000c90 <HAL_GetTick>
 8001b2e:	1b80      	subs	r0, r0, r6
 8001b30:	4540      	cmp	r0, r8
 8001b32:	d9f6      	bls.n	8001b22 <HAL_RCCEx_PeriphCLKConfig+0xe2>
            return HAL_TIMEOUT;
 8001b34:	2003      	movs	r0, #3
 8001b36:	e005      	b.n	8001b44 <HAL_RCCEx_PeriphCLKConfig+0x104>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b38:	69d3      	ldr	r3, [r2, #28]
 8001b3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b3e:	61d3      	str	r3, [r2, #28]
 8001b40:	e7bb      	b.n	8001aba <HAL_RCCEx_PeriphCLKConfig+0x7a>
  return HAL_OK;
 8001b42:	2000      	movs	r0, #0
}
 8001b44:	b002      	add	sp, #8
 8001b46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	40007000 	.word	0x40007000
 8001b54:	42420440 	.word	0x42420440

08001b58 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001b58:	6802      	ldr	r2, [r0, #0]
 8001b5a:	68d3      	ldr	r3, [r2, #12]
 8001b5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001b60:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b62:	6802      	ldr	r2, [r0, #0]
 8001b64:	6953      	ldr	r3, [r2, #20]
 8001b66:	f023 0301 	bic.w	r3, r3, #1
 8001b6a:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001b6c:	2320      	movs	r3, #32
 8001b6e:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 8001b72:	4770      	bx	lr

08001b74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b74:	b510      	push	{r4, lr}
 8001b76:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b78:	6802      	ldr	r2, [r0, #0]
 8001b7a:	6913      	ldr	r3, [r2, #16]
 8001b7c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b80:	68c1      	ldr	r1, [r0, #12]
 8001b82:	430b      	orrs	r3, r1
 8001b84:	6113      	str	r3, [r2, #16]
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
  MODIFY_REG(huart->Instance->CR1,
 8001b86:	6801      	ldr	r1, [r0, #0]
 8001b88:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001b8a:	6883      	ldr	r3, [r0, #8]
 8001b8c:	6900      	ldr	r0, [r0, #16]
 8001b8e:	4303      	orrs	r3, r0
 8001b90:	6960      	ldr	r0, [r4, #20]
 8001b92:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8001b94:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8001b98:	f022 020c 	bic.w	r2, r2, #12
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ba0:	6822      	ldr	r2, [r4, #0]
 8001ba2:	6953      	ldr	r3, [r2, #20]
 8001ba4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ba8:	69a1      	ldr	r1, [r4, #24]
 8001baa:	430b      	orrs	r3, r1
 8001bac:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 8001bae:	6822      	ldr	r2, [r4, #0]
 8001bb0:	4b10      	ldr	r3, [pc, #64]	; (8001bf4 <UART_SetConfig+0x80>)
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d01a      	beq.n	8001bec <UART_SetConfig+0x78>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001bb6:	f7ff ff23 	bl	8001a00 <HAL_RCC_GetPCLK1Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001bba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001bbe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001bc2:	6863      	ldr	r3, [r4, #4]
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bca:	6824      	ldr	r4, [r4, #0]
 8001bcc:	480a      	ldr	r0, [pc, #40]	; (8001bf8 <UART_SetConfig+0x84>)
 8001bce:	fba0 2103 	umull	r2, r1, r0, r3
 8001bd2:	0949      	lsrs	r1, r1, #5
 8001bd4:	2264      	movs	r2, #100	; 0x64
 8001bd6:	fb02 3311 	mls	r3, r2, r1, r3
 8001bda:	011b      	lsls	r3, r3, #4
 8001bdc:	3332      	adds	r3, #50	; 0x32
 8001bde:	fba0 2303 	umull	r2, r3, r0, r3
 8001be2:	0109      	lsls	r1, r1, #4
 8001be4:	eb01 1353 	add.w	r3, r1, r3, lsr #5
 8001be8:	60a3      	str	r3, [r4, #8]
#endif /* USART_CR1_OVER8 */
}
 8001bea:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8001bec:	f7ff ff18 	bl	8001a20 <HAL_RCC_GetPCLK2Freq>
 8001bf0:	e7e3      	b.n	8001bba <UART_SetConfig+0x46>
 8001bf2:	bf00      	nop
 8001bf4:	40013800 	.word	0x40013800
 8001bf8:	51eb851f 	.word	0x51eb851f

08001bfc <UART_WaitOnFlagUntilTimeout>:
{
 8001bfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001c00:	4680      	mov	r8, r0
 8001c02:	460e      	mov	r6, r1
 8001c04:	4615      	mov	r5, r2
 8001c06:	4699      	mov	r9, r3
 8001c08:	9f08      	ldr	r7, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c0a:	f8d8 2000 	ldr.w	r2, [r8]
 8001c0e:	6814      	ldr	r4, [r2, #0]
 8001c10:	ea36 0304 	bics.w	r3, r6, r4
 8001c14:	bf0c      	ite	eq
 8001c16:	2401      	moveq	r4, #1
 8001c18:	2400      	movne	r4, #0
 8001c1a:	42ac      	cmp	r4, r5
 8001c1c:	d11f      	bne.n	8001c5e <UART_WaitOnFlagUntilTimeout+0x62>
    if (Timeout != HAL_MAX_DELAY)
 8001c1e:	f1b7 3fff 	cmp.w	r7, #4294967295
 8001c22:	d0f4      	beq.n	8001c0e <UART_WaitOnFlagUntilTimeout+0x12>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001c24:	b12f      	cbz	r7, 8001c32 <UART_WaitOnFlagUntilTimeout+0x36>
 8001c26:	f7ff f833 	bl	8000c90 <HAL_GetTick>
 8001c2a:	eba0 0009 	sub.w	r0, r0, r9
 8001c2e:	42b8      	cmp	r0, r7
 8001c30:	d9eb      	bls.n	8001c0a <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c32:	f8d8 2000 	ldr.w	r2, [r8]
 8001c36:	68d3      	ldr	r3, [r2, #12]
 8001c38:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001c3c:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c3e:	f8d8 2000 	ldr.w	r2, [r8]
 8001c42:	6953      	ldr	r3, [r2, #20]
 8001c44:	f023 0301 	bic.w	r3, r3, #1
 8001c48:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001c4a:	2320      	movs	r3, #32
 8001c4c:	f888 3039 	strb.w	r3, [r8, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001c50:	f888 303a 	strb.w	r3, [r8, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001c54:	2300      	movs	r3, #0
 8001c56:	f888 3038 	strb.w	r3, [r8, #56]	; 0x38
        return HAL_TIMEOUT;
 8001c5a:	2003      	movs	r0, #3
 8001c5c:	e000      	b.n	8001c60 <UART_WaitOnFlagUntilTimeout+0x64>
  return HAL_OK;
 8001c5e:	2000      	movs	r0, #0
}
 8001c60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001c64 <HAL_UART_Init>:
  if (huart == NULL)
 8001c64:	b358      	cbz	r0, 8001cbe <HAL_UART_Init+0x5a>
{
 8001c66:	b510      	push	{r4, lr}
 8001c68:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8001c6a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001c6e:	b30b      	cbz	r3, 8001cb4 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8001c70:	2324      	movs	r3, #36	; 0x24
 8001c72:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001c76:	6822      	ldr	r2, [r4, #0]
 8001c78:	68d3      	ldr	r3, [r2, #12]
 8001c7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001c7e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001c80:	4620      	mov	r0, r4
 8001c82:	f7ff ff77 	bl	8001b74 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c86:	6822      	ldr	r2, [r4, #0]
 8001c88:	6913      	ldr	r3, [r2, #16]
 8001c8a:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001c8e:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c90:	6822      	ldr	r2, [r4, #0]
 8001c92:	6953      	ldr	r3, [r2, #20]
 8001c94:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001c98:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8001c9a:	6822      	ldr	r2, [r4, #0]
 8001c9c:	68d3      	ldr	r3, [r2, #12]
 8001c9e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ca2:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ca4:	2000      	movs	r0, #0
 8001ca6:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001ca8:	2320      	movs	r3, #32
 8001caa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001cae:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8001cb2:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001cb4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001cb8:	f7fe fd46 	bl	8000748 <HAL_UART_MspInit>
 8001cbc:	e7d8      	b.n	8001c70 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8001cbe:	2001      	movs	r0, #1
}
 8001cc0:	4770      	bx	lr

08001cc2 <HAL_UART_Transmit>:
{
 8001cc2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001cca:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	2b20      	cmp	r3, #32
 8001cd2:	d15a      	bne.n	8001d8a <HAL_UART_Transmit+0xc8>
 8001cd4:	4604      	mov	r4, r0
 8001cd6:	460d      	mov	r5, r1
 8001cd8:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8001cda:	2900      	cmp	r1, #0
 8001cdc:	d059      	beq.n	8001d92 <HAL_UART_Transmit+0xd0>
 8001cde:	2a00      	cmp	r2, #0
 8001ce0:	d059      	beq.n	8001d96 <HAL_UART_Transmit+0xd4>
    __HAL_LOCK(huart);
 8001ce2:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d057      	beq.n	8001d9a <HAL_UART_Transmit+0xd8>
 8001cea:	2301      	movs	r3, #1
 8001cec:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001cf4:	2321      	movs	r3, #33	; 0x21
 8001cf6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001cfa:	f7fe ffc9 	bl	8000c90 <HAL_GetTick>
 8001cfe:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8001d00:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8001d04:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d08:	68a3      	ldr	r3, [r4, #8]
 8001d0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d0e:	d00c      	beq.n	8001d2a <HAL_UART_Transmit+0x68>
      pdata16bits = NULL;
 8001d10:	f04f 0a00 	mov.w	sl, #0
    __HAL_UNLOCK(huart);
 8001d14:	2300      	movs	r3, #0
 8001d16:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 8001d1a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	b343      	cbz	r3, 8001d72 <HAL_UART_Transmit+0xb0>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d20:	f04f 0900 	mov.w	r9, #0
 8001d24:	f04f 0880 	mov.w	r8, #128	; 0x80
 8001d28:	e014      	b.n	8001d54 <HAL_UART_Transmit+0x92>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d2a:	6923      	ldr	r3, [r4, #16]
 8001d2c:	b913      	cbnz	r3, 8001d34 <HAL_UART_Transmit+0x72>
      pdata16bits = (uint16_t *) pData;
 8001d2e:	46aa      	mov	sl, r5
      pdata8bits  = NULL;
 8001d30:	2500      	movs	r5, #0
 8001d32:	e7ef      	b.n	8001d14 <HAL_UART_Transmit+0x52>
      pdata16bits = NULL;
 8001d34:	f04f 0a00 	mov.w	sl, #0
 8001d38:	e7ec      	b.n	8001d14 <HAL_UART_Transmit+0x52>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001d3a:	6822      	ldr	r2, [r4, #0]
 8001d3c:	f83a 3b02 	ldrh.w	r3, [sl], #2
 8001d40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d44:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8001d46:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8001d48:	3a01      	subs	r2, #1
 8001d4a:	b292      	uxth	r2, r2
 8001d4c:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001d4e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	b173      	cbz	r3, 8001d72 <HAL_UART_Transmit+0xb0>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d54:	9600      	str	r6, [sp, #0]
 8001d56:	463b      	mov	r3, r7
 8001d58:	464a      	mov	r2, r9
 8001d5a:	4641      	mov	r1, r8
 8001d5c:	4620      	mov	r0, r4
 8001d5e:	f7ff ff4d 	bl	8001bfc <UART_WaitOnFlagUntilTimeout>
 8001d62:	b9e0      	cbnz	r0, 8001d9e <HAL_UART_Transmit+0xdc>
      if (pdata8bits == NULL)
 8001d64:	2d00      	cmp	r5, #0
 8001d66:	d0e8      	beq.n	8001d3a <HAL_UART_Transmit+0x78>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d68:	6823      	ldr	r3, [r4, #0]
 8001d6a:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001d6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001d70:	e7e9      	b.n	8001d46 <HAL_UART_Transmit+0x84>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d72:	9600      	str	r6, [sp, #0]
 8001d74:	463b      	mov	r3, r7
 8001d76:	2200      	movs	r2, #0
 8001d78:	2140      	movs	r1, #64	; 0x40
 8001d7a:	4620      	mov	r0, r4
 8001d7c:	f7ff ff3e 	bl	8001bfc <UART_WaitOnFlagUntilTimeout>
 8001d80:	b978      	cbnz	r0, 8001da2 <HAL_UART_Transmit+0xe0>
    huart->gState = HAL_UART_STATE_READY;
 8001d82:	2320      	movs	r3, #32
 8001d84:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8001d88:	e000      	b.n	8001d8c <HAL_UART_Transmit+0xca>
    return HAL_BUSY;
 8001d8a:	2002      	movs	r0, #2
}
 8001d8c:	b002      	add	sp, #8
 8001d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return  HAL_ERROR;
 8001d92:	2001      	movs	r0, #1
 8001d94:	e7fa      	b.n	8001d8c <HAL_UART_Transmit+0xca>
 8001d96:	2001      	movs	r0, #1
 8001d98:	e7f8      	b.n	8001d8c <HAL_UART_Transmit+0xca>
    __HAL_LOCK(huart);
 8001d9a:	2002      	movs	r0, #2
 8001d9c:	e7f6      	b.n	8001d8c <HAL_UART_Transmit+0xca>
        return HAL_TIMEOUT;
 8001d9e:	2003      	movs	r0, #3
 8001da0:	e7f4      	b.n	8001d8c <HAL_UART_Transmit+0xca>
      return HAL_TIMEOUT;
 8001da2:	2003      	movs	r0, #3
 8001da4:	e7f2      	b.n	8001d8c <HAL_UART_Transmit+0xca>
	...

08001da8 <HAL_UART_Receive_DMA>:
{
 8001da8:	b530      	push	{r4, r5, lr}
 8001daa:	b083      	sub	sp, #12
 8001dac:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 8001dae:	f890 003a 	ldrb.w	r0, [r0, #58]	; 0x3a
 8001db2:	b2c0      	uxtb	r0, r0
 8001db4:	2820      	cmp	r0, #32
 8001db6:	d13c      	bne.n	8001e32 <HAL_UART_Receive_DMA+0x8a>
    if ((pData == NULL) || (Size == 0U))
 8001db8:	2900      	cmp	r1, #0
 8001dba:	d03d      	beq.n	8001e38 <HAL_UART_Receive_DMA+0x90>
 8001dbc:	2a00      	cmp	r2, #0
 8001dbe:	d03d      	beq.n	8001e3c <HAL_UART_Receive_DMA+0x94>
    __HAL_LOCK(huart);
 8001dc0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d03b      	beq.n	8001e40 <HAL_UART_Receive_DMA+0x98>
 8001dc8:	2301      	movs	r3, #1
 8001dca:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    huart->pRxBuffPtr = pData;
 8001dce:	62a1      	str	r1, [r4, #40]	; 0x28
    huart->RxXferSize = Size;
 8001dd0:	85a2      	strh	r2, [r4, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dd2:	2500      	movs	r5, #0
 8001dd4:	63e5      	str	r5, [r4, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001dd6:	2322      	movs	r3, #34	; 0x22
 8001dd8:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8001ddc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001dde:	4819      	ldr	r0, [pc, #100]	; (8001e44 <HAL_UART_Receive_DMA+0x9c>)
 8001de0:	6298      	str	r0, [r3, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8001de2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001de4:	4818      	ldr	r0, [pc, #96]	; (8001e48 <HAL_UART_Receive_DMA+0xa0>)
 8001de6:	62d8      	str	r0, [r3, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8001de8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001dea:	4818      	ldr	r0, [pc, #96]	; (8001e4c <HAL_UART_Receive_DMA+0xa4>)
 8001dec:	6318      	str	r0, [r3, #48]	; 0x30
    huart->hdmarx->XferAbortCallback = NULL;
 8001dee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001df0:	635d      	str	r5, [r3, #52]	; 0x34
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8001df2:	6820      	ldr	r0, [r4, #0]
 8001df4:	4613      	mov	r3, r2
 8001df6:	460a      	mov	r2, r1
 8001df8:	1d01      	adds	r1, r0, #4
 8001dfa:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001dfc:	f7ff f800 	bl	8000e00 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_OREFLAG(huart);
 8001e00:	9501      	str	r5, [sp, #4]
 8001e02:	6823      	ldr	r3, [r4, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	9201      	str	r2, [sp, #4]
 8001e08:	685a      	ldr	r2, [r3, #4]
 8001e0a:	9201      	str	r2, [sp, #4]
 8001e0c:	9a01      	ldr	r2, [sp, #4]
    __HAL_UNLOCK(huart);
 8001e0e:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e18:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e1a:	6822      	ldr	r2, [r4, #0]
 8001e1c:	6953      	ldr	r3, [r2, #20]
 8001e1e:	f043 0301 	orr.w	r3, r3, #1
 8001e22:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e24:	6822      	ldr	r2, [r4, #0]
 8001e26:	6953      	ldr	r3, [r2, #20]
 8001e28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e2c:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 8001e2e:	4628      	mov	r0, r5
 8001e30:	e000      	b.n	8001e34 <HAL_UART_Receive_DMA+0x8c>
    return HAL_BUSY;
 8001e32:	2002      	movs	r0, #2
}
 8001e34:	b003      	add	sp, #12
 8001e36:	bd30      	pop	{r4, r5, pc}
      return HAL_ERROR;
 8001e38:	2001      	movs	r0, #1
 8001e3a:	e7fb      	b.n	8001e34 <HAL_UART_Receive_DMA+0x8c>
 8001e3c:	2001      	movs	r0, #1
 8001e3e:	e7f9      	b.n	8001e34 <HAL_UART_Receive_DMA+0x8c>
    __HAL_LOCK(huart);
 8001e40:	2002      	movs	r0, #2
 8001e42:	e7f7      	b.n	8001e34 <HAL_UART_Receive_DMA+0x8c>
 8001e44:	08001ebd 	.word	0x08001ebd
 8001e48:	08001f8f 	.word	0x08001f8f
 8001e4c:	08001f9b 	.word	0x08001f9b

08001e50 <HAL_UART_DMAStop>:
{
 8001e50:	b510      	push	{r4, lr}
 8001e52:	4604      	mov	r4, r0
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8001e54:	6802      	ldr	r2, [r0, #0]
 8001e56:	6951      	ldr	r1, [r2, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8001e58:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b21      	cmp	r3, #33	; 0x21
 8001e60:	d008      	beq.n	8001e74 <HAL_UART_DMAStop+0x24>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001e62:	6822      	ldr	r2, [r4, #0]
 8001e64:	6951      	ldr	r1, [r2, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001e66:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	2b22      	cmp	r3, #34	; 0x22
 8001e6e:	d015      	beq.n	8001e9c <HAL_UART_DMAStop+0x4c>
}
 8001e70:	2000      	movs	r0, #0
 8001e72:	bd10      	pop	{r4, pc}
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8001e74:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001e78:	d0f3      	beq.n	8001e62 <HAL_UART_DMAStop+0x12>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001e7a:	6953      	ldr	r3, [r2, #20]
 8001e7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e80:	6153      	str	r3, [r2, #20]
    if (huart->hdmatx != NULL)
 8001e82:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8001e84:	b108      	cbz	r0, 8001e8a <HAL_UART_DMAStop+0x3a>
      HAL_DMA_Abort(huart->hdmatx);
 8001e86:	f7ff f805 	bl	8000e94 <HAL_DMA_Abort>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8001e8a:	6822      	ldr	r2, [r4, #0]
 8001e8c:	68d3      	ldr	r3, [r2, #12]
 8001e8e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001e92:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001e94:	2320      	movs	r3, #32
 8001e96:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 8001e9a:	e7e2      	b.n	8001e62 <HAL_UART_DMAStop+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001e9c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001ea0:	d0e6      	beq.n	8001e70 <HAL_UART_DMAStop+0x20>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001ea2:	6953      	ldr	r3, [r2, #20]
 8001ea4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ea8:	6153      	str	r3, [r2, #20]
    if (huart->hdmarx != NULL)
 8001eaa:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001eac:	b108      	cbz	r0, 8001eb2 <HAL_UART_DMAStop+0x62>
      HAL_DMA_Abort(huart->hdmarx);
 8001eae:	f7fe fff1 	bl	8000e94 <HAL_DMA_Abort>
    UART_EndRxTransfer(huart);
 8001eb2:	4620      	mov	r0, r4
 8001eb4:	f7ff fe50 	bl	8001b58 <UART_EndRxTransfer>
 8001eb8:	e7da      	b.n	8001e70 <HAL_UART_DMAStop+0x20>

08001eba <HAL_UART_TxCpltCallback>:
}
 8001eba:	4770      	bx	lr

08001ebc <UART_DMAReceiveCplt>:
{
 8001ebc:	b508      	push	{r3, lr}
 8001ebe:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ec0:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f013 0f20 	tst.w	r3, #32
 8001eca:	d113      	bne.n	8001ef4 <UART_DMAReceiveCplt+0x38>
    huart->RxXferCount = 0U;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	85c3      	strh	r3, [r0, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001ed0:	6802      	ldr	r2, [r0, #0]
 8001ed2:	68d3      	ldr	r3, [r2, #12]
 8001ed4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ed8:	60d3      	str	r3, [r2, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001eda:	6802      	ldr	r2, [r0, #0]
 8001edc:	6953      	ldr	r3, [r2, #20]
 8001ede:	f023 0301 	bic.w	r3, r3, #1
 8001ee2:	6153      	str	r3, [r2, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001ee4:	6802      	ldr	r2, [r0, #0]
 8001ee6:	6953      	ldr	r3, [r2, #20]
 8001ee8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001eec:	6153      	str	r3, [r2, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8001eee:	2320      	movs	r3, #32
 8001ef0:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 8001ef4:	f7fe fb58 	bl	80005a8 <HAL_UART_RxCpltCallback>
}
 8001ef8:	bd08      	pop	{r3, pc}

08001efa <UART_Receive_IT>:
{
 8001efa:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001efc:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b22      	cmp	r3, #34	; 0x22
 8001f04:	d130      	bne.n	8001f68 <UART_Receive_IT+0x6e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f06:	6883      	ldr	r3, [r0, #8]
 8001f08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f0c:	d006      	beq.n	8001f1c <UART_Receive_IT+0x22>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001f0e:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001f10:	b183      	cbz	r3, 8001f34 <UART_Receive_IT+0x3a>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001f12:	6803      	ldr	r3, [r0, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f1a:	e02b      	b.n	8001f74 <UART_Receive_IT+0x7a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f1c:	6903      	ldr	r3, [r0, #16]
 8001f1e:	bb2b      	cbnz	r3, 8001f6c <UART_Receive_IT+0x72>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8001f20:	6a82      	ldr	r2, [r0, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001f22:	6803      	ldr	r3, [r0, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f2a:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8001f2c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001f2e:	3302      	adds	r3, #2
 8001f30:	6283      	str	r3, [r0, #40]	; 0x28
 8001f32:	e023      	b.n	8001f7c <UART_Receive_IT+0x82>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001f34:	6903      	ldr	r3, [r0, #16]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1eb      	bne.n	8001f12 <UART_Receive_IT+0x18>
 8001f3a:	e018      	b.n	8001f6e <UART_Receive_IT+0x74>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001f3c:	6802      	ldr	r2, [r0, #0]
 8001f3e:	68d3      	ldr	r3, [r2, #12]
 8001f40:	f023 0320 	bic.w	r3, r3, #32
 8001f44:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001f46:	6802      	ldr	r2, [r0, #0]
 8001f48:	68d3      	ldr	r3, [r2, #12]
 8001f4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f4e:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001f50:	6802      	ldr	r2, [r0, #0]
 8001f52:	6953      	ldr	r3, [r2, #20]
 8001f54:	f023 0301 	bic.w	r3, r3, #1
 8001f58:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001f5a:	2320      	movs	r3, #32
 8001f5c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8001f60:	f7fe fb22 	bl	80005a8 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8001f64:	2000      	movs	r0, #0
 8001f66:	e010      	b.n	8001f8a <UART_Receive_IT+0x90>
    return HAL_BUSY;
 8001f68:	2002      	movs	r0, #2
 8001f6a:	e00e      	b.n	8001f8a <UART_Receive_IT+0x90>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001f6c:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001f6e:	6803      	ldr	r3, [r0, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8001f76:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001f78:	3301      	adds	r3, #1
 8001f7a:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8001f7c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d0d9      	beq.n	8001f3c <UART_Receive_IT+0x42>
    return HAL_OK;
 8001f88:	2000      	movs	r0, #0
}
 8001f8a:	bd08      	pop	{r3, pc}

08001f8c <HAL_UART_RxHalfCpltCallback>:
}
 8001f8c:	4770      	bx	lr

08001f8e <UART_DMARxHalfCplt>:
{
 8001f8e:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 8001f90:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001f92:	f7ff fffb 	bl	8001f8c <HAL_UART_RxHalfCpltCallback>
}
 8001f96:	bd08      	pop	{r3, pc}

08001f98 <HAL_UART_ErrorCallback>:
}
 8001f98:	4770      	bx	lr

08001f9a <UART_DMAError>:
{
 8001f9a:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f9c:	6a44      	ldr	r4, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8001f9e:	6822      	ldr	r2, [r4, #0]
 8001fa0:	6951      	ldr	r1, [r2, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8001fa2:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	2b21      	cmp	r3, #33	; 0x21
 8001faa:	d00e      	beq.n	8001fca <UART_DMAError+0x30>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001fac:	6823      	ldr	r3, [r4, #0]
 8001fae:	695a      	ldr	r2, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001fb0:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	2b22      	cmp	r3, #34	; 0x22
 8001fb8:	d014      	beq.n	8001fe4 <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8001fba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001fbc:	f043 0310 	orr.w	r3, r3, #16
 8001fc0:	63e3      	str	r3, [r4, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8001fc2:	4620      	mov	r0, r4
 8001fc4:	f7ff ffe8 	bl	8001f98 <HAL_UART_ErrorCallback>
}
 8001fc8:	bd10      	pop	{r4, pc}
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8001fca:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001fce:	d0ed      	beq.n	8001fac <UART_DMAError+0x12>
    huart->TxXferCount = 0x00U;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	84e3      	strh	r3, [r4, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8001fd4:	68d3      	ldr	r3, [r2, #12]
 8001fd6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001fda:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001fdc:	2320      	movs	r3, #32
 8001fde:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 8001fe2:	e7e3      	b.n	8001fac <UART_DMAError+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001fe4:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001fe8:	d0e7      	beq.n	8001fba <UART_DMAError+0x20>
    huart->RxXferCount = 0x00U;
 8001fea:	2300      	movs	r3, #0
 8001fec:	85e3      	strh	r3, [r4, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8001fee:	4620      	mov	r0, r4
 8001ff0:	f7ff fdb2 	bl	8001b58 <UART_EndRxTransfer>
 8001ff4:	e7e1      	b.n	8001fba <UART_DMAError+0x20>
	...

08001ff8 <HAL_UART_IRQHandler>:
{
 8001ff8:	b538      	push	{r3, r4, r5, lr}
 8001ffa:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001ffc:	6802      	ldr	r2, [r0, #0]
 8001ffe:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002000:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002002:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 8002004:	f013 0f0f 	tst.w	r3, #15
 8002008:	d109      	bne.n	800201e <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800200a:	f013 0f20 	tst.w	r3, #32
 800200e:	d00c      	beq.n	800202a <HAL_UART_IRQHandler+0x32>
 8002010:	f010 0f20 	tst.w	r0, #32
 8002014:	d009      	beq.n	800202a <HAL_UART_IRQHandler+0x32>
      UART_Receive_IT(huart);
 8002016:	4620      	mov	r0, r4
 8002018:	f7ff ff6f 	bl	8001efa <UART_Receive_IT>
      return;
 800201c:	e012      	b.n	8002044 <HAL_UART_IRQHandler+0x4c>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800201e:	f001 0101 	and.w	r1, r1, #1
 8002022:	f400 7590 	and.w	r5, r0, #288	; 0x120
 8002026:	430d      	orrs	r5, r1
 8002028:	d10d      	bne.n	8002046 <HAL_UART_IRQHandler+0x4e>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800202a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800202e:	d002      	beq.n	8002036 <HAL_UART_IRQHandler+0x3e>
 8002030:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002034:	d170      	bne.n	8002118 <HAL_UART_IRQHandler+0x120>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002036:	f013 0f40 	tst.w	r3, #64	; 0x40
 800203a:	d003      	beq.n	8002044 <HAL_UART_IRQHandler+0x4c>
 800203c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002040:	f040 8095 	bne.w	800216e <HAL_UART_IRQHandler+0x176>
}
 8002044:	bd38      	pop	{r3, r4, r5, pc}
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002046:	f013 0f01 	tst.w	r3, #1
 800204a:	d006      	beq.n	800205a <HAL_UART_IRQHandler+0x62>
 800204c:	f410 7f80 	tst.w	r0, #256	; 0x100
 8002050:	d003      	beq.n	800205a <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002052:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002054:	f042 0201 	orr.w	r2, r2, #1
 8002058:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800205a:	f013 0f04 	tst.w	r3, #4
 800205e:	d00b      	beq.n	8002078 <HAL_UART_IRQHandler+0x80>
 8002060:	b191      	cbz	r1, 8002088 <HAL_UART_IRQHandler+0x90>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002062:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002064:	f042 0202 	orr.w	r2, r2, #2
 8002068:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800206a:	f013 0f02 	tst.w	r3, #2
 800206e:	d107      	bne.n	8002080 <HAL_UART_IRQHandler+0x88>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002070:	f013 0f08 	tst.w	r3, #8
 8002074:	d10f      	bne.n	8002096 <HAL_UART_IRQHandler+0x9e>
 8002076:	e012      	b.n	800209e <HAL_UART_IRQHandler+0xa6>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002078:	f013 0f02 	tst.w	r3, #2
 800207c:	d004      	beq.n	8002088 <HAL_UART_IRQHandler+0x90>
 800207e:	b119      	cbz	r1, 8002088 <HAL_UART_IRQHandler+0x90>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002080:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002082:	f042 0204 	orr.w	r2, r2, #4
 8002086:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002088:	f013 0f08 	tst.w	r3, #8
 800208c:	d007      	beq.n	800209e <HAL_UART_IRQHandler+0xa6>
 800208e:	f000 0220 	and.w	r2, r0, #32
 8002092:	430a      	orrs	r2, r1
 8002094:	d003      	beq.n	800209e <HAL_UART_IRQHandler+0xa6>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002096:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002098:	f042 0208 	orr.w	r2, r2, #8
 800209c:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800209e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80020a0:	2a00      	cmp	r2, #0
 80020a2:	d0cf      	beq.n	8002044 <HAL_UART_IRQHandler+0x4c>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80020a4:	f013 0f20 	tst.w	r3, #32
 80020a8:	d002      	beq.n	80020b0 <HAL_UART_IRQHandler+0xb8>
 80020aa:	f010 0f20 	tst.w	r0, #32
 80020ae:	d10e      	bne.n	80020ce <HAL_UART_IRQHandler+0xd6>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80020b0:	6823      	ldr	r3, [r4, #0]
 80020b2:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80020b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80020b6:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80020ba:	f003 0308 	and.w	r3, r3, #8
 80020be:	4313      	orrs	r3, r2
 80020c0:	d109      	bne.n	80020d6 <HAL_UART_IRQHandler+0xde>
        HAL_UART_ErrorCallback(huart);
 80020c2:	4620      	mov	r0, r4
 80020c4:	f7ff ff68 	bl	8001f98 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020c8:	2300      	movs	r3, #0
 80020ca:	63e3      	str	r3, [r4, #60]	; 0x3c
 80020cc:	e7ba      	b.n	8002044 <HAL_UART_IRQHandler+0x4c>
        UART_Receive_IT(huart);
 80020ce:	4620      	mov	r0, r4
 80020d0:	f7ff ff13 	bl	8001efa <UART_Receive_IT>
 80020d4:	e7ec      	b.n	80020b0 <HAL_UART_IRQHandler+0xb8>
        UART_EndRxTransfer(huart);
 80020d6:	4620      	mov	r0, r4
 80020d8:	f7ff fd3e 	bl	8001b58 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020dc:	6823      	ldr	r3, [r4, #0]
 80020de:	695a      	ldr	r2, [r3, #20]
 80020e0:	f012 0f40 	tst.w	r2, #64	; 0x40
 80020e4:	d014      	beq.n	8002110 <HAL_UART_IRQHandler+0x118>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80020e6:	695a      	ldr	r2, [r3, #20]
 80020e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020ec:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80020ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80020f0:	b153      	cbz	r3, 8002108 <HAL_UART_IRQHandler+0x110>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80020f2:	4a24      	ldr	r2, [pc, #144]	; (8002184 <HAL_UART_IRQHandler+0x18c>)
 80020f4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80020f6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80020f8:	f7fe feee 	bl	8000ed8 <HAL_DMA_Abort_IT>
 80020fc:	2800      	cmp	r0, #0
 80020fe:	d0a1      	beq.n	8002044 <HAL_UART_IRQHandler+0x4c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002100:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002102:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002104:	4798      	blx	r3
 8002106:	e79d      	b.n	8002044 <HAL_UART_IRQHandler+0x4c>
            HAL_UART_ErrorCallback(huart);
 8002108:	4620      	mov	r0, r4
 800210a:	f7ff ff45 	bl	8001f98 <HAL_UART_ErrorCallback>
 800210e:	e799      	b.n	8002044 <HAL_UART_IRQHandler+0x4c>
          HAL_UART_ErrorCallback(huart);
 8002110:	4620      	mov	r0, r4
 8002112:	f7ff ff41 	bl	8001f98 <HAL_UART_ErrorCallback>
 8002116:	e795      	b.n	8002044 <HAL_UART_IRQHandler+0x4c>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002118:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b21      	cmp	r3, #33	; 0x21
 8002120:	d190      	bne.n	8002044 <HAL_UART_IRQHandler+0x4c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002122:	68a3      	ldr	r3, [r4, #8]
 8002124:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002128:	d015      	beq.n	8002156 <HAL_UART_IRQHandler+0x15e>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800212a:	6a23      	ldr	r3, [r4, #32]
 800212c:	1c59      	adds	r1, r3, #1
 800212e:	6221      	str	r1, [r4, #32]
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	6053      	str	r3, [r2, #4]
    if (--huart->TxXferCount == 0U)
 8002134:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002136:	3b01      	subs	r3, #1
 8002138:	b29b      	uxth	r3, r3
 800213a:	84e3      	strh	r3, [r4, #38]	; 0x26
 800213c:	2b00      	cmp	r3, #0
 800213e:	d181      	bne.n	8002044 <HAL_UART_IRQHandler+0x4c>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002140:	6822      	ldr	r2, [r4, #0]
 8002142:	68d3      	ldr	r3, [r2, #12]
 8002144:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002148:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800214a:	6822      	ldr	r2, [r4, #0]
 800214c:	68d3      	ldr	r3, [r2, #12]
 800214e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002152:	60d3      	str	r3, [r2, #12]
 8002154:	e776      	b.n	8002044 <HAL_UART_IRQHandler+0x4c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002156:	6923      	ldr	r3, [r4, #16]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d1e6      	bne.n	800212a <HAL_UART_IRQHandler+0x132>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800215c:	6a23      	ldr	r3, [r4, #32]
 800215e:	881b      	ldrh	r3, [r3, #0]
 8002160:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002164:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 8002166:	6a23      	ldr	r3, [r4, #32]
 8002168:	3302      	adds	r3, #2
 800216a:	6223      	str	r3, [r4, #32]
 800216c:	e7e2      	b.n	8002134 <HAL_UART_IRQHandler+0x13c>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800216e:	68d3      	ldr	r3, [r2, #12]
 8002170:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002174:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002176:	2320      	movs	r3, #32
 8002178:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 800217c:	4620      	mov	r0, r4
 800217e:	f7ff fe9c 	bl	8001eba <HAL_UART_TxCpltCallback>
  return HAL_OK;
 8002182:	e75f      	b.n	8002044 <HAL_UART_IRQHandler+0x4c>
 8002184:	08002189 	.word	0x08002189

08002188 <UART_DMAAbortOnError>:
{
 8002188:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800218a:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 800218c:	2300      	movs	r3, #0
 800218e:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002190:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8002192:	f7ff ff01 	bl	8001f98 <HAL_UART_ErrorCallback>
}
 8002196:	bd08      	pop	{r3, pc}

08002198 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002198:	b084      	sub	sp, #16
 800219a:	a801      	add	r0, sp, #4
 800219c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 80021a0:	2000      	movs	r0, #0
 80021a2:	b004      	add	sp, #16
 80021a4:	4770      	bx	lr

080021a6 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80021a6:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80021aa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80021ae:	045b      	lsls	r3, r3, #17
 80021b0:	0c5b      	lsrs	r3, r3, #17
 80021b2:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 80021b6:	2000      	movs	r0, #0
 80021b8:	4770      	bx	lr

080021ba <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80021ba:	2000      	movs	r0, #0
 80021bc:	4770      	bx	lr

080021be <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80021be:	b084      	sub	sp, #16
 80021c0:	b410      	push	{r4}
 80021c2:	4604      	mov	r4, r0
 80021c4:	a802      	add	r0, sp, #8
 80021c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80021ca:	2301      	movs	r3, #1
 80021cc:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80021d0:	2000      	movs	r0, #0
 80021d2:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80021d6:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80021da:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50

  return HAL_OK;
}
 80021de:	bc10      	pop	{r4}
 80021e0:	b004      	add	sp, #16
 80021e2:	4770      	bx	lr

080021e4 <USB_DevDisconnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 80021e4:	2000      	movs	r0, #0
 80021e6:	4770      	bx	lr

080021e8 <__libc_init_array>:
 80021e8:	b570      	push	{r4, r5, r6, lr}
 80021ea:	2600      	movs	r6, #0
 80021ec:	4d0c      	ldr	r5, [pc, #48]	; (8002220 <__libc_init_array+0x38>)
 80021ee:	4c0d      	ldr	r4, [pc, #52]	; (8002224 <__libc_init_array+0x3c>)
 80021f0:	1b64      	subs	r4, r4, r5
 80021f2:	10a4      	asrs	r4, r4, #2
 80021f4:	42a6      	cmp	r6, r4
 80021f6:	d109      	bne.n	800220c <__libc_init_array+0x24>
 80021f8:	f000 fc94 	bl	8002b24 <_init>
 80021fc:	2600      	movs	r6, #0
 80021fe:	4d0a      	ldr	r5, [pc, #40]	; (8002228 <__libc_init_array+0x40>)
 8002200:	4c0a      	ldr	r4, [pc, #40]	; (800222c <__libc_init_array+0x44>)
 8002202:	1b64      	subs	r4, r4, r5
 8002204:	10a4      	asrs	r4, r4, #2
 8002206:	42a6      	cmp	r6, r4
 8002208:	d105      	bne.n	8002216 <__libc_init_array+0x2e>
 800220a:	bd70      	pop	{r4, r5, r6, pc}
 800220c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002210:	4798      	blx	r3
 8002212:	3601      	adds	r6, #1
 8002214:	e7ee      	b.n	80021f4 <__libc_init_array+0xc>
 8002216:	f855 3b04 	ldr.w	r3, [r5], #4
 800221a:	4798      	blx	r3
 800221c:	3601      	adds	r6, #1
 800221e:	e7f2      	b.n	8002206 <__libc_init_array+0x1e>
 8002220:	08002bc8 	.word	0x08002bc8
 8002224:	08002bc8 	.word	0x08002bc8
 8002228:	08002bc8 	.word	0x08002bc8
 800222c:	08002bcc 	.word	0x08002bcc

08002230 <malloc>:
 8002230:	4b02      	ldr	r3, [pc, #8]	; (800223c <malloc+0xc>)
 8002232:	4601      	mov	r1, r0
 8002234:	6818      	ldr	r0, [r3, #0]
 8002236:	f000 b85f 	b.w	80022f8 <_malloc_r>
 800223a:	bf00      	nop
 800223c:	2000000c 	.word	0x2000000c

08002240 <free>:
 8002240:	4b02      	ldr	r3, [pc, #8]	; (800224c <free+0xc>)
 8002242:	4601      	mov	r1, r0
 8002244:	6818      	ldr	r0, [r3, #0]
 8002246:	f000 b80b 	b.w	8002260 <_free_r>
 800224a:	bf00      	nop
 800224c:	2000000c 	.word	0x2000000c

08002250 <memset>:
 8002250:	4603      	mov	r3, r0
 8002252:	4402      	add	r2, r0
 8002254:	4293      	cmp	r3, r2
 8002256:	d100      	bne.n	800225a <memset+0xa>
 8002258:	4770      	bx	lr
 800225a:	f803 1b01 	strb.w	r1, [r3], #1
 800225e:	e7f9      	b.n	8002254 <memset+0x4>

08002260 <_free_r>:
 8002260:	b538      	push	{r3, r4, r5, lr}
 8002262:	4605      	mov	r5, r0
 8002264:	2900      	cmp	r1, #0
 8002266:	d043      	beq.n	80022f0 <_free_r+0x90>
 8002268:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800226c:	1f0c      	subs	r4, r1, #4
 800226e:	2b00      	cmp	r3, #0
 8002270:	bfb8      	it	lt
 8002272:	18e4      	addlt	r4, r4, r3
 8002274:	f000 f8e4 	bl	8002440 <__malloc_lock>
 8002278:	4a1e      	ldr	r2, [pc, #120]	; (80022f4 <_free_r+0x94>)
 800227a:	6813      	ldr	r3, [r2, #0]
 800227c:	4610      	mov	r0, r2
 800227e:	b933      	cbnz	r3, 800228e <_free_r+0x2e>
 8002280:	6063      	str	r3, [r4, #4]
 8002282:	6014      	str	r4, [r2, #0]
 8002284:	4628      	mov	r0, r5
 8002286:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800228a:	f000 b8df 	b.w	800244c <__malloc_unlock>
 800228e:	42a3      	cmp	r3, r4
 8002290:	d90a      	bls.n	80022a8 <_free_r+0x48>
 8002292:	6821      	ldr	r1, [r4, #0]
 8002294:	1862      	adds	r2, r4, r1
 8002296:	4293      	cmp	r3, r2
 8002298:	bf01      	itttt	eq
 800229a:	681a      	ldreq	r2, [r3, #0]
 800229c:	685b      	ldreq	r3, [r3, #4]
 800229e:	1852      	addeq	r2, r2, r1
 80022a0:	6022      	streq	r2, [r4, #0]
 80022a2:	6063      	str	r3, [r4, #4]
 80022a4:	6004      	str	r4, [r0, #0]
 80022a6:	e7ed      	b.n	8002284 <_free_r+0x24>
 80022a8:	461a      	mov	r2, r3
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	b10b      	cbz	r3, 80022b2 <_free_r+0x52>
 80022ae:	42a3      	cmp	r3, r4
 80022b0:	d9fa      	bls.n	80022a8 <_free_r+0x48>
 80022b2:	6811      	ldr	r1, [r2, #0]
 80022b4:	1850      	adds	r0, r2, r1
 80022b6:	42a0      	cmp	r0, r4
 80022b8:	d10b      	bne.n	80022d2 <_free_r+0x72>
 80022ba:	6820      	ldr	r0, [r4, #0]
 80022bc:	4401      	add	r1, r0
 80022be:	1850      	adds	r0, r2, r1
 80022c0:	4283      	cmp	r3, r0
 80022c2:	6011      	str	r1, [r2, #0]
 80022c4:	d1de      	bne.n	8002284 <_free_r+0x24>
 80022c6:	6818      	ldr	r0, [r3, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	4401      	add	r1, r0
 80022cc:	6011      	str	r1, [r2, #0]
 80022ce:	6053      	str	r3, [r2, #4]
 80022d0:	e7d8      	b.n	8002284 <_free_r+0x24>
 80022d2:	d902      	bls.n	80022da <_free_r+0x7a>
 80022d4:	230c      	movs	r3, #12
 80022d6:	602b      	str	r3, [r5, #0]
 80022d8:	e7d4      	b.n	8002284 <_free_r+0x24>
 80022da:	6820      	ldr	r0, [r4, #0]
 80022dc:	1821      	adds	r1, r4, r0
 80022de:	428b      	cmp	r3, r1
 80022e0:	bf01      	itttt	eq
 80022e2:	6819      	ldreq	r1, [r3, #0]
 80022e4:	685b      	ldreq	r3, [r3, #4]
 80022e6:	1809      	addeq	r1, r1, r0
 80022e8:	6021      	streq	r1, [r4, #0]
 80022ea:	6063      	str	r3, [r4, #4]
 80022ec:	6054      	str	r4, [r2, #4]
 80022ee:	e7c9      	b.n	8002284 <_free_r+0x24>
 80022f0:	bd38      	pop	{r3, r4, r5, pc}
 80022f2:	bf00      	nop
 80022f4:	2000014c 	.word	0x2000014c

080022f8 <_malloc_r>:
 80022f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022fa:	1ccd      	adds	r5, r1, #3
 80022fc:	f025 0503 	bic.w	r5, r5, #3
 8002300:	3508      	adds	r5, #8
 8002302:	2d0c      	cmp	r5, #12
 8002304:	bf38      	it	cc
 8002306:	250c      	movcc	r5, #12
 8002308:	2d00      	cmp	r5, #0
 800230a:	4606      	mov	r6, r0
 800230c:	db01      	blt.n	8002312 <_malloc_r+0x1a>
 800230e:	42a9      	cmp	r1, r5
 8002310:	d903      	bls.n	800231a <_malloc_r+0x22>
 8002312:	230c      	movs	r3, #12
 8002314:	6033      	str	r3, [r6, #0]
 8002316:	2000      	movs	r0, #0
 8002318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800231a:	f000 f891 	bl	8002440 <__malloc_lock>
 800231e:	4921      	ldr	r1, [pc, #132]	; (80023a4 <_malloc_r+0xac>)
 8002320:	680a      	ldr	r2, [r1, #0]
 8002322:	4614      	mov	r4, r2
 8002324:	b99c      	cbnz	r4, 800234e <_malloc_r+0x56>
 8002326:	4f20      	ldr	r7, [pc, #128]	; (80023a8 <_malloc_r+0xb0>)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	b923      	cbnz	r3, 8002336 <_malloc_r+0x3e>
 800232c:	4621      	mov	r1, r4
 800232e:	4630      	mov	r0, r6
 8002330:	f000 f83c 	bl	80023ac <_sbrk_r>
 8002334:	6038      	str	r0, [r7, #0]
 8002336:	4629      	mov	r1, r5
 8002338:	4630      	mov	r0, r6
 800233a:	f000 f837 	bl	80023ac <_sbrk_r>
 800233e:	1c43      	adds	r3, r0, #1
 8002340:	d123      	bne.n	800238a <_malloc_r+0x92>
 8002342:	230c      	movs	r3, #12
 8002344:	4630      	mov	r0, r6
 8002346:	6033      	str	r3, [r6, #0]
 8002348:	f000 f880 	bl	800244c <__malloc_unlock>
 800234c:	e7e3      	b.n	8002316 <_malloc_r+0x1e>
 800234e:	6823      	ldr	r3, [r4, #0]
 8002350:	1b5b      	subs	r3, r3, r5
 8002352:	d417      	bmi.n	8002384 <_malloc_r+0x8c>
 8002354:	2b0b      	cmp	r3, #11
 8002356:	d903      	bls.n	8002360 <_malloc_r+0x68>
 8002358:	6023      	str	r3, [r4, #0]
 800235a:	441c      	add	r4, r3
 800235c:	6025      	str	r5, [r4, #0]
 800235e:	e004      	b.n	800236a <_malloc_r+0x72>
 8002360:	6863      	ldr	r3, [r4, #4]
 8002362:	42a2      	cmp	r2, r4
 8002364:	bf0c      	ite	eq
 8002366:	600b      	streq	r3, [r1, #0]
 8002368:	6053      	strne	r3, [r2, #4]
 800236a:	4630      	mov	r0, r6
 800236c:	f000 f86e 	bl	800244c <__malloc_unlock>
 8002370:	f104 000b 	add.w	r0, r4, #11
 8002374:	1d23      	adds	r3, r4, #4
 8002376:	f020 0007 	bic.w	r0, r0, #7
 800237a:	1ac2      	subs	r2, r0, r3
 800237c:	d0cc      	beq.n	8002318 <_malloc_r+0x20>
 800237e:	1a1b      	subs	r3, r3, r0
 8002380:	50a3      	str	r3, [r4, r2]
 8002382:	e7c9      	b.n	8002318 <_malloc_r+0x20>
 8002384:	4622      	mov	r2, r4
 8002386:	6864      	ldr	r4, [r4, #4]
 8002388:	e7cc      	b.n	8002324 <_malloc_r+0x2c>
 800238a:	1cc4      	adds	r4, r0, #3
 800238c:	f024 0403 	bic.w	r4, r4, #3
 8002390:	42a0      	cmp	r0, r4
 8002392:	d0e3      	beq.n	800235c <_malloc_r+0x64>
 8002394:	1a21      	subs	r1, r4, r0
 8002396:	4630      	mov	r0, r6
 8002398:	f000 f808 	bl	80023ac <_sbrk_r>
 800239c:	3001      	adds	r0, #1
 800239e:	d1dd      	bne.n	800235c <_malloc_r+0x64>
 80023a0:	e7cf      	b.n	8002342 <_malloc_r+0x4a>
 80023a2:	bf00      	nop
 80023a4:	2000014c 	.word	0x2000014c
 80023a8:	20000150 	.word	0x20000150

080023ac <_sbrk_r>:
 80023ac:	b538      	push	{r3, r4, r5, lr}
 80023ae:	2300      	movs	r3, #0
 80023b0:	4d05      	ldr	r5, [pc, #20]	; (80023c8 <_sbrk_r+0x1c>)
 80023b2:	4604      	mov	r4, r0
 80023b4:	4608      	mov	r0, r1
 80023b6:	602b      	str	r3, [r5, #0]
 80023b8:	f000 fba6 	bl	8002b08 <_sbrk>
 80023bc:	1c43      	adds	r3, r0, #1
 80023be:	d102      	bne.n	80023c6 <_sbrk_r+0x1a>
 80023c0:	682b      	ldr	r3, [r5, #0]
 80023c2:	b103      	cbz	r3, 80023c6 <_sbrk_r+0x1a>
 80023c4:	6023      	str	r3, [r4, #0]
 80023c6:	bd38      	pop	{r3, r4, r5, pc}
 80023c8:	20000550 	.word	0x20000550

080023cc <siprintf>:
 80023cc:	b40e      	push	{r1, r2, r3}
 80023ce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80023d2:	b500      	push	{lr}
 80023d4:	b09c      	sub	sp, #112	; 0x70
 80023d6:	ab1d      	add	r3, sp, #116	; 0x74
 80023d8:	9002      	str	r0, [sp, #8]
 80023da:	9006      	str	r0, [sp, #24]
 80023dc:	9107      	str	r1, [sp, #28]
 80023de:	9104      	str	r1, [sp, #16]
 80023e0:	4808      	ldr	r0, [pc, #32]	; (8002404 <siprintf+0x38>)
 80023e2:	4909      	ldr	r1, [pc, #36]	; (8002408 <siprintf+0x3c>)
 80023e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80023e8:	9105      	str	r1, [sp, #20]
 80023ea:	6800      	ldr	r0, [r0, #0]
 80023ec:	a902      	add	r1, sp, #8
 80023ee:	9301      	str	r3, [sp, #4]
 80023f0:	f000 f88e 	bl	8002510 <_svfiprintf_r>
 80023f4:	2200      	movs	r2, #0
 80023f6:	9b02      	ldr	r3, [sp, #8]
 80023f8:	701a      	strb	r2, [r3, #0]
 80023fa:	b01c      	add	sp, #112	; 0x70
 80023fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8002400:	b003      	add	sp, #12
 8002402:	4770      	bx	lr
 8002404:	2000000c 	.word	0x2000000c
 8002408:	ffff0208 	.word	0xffff0208

0800240c <strcpy>:
 800240c:	4603      	mov	r3, r0
 800240e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002412:	f803 2b01 	strb.w	r2, [r3], #1
 8002416:	2a00      	cmp	r2, #0
 8002418:	d1f9      	bne.n	800240e <strcpy+0x2>
 800241a:	4770      	bx	lr

0800241c <strncmp>:
 800241c:	b510      	push	{r4, lr}
 800241e:	b16a      	cbz	r2, 800243c <strncmp+0x20>
 8002420:	3901      	subs	r1, #1
 8002422:	1884      	adds	r4, r0, r2
 8002424:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002428:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800242c:	4293      	cmp	r3, r2
 800242e:	d103      	bne.n	8002438 <strncmp+0x1c>
 8002430:	42a0      	cmp	r0, r4
 8002432:	d001      	beq.n	8002438 <strncmp+0x1c>
 8002434:	2b00      	cmp	r3, #0
 8002436:	d1f5      	bne.n	8002424 <strncmp+0x8>
 8002438:	1a98      	subs	r0, r3, r2
 800243a:	bd10      	pop	{r4, pc}
 800243c:	4610      	mov	r0, r2
 800243e:	e7fc      	b.n	800243a <strncmp+0x1e>

08002440 <__malloc_lock>:
 8002440:	4801      	ldr	r0, [pc, #4]	; (8002448 <__malloc_lock+0x8>)
 8002442:	f000 bafb 	b.w	8002a3c <__retarget_lock_acquire_recursive>
 8002446:	bf00      	nop
 8002448:	20000558 	.word	0x20000558

0800244c <__malloc_unlock>:
 800244c:	4801      	ldr	r0, [pc, #4]	; (8002454 <__malloc_unlock+0x8>)
 800244e:	f000 baf6 	b.w	8002a3e <__retarget_lock_release_recursive>
 8002452:	bf00      	nop
 8002454:	20000558 	.word	0x20000558

08002458 <__ssputs_r>:
 8002458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800245c:	688e      	ldr	r6, [r1, #8]
 800245e:	4682      	mov	sl, r0
 8002460:	429e      	cmp	r6, r3
 8002462:	460c      	mov	r4, r1
 8002464:	4690      	mov	r8, r2
 8002466:	461f      	mov	r7, r3
 8002468:	d838      	bhi.n	80024dc <__ssputs_r+0x84>
 800246a:	898a      	ldrh	r2, [r1, #12]
 800246c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002470:	d032      	beq.n	80024d8 <__ssputs_r+0x80>
 8002472:	6825      	ldr	r5, [r4, #0]
 8002474:	6909      	ldr	r1, [r1, #16]
 8002476:	3301      	adds	r3, #1
 8002478:	eba5 0901 	sub.w	r9, r5, r1
 800247c:	6965      	ldr	r5, [r4, #20]
 800247e:	444b      	add	r3, r9
 8002480:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002484:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002488:	106d      	asrs	r5, r5, #1
 800248a:	429d      	cmp	r5, r3
 800248c:	bf38      	it	cc
 800248e:	461d      	movcc	r5, r3
 8002490:	0553      	lsls	r3, r2, #21
 8002492:	d531      	bpl.n	80024f8 <__ssputs_r+0xa0>
 8002494:	4629      	mov	r1, r5
 8002496:	f7ff ff2f 	bl	80022f8 <_malloc_r>
 800249a:	4606      	mov	r6, r0
 800249c:	b950      	cbnz	r0, 80024b4 <__ssputs_r+0x5c>
 800249e:	230c      	movs	r3, #12
 80024a0:	f04f 30ff 	mov.w	r0, #4294967295
 80024a4:	f8ca 3000 	str.w	r3, [sl]
 80024a8:	89a3      	ldrh	r3, [r4, #12]
 80024aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024ae:	81a3      	strh	r3, [r4, #12]
 80024b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024b4:	464a      	mov	r2, r9
 80024b6:	6921      	ldr	r1, [r4, #16]
 80024b8:	f000 fad0 	bl	8002a5c <memcpy>
 80024bc:	89a3      	ldrh	r3, [r4, #12]
 80024be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80024c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024c6:	81a3      	strh	r3, [r4, #12]
 80024c8:	6126      	str	r6, [r4, #16]
 80024ca:	444e      	add	r6, r9
 80024cc:	6026      	str	r6, [r4, #0]
 80024ce:	463e      	mov	r6, r7
 80024d0:	6165      	str	r5, [r4, #20]
 80024d2:	eba5 0509 	sub.w	r5, r5, r9
 80024d6:	60a5      	str	r5, [r4, #8]
 80024d8:	42be      	cmp	r6, r7
 80024da:	d900      	bls.n	80024de <__ssputs_r+0x86>
 80024dc:	463e      	mov	r6, r7
 80024de:	4632      	mov	r2, r6
 80024e0:	4641      	mov	r1, r8
 80024e2:	6820      	ldr	r0, [r4, #0]
 80024e4:	f000 fac8 	bl	8002a78 <memmove>
 80024e8:	68a3      	ldr	r3, [r4, #8]
 80024ea:	6822      	ldr	r2, [r4, #0]
 80024ec:	1b9b      	subs	r3, r3, r6
 80024ee:	4432      	add	r2, r6
 80024f0:	2000      	movs	r0, #0
 80024f2:	60a3      	str	r3, [r4, #8]
 80024f4:	6022      	str	r2, [r4, #0]
 80024f6:	e7db      	b.n	80024b0 <__ssputs_r+0x58>
 80024f8:	462a      	mov	r2, r5
 80024fa:	f000 fad7 	bl	8002aac <_realloc_r>
 80024fe:	4606      	mov	r6, r0
 8002500:	2800      	cmp	r0, #0
 8002502:	d1e1      	bne.n	80024c8 <__ssputs_r+0x70>
 8002504:	4650      	mov	r0, sl
 8002506:	6921      	ldr	r1, [r4, #16]
 8002508:	f7ff feaa 	bl	8002260 <_free_r>
 800250c:	e7c7      	b.n	800249e <__ssputs_r+0x46>
	...

08002510 <_svfiprintf_r>:
 8002510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002514:	4698      	mov	r8, r3
 8002516:	898b      	ldrh	r3, [r1, #12]
 8002518:	4607      	mov	r7, r0
 800251a:	061b      	lsls	r3, r3, #24
 800251c:	460d      	mov	r5, r1
 800251e:	4614      	mov	r4, r2
 8002520:	b09d      	sub	sp, #116	; 0x74
 8002522:	d50e      	bpl.n	8002542 <_svfiprintf_r+0x32>
 8002524:	690b      	ldr	r3, [r1, #16]
 8002526:	b963      	cbnz	r3, 8002542 <_svfiprintf_r+0x32>
 8002528:	2140      	movs	r1, #64	; 0x40
 800252a:	f7ff fee5 	bl	80022f8 <_malloc_r>
 800252e:	6028      	str	r0, [r5, #0]
 8002530:	6128      	str	r0, [r5, #16]
 8002532:	b920      	cbnz	r0, 800253e <_svfiprintf_r+0x2e>
 8002534:	230c      	movs	r3, #12
 8002536:	603b      	str	r3, [r7, #0]
 8002538:	f04f 30ff 	mov.w	r0, #4294967295
 800253c:	e0d1      	b.n	80026e2 <_svfiprintf_r+0x1d2>
 800253e:	2340      	movs	r3, #64	; 0x40
 8002540:	616b      	str	r3, [r5, #20]
 8002542:	2300      	movs	r3, #0
 8002544:	9309      	str	r3, [sp, #36]	; 0x24
 8002546:	2320      	movs	r3, #32
 8002548:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800254c:	2330      	movs	r3, #48	; 0x30
 800254e:	f04f 0901 	mov.w	r9, #1
 8002552:	f8cd 800c 	str.w	r8, [sp, #12]
 8002556:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80026fc <_svfiprintf_r+0x1ec>
 800255a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800255e:	4623      	mov	r3, r4
 8002560:	469a      	mov	sl, r3
 8002562:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002566:	b10a      	cbz	r2, 800256c <_svfiprintf_r+0x5c>
 8002568:	2a25      	cmp	r2, #37	; 0x25
 800256a:	d1f9      	bne.n	8002560 <_svfiprintf_r+0x50>
 800256c:	ebba 0b04 	subs.w	fp, sl, r4
 8002570:	d00b      	beq.n	800258a <_svfiprintf_r+0x7a>
 8002572:	465b      	mov	r3, fp
 8002574:	4622      	mov	r2, r4
 8002576:	4629      	mov	r1, r5
 8002578:	4638      	mov	r0, r7
 800257a:	f7ff ff6d 	bl	8002458 <__ssputs_r>
 800257e:	3001      	adds	r0, #1
 8002580:	f000 80aa 	beq.w	80026d8 <_svfiprintf_r+0x1c8>
 8002584:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002586:	445a      	add	r2, fp
 8002588:	9209      	str	r2, [sp, #36]	; 0x24
 800258a:	f89a 3000 	ldrb.w	r3, [sl]
 800258e:	2b00      	cmp	r3, #0
 8002590:	f000 80a2 	beq.w	80026d8 <_svfiprintf_r+0x1c8>
 8002594:	2300      	movs	r3, #0
 8002596:	f04f 32ff 	mov.w	r2, #4294967295
 800259a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800259e:	f10a 0a01 	add.w	sl, sl, #1
 80025a2:	9304      	str	r3, [sp, #16]
 80025a4:	9307      	str	r3, [sp, #28]
 80025a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80025aa:	931a      	str	r3, [sp, #104]	; 0x68
 80025ac:	4654      	mov	r4, sl
 80025ae:	2205      	movs	r2, #5
 80025b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80025b4:	4851      	ldr	r0, [pc, #324]	; (80026fc <_svfiprintf_r+0x1ec>)
 80025b6:	f000 fa43 	bl	8002a40 <memchr>
 80025ba:	9a04      	ldr	r2, [sp, #16]
 80025bc:	b9d8      	cbnz	r0, 80025f6 <_svfiprintf_r+0xe6>
 80025be:	06d0      	lsls	r0, r2, #27
 80025c0:	bf44      	itt	mi
 80025c2:	2320      	movmi	r3, #32
 80025c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80025c8:	0711      	lsls	r1, r2, #28
 80025ca:	bf44      	itt	mi
 80025cc:	232b      	movmi	r3, #43	; 0x2b
 80025ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80025d2:	f89a 3000 	ldrb.w	r3, [sl]
 80025d6:	2b2a      	cmp	r3, #42	; 0x2a
 80025d8:	d015      	beq.n	8002606 <_svfiprintf_r+0xf6>
 80025da:	4654      	mov	r4, sl
 80025dc:	2000      	movs	r0, #0
 80025de:	f04f 0c0a 	mov.w	ip, #10
 80025e2:	9a07      	ldr	r2, [sp, #28]
 80025e4:	4621      	mov	r1, r4
 80025e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80025ea:	3b30      	subs	r3, #48	; 0x30
 80025ec:	2b09      	cmp	r3, #9
 80025ee:	d94e      	bls.n	800268e <_svfiprintf_r+0x17e>
 80025f0:	b1b0      	cbz	r0, 8002620 <_svfiprintf_r+0x110>
 80025f2:	9207      	str	r2, [sp, #28]
 80025f4:	e014      	b.n	8002620 <_svfiprintf_r+0x110>
 80025f6:	eba0 0308 	sub.w	r3, r0, r8
 80025fa:	fa09 f303 	lsl.w	r3, r9, r3
 80025fe:	4313      	orrs	r3, r2
 8002600:	46a2      	mov	sl, r4
 8002602:	9304      	str	r3, [sp, #16]
 8002604:	e7d2      	b.n	80025ac <_svfiprintf_r+0x9c>
 8002606:	9b03      	ldr	r3, [sp, #12]
 8002608:	1d19      	adds	r1, r3, #4
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	9103      	str	r1, [sp, #12]
 800260e:	2b00      	cmp	r3, #0
 8002610:	bfbb      	ittet	lt
 8002612:	425b      	neglt	r3, r3
 8002614:	f042 0202 	orrlt.w	r2, r2, #2
 8002618:	9307      	strge	r3, [sp, #28]
 800261a:	9307      	strlt	r3, [sp, #28]
 800261c:	bfb8      	it	lt
 800261e:	9204      	strlt	r2, [sp, #16]
 8002620:	7823      	ldrb	r3, [r4, #0]
 8002622:	2b2e      	cmp	r3, #46	; 0x2e
 8002624:	d10c      	bne.n	8002640 <_svfiprintf_r+0x130>
 8002626:	7863      	ldrb	r3, [r4, #1]
 8002628:	2b2a      	cmp	r3, #42	; 0x2a
 800262a:	d135      	bne.n	8002698 <_svfiprintf_r+0x188>
 800262c:	9b03      	ldr	r3, [sp, #12]
 800262e:	3402      	adds	r4, #2
 8002630:	1d1a      	adds	r2, r3, #4
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	9203      	str	r2, [sp, #12]
 8002636:	2b00      	cmp	r3, #0
 8002638:	bfb8      	it	lt
 800263a:	f04f 33ff 	movlt.w	r3, #4294967295
 800263e:	9305      	str	r3, [sp, #20]
 8002640:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800270c <_svfiprintf_r+0x1fc>
 8002644:	2203      	movs	r2, #3
 8002646:	4650      	mov	r0, sl
 8002648:	7821      	ldrb	r1, [r4, #0]
 800264a:	f000 f9f9 	bl	8002a40 <memchr>
 800264e:	b140      	cbz	r0, 8002662 <_svfiprintf_r+0x152>
 8002650:	2340      	movs	r3, #64	; 0x40
 8002652:	eba0 000a 	sub.w	r0, r0, sl
 8002656:	fa03 f000 	lsl.w	r0, r3, r0
 800265a:	9b04      	ldr	r3, [sp, #16]
 800265c:	3401      	adds	r4, #1
 800265e:	4303      	orrs	r3, r0
 8002660:	9304      	str	r3, [sp, #16]
 8002662:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002666:	2206      	movs	r2, #6
 8002668:	4825      	ldr	r0, [pc, #148]	; (8002700 <_svfiprintf_r+0x1f0>)
 800266a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800266e:	f000 f9e7 	bl	8002a40 <memchr>
 8002672:	2800      	cmp	r0, #0
 8002674:	d038      	beq.n	80026e8 <_svfiprintf_r+0x1d8>
 8002676:	4b23      	ldr	r3, [pc, #140]	; (8002704 <_svfiprintf_r+0x1f4>)
 8002678:	bb1b      	cbnz	r3, 80026c2 <_svfiprintf_r+0x1b2>
 800267a:	9b03      	ldr	r3, [sp, #12]
 800267c:	3307      	adds	r3, #7
 800267e:	f023 0307 	bic.w	r3, r3, #7
 8002682:	3308      	adds	r3, #8
 8002684:	9303      	str	r3, [sp, #12]
 8002686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002688:	4433      	add	r3, r6
 800268a:	9309      	str	r3, [sp, #36]	; 0x24
 800268c:	e767      	b.n	800255e <_svfiprintf_r+0x4e>
 800268e:	460c      	mov	r4, r1
 8002690:	2001      	movs	r0, #1
 8002692:	fb0c 3202 	mla	r2, ip, r2, r3
 8002696:	e7a5      	b.n	80025e4 <_svfiprintf_r+0xd4>
 8002698:	2300      	movs	r3, #0
 800269a:	f04f 0c0a 	mov.w	ip, #10
 800269e:	4619      	mov	r1, r3
 80026a0:	3401      	adds	r4, #1
 80026a2:	9305      	str	r3, [sp, #20]
 80026a4:	4620      	mov	r0, r4
 80026a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80026aa:	3a30      	subs	r2, #48	; 0x30
 80026ac:	2a09      	cmp	r2, #9
 80026ae:	d903      	bls.n	80026b8 <_svfiprintf_r+0x1a8>
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d0c5      	beq.n	8002640 <_svfiprintf_r+0x130>
 80026b4:	9105      	str	r1, [sp, #20]
 80026b6:	e7c3      	b.n	8002640 <_svfiprintf_r+0x130>
 80026b8:	4604      	mov	r4, r0
 80026ba:	2301      	movs	r3, #1
 80026bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80026c0:	e7f0      	b.n	80026a4 <_svfiprintf_r+0x194>
 80026c2:	ab03      	add	r3, sp, #12
 80026c4:	9300      	str	r3, [sp, #0]
 80026c6:	462a      	mov	r2, r5
 80026c8:	4638      	mov	r0, r7
 80026ca:	4b0f      	ldr	r3, [pc, #60]	; (8002708 <_svfiprintf_r+0x1f8>)
 80026cc:	a904      	add	r1, sp, #16
 80026ce:	f3af 8000 	nop.w
 80026d2:	1c42      	adds	r2, r0, #1
 80026d4:	4606      	mov	r6, r0
 80026d6:	d1d6      	bne.n	8002686 <_svfiprintf_r+0x176>
 80026d8:	89ab      	ldrh	r3, [r5, #12]
 80026da:	065b      	lsls	r3, r3, #25
 80026dc:	f53f af2c 	bmi.w	8002538 <_svfiprintf_r+0x28>
 80026e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80026e2:	b01d      	add	sp, #116	; 0x74
 80026e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026e8:	ab03      	add	r3, sp, #12
 80026ea:	9300      	str	r3, [sp, #0]
 80026ec:	462a      	mov	r2, r5
 80026ee:	4638      	mov	r0, r7
 80026f0:	4b05      	ldr	r3, [pc, #20]	; (8002708 <_svfiprintf_r+0x1f8>)
 80026f2:	a904      	add	r1, sp, #16
 80026f4:	f000 f87c 	bl	80027f0 <_printf_i>
 80026f8:	e7eb      	b.n	80026d2 <_svfiprintf_r+0x1c2>
 80026fa:	bf00      	nop
 80026fc:	08002b95 	.word	0x08002b95
 8002700:	08002b9f 	.word	0x08002b9f
 8002704:	00000000 	.word	0x00000000
 8002708:	08002459 	.word	0x08002459
 800270c:	08002b9b 	.word	0x08002b9b

08002710 <_printf_common>:
 8002710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002714:	4616      	mov	r6, r2
 8002716:	4699      	mov	r9, r3
 8002718:	688a      	ldr	r2, [r1, #8]
 800271a:	690b      	ldr	r3, [r1, #16]
 800271c:	4607      	mov	r7, r0
 800271e:	4293      	cmp	r3, r2
 8002720:	bfb8      	it	lt
 8002722:	4613      	movlt	r3, r2
 8002724:	6033      	str	r3, [r6, #0]
 8002726:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800272a:	460c      	mov	r4, r1
 800272c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002730:	b10a      	cbz	r2, 8002736 <_printf_common+0x26>
 8002732:	3301      	adds	r3, #1
 8002734:	6033      	str	r3, [r6, #0]
 8002736:	6823      	ldr	r3, [r4, #0]
 8002738:	0699      	lsls	r1, r3, #26
 800273a:	bf42      	ittt	mi
 800273c:	6833      	ldrmi	r3, [r6, #0]
 800273e:	3302      	addmi	r3, #2
 8002740:	6033      	strmi	r3, [r6, #0]
 8002742:	6825      	ldr	r5, [r4, #0]
 8002744:	f015 0506 	ands.w	r5, r5, #6
 8002748:	d106      	bne.n	8002758 <_printf_common+0x48>
 800274a:	f104 0a19 	add.w	sl, r4, #25
 800274e:	68e3      	ldr	r3, [r4, #12]
 8002750:	6832      	ldr	r2, [r6, #0]
 8002752:	1a9b      	subs	r3, r3, r2
 8002754:	42ab      	cmp	r3, r5
 8002756:	dc28      	bgt.n	80027aa <_printf_common+0x9a>
 8002758:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800275c:	1e13      	subs	r3, r2, #0
 800275e:	6822      	ldr	r2, [r4, #0]
 8002760:	bf18      	it	ne
 8002762:	2301      	movne	r3, #1
 8002764:	0692      	lsls	r2, r2, #26
 8002766:	d42d      	bmi.n	80027c4 <_printf_common+0xb4>
 8002768:	4649      	mov	r1, r9
 800276a:	4638      	mov	r0, r7
 800276c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002770:	47c0      	blx	r8
 8002772:	3001      	adds	r0, #1
 8002774:	d020      	beq.n	80027b8 <_printf_common+0xa8>
 8002776:	6823      	ldr	r3, [r4, #0]
 8002778:	68e5      	ldr	r5, [r4, #12]
 800277a:	f003 0306 	and.w	r3, r3, #6
 800277e:	2b04      	cmp	r3, #4
 8002780:	bf18      	it	ne
 8002782:	2500      	movne	r5, #0
 8002784:	6832      	ldr	r2, [r6, #0]
 8002786:	f04f 0600 	mov.w	r6, #0
 800278a:	68a3      	ldr	r3, [r4, #8]
 800278c:	bf08      	it	eq
 800278e:	1aad      	subeq	r5, r5, r2
 8002790:	6922      	ldr	r2, [r4, #16]
 8002792:	bf08      	it	eq
 8002794:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002798:	4293      	cmp	r3, r2
 800279a:	bfc4      	itt	gt
 800279c:	1a9b      	subgt	r3, r3, r2
 800279e:	18ed      	addgt	r5, r5, r3
 80027a0:	341a      	adds	r4, #26
 80027a2:	42b5      	cmp	r5, r6
 80027a4:	d11a      	bne.n	80027dc <_printf_common+0xcc>
 80027a6:	2000      	movs	r0, #0
 80027a8:	e008      	b.n	80027bc <_printf_common+0xac>
 80027aa:	2301      	movs	r3, #1
 80027ac:	4652      	mov	r2, sl
 80027ae:	4649      	mov	r1, r9
 80027b0:	4638      	mov	r0, r7
 80027b2:	47c0      	blx	r8
 80027b4:	3001      	adds	r0, #1
 80027b6:	d103      	bne.n	80027c0 <_printf_common+0xb0>
 80027b8:	f04f 30ff 	mov.w	r0, #4294967295
 80027bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027c0:	3501      	adds	r5, #1
 80027c2:	e7c4      	b.n	800274e <_printf_common+0x3e>
 80027c4:	2030      	movs	r0, #48	; 0x30
 80027c6:	18e1      	adds	r1, r4, r3
 80027c8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80027cc:	1c5a      	adds	r2, r3, #1
 80027ce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80027d2:	4422      	add	r2, r4
 80027d4:	3302      	adds	r3, #2
 80027d6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80027da:	e7c5      	b.n	8002768 <_printf_common+0x58>
 80027dc:	2301      	movs	r3, #1
 80027de:	4622      	mov	r2, r4
 80027e0:	4649      	mov	r1, r9
 80027e2:	4638      	mov	r0, r7
 80027e4:	47c0      	blx	r8
 80027e6:	3001      	adds	r0, #1
 80027e8:	d0e6      	beq.n	80027b8 <_printf_common+0xa8>
 80027ea:	3601      	adds	r6, #1
 80027ec:	e7d9      	b.n	80027a2 <_printf_common+0x92>
	...

080027f0 <_printf_i>:
 80027f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80027f4:	460c      	mov	r4, r1
 80027f6:	7e27      	ldrb	r7, [r4, #24]
 80027f8:	4691      	mov	r9, r2
 80027fa:	2f78      	cmp	r7, #120	; 0x78
 80027fc:	4680      	mov	r8, r0
 80027fe:	469a      	mov	sl, r3
 8002800:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002802:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002806:	d807      	bhi.n	8002818 <_printf_i+0x28>
 8002808:	2f62      	cmp	r7, #98	; 0x62
 800280a:	d80a      	bhi.n	8002822 <_printf_i+0x32>
 800280c:	2f00      	cmp	r7, #0
 800280e:	f000 80d9 	beq.w	80029c4 <_printf_i+0x1d4>
 8002812:	2f58      	cmp	r7, #88	; 0x58
 8002814:	f000 80a4 	beq.w	8002960 <_printf_i+0x170>
 8002818:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800281c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002820:	e03a      	b.n	8002898 <_printf_i+0xa8>
 8002822:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002826:	2b15      	cmp	r3, #21
 8002828:	d8f6      	bhi.n	8002818 <_printf_i+0x28>
 800282a:	a001      	add	r0, pc, #4	; (adr r0, 8002830 <_printf_i+0x40>)
 800282c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002830:	08002889 	.word	0x08002889
 8002834:	0800289d 	.word	0x0800289d
 8002838:	08002819 	.word	0x08002819
 800283c:	08002819 	.word	0x08002819
 8002840:	08002819 	.word	0x08002819
 8002844:	08002819 	.word	0x08002819
 8002848:	0800289d 	.word	0x0800289d
 800284c:	08002819 	.word	0x08002819
 8002850:	08002819 	.word	0x08002819
 8002854:	08002819 	.word	0x08002819
 8002858:	08002819 	.word	0x08002819
 800285c:	080029ab 	.word	0x080029ab
 8002860:	080028cd 	.word	0x080028cd
 8002864:	0800298d 	.word	0x0800298d
 8002868:	08002819 	.word	0x08002819
 800286c:	08002819 	.word	0x08002819
 8002870:	080029cd 	.word	0x080029cd
 8002874:	08002819 	.word	0x08002819
 8002878:	080028cd 	.word	0x080028cd
 800287c:	08002819 	.word	0x08002819
 8002880:	08002819 	.word	0x08002819
 8002884:	08002995 	.word	0x08002995
 8002888:	680b      	ldr	r3, [r1, #0]
 800288a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800288e:	1d1a      	adds	r2, r3, #4
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	600a      	str	r2, [r1, #0]
 8002894:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002898:	2301      	movs	r3, #1
 800289a:	e0a4      	b.n	80029e6 <_printf_i+0x1f6>
 800289c:	6825      	ldr	r5, [r4, #0]
 800289e:	6808      	ldr	r0, [r1, #0]
 80028a0:	062e      	lsls	r6, r5, #24
 80028a2:	f100 0304 	add.w	r3, r0, #4
 80028a6:	d50a      	bpl.n	80028be <_printf_i+0xce>
 80028a8:	6805      	ldr	r5, [r0, #0]
 80028aa:	600b      	str	r3, [r1, #0]
 80028ac:	2d00      	cmp	r5, #0
 80028ae:	da03      	bge.n	80028b8 <_printf_i+0xc8>
 80028b0:	232d      	movs	r3, #45	; 0x2d
 80028b2:	426d      	negs	r5, r5
 80028b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80028b8:	230a      	movs	r3, #10
 80028ba:	485e      	ldr	r0, [pc, #376]	; (8002a34 <_printf_i+0x244>)
 80028bc:	e019      	b.n	80028f2 <_printf_i+0x102>
 80028be:	f015 0f40 	tst.w	r5, #64	; 0x40
 80028c2:	6805      	ldr	r5, [r0, #0]
 80028c4:	600b      	str	r3, [r1, #0]
 80028c6:	bf18      	it	ne
 80028c8:	b22d      	sxthne	r5, r5
 80028ca:	e7ef      	b.n	80028ac <_printf_i+0xbc>
 80028cc:	680b      	ldr	r3, [r1, #0]
 80028ce:	6825      	ldr	r5, [r4, #0]
 80028d0:	1d18      	adds	r0, r3, #4
 80028d2:	6008      	str	r0, [r1, #0]
 80028d4:	0628      	lsls	r0, r5, #24
 80028d6:	d501      	bpl.n	80028dc <_printf_i+0xec>
 80028d8:	681d      	ldr	r5, [r3, #0]
 80028da:	e002      	b.n	80028e2 <_printf_i+0xf2>
 80028dc:	0669      	lsls	r1, r5, #25
 80028de:	d5fb      	bpl.n	80028d8 <_printf_i+0xe8>
 80028e0:	881d      	ldrh	r5, [r3, #0]
 80028e2:	2f6f      	cmp	r7, #111	; 0x6f
 80028e4:	bf0c      	ite	eq
 80028e6:	2308      	moveq	r3, #8
 80028e8:	230a      	movne	r3, #10
 80028ea:	4852      	ldr	r0, [pc, #328]	; (8002a34 <_printf_i+0x244>)
 80028ec:	2100      	movs	r1, #0
 80028ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80028f2:	6866      	ldr	r6, [r4, #4]
 80028f4:	2e00      	cmp	r6, #0
 80028f6:	bfa8      	it	ge
 80028f8:	6821      	ldrge	r1, [r4, #0]
 80028fa:	60a6      	str	r6, [r4, #8]
 80028fc:	bfa4      	itt	ge
 80028fe:	f021 0104 	bicge.w	r1, r1, #4
 8002902:	6021      	strge	r1, [r4, #0]
 8002904:	b90d      	cbnz	r5, 800290a <_printf_i+0x11a>
 8002906:	2e00      	cmp	r6, #0
 8002908:	d04d      	beq.n	80029a6 <_printf_i+0x1b6>
 800290a:	4616      	mov	r6, r2
 800290c:	fbb5 f1f3 	udiv	r1, r5, r3
 8002910:	fb03 5711 	mls	r7, r3, r1, r5
 8002914:	5dc7      	ldrb	r7, [r0, r7]
 8002916:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800291a:	462f      	mov	r7, r5
 800291c:	42bb      	cmp	r3, r7
 800291e:	460d      	mov	r5, r1
 8002920:	d9f4      	bls.n	800290c <_printf_i+0x11c>
 8002922:	2b08      	cmp	r3, #8
 8002924:	d10b      	bne.n	800293e <_printf_i+0x14e>
 8002926:	6823      	ldr	r3, [r4, #0]
 8002928:	07df      	lsls	r7, r3, #31
 800292a:	d508      	bpl.n	800293e <_printf_i+0x14e>
 800292c:	6923      	ldr	r3, [r4, #16]
 800292e:	6861      	ldr	r1, [r4, #4]
 8002930:	4299      	cmp	r1, r3
 8002932:	bfde      	ittt	le
 8002934:	2330      	movle	r3, #48	; 0x30
 8002936:	f806 3c01 	strble.w	r3, [r6, #-1]
 800293a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800293e:	1b92      	subs	r2, r2, r6
 8002940:	6122      	str	r2, [r4, #16]
 8002942:	464b      	mov	r3, r9
 8002944:	4621      	mov	r1, r4
 8002946:	4640      	mov	r0, r8
 8002948:	f8cd a000 	str.w	sl, [sp]
 800294c:	aa03      	add	r2, sp, #12
 800294e:	f7ff fedf 	bl	8002710 <_printf_common>
 8002952:	3001      	adds	r0, #1
 8002954:	d14c      	bne.n	80029f0 <_printf_i+0x200>
 8002956:	f04f 30ff 	mov.w	r0, #4294967295
 800295a:	b004      	add	sp, #16
 800295c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002960:	4834      	ldr	r0, [pc, #208]	; (8002a34 <_printf_i+0x244>)
 8002962:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002966:	680e      	ldr	r6, [r1, #0]
 8002968:	6823      	ldr	r3, [r4, #0]
 800296a:	f856 5b04 	ldr.w	r5, [r6], #4
 800296e:	061f      	lsls	r7, r3, #24
 8002970:	600e      	str	r6, [r1, #0]
 8002972:	d514      	bpl.n	800299e <_printf_i+0x1ae>
 8002974:	07d9      	lsls	r1, r3, #31
 8002976:	bf44      	itt	mi
 8002978:	f043 0320 	orrmi.w	r3, r3, #32
 800297c:	6023      	strmi	r3, [r4, #0]
 800297e:	b91d      	cbnz	r5, 8002988 <_printf_i+0x198>
 8002980:	6823      	ldr	r3, [r4, #0]
 8002982:	f023 0320 	bic.w	r3, r3, #32
 8002986:	6023      	str	r3, [r4, #0]
 8002988:	2310      	movs	r3, #16
 800298a:	e7af      	b.n	80028ec <_printf_i+0xfc>
 800298c:	6823      	ldr	r3, [r4, #0]
 800298e:	f043 0320 	orr.w	r3, r3, #32
 8002992:	6023      	str	r3, [r4, #0]
 8002994:	2378      	movs	r3, #120	; 0x78
 8002996:	4828      	ldr	r0, [pc, #160]	; (8002a38 <_printf_i+0x248>)
 8002998:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800299c:	e7e3      	b.n	8002966 <_printf_i+0x176>
 800299e:	065e      	lsls	r6, r3, #25
 80029a0:	bf48      	it	mi
 80029a2:	b2ad      	uxthmi	r5, r5
 80029a4:	e7e6      	b.n	8002974 <_printf_i+0x184>
 80029a6:	4616      	mov	r6, r2
 80029a8:	e7bb      	b.n	8002922 <_printf_i+0x132>
 80029aa:	680b      	ldr	r3, [r1, #0]
 80029ac:	6826      	ldr	r6, [r4, #0]
 80029ae:	1d1d      	adds	r5, r3, #4
 80029b0:	6960      	ldr	r0, [r4, #20]
 80029b2:	600d      	str	r5, [r1, #0]
 80029b4:	0635      	lsls	r5, r6, #24
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	d501      	bpl.n	80029be <_printf_i+0x1ce>
 80029ba:	6018      	str	r0, [r3, #0]
 80029bc:	e002      	b.n	80029c4 <_printf_i+0x1d4>
 80029be:	0671      	lsls	r1, r6, #25
 80029c0:	d5fb      	bpl.n	80029ba <_printf_i+0x1ca>
 80029c2:	8018      	strh	r0, [r3, #0]
 80029c4:	2300      	movs	r3, #0
 80029c6:	4616      	mov	r6, r2
 80029c8:	6123      	str	r3, [r4, #16]
 80029ca:	e7ba      	b.n	8002942 <_printf_i+0x152>
 80029cc:	680b      	ldr	r3, [r1, #0]
 80029ce:	1d1a      	adds	r2, r3, #4
 80029d0:	600a      	str	r2, [r1, #0]
 80029d2:	681e      	ldr	r6, [r3, #0]
 80029d4:	2100      	movs	r1, #0
 80029d6:	4630      	mov	r0, r6
 80029d8:	6862      	ldr	r2, [r4, #4]
 80029da:	f000 f831 	bl	8002a40 <memchr>
 80029de:	b108      	cbz	r0, 80029e4 <_printf_i+0x1f4>
 80029e0:	1b80      	subs	r0, r0, r6
 80029e2:	6060      	str	r0, [r4, #4]
 80029e4:	6863      	ldr	r3, [r4, #4]
 80029e6:	6123      	str	r3, [r4, #16]
 80029e8:	2300      	movs	r3, #0
 80029ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80029ee:	e7a8      	b.n	8002942 <_printf_i+0x152>
 80029f0:	4632      	mov	r2, r6
 80029f2:	4649      	mov	r1, r9
 80029f4:	4640      	mov	r0, r8
 80029f6:	6923      	ldr	r3, [r4, #16]
 80029f8:	47d0      	blx	sl
 80029fa:	3001      	adds	r0, #1
 80029fc:	d0ab      	beq.n	8002956 <_printf_i+0x166>
 80029fe:	6823      	ldr	r3, [r4, #0]
 8002a00:	079b      	lsls	r3, r3, #30
 8002a02:	d413      	bmi.n	8002a2c <_printf_i+0x23c>
 8002a04:	68e0      	ldr	r0, [r4, #12]
 8002a06:	9b03      	ldr	r3, [sp, #12]
 8002a08:	4298      	cmp	r0, r3
 8002a0a:	bfb8      	it	lt
 8002a0c:	4618      	movlt	r0, r3
 8002a0e:	e7a4      	b.n	800295a <_printf_i+0x16a>
 8002a10:	2301      	movs	r3, #1
 8002a12:	4632      	mov	r2, r6
 8002a14:	4649      	mov	r1, r9
 8002a16:	4640      	mov	r0, r8
 8002a18:	47d0      	blx	sl
 8002a1a:	3001      	adds	r0, #1
 8002a1c:	d09b      	beq.n	8002956 <_printf_i+0x166>
 8002a1e:	3501      	adds	r5, #1
 8002a20:	68e3      	ldr	r3, [r4, #12]
 8002a22:	9903      	ldr	r1, [sp, #12]
 8002a24:	1a5b      	subs	r3, r3, r1
 8002a26:	42ab      	cmp	r3, r5
 8002a28:	dcf2      	bgt.n	8002a10 <_printf_i+0x220>
 8002a2a:	e7eb      	b.n	8002a04 <_printf_i+0x214>
 8002a2c:	2500      	movs	r5, #0
 8002a2e:	f104 0619 	add.w	r6, r4, #25
 8002a32:	e7f5      	b.n	8002a20 <_printf_i+0x230>
 8002a34:	08002ba6 	.word	0x08002ba6
 8002a38:	08002bb7 	.word	0x08002bb7

08002a3c <__retarget_lock_acquire_recursive>:
 8002a3c:	4770      	bx	lr

08002a3e <__retarget_lock_release_recursive>:
 8002a3e:	4770      	bx	lr

08002a40 <memchr>:
 8002a40:	4603      	mov	r3, r0
 8002a42:	b510      	push	{r4, lr}
 8002a44:	b2c9      	uxtb	r1, r1
 8002a46:	4402      	add	r2, r0
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	d101      	bne.n	8002a52 <memchr+0x12>
 8002a4e:	2000      	movs	r0, #0
 8002a50:	e003      	b.n	8002a5a <memchr+0x1a>
 8002a52:	7804      	ldrb	r4, [r0, #0]
 8002a54:	3301      	adds	r3, #1
 8002a56:	428c      	cmp	r4, r1
 8002a58:	d1f6      	bne.n	8002a48 <memchr+0x8>
 8002a5a:	bd10      	pop	{r4, pc}

08002a5c <memcpy>:
 8002a5c:	440a      	add	r2, r1
 8002a5e:	4291      	cmp	r1, r2
 8002a60:	f100 33ff 	add.w	r3, r0, #4294967295
 8002a64:	d100      	bne.n	8002a68 <memcpy+0xc>
 8002a66:	4770      	bx	lr
 8002a68:	b510      	push	{r4, lr}
 8002a6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002a6e:	4291      	cmp	r1, r2
 8002a70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002a74:	d1f9      	bne.n	8002a6a <memcpy+0xe>
 8002a76:	bd10      	pop	{r4, pc}

08002a78 <memmove>:
 8002a78:	4288      	cmp	r0, r1
 8002a7a:	b510      	push	{r4, lr}
 8002a7c:	eb01 0402 	add.w	r4, r1, r2
 8002a80:	d902      	bls.n	8002a88 <memmove+0x10>
 8002a82:	4284      	cmp	r4, r0
 8002a84:	4623      	mov	r3, r4
 8002a86:	d807      	bhi.n	8002a98 <memmove+0x20>
 8002a88:	1e43      	subs	r3, r0, #1
 8002a8a:	42a1      	cmp	r1, r4
 8002a8c:	d008      	beq.n	8002aa0 <memmove+0x28>
 8002a8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002a92:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002a96:	e7f8      	b.n	8002a8a <memmove+0x12>
 8002a98:	4601      	mov	r1, r0
 8002a9a:	4402      	add	r2, r0
 8002a9c:	428a      	cmp	r2, r1
 8002a9e:	d100      	bne.n	8002aa2 <memmove+0x2a>
 8002aa0:	bd10      	pop	{r4, pc}
 8002aa2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002aa6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002aaa:	e7f7      	b.n	8002a9c <memmove+0x24>

08002aac <_realloc_r>:
 8002aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aae:	4607      	mov	r7, r0
 8002ab0:	4614      	mov	r4, r2
 8002ab2:	460e      	mov	r6, r1
 8002ab4:	b921      	cbnz	r1, 8002ac0 <_realloc_r+0x14>
 8002ab6:	4611      	mov	r1, r2
 8002ab8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002abc:	f7ff bc1c 	b.w	80022f8 <_malloc_r>
 8002ac0:	b922      	cbnz	r2, 8002acc <_realloc_r+0x20>
 8002ac2:	f7ff fbcd 	bl	8002260 <_free_r>
 8002ac6:	4625      	mov	r5, r4
 8002ac8:	4628      	mov	r0, r5
 8002aca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002acc:	f000 f814 	bl	8002af8 <_malloc_usable_size_r>
 8002ad0:	42a0      	cmp	r0, r4
 8002ad2:	d20f      	bcs.n	8002af4 <_realloc_r+0x48>
 8002ad4:	4621      	mov	r1, r4
 8002ad6:	4638      	mov	r0, r7
 8002ad8:	f7ff fc0e 	bl	80022f8 <_malloc_r>
 8002adc:	4605      	mov	r5, r0
 8002ade:	2800      	cmp	r0, #0
 8002ae0:	d0f2      	beq.n	8002ac8 <_realloc_r+0x1c>
 8002ae2:	4631      	mov	r1, r6
 8002ae4:	4622      	mov	r2, r4
 8002ae6:	f7ff ffb9 	bl	8002a5c <memcpy>
 8002aea:	4631      	mov	r1, r6
 8002aec:	4638      	mov	r0, r7
 8002aee:	f7ff fbb7 	bl	8002260 <_free_r>
 8002af2:	e7e9      	b.n	8002ac8 <_realloc_r+0x1c>
 8002af4:	4635      	mov	r5, r6
 8002af6:	e7e7      	b.n	8002ac8 <_realloc_r+0x1c>

08002af8 <_malloc_usable_size_r>:
 8002af8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002afc:	1f18      	subs	r0, r3, #4
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	bfbc      	itt	lt
 8002b02:	580b      	ldrlt	r3, [r1, r0]
 8002b04:	18c0      	addlt	r0, r0, r3
 8002b06:	4770      	bx	lr

08002b08 <_sbrk>:
 8002b08:	4b04      	ldr	r3, [pc, #16]	; (8002b1c <_sbrk+0x14>)
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	6819      	ldr	r1, [r3, #0]
 8002b0e:	b909      	cbnz	r1, 8002b14 <_sbrk+0xc>
 8002b10:	4903      	ldr	r1, [pc, #12]	; (8002b20 <_sbrk+0x18>)
 8002b12:	6019      	str	r1, [r3, #0]
 8002b14:	6818      	ldr	r0, [r3, #0]
 8002b16:	4402      	add	r2, r0
 8002b18:	601a      	str	r2, [r3, #0]
 8002b1a:	4770      	bx	lr
 8002b1c:	20000154 	.word	0x20000154
 8002b20:	20000560 	.word	0x20000560

08002b24 <_init>:
 8002b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b26:	bf00      	nop
 8002b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b2a:	bc08      	pop	{r3}
 8002b2c:	469e      	mov	lr, r3
 8002b2e:	4770      	bx	lr

08002b30 <_fini>:
 8002b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b32:	bf00      	nop
 8002b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b36:	bc08      	pop	{r3}
 8002b38:	469e      	mov	lr, r3
 8002b3a:	4770      	bx	lr
