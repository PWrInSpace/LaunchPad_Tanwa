
tanwaR4S.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002834  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08002944  08002944  00012944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029c4  080029c4  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080029c4  080029c4  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029c4  080029c4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029c4  080029c4  000129c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029c8  080029c8  000129c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080029cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f0  20000074  08002a40  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000564  08002a40  00020564  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010f03  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033a4  00000000  00000000  00030fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000855b  00000000  00000000  00034344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000870  00000000  00000000  0003c8a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001550  00000000  00000000  0003d110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005f33  00000000  00000000  0003e660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001118b  00000000  00000000  00044593  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a60a  00000000  00000000  0005571e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000dfd28  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001c60  00000000  00000000  000dfd7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	0800292c 	.word	0x0800292c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	0800292c 	.word	0x0800292c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <_ZN7IgniterC1EP12GPIO_TypeDeftS1_t>:
#include <Igniter.hh>

//(names of args start with '_' sign)
Igniter::Igniter(GPIO_TypeDef* _GPIO_PORT_IGNITER, uint16_t _PIN_IGNITER, GPIO_TypeDef* _IGN_GPIO_PORT_TEST_CON, uint16_t _IGN_PIN_TEST_CON){
 8000160:	b410      	push	{r4}
	GPIO_PORT_IGNITER = _GPIO_PORT_IGNITER;
 8000162:	6001      	str	r1, [r0, #0]
	PIN_IGNITER = _PIN_IGNITER;
 8000164:	8082      	strh	r2, [r0, #4]
	GPIO_PORT_TEST_CON = _IGN_GPIO_PORT_TEST_CON;
 8000166:	6083      	str	r3, [r0, #8]
	PIN_TEST_CON = _IGN_PIN_TEST_CON;
 8000168:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800016c:	8183      	strh	r3, [r0, #12]
}
 800016e:	bc10      	pop	{r4}
 8000170:	4770      	bx	lr

08000172 <_ZNK7Igniter12is_connectedEv>:

bool Igniter::is_connected() const{
 8000172:	b508      	push	{r3, lr}
	if(HAL_GPIO_ReadPin(GPIO_PORT_TEST_CON, PIN_TEST_CON) == GPIO_PIN_SET)
 8000174:	8981      	ldrh	r1, [r0, #12]
 8000176:	6880      	ldr	r0, [r0, #8]
 8000178:	f001 f826 	bl	80011c8 <HAL_GPIO_ReadPin>
		return 1;
	else
		return 0;
}
 800017c:	2801      	cmp	r0, #1
 800017e:	bf14      	ite	ne
 8000180:	2000      	movne	r0, #0
 8000182:	2001      	moveq	r0, #1
 8000184:	bd08      	pop	{r3, pc}

08000186 <_ZN7Igniter4FIREEh>:

void Igniter::FIRE(uint8_t milisecs){
 8000186:	b538      	push	{r3, r4, r5, lr}
 8000188:	4604      	mov	r4, r0
 800018a:	460d      	mov	r5, r1
	HAL_GPIO_WritePin(GPIO_PORT_IGNITER, PIN_IGNITER, GPIO_PIN_SET);
 800018c:	2201      	movs	r2, #1
 800018e:	8881      	ldrh	r1, [r0, #4]
 8000190:	6800      	ldr	r0, [r0, #0]
 8000192:	f001 f81f 	bl	80011d4 <HAL_GPIO_WritePin>
	HAL_Delay(milisecs);
 8000196:	4628      	mov	r0, r5
 8000198:	f000 fd10 	bl	8000bbc <HAL_Delay>
	HAL_GPIO_WritePin(GPIO_PORT_IGNITER, PIN_IGNITER, GPIO_PIN_RESET);
 800019c:	2200      	movs	r2, #0
 800019e:	88a1      	ldrh	r1, [r4, #4]
 80001a0:	6820      	ldr	r0, [r4, #0]
 80001a2:	f001 f817 	bl	80011d4 <HAL_GPIO_WritePin>
}
 80001a6:	bd38      	pop	{r3, r4, r5, pc}

080001a8 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80001a8:	4b06      	ldr	r3, [pc, #24]	; (80001c4 <MX_DMA_Init+0x1c>)
{
 80001aa:	b082      	sub	sp, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
 80001ac:	695a      	ldr	r2, [r3, #20]
 80001ae:	f042 0201 	orr.w	r2, r2, #1
 80001b2:	615a      	str	r2, [r3, #20]
 80001b4:	695b      	ldr	r3, [r3, #20]
 80001b6:	f003 0301 	and.w	r3, r3, #1
 80001ba:	9301      	str	r3, [sp, #4]
 80001bc:	9b01      	ldr	r3, [sp, #4]

}
 80001be:	b002      	add	sp, #8
 80001c0:	4770      	bx	lr
 80001c2:	bf00      	nop
 80001c4:	40021000 	.word	0x40021000

080001c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001cc:	2400      	movs	r4, #0
{
 80001ce:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001d0:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80001d4:	e9cd 4406 	strd	r4, r4, [sp, #24]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001d8:	4b2f      	ldr	r3, [pc, #188]	; (8000298 <MX_GPIO_Init+0xd0>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUILD_IN_LED_GPIO_Port, BUILD_IN_LED_Pin, GPIO_PIN_RESET);
 80001da:	4e30      	ldr	r6, [pc, #192]	; (800029c <MX_GPIO_Init+0xd4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001dc:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IGN_FIRE_GPIO_Port, IGN_FIRE_Pin, GPIO_PIN_RESET);
 80001de:	4d30      	ldr	r5, [pc, #192]	; (80002a0 <MX_GPIO_Init+0xd8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001e0:	f042 0210 	orr.w	r2, r2, #16
 80001e4:	619a      	str	r2, [r3, #24]
 80001e6:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(BUILD_IN_LED_GPIO_Port, BUILD_IN_LED_Pin, GPIO_PIN_RESET);
 80001e8:	4630      	mov	r0, r6
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001ea:	f002 0210 	and.w	r2, r2, #16
 80001ee:	9200      	str	r2, [sp, #0]
 80001f0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001f2:	6999      	ldr	r1, [r3, #24]
  HAL_GPIO_WritePin(BUILD_IN_LED_GPIO_Port, BUILD_IN_LED_Pin, GPIO_PIN_RESET);
 80001f4:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001f6:	f041 0120 	orr.w	r1, r1, #32
 80001fa:	6199      	str	r1, [r3, #24]
 80001fc:	6999      	ldr	r1, [r3, #24]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUILD_IN_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001fe:	f04f 0901 	mov.w	r9, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000202:	f001 0120 	and.w	r1, r1, #32
 8000206:	9101      	str	r1, [sp, #4]
 8000208:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800020a:	699f      	ldr	r7, [r3, #24]
  HAL_GPIO_WritePin(BUILD_IN_LED_GPIO_Port, BUILD_IN_LED_Pin, GPIO_PIN_RESET);
 800020c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000210:	f047 0704 	orr.w	r7, r7, #4
 8000214:	619f      	str	r7, [r3, #24]
 8000216:	699f      	ldr	r7, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000218:	f04f 0802 	mov.w	r8, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800021c:	f007 0704 	and.w	r7, r7, #4
 8000220:	9702      	str	r7, [sp, #8]
 8000222:	9f02      	ldr	r7, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000224:	699f      	ldr	r7, [r3, #24]
 8000226:	f047 0708 	orr.w	r7, r7, #8
 800022a:	619f      	str	r7, [r3, #24]
 800022c:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_Init(BUILD_IN_LED_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IGN_TEST_CON_Pin;
 800022e:	f44f 4700 	mov.w	r7, #32768	; 0x8000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000232:	f003 0308 	and.w	r3, r3, #8
 8000236:	9303      	str	r3, [sp, #12]
 8000238:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(BUILD_IN_LED_GPIO_Port, BUILD_IN_LED_Pin, GPIO_PIN_RESET);
 800023a:	f000 ffcb 	bl	80011d4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IGN_FIRE_GPIO_Port, IGN_FIRE_Pin, GPIO_PIN_RESET);
 800023e:	4622      	mov	r2, r4
 8000240:	4628      	mov	r0, r5
 8000242:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000246:	f000 ffc5 	bl	80011d4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = BUILD_IN_LED_Pin;
 800024a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(BUILD_IN_LED_GPIO_Port, &GPIO_InitStruct);
 800024e:	4630      	mov	r0, r6
 8000250:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000252:	e9cd 3904 	strd	r3, r9, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000256:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000258:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(BUILD_IN_LED_GPIO_Port, &GPIO_InitStruct);
 800025c:	f000 fea4 	bl	8000fa8 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(IGN_TEST_CON_GPIO_Port, &GPIO_InitStruct);
 8000260:	4630      	mov	r0, r6
 8000262:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000264:	e9cd 4405 	strd	r4, r4, [sp, #20]
  GPIO_InitStruct.Pin = IGN_TEST_CON_Pin;
 8000268:	9704      	str	r7, [sp, #16]
  HAL_GPIO_Init(IGN_TEST_CON_GPIO_Port, &GPIO_InitStruct);
 800026a:	f000 fe9d 	bl	8000fa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IGN_FIRE_Pin;
 800026e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(IGN_FIRE_GPIO_Port, &GPIO_InitStruct);
 8000272:	4628      	mov	r0, r5
 8000274:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = IGN_FIRE_Pin;
 8000276:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000278:	e9cd 9405 	strd	r9, r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800027c:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(IGN_FIRE_GPIO_Port, &GPIO_InitStruct);
 8000280:	f000 fe92 	bl	8000fa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CONNECTION_TEST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(CONNECTION_TEST_GPIO_Port, &GPIO_InitStruct);
 8000284:	4628      	mov	r0, r5
 8000286:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000288:	e9cd 7404 	strd	r7, r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800028c:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(CONNECTION_TEST_GPIO_Port, &GPIO_InitStruct);
 800028e:	f000 fe8b 	bl	8000fa8 <HAL_GPIO_Init>

}
 8000292:	b009      	add	sp, #36	; 0x24
 8000294:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000298:	40021000 	.word	0x40021000
 800029c:	40011000 	.word	0x40011000
 80002a0:	40010800 	.word	0x40010800

080002a4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a4:	b500      	push	{lr}
 80002a6:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a8:	2300      	movs	r3, #0
 80002aa:	930d      	str	r3, [sp, #52]	; 0x34
 80002ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80002ae:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b0:	9305      	str	r3, [sp, #20]
 80002b2:	9306      	str	r3, [sp, #24]
 80002b4:	9307      	str	r3, [sp, #28]
 80002b6:	9308      	str	r3, [sp, #32]
 80002b8:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002ba:	9301      	str	r3, [sp, #4]
 80002bc:	9302      	str	r3, [sp, #8]
 80002be:	9303      	str	r3, [sp, #12]
 80002c0:	9304      	str	r3, [sp, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002c2:	2101      	movs	r1, #1
 80002c4:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80002ca:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002cc:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ce:	910e      	str	r1, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002d0:	2302      	movs	r3, #2
 80002d2:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002d4:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002d6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80002da:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002dc:	a80a      	add	r0, sp, #40	; 0x28
 80002de:	f001 f803 	bl	80012e8 <HAL_RCC_OscConfig>
 80002e2:	b9d0      	cbnz	r0, 800031a <_Z18SystemClock_Configv+0x76>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e4:	230f      	movs	r3, #15
 80002e6:	9305      	str	r3, [sp, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002e8:	2302      	movs	r3, #2
 80002ea:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ec:	2300      	movs	r3, #0
 80002ee:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002f4:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80002f6:	9309      	str	r3, [sp, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002f8:	2101      	movs	r1, #1
 80002fa:	a805      	add	r0, sp, #20
 80002fc:	f001 fa2a 	bl	8001754 <HAL_RCC_ClockConfig>
 8000300:	b968      	cbnz	r0, 800031e <_Z18SystemClock_Configv+0x7a>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000302:	2310      	movs	r3, #16
 8000304:	9301      	str	r3, [sp, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000306:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800030a:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800030c:	a801      	add	r0, sp, #4
 800030e:	f001 fae1 	bl	80018d4 <HAL_RCCEx_PeriphCLKConfig>
 8000312:	b930      	cbnz	r0, 8000322 <_Z18SystemClock_Configv+0x7e>
  {
    Error_Handler();
  }
}
 8000314:	b015      	add	sp, #84	; 0x54
 8000316:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800031a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800031c:	e7fe      	b.n	800031c <_Z18SystemClock_Configv+0x78>
 800031e:	b672      	cpsid	i
 8000320:	e7fe      	b.n	8000320 <_Z18SystemClock_Configv+0x7c>
 8000322:	b672      	cpsid	i
 8000324:	e7fe      	b.n	8000324 <_Z18SystemClock_Configv+0x80>
	...

08000328 <main>:
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b08a      	sub	sp, #40	; 0x28
  HAL_Init();
 800032c:	f000 fc22 	bl	8000b74 <HAL_Init>
	HAL_Delay(1000);
 8000330:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000334:	f000 fc42 	bl	8000bbc <HAL_Delay>
  SystemClock_Config();
 8000338:	f7ff ffb4 	bl	80002a4 <_Z18SystemClock_Configv>
  MX_GPIO_Init();
 800033c:	f7ff ff44 	bl	80001c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000340:	f7ff ff32 	bl	80001a8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000344:	f000 f98a 	bl	800065c <MX_USART2_UART_Init>
  MX_USB_PCD_Init();
 8000348:	f000 fa5e 	bl	8000808 <MX_USB_PCD_Init>
  MX_USART3_UART_Init();
 800034c:	f000 f9a2 	bl	8000694 <MX_USART3_UART_Init>
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000350:	2200      	movs	r2, #0
 8000352:	4611      	mov	r1, r2
 8000354:	2010      	movs	r0, #16
 8000356:	f000 fc55 	bl	8000c04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800035a:	2010      	movs	r0, #16
 800035c:	f000 fc8a 	bl	8000c74 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000360:	2200      	movs	r2, #0
 8000362:	4611      	mov	r1, r2
 8000364:	2011      	movs	r0, #17
 8000366:	f000 fc4d 	bl	8000c04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800036a:	2011      	movs	r0, #17
 800036c:	f000 fc82 	bl	8000c74 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000370:	2200      	movs	r2, #0
 8000372:	4611      	mov	r1, r2
 8000374:	2026      	movs	r0, #38	; 0x26
 8000376:	f000 fc45 	bl	8000c04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 800037a:	2026      	movs	r0, #38	; 0x26
 800037c:	f000 fc7a 	bl	8000c74 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000380:	2200      	movs	r2, #0
 8000382:	4611      	mov	r1, r2
 8000384:	2027      	movs	r0, #39	; 0x27
 8000386:	f000 fc3d 	bl	8000c04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 800038a:	2027      	movs	r0, #39	; 0x27
 800038c:	f000 fc72 	bl	8000c74 <HAL_NVIC_EnableIRQ>
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);
 8000390:	4c55      	ldr	r4, [pc, #340]	; (80004e8 <main+0x1c0>)
 8000392:	6822      	ldr	r2, [r4, #0]
 8000394:	68d3      	ldr	r3, [r2, #12]
 8000396:	f043 0310 	orr.w	r3, r3, #16
 800039a:	60d3      	str	r3, [r2, #12]
	HAL_UART_Receive_DMA(&huart2, (uint8_t*) xbee_rx.mess_loaded, DATA_LENGTH);
 800039c:	2232      	movs	r2, #50	; 0x32
 800039e:	4953      	ldr	r1, [pc, #332]	; (80004ec <main+0x1c4>)
 80003a0:	4620      	mov	r0, r4
 80003a2:	f001 fc17 	bl	8001bd4 <HAL_UART_Receive_DMA>
	xbee_init(&communication, 0x0013A20041C283E5, &huart2); //inicjalizacja modułu xbee
 80003a6:	9400      	str	r4, [sp, #0]
 80003a8:	a34d      	add	r3, pc, #308	; (adr r3, 80004e0 <main+0x1b8>)
 80003aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80003ae:	4850      	ldr	r0, [pc, #320]	; (80004f0 <main+0x1c8>)
 80003b0:	f000 fa58 	bl	8000864 <xbee_init>
			CONNECTION_TEST_Pin);
 80003b4:	494f      	ldr	r1, [pc, #316]	; (80004f4 <main+0x1cc>)
 80003b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80003ba:	9300      	str	r3, [sp, #0]
 80003bc:	460b      	mov	r3, r1
 80003be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80003c2:	a806      	add	r0, sp, #24
 80003c4:	f7ff fecc 	bl	8000160 <_ZN7IgniterC1EP12GPIO_TypeDeftS1_t>
		sprintf(dataOut, "DDAT;%i;%i", currState, igniter.is_connected());
 80003c8:	f8df 8140 	ldr.w	r8, [pc, #320]	; 800050c <main+0x1e4>
 80003cc:	f8df 9140 	ldr.w	r9, [pc, #320]	; 8000510 <main+0x1e8>
				HAL_GPIO_TogglePin(BUILD_IN_LED_GPIO_Port, BUILD_IN_LED_Pin);
 80003d0:	f8df a140 	ldr.w	sl, [pc, #320]	; 8000514 <main+0x1ec>
 80003d4:	e00b      	b.n	80003ee <main+0xc6>
			if (igniter.is_connected()) {
 80003d6:	a806      	add	r0, sp, #24
 80003d8:	f7ff fecb 	bl	8000172 <_ZNK7Igniter12is_connectedEv>
 80003dc:	2800      	cmp	r0, #0
 80003de:	d139      	bne.n	8000454 <main+0x12c>
			currState = Idle;
 80003e0:	2302      	movs	r3, #2
 80003e2:	f888 3000 	strb.w	r3, [r8]
			HAL_Delay(4500);
 80003e6:	f241 1094 	movw	r0, #4500	; 0x1194
 80003ea:	f000 fbe7 	bl	8000bbc <HAL_Delay>
		sprintf(dataOut, "DDAT;%i;%i", currState, igniter.is_connected());
 80003ee:	4f42      	ldr	r7, [pc, #264]	; (80004f8 <main+0x1d0>)
 80003f0:	f898 4000 	ldrb.w	r4, [r8]
 80003f4:	a806      	add	r0, sp, #24
 80003f6:	f7ff febc 	bl	8000172 <_ZNK7Igniter12is_connectedEv>
 80003fa:	4603      	mov	r3, r0
 80003fc:	4622      	mov	r2, r4
 80003fe:	4649      	mov	r1, r9
 8000400:	4638      	mov	r0, r7
 8000402:	f001 fee7 	bl	80021d4 <siprintf>
		xbee_transmit_char(communication, dataOut);
 8000406:	4e3a      	ldr	r6, [pc, #232]	; (80004f0 <main+0x1c8>)
 8000408:	9705      	str	r7, [sp, #20]
 800040a:	466c      	mov	r4, sp
 800040c:	f106 0510 	add.w	r5, r6, #16
 8000410:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000412:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000414:	682b      	ldr	r3, [r5, #0]
 8000416:	6023      	str	r3, [r4, #0]
 8000418:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800041c:	f000 fabe 	bl	800099c <xbee_transmit_char>
		HAL_Delay(50);
 8000420:	2032      	movs	r0, #50	; 0x32
 8000422:	f000 fbcb 	bl	8000bbc <HAL_Delay>
		switch (currState) {
 8000426:	f898 3000 	ldrb.w	r3, [r8]
 800042a:	3b01      	subs	r3, #1
 800042c:	2b06      	cmp	r3, #6
 800042e:	d8df      	bhi.n	80003f0 <main+0xc8>
 8000430:	a201      	add	r2, pc, #4	; (adr r2, 8000438 <main+0x110>)
 8000432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000436:	bf00      	nop
 8000438:	080003d7 	.word	0x080003d7
 800043c:	08000461 	.word	0x08000461
 8000440:	0800046b 	.word	0x0800046b
 8000444:	08000475 	.word	0x08000475
 8000448:	0800047f 	.word	0x0800047f
 800044c:	080004cb 	.word	0x080004cb
 8000450:	080004d3 	.word	0x080004d3
				HAL_GPIO_TogglePin(BUILD_IN_LED_GPIO_Port, BUILD_IN_LED_Pin);
 8000454:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000458:	4650      	mov	r0, sl
 800045a:	f000 febf 	bl	80011dc <HAL_GPIO_TogglePin>
 800045e:	e7bf      	b.n	80003e0 <main+0xb8>
			HAL_Delay(4500);
 8000460:	f241 1094 	movw	r0, #4500	; 0x1194
 8000464:	f000 fbaa 	bl	8000bbc <HAL_Delay>
			break;
 8000468:	e7c1      	b.n	80003ee <main+0xc6>
			HAL_Delay(4500);
 800046a:	f241 1094 	movw	r0, #4500	; 0x1194
 800046e:	f000 fba5 	bl	8000bbc <HAL_Delay>
			break;
 8000472:	e7bc      	b.n	80003ee <main+0xc6>
			HAL_Delay(4500); 	 // !to test
 8000474:	f241 1094 	movw	r0, #4500	; 0x1194
 8000478:	f000 fba0 	bl	8000bbc <HAL_Delay>
			break;
 800047c:	e7b7      	b.n	80003ee <main+0xc6>
			if (strncmp(dataIn, "DSTA", 4) == 0) {	//signal == fire
 800047e:	2204      	movs	r2, #4
 8000480:	491e      	ldr	r1, [pc, #120]	; (80004fc <main+0x1d4>)
 8000482:	481f      	ldr	r0, [pc, #124]	; (8000500 <main+0x1d8>)
 8000484:	f001 fece 	bl	8002224 <strncmp>
 8000488:	b120      	cbz	r0, 8000494 <main+0x16c>
			HAL_Delay(2500);
 800048a:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800048e:	f000 fb95 	bl	8000bbc <HAL_Delay>
			break;
 8000492:	e7ac      	b.n	80003ee <main+0xc6>
				igniter.FIRE();
 8000494:	2132      	movs	r1, #50	; 0x32
 8000496:	a806      	add	r0, sp, #24
 8000498:	f7ff fe75 	bl	8000186 <_ZN7Igniter4FIREEh>
				sprintf(dataOut, "ASTB");
 800049c:	4b16      	ldr	r3, [pc, #88]	; (80004f8 <main+0x1d0>)
 800049e:	4a19      	ldr	r2, [pc, #100]	; (8000504 <main+0x1dc>)
 80004a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004a4:	6018      	str	r0, [r3, #0]
 80004a6:	7119      	strb	r1, [r3, #4]
				xbee_transmit_char(communication, dataOut);
 80004a8:	4e11      	ldr	r6, [pc, #68]	; (80004f0 <main+0x1c8>)
 80004aa:	9305      	str	r3, [sp, #20]
 80004ac:	466c      	mov	r4, sp
 80004ae:	f106 0510 	add.w	r5, r6, #16
 80004b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004b6:	682b      	ldr	r3, [r5, #0]
 80004b8:	6023      	str	r3, [r4, #0]
 80004ba:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80004be:	f000 fa6d 	bl	800099c <xbee_transmit_char>
				currState = End;
 80004c2:	2306      	movs	r3, #6
 80004c4:	f888 3000 	strb.w	r3, [r8]
 80004c8:	e7df      	b.n	800048a <main+0x162>
			HAL_Delay(1000000);
 80004ca:	480f      	ldr	r0, [pc, #60]	; (8000508 <main+0x1e0>)
 80004cc:	f000 fb76 	bl	8000bbc <HAL_Delay>
			break;
 80004d0:	e78d      	b.n	80003ee <main+0xc6>
			HAL_Delay(4500);
 80004d2:	f241 1094 	movw	r0, #4500	; 0x1194
 80004d6:	f000 fb71 	bl	8000bbc <HAL_Delay>
			break;
 80004da:	e788      	b.n	80003ee <main+0xc6>
 80004dc:	f3af 8000 	nop.w
 80004e0:	41c283e5 	.word	0x41c283e5
 80004e4:	0013a200 	.word	0x0013a200
 80004e8:	20000224 	.word	0x20000224
 80004ec:	200000f8 	.word	0x200000f8
 80004f0:	20000090 	.word	0x20000090
 80004f4:	40010800 	.word	0x40010800
 80004f8:	200000d4 	.word	0x200000d4
 80004fc:	08002950 	.word	0x08002950
 8000500:	200000b4 	.word	0x200000b4
 8000504:	08002958 	.word	0x08002958
 8000508:	000f4240 	.word	0x000f4240
 800050c:	20000000 	.word	0x20000000
 8000510:	08002944 	.word	0x08002944
 8000514:	40011000 	.word	0x40011000

08000518 <HAL_UART_RxCpltCallback>:
	if (huart->Instance == USART2) {
 8000518:	6802      	ldr	r2, [r0, #0]
 800051a:	4b1a      	ldr	r3, [pc, #104]	; (8000584 <HAL_UART_RxCpltCallback+0x6c>)
 800051c:	429a      	cmp	r2, r3
 800051e:	d000      	beq.n	8000522 <HAL_UART_RxCpltCallback+0xa>
 8000520:	4770      	bx	lr
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000522:	b500      	push	{lr}
 8000524:	b083      	sub	sp, #12
		__HAL_UART_CLEAR_IDLEFLAG(&huart2);
 8000526:	2300      	movs	r3, #0
 8000528:	9301      	str	r3, [sp, #4]
 800052a:	4817      	ldr	r0, [pc, #92]	; (8000588 <HAL_UART_RxCpltCallback+0x70>)
 800052c:	6803      	ldr	r3, [r0, #0]
 800052e:	681a      	ldr	r2, [r3, #0]
 8000530:	9201      	str	r2, [sp, #4]
 8000532:	685b      	ldr	r3, [r3, #4]
 8000534:	9301      	str	r3, [sp, #4]
 8000536:	9b01      	ldr	r3, [sp, #4]
		HAL_UART_DMAStop(&huart2);
 8000538:	f001 fb98 	bl	8001c6c <HAL_UART_DMAStop>
		xbee_receive(); //odebranie całej wiadomości
 800053c:	f000 fa6c 	bl	8000a18 <xbee_receive>
		if (xbee_rx.data_flag) { //jeżeli wiadomość była danymi to ta zmienna będzie miała wartość 1
 8000540:	4b12      	ldr	r3, [pc, #72]	; (800058c <HAL_UART_RxCpltCallback+0x74>)
 8000542:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8000546:	b15b      	cbz	r3, 8000560 <HAL_UART_RxCpltCallback+0x48>
			if (strncmp(xbee_rx.data_array, "STAT", 4) == 0) {
 8000548:	2204      	movs	r2, #4
 800054a:	4911      	ldr	r1, [pc, #68]	; (8000590 <HAL_UART_RxCpltCallback+0x78>)
 800054c:	4811      	ldr	r0, [pc, #68]	; (8000594 <HAL_UART_RxCpltCallback+0x7c>)
 800054e:	f001 fe69 	bl	8002224 <strncmp>
 8000552:	b968      	cbnz	r0, 8000570 <HAL_UART_RxCpltCallback+0x58>
				currState = (state) (((int) (xbee_rx.data_array[7])) - 48);
 8000554:	4b0d      	ldr	r3, [pc, #52]	; (800058c <HAL_UART_RxCpltCallback+0x74>)
 8000556:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800055a:	3b30      	subs	r3, #48	; 0x30
 800055c:	4a0e      	ldr	r2, [pc, #56]	; (8000598 <HAL_UART_RxCpltCallback+0x80>)
 800055e:	7013      	strb	r3, [r2, #0]
		HAL_UART_Receive_DMA(&huart2, (uint8_t*) xbee_rx.mess_loaded,
 8000560:	2232      	movs	r2, #50	; 0x32
 8000562:	490e      	ldr	r1, [pc, #56]	; (800059c <HAL_UART_RxCpltCallback+0x84>)
 8000564:	4808      	ldr	r0, [pc, #32]	; (8000588 <HAL_UART_RxCpltCallback+0x70>)
 8000566:	f001 fb35 	bl	8001bd4 <HAL_UART_Receive_DMA>
}
 800056a:	b003      	add	sp, #12
 800056c:	f85d fb04 	ldr.w	pc, [sp], #4
			} else if (xbee_rx.data_array[0] == 'D') {
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <HAL_UART_RxCpltCallback+0x74>)
 8000572:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8000576:	2b44      	cmp	r3, #68	; 0x44
 8000578:	d1f2      	bne.n	8000560 <HAL_UART_RxCpltCallback+0x48>
				strcpy(dataIn, xbee_rx.data_array);
 800057a:	4906      	ldr	r1, [pc, #24]	; (8000594 <HAL_UART_RxCpltCallback+0x7c>)
 800057c:	4808      	ldr	r0, [pc, #32]	; (80005a0 <HAL_UART_RxCpltCallback+0x88>)
 800057e:	f001 fe49 	bl	8002214 <strcpy>
 8000582:	e7ed      	b.n	8000560 <HAL_UART_RxCpltCallback+0x48>
 8000584:	40004400 	.word	0x40004400
 8000588:	20000224 	.word	0x20000224
 800058c:	200000f4 	.word	0x200000f4
 8000590:	08002960 	.word	0x08002960
 8000594:	2000012a 	.word	0x2000012a
 8000598:	20000000 	.word	0x20000000
 800059c:	200000f8 	.word	0x200000f8
 80005a0:	200000b4 	.word	0x200000b4

080005a4 <Error_Handler>:
 80005a4:	b672      	cpsid	i
	while (1) {
 80005a6:	e7fe      	b.n	80005a6 <Error_Handler+0x2>

080005a8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005a8:	4b0e      	ldr	r3, [pc, #56]	; (80005e4 <HAL_MspInit+0x3c>)
{
 80005aa:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80005ac:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005ae:	490e      	ldr	r1, [pc, #56]	; (80005e8 <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 80005b0:	f042 0201 	orr.w	r2, r2, #1
 80005b4:	619a      	str	r2, [r3, #24]
 80005b6:	699a      	ldr	r2, [r3, #24]
 80005b8:	f002 0201 	and.w	r2, r2, #1
 80005bc:	9200      	str	r2, [sp, #0]
 80005be:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c0:	69da      	ldr	r2, [r3, #28]
 80005c2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80005c6:	61da      	str	r2, [r3, #28]
 80005c8:	69db      	ldr	r3, [r3, #28]
 80005ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ce:	9301      	str	r3, [sp, #4]
 80005d0:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005d2:	684b      	ldr	r3, [r1, #4]
 80005d4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005dc:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005de:	b002      	add	sp, #8
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	40021000 	.word	0x40021000
 80005e8:	40010000 	.word	0x40010000

080005ec <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005ec:	e7fe      	b.n	80005ec <NMI_Handler>
 80005ee:	bf00      	nop

080005f0 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005f0:	e7fe      	b.n	80005f0 <HardFault_Handler>
 80005f2:	bf00      	nop

080005f4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005f4:	e7fe      	b.n	80005f4 <MemManage_Handler>
 80005f6:	bf00      	nop

080005f8 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005f8:	e7fe      	b.n	80005f8 <BusFault_Handler>
 80005fa:	bf00      	nop

080005fc <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005fc:	e7fe      	b.n	80005fc <UsageFault_Handler>
 80005fe:	bf00      	nop

08000600 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <DebugMon_Handler>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <PendSV_Handler>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800060c:	f000 bac4 	b.w	8000b98 <HAL_IncTick>

08000610 <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000610:	4801      	ldr	r0, [pc, #4]	; (8000618 <DMA1_Channel6_IRQHandler+0x8>)
 8000612:	f000 bc35 	b.w	8000e80 <HAL_DMA_IRQHandler>
 8000616:	bf00      	nop
 8000618:	2000015c 	.word	0x2000015c

0800061c <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800061c:	4801      	ldr	r0, [pc, #4]	; (8000624 <DMA1_Channel7_IRQHandler+0x8>)
 800061e:	f000 bc2f 	b.w	8000e80 <HAL_DMA_IRQHandler>
 8000622:	bf00      	nop
 8000624:	200001e0 	.word	0x200001e0

08000628 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000628:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800062a:	4c07      	ldr	r4, [pc, #28]	; (8000648 <USART2_IRQHandler+0x20>)
 800062c:	4620      	mov	r0, r4
 800062e:	f001 fbf9 	bl	8001e24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  if(__HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE))
 8000632:	6823      	ldr	r3, [r4, #0]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	06db      	lsls	r3, r3, #27
 8000638:	d400      	bmi.n	800063c <USART2_IRQHandler+0x14>
	  HAL_UART_RxCpltCallback(&huart2);

  /* USER CODE END USART2_IRQn 1 */
}
 800063a:	bd10      	pop	{r4, pc}
	  HAL_UART_RxCpltCallback(&huart2);
 800063c:	4620      	mov	r0, r4
}
 800063e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  HAL_UART_RxCpltCallback(&huart2);
 8000642:	f7ff bf69 	b.w	8000518 <HAL_UART_RxCpltCallback>
 8000646:	bf00      	nop
 8000648:	20000224 	.word	0x20000224

0800064c <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800064c:	4801      	ldr	r0, [pc, #4]	; (8000654 <USART3_IRQHandler+0x8>)
 800064e:	f001 bbe9 	b.w	8001e24 <HAL_UART_IRQHandler>
 8000652:	bf00      	nop
 8000654:	200001a0 	.word	0x200001a0

08000658 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop

0800065c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800065c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800065e:	2300      	movs	r3, #0
  huart2.Init.BaudRate = 115200;
 8000660:	f44f 34e1 	mov.w	r4, #115200	; 0x1c200
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000664:	220c      	movs	r2, #12
  huart2.Instance = USART2;
 8000666:	4809      	ldr	r0, [pc, #36]	; (800068c <MX_USART2_UART_Init+0x30>)
 8000668:	4909      	ldr	r1, [pc, #36]	; (8000690 <MX_USART2_UART_Init+0x34>)
  huart2.Init.StopBits = UART_STOPBITS_1;
 800066a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Instance = USART2;
 800066e:	e9c0 1400 	strd	r1, r4, [r0]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000672:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000676:	6142      	str	r2, [r0, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000678:	6103      	str	r3, [r0, #16]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800067a:	f001 fa19 	bl	8001ab0 <HAL_UART_Init>
 800067e:	b900      	cbnz	r0, 8000682 <MX_USART2_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000680:	bd10      	pop	{r4, pc}
 8000682:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8000686:	f7ff bf8d 	b.w	80005a4 <Error_Handler>
 800068a:	bf00      	nop
 800068c:	20000224 	.word	0x20000224
 8000690:	40004400 	.word	0x40004400

08000694 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000694:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
  huart3.Init.BaudRate = 115200;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000696:	2300      	movs	r3, #0
  huart3.Init.BaudRate = 115200;
 8000698:	f44f 34e1 	mov.w	r4, #115200	; 0x1c200
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 800069c:	220c      	movs	r2, #12
  huart3.Instance = USART3;
 800069e:	4809      	ldr	r0, [pc, #36]	; (80006c4 <MX_USART3_UART_Init+0x30>)
 80006a0:	4909      	ldr	r1, [pc, #36]	; (80006c8 <MX_USART3_UART_Init+0x34>)
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006a2:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Instance = USART3;
 80006a6:	e9c0 1400 	strd	r1, r4, [r0]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006aa:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006ae:	6142      	str	r2, [r0, #20]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006b0:	6103      	str	r3, [r0, #16]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006b2:	f001 f9fd 	bl	8001ab0 <HAL_UART_Init>
 80006b6:	b900      	cbnz	r0, 80006ba <MX_USART3_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006b8:	bd10      	pop	{r4, pc}
 80006ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80006be:	f7ff bf71 	b.w	80005a4 <Error_Handler>
 80006c2:	bf00      	nop
 80006c4:	200001a0 	.word	0x200001a0
 80006c8:	40004800 	.word	0x40004800

080006cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80006cc:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ce:	2400      	movs	r4, #0
  if(uartHandle->Instance==USART2)
 80006d0:	6803      	ldr	r3, [r0, #0]
 80006d2:	4a44      	ldr	r2, [pc, #272]	; (80007e4 <HAL_UART_MspInit+0x118>)
{
 80006d4:	b088      	sub	sp, #32
  if(uartHandle->Instance==USART2)
 80006d6:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d8:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80006dc:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(uartHandle->Instance==USART2)
 80006e0:	d004      	beq.n	80006ec <HAL_UART_MspInit+0x20>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 80006e2:	4a41      	ldr	r2, [pc, #260]	; (80007e8 <HAL_UART_MspInit+0x11c>)
 80006e4:	4293      	cmp	r3, r2
 80006e6:	d04d      	beq.n	8000784 <HAL_UART_MspInit+0xb8>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80006e8:	b008      	add	sp, #32
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80006ec:	2104      	movs	r1, #4
 80006ee:	4605      	mov	r5, r0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f0:	2002      	movs	r0, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006f2:	2603      	movs	r6, #3
    __HAL_RCC_USART2_CLK_ENABLE();
 80006f4:	4b3d      	ldr	r3, [pc, #244]	; (80007ec <HAL_UART_MspInit+0x120>)
 80006f6:	69da      	ldr	r2, [r3, #28]
 80006f8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80006fc:	61da      	str	r2, [r3, #28]
 80006fe:	69da      	ldr	r2, [r3, #28]
 8000700:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000704:	9200      	str	r2, [sp, #0]
 8000706:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000708:	699a      	ldr	r2, [r3, #24]
 800070a:	430a      	orrs	r2, r1
 800070c:	619a      	str	r2, [r3, #24]
 800070e:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000710:	9104      	str	r1, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000712:	400b      	ands	r3, r1
 8000714:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000716:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000718:	9005      	str	r0, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800071a:	4835      	ldr	r0, [pc, #212]	; (80007f0 <HAL_UART_MspInit+0x124>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800071c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800071e:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000720:	f000 fc42 	bl	8000fa8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000724:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000726:	4832      	ldr	r0, [pc, #200]	; (80007f0 <HAL_UART_MspInit+0x124>)
 8000728:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800072a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	e9cd 4405 	strd	r4, r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000730:	f000 fc3a 	bl	8000fa8 <HAL_GPIO_Init>
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000734:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000736:	4e2f      	ldr	r6, [pc, #188]	; (80007f4 <HAL_UART_MspInit+0x128>)
 8000738:	4b2f      	ldr	r3, [pc, #188]	; (80007f8 <HAL_UART_MspInit+0x12c>)
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800073a:	4630      	mov	r0, r6
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800073c:	e9c6 4401 	strd	r4, r4, [r6, #4]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000740:	e9c6 4404 	strd	r4, r4, [r6, #16]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000744:	e9c6 4406 	strd	r4, r4, [r6, #24]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000748:	60f2      	str	r2, [r6, #12]
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800074a:	6033      	str	r3, [r6, #0]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800074c:	f000 fab8 	bl	8000cc0 <HAL_DMA_Init>
 8000750:	2800      	cmp	r0, #0
 8000752:	d143      	bne.n	80007dc <HAL_UART_MspInit+0x110>
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000754:	2010      	movs	r0, #16
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000756:	2300      	movs	r3, #0
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000758:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_tx.Instance = DMA1_Channel7;
 800075a:	4c28      	ldr	r4, [pc, #160]	; (80007fc <HAL_UART_MspInit+0x130>)
 800075c:	4928      	ldr	r1, [pc, #160]	; (8000800 <HAL_UART_MspInit+0x134>)
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800075e:	6060      	str	r0, [r4, #4]
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000760:	636e      	str	r6, [r5, #52]	; 0x34
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000762:	4620      	mov	r0, r4
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000764:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000768:	e9c4 3304 	strd	r3, r3, [r4, #16]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800076c:	e9c4 3306 	strd	r3, r3, [r4, #24]
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000770:	6275      	str	r5, [r6, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000772:	6021      	str	r1, [r4, #0]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000774:	f000 faa4 	bl	8000cc0 <HAL_DMA_Init>
 8000778:	2800      	cmp	r0, #0
 800077a:	d12c      	bne.n	80007d6 <HAL_UART_MspInit+0x10a>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800077c:	632c      	str	r4, [r5, #48]	; 0x30
 800077e:	6265      	str	r5, [r4, #36]	; 0x24
}
 8000780:	b008      	add	sp, #32
 8000782:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000784:	f44f 6180 	mov.w	r1, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000788:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800078a:	2503      	movs	r5, #3
    __HAL_RCC_USART3_CLK_ENABLE();
 800078c:	4b17      	ldr	r3, [pc, #92]	; (80007ec <HAL_UART_MspInit+0x120>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800078e:	481d      	ldr	r0, [pc, #116]	; (8000804 <HAL_UART_MspInit+0x138>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8000790:	69da      	ldr	r2, [r3, #28]
 8000792:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000796:	61da      	str	r2, [r3, #28]
 8000798:	69da      	ldr	r2, [r3, #28]
 800079a:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800079e:	9202      	str	r2, [sp, #8]
 80007a0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a2:	699a      	ldr	r2, [r3, #24]
 80007a4:	f042 0208 	orr.w	r2, r2, #8
 80007a8:	619a      	str	r2, [r3, #24]
 80007aa:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007ac:	9104      	str	r1, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ae:	f003 0308 	and.w	r3, r3, #8
 80007b2:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b4:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b6:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b8:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ba:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007bc:	f000 fbf4 	bl	8000fa8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80007c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c4:	480f      	ldr	r0, [pc, #60]	; (8000804 <HAL_UART_MspInit+0x138>)
 80007c6:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80007cc:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ce:	f000 fbeb 	bl	8000fa8 <HAL_GPIO_Init>
}
 80007d2:	b008      	add	sp, #32
 80007d4:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80007d6:	f7ff fee5 	bl	80005a4 <Error_Handler>
 80007da:	e7cf      	b.n	800077c <HAL_UART_MspInit+0xb0>
      Error_Handler();
 80007dc:	f7ff fee2 	bl	80005a4 <Error_Handler>
 80007e0:	e7b8      	b.n	8000754 <HAL_UART_MspInit+0x88>
 80007e2:	bf00      	nop
 80007e4:	40004400 	.word	0x40004400
 80007e8:	40004800 	.word	0x40004800
 80007ec:	40021000 	.word	0x40021000
 80007f0:	40010800 	.word	0x40010800
 80007f4:	2000015c 	.word	0x2000015c
 80007f8:	4002006c 	.word	0x4002006c
 80007fc:	200001e0 	.word	0x200001e0
 8000800:	40020080 	.word	0x40020080
 8000804:	40010c00 	.word	0x40010c00

08000808 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8000808:	b510      	push	{r4, lr}

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800080a:	2300      	movs	r3, #0
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800080c:	2408      	movs	r4, #8
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800080e:	2202      	movs	r2, #2
  hpcd_USB_FS.Instance = USB;
 8000810:	4807      	ldr	r0, [pc, #28]	; (8000830 <MX_USB_PCD_Init+0x28>)
 8000812:	4908      	ldr	r1, [pc, #32]	; (8000834 <MX_USB_PCD_Init+0x2c>)
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000814:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hpcd_USB_FS.Instance = USB;
 8000818:	e9c0 1400 	strd	r1, r4, [r0]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800081c:	6082      	str	r2, [r0, #8]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800081e:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000820:	f000 fce6 	bl	80011f0 <HAL_PCD_Init>
 8000824:	b900      	cbnz	r0, 8000828 <MX_USB_PCD_Init+0x20>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000826:	bd10      	pop	{r4, pc}
 8000828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800082c:	f7ff beba 	b.w	80005a4 <Error_Handler>
 8000830:	20000264 	.word	0x20000264
 8000834:	40005c00 	.word	0x40005c00

08000838 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{

  if(pcdHandle->Instance==USB)
 8000838:	4b09      	ldr	r3, [pc, #36]	; (8000860 <HAL_PCD_MspInit+0x28>)
 800083a:	6802      	ldr	r2, [r0, #0]
 800083c:	429a      	cmp	r2, r3
 800083e:	d000      	beq.n	8000842 <HAL_PCD_MspInit+0xa>
 8000840:	4770      	bx	lr
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000842:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8000846:	69da      	ldr	r2, [r3, #28]
{
 8000848:	b082      	sub	sp, #8
    __HAL_RCC_USB_CLK_ENABLE();
 800084a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800084e:	61da      	str	r2, [r3, #28]
 8000850:	69db      	ldr	r3, [r3, #28]
 8000852:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000856:	9301      	str	r3, [sp, #4]
 8000858:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800085a:	b002      	add	sp, #8
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	40005c00 	.word	0x40005c00

08000864 <xbee_init>:
	options[6] = OPTIONS;
}

//Zamiana adresu na tablice
//Ogólna inicjalizacja xbee
void xbee_init(Xbee *sensor, uint64_t address, UART_HandleTypeDef *uart){
 8000864:	b4f0      	push	{r4, r5, r6, r7}
	options[1] = FRAME_TYPE;
 8000866:	2410      	movs	r4, #16
	options[2] = FRAME_ID ;
 8000868:	2100      	movs	r1, #0
	options[3] = BT_1;
 800086a:	26ff      	movs	r6, #255	; 0xff
	options[0] = START_BYTE;
 800086c:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
	options[4] = BT_2;
 8000870:	25fe      	movs	r5, #254	; 0xfe
void xbee_init(Xbee *sensor, uint64_t address, UART_HandleTypeDef *uart){
 8000872:	b082      	sub	sp, #8
 8000874:	9f06      	ldr	r7, [sp, #24]
	options[1] = FRAME_TYPE;
 8000876:	7044      	strb	r4, [r0, #1]
 8000878:	7f04      	ldrb	r4, [r0, #28]
	options[3] = BT_1;
 800087a:	70c6      	strb	r6, [r0, #3]
	options[2] = FRAME_ID ;
 800087c:	7081      	strb	r1, [r0, #2]
	options[5] = BORDCAST_RADIUS;
 800087e:	7141      	strb	r1, [r0, #5]
	options[6] = OPTIONS;
 8000880:	7181      	strb	r1, [r0, #6]
	options[0] = START_BYTE;
 8000882:	f880 c000 	strb.w	ip, [r0]
	  uint8_t temp[8]; //tablica do wczytania oryginalego adresu;
	  int i, j;

	 sensor->huart = uart;
 8000886:	6207      	str	r7, [r0, #32]
	options[4] = BT_2;
 8000888:	7105      	strb	r5, [r0, #4]
 800088a:	f10d 31ff 	add.w	r1, sp, #4294967295	; 0xffffffff
 800088e:	f10d 0607 	add.w	r6, sp, #7
	  xbee_options_init(sensor->options); //Inicjalizacja opcji, raz wystarczy


	  //to idzie jeszcze poprawic do jednej petli
	  for(i=0; i<8; i++){
		  temp[i] = address;
 8000892:	b2d5      	uxtb	r5, r2
 8000894:	f801 5f01 	strb.w	r5, [r1, #1]!
		  sensor->checksum += temp[i];
 8000898:	442c      	add	r4, r5

		  address /= 0x100;
 800089a:	0a12      	lsrs	r2, r2, #8
	  for(i=0; i<8; i++){
 800089c:	42b1      	cmp	r1, r6
		  address /= 0x100;
 800089e:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
		  sensor->checksum += temp[i];
 80008a2:	b2e4      	uxtb	r4, r4
		  address /= 0x100;
 80008a4:	ea4f 2313 	mov.w	r3, r3, lsr #8
	  for(i=0; i<8; i++){
 80008a8:	d1f3      	bne.n	8000892 <xbee_init+0x2e>
 80008aa:	7704      	strb	r4, [r0, #28]
 80008ac:	f100 0309 	add.w	r3, r0, #9
 80008b0:	3011      	adds	r0, #17
	  }

	  //Wpisanie adresu do tablicy dynamicznej
	  for(i=7, j=0; i>=0; i--, j++){
		  sensor->address[j] = temp[i];
 80008b2:	f811 2901 	ldrb.w	r2, [r1], #-1
 80008b6:	f803 2b01 	strb.w	r2, [r3], #1
	  for(i=7, j=0; i>=0; i--, j++){
 80008ba:	4283      	cmp	r3, r0
 80008bc:	d1f9      	bne.n	80008b2 <xbee_init+0x4e>
	  }
}
 80008be:	b002      	add	sp, #8
 80008c0:	bcf0      	pop	{r4, r5, r6, r7}
 80008c2:	4770      	bx	lr

080008c4 <xbee_send>:
	sensor->checksum = 0xff - sensor->checksum;

}

//Czy tutaj tworzyc tablice z cala wiadomoscia i wysłać całę odrazu
void xbee_send(Xbee *sensor){
 80008c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c6:	4604      	mov	r4, r0
	int i;

		//wyslanie znaku start
		HAL_UART_Transmit(sensor->huart, &sensor->options[0], 1, 100);
 80008c8:	4601      	mov	r1, r0
 80008ca:	2364      	movs	r3, #100	; 0x64
 80008cc:	2201      	movs	r2, #1
 80008ce:	6a00      	ldr	r0, [r0, #32]

		//wyslanie dlugosci
		for(i=0; i<2; i++){
			HAL_UART_Transmit(sensor->huart, &sensor->length[i], 1, 100);
 80008d0:	1de7      	adds	r7, r4, #7
		HAL_UART_Transmit(sensor->huart, &sensor->options[0], 1, 100);
 80008d2:	f001 f91d 	bl	8001b10 <HAL_UART_Transmit>
			HAL_UART_Transmit(sensor->huart, &sensor->length[i], 1, 100);
 80008d6:	4639      	mov	r1, r7
 80008d8:	2364      	movs	r3, #100	; 0x64
 80008da:	2201      	movs	r2, #1
 80008dc:	6a20      	ldr	r0, [r4, #32]
 80008de:	f001 f917 	bl	8001b10 <HAL_UART_Transmit>
 80008e2:	2364      	movs	r3, #100	; 0x64
 80008e4:	2201      	movs	r2, #1
 80008e6:	f104 0108 	add.w	r1, r4, #8
 80008ea:	6a20      	ldr	r0, [r4, #32]
 80008ec:	f001 f910 	bl	8001b10 <HAL_UART_Transmit>
		}

		//wyslanie danych klatki
		HAL_UART_Transmit(sensor->huart, &sensor->options[1], 1, 100);
 80008f0:	2364      	movs	r3, #100	; 0x64
 80008f2:	2201      	movs	r2, #1
 80008f4:	1c61      	adds	r1, r4, #1
 80008f6:	6a20      	ldr	r0, [r4, #32]
 80008f8:	f001 f90a 	bl	8001b10 <HAL_UART_Transmit>
		HAL_UART_Transmit(sensor->huart, &sensor->options[2], 1, 100);
 80008fc:	2364      	movs	r3, #100	; 0x64
 80008fe:	2201      	movs	r2, #1
 8000900:	6a20      	ldr	r0, [r4, #32]
 8000902:	1ca1      	adds	r1, r4, #2
 8000904:	f001 f904 	bl	8001b10 <HAL_UART_Transmit>

		//Wyslanie adresu
		for(i=0; i<8; i++){
 8000908:	f104 0509 	add.w	r5, r4, #9
 800090c:	f104 0611 	add.w	r6, r4, #17
			HAL_UART_Transmit(sensor->huart, &sensor->address[i], 1, 100);
 8000910:	2201      	movs	r2, #1
 8000912:	4629      	mov	r1, r5
 8000914:	2364      	movs	r3, #100	; 0x64
 8000916:	4415      	add	r5, r2
 8000918:	6a20      	ldr	r0, [r4, #32]
 800091a:	f001 f8f9 	bl	8001b10 <HAL_UART_Transmit>
		for(i=0; i<8; i++){
 800091e:	42b5      	cmp	r5, r6
 8000920:	d1f6      	bne.n	8000910 <xbee_send+0x4c>
 8000922:	1ce5      	adds	r5, r4, #3
		}

		//wyslanie reszty opcji
		for(i=3; i<7; i++){
			HAL_UART_Transmit(sensor->huart, &sensor->options[i], 1, 100);
 8000924:	2201      	movs	r2, #1
 8000926:	4629      	mov	r1, r5
 8000928:	2364      	movs	r3, #100	; 0x64
 800092a:	4415      	add	r5, r2
 800092c:	6a20      	ldr	r0, [r4, #32]
 800092e:	f001 f8ef 	bl	8001b10 <HAL_UART_Transmit>
		for(i=3; i<7; i++){
 8000932:	42bd      	cmp	r5, r7
 8000934:	d1f6      	bne.n	8000924 <xbee_send+0x60>
		}

		//wyslanie danych
		for(i=0; i<sensor->data_length; i++){
 8000936:	69a3      	ldr	r3, [r4, #24]
 8000938:	2b00      	cmp	r3, #0
 800093a:	dd0b      	ble.n	8000954 <xbee_send+0x90>
 800093c:	2500      	movs	r5, #0
			HAL_UART_Transmit(sensor->huart, (uint8_t *) &sensor->data[i], 1, 100);
 800093e:	6961      	ldr	r1, [r4, #20]
 8000940:	2364      	movs	r3, #100	; 0x64
 8000942:	4429      	add	r1, r5
 8000944:	2201      	movs	r2, #1
 8000946:	6a20      	ldr	r0, [r4, #32]
 8000948:	f001 f8e2 	bl	8001b10 <HAL_UART_Transmit>
		for(i=0; i<sensor->data_length; i++){
 800094c:	69a3      	ldr	r3, [r4, #24]
 800094e:	3501      	adds	r5, #1
 8000950:	42ab      	cmp	r3, r5
 8000952:	dcf4      	bgt.n	800093e <xbee_send+0x7a>
		}

		//wyslanie checksumy
		HAL_UART_Transmit(sensor->huart, &sensor->checksum, 1, 100);
 8000954:	2364      	movs	r3, #100	; 0x64
 8000956:	6a20      	ldr	r0, [r4, #32]
 8000958:	f104 011c 	add.w	r1, r4, #28
 800095c:	2201      	movs	r2, #1
 800095e:	f001 f8d7 	bl	8001b10 <HAL_UART_Transmit>


		//Czyszczenie pamięci
		free(sensor->data);
 8000962:	6960      	ldr	r0, [r4, #20]
}
 8000964:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		free(sensor->data);
 8000968:	f001 bb76 	b.w	8002058 <free>

0800096c <xbee_char_load>:
	xbee_checksum_count(&sensor);
	xbee_send(&sensor);
}

//wczytanie podanych danych do struktury
void xbee_char_load(char *data, Xbee *sensor){
 800096c:	b570      	push	{r4, r5, r6, lr}
 800096e:	460d      	mov	r5, r1
 8000970:	4604      	mov	r4, r0
	sensor->data_length = strlen(data); //strlen niby powinien zadziałać bez
 8000972:	f7ff fbed 	bl	8000150 <strlen>
 8000976:	61a8      	str	r0, [r5, #24]
 8000978:	4606      	mov	r6, r0
	sensor->data = (uint8_t*)malloc(sensor->data_length * sizeof(uint8_t));//
 800097a:	f001 fb65 	bl	8002048 <malloc>
 800097e:	6168      	str	r0, [r5, #20]

	for(int i=0; i<sensor->data_length; ++i){
 8000980:	b156      	cbz	r6, 8000998 <xbee_char_load+0x2c>
 8000982:	2300      	movs	r3, #0
 8000984:	1e62      	subs	r2, r4, #1
 8000986:	e000      	b.n	800098a <xbee_char_load+0x1e>
 8000988:	6968      	ldr	r0, [r5, #20]
		sensor->data[i] = data[i];
 800098a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800098e:	54c1      	strb	r1, [r0, r3]
	for(int i=0; i<sensor->data_length; ++i){
 8000990:	69a9      	ldr	r1, [r5, #24]
 8000992:	3301      	adds	r3, #1
 8000994:	4299      	cmp	r1, r3
 8000996:	dcf7      	bgt.n	8000988 <xbee_char_load+0x1c>
	}
}
 8000998:	bd70      	pop	{r4, r5, r6, pc}
 800099a:	bf00      	nop

0800099c <xbee_transmit_char>:
void xbee_transmit_char(Xbee sensor, char *data){
 800099c:	b084      	sub	sp, #16
 800099e:	b510      	push	{r4, lr}
 80009a0:	ac02      	add	r4, sp, #8
 80009a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	xbee_char_load(data, &sensor);
 80009a6:	4621      	mov	r1, r4
 80009a8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80009aa:	f7ff ffdf 	bl	800096c <xbee_char_load>
	l = 14 + sensor->data_length;
 80009ae:	9808      	ldr	r0, [sp, #32]
	sensor->length[0] = l/100;
 80009b0:	4b18      	ldr	r3, [pc, #96]	; (8000a14 <xbee_transmit_char+0x78>)
	l = 14 + sensor->data_length;
 80009b2:	f100 040e 	add.w	r4, r0, #14
	sensor->length[0] = l/100;
 80009b6:	fb83 1304 	smull	r1, r3, r3, r4
 80009ba:	17e1      	asrs	r1, r4, #31
 80009bc:	ebc1 1163 	rsb	r1, r1, r3, asr #5
 80009c0:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
	sensor->length[1] = l;
 80009c4:	f88d 4010 	strb.w	r4, [sp, #16]
 80009c8:	aa02      	add	r2, sp, #8
	sensor->length[0] = l/100;
 80009ca:	f88d 100f 	strb.w	r1, [sp, #15]
	for(i=1; i<7; i++){
 80009ce:	f10d 040e 	add.w	r4, sp, #14
		sensor->checksum += sensor->options[i];
 80009d2:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80009d6:	440b      	add	r3, r1
	for(i=1; i<7; i++){
 80009d8:	42a2      	cmp	r2, r4
		sensor->checksum += sensor->options[i];
 80009da:	b2db      	uxtb	r3, r3
	for(i=1; i<7; i++){
 80009dc:	d1f9      	bne.n	80009d2 <xbee_transmit_char+0x36>
	for(i=0; i<sensor->data_length; i++){
 80009de:	2800      	cmp	r0, #0
 80009e0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80009e4:	dd0b      	ble.n	80009fe <xbee_transmit_char+0x62>
		sensor->checksum += sensor->data[i];
 80009e6:	9a07      	ldr	r2, [sp, #28]
 80009e8:	4410      	add	r0, r2
 80009ea:	3801      	subs	r0, #1
 80009ec:	3a01      	subs	r2, #1
 80009ee:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80009f2:	440b      	add	r3, r1
 80009f4:	b2db      	uxtb	r3, r3
	for(i=0; i<sensor->data_length; i++){
 80009f6:	4282      	cmp	r2, r0
		sensor->checksum += sensor->data[i];
 80009f8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	for(i=0; i<sensor->data_length; i++){
 80009fc:	d1f7      	bne.n	80009ee <xbee_transmit_char+0x52>
	sensor->checksum = 0xff - sensor->checksum;
 80009fe:	43db      	mvns	r3, r3
	xbee_send(&sensor);
 8000a00:	a802      	add	r0, sp, #8
	sensor->checksum = 0xff - sensor->checksum;
 8000a02:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	xbee_send(&sensor);
 8000a06:	f7ff ff5d 	bl	80008c4 <xbee_send>
}
 8000a0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a0e:	b004      	add	sp, #16
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	51eb851f 	.word	0x51eb851f

08000a18 <xbee_receive>:
}

//Zerowanie tablic
inline void xbee_clear_array(char *array, int length){
	for(int i=0; i<length; i++){
		array[i] = 0;
 8000a18:	2200      	movs	r2, #0
    return result;
}


///zastanowić się jak sensownie zwracać dane
void xbee_receive(){
 8000a1a:	b470      	push	{r4, r5, r6}
 8000a1c:	4b2c      	ldr	r3, [pc, #176]	; (8000ad0 <xbee_receive+0xb8>)
 8000a1e:	f1a3 0035 	sub.w	r0, r3, #53	; 0x35
 8000a22:	f103 011e 	add.w	r1, r3, #30
		array[i] = 0;
 8000a26:	f803 2f01 	strb.w	r2, [r3, #1]!
	for(int i=0; i<length; i++){
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	d1fb      	bne.n	8000a26 <xbee_receive+0xe>
	xbee_clear_array(xbee_rx.data_array, DATA_ARRAY);
	xbee_rx.data_flag = 0;
	//ogarnięcie długości
	xbee_rx.length = (xbee_rx.mess_loaded[1] << 8) + xbee_rx.mess_loaded[2];
 8000a2e:	7943      	ldrb	r3, [r0, #5]
 8000a30:	7985      	ldrb	r5, [r0, #6]
	xbee_rx.data_flag = 0;
 8000a32:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
	xbee_rx.length = (xbee_rx.mess_loaded[1] << 8) + xbee_rx.mess_loaded[2];
 8000a36:	eb05 2503 	add.w	r5, r5, r3, lsl #8
 8000a3a:	6005      	str	r5, [r0, #0]
	//długość całej tablicy
	int mess_length = xbee_rx.length + 3; //3 bo dodajemy 4 elementy ale musimy odjąć jeden bo tablice sa numerowane od 0
 8000a3c:	1cee      	adds	r6, r5, #3


	//sprawdzenie checksum
	for(int i=3; i<mess_length; i++){
 8000a3e:	2d00      	cmp	r5, #0
 8000a40:	d042      	beq.n	8000ac8 <xbee_receive+0xb0>
 8000a42:	1d84      	adds	r4, r0, #6
 8000a44:	f890 3055 	ldrb.w	r3, [r0, #85]	; 0x55
 8000a48:	4a22      	ldr	r2, [pc, #136]	; (8000ad4 <xbee_receive+0xbc>)
 8000a4a:	442c      	add	r4, r5
		xbee_rx.checksum += xbee_rx.mess_loaded[i];
 8000a4c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8000a50:	440b      	add	r3, r1
	for(int i=3; i<mess_length; i++){
 8000a52:	42a2      	cmp	r2, r4
		xbee_rx.checksum += xbee_rx.mess_loaded[i];
 8000a54:	b2db      	uxtb	r3, r3
	for(int i=3; i<mess_length; i++){
 8000a56:	d1f9      	bne.n	8000a4c <xbee_receive+0x34>
	}
	xbee_rx.checksum = 0xff - xbee_rx.checksum;
 8000a58:	43db      	mvns	r3, r3
	//sprawdzenie czy checksum sie zgadza
	if(xbee_rx.checksum != xbee_rx.mess_loaded[mess_length]){
 8000a5a:	1982      	adds	r2, r0, r6
 8000a5c:	7912      	ldrb	r2, [r2, #4]
	xbee_rx.checksum = 0xff - xbee_rx.checksum;
 8000a5e:	b2db      	uxtb	r3, r3
	if(xbee_rx.checksum != xbee_rx.mess_loaded[mess_length]){
 8000a60:	429a      	cmp	r2, r3
	xbee_rx.checksum = 0xff - xbee_rx.checksum;
 8000a62:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
	if(xbee_rx.checksum != xbee_rx.mess_loaded[mess_length]){
 8000a66:	d00d      	beq.n	8000a84 <xbee_receive+0x6c>
		array[i] = 0;
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4b1b      	ldr	r3, [pc, #108]	; (8000ad8 <xbee_receive+0xc0>)
 8000a6c:	f100 0235 	add.w	r2, r0, #53	; 0x35
 8000a70:	f803 1f01 	strb.w	r1, [r3, #1]!
	for(int i=0; i<length; i++){
 8000a74:	429a      	cmp	r2, r3
 8000a76:	d1fb      	bne.n	8000a70 <xbee_receive+0x58>
	xbee_rx.length = 0;
 8000a78:	2300      	movs	r3, #0
	xbee_rx.checksum = 0;
 8000a7a:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
	xbee_rx.length = 0;
 8000a7e:	6003      	str	r3, [r0, #0]
		//debug
		//xbee_rx.data_array[k] = '\n';
		//xbee_rx.data = xbee_data_convert(xbee_rx.data_array);
	}
	xbee_clear();
}
 8000a80:	bc70      	pop	{r4, r5, r6}
 8000a82:	4770      	bx	lr
	if(xbee_rx.length == 7){
 8000a84:	2d07      	cmp	r5, #7
 8000a86:	d016      	beq.n	8000ab6 <xbee_receive+0x9e>
		for(i = 15, k = 0; i<mess_length; ++i, ++k){
 8000a88:	2e0f      	cmp	r6, #15
 8000a8a:	dd08      	ble.n	8000a9e <xbee_receive+0x86>
 8000a8c:	1d82      	adds	r2, r0, #6
 8000a8e:	4b13      	ldr	r3, [pc, #76]	; (8000adc <xbee_receive+0xc4>)
 8000a90:	4415      	add	r5, r2
			xbee_rx.data_array[k] = xbee_rx.mess_loaded[i];
 8000a92:	f813 2f01 	ldrb.w	r2, [r3, #1]!
		for(i = 15, k = 0; i<mess_length; ++i, ++k){
 8000a96:	42ab      	cmp	r3, r5
			xbee_rx.data_array[k] = xbee_rx.mess_loaded[i];
 8000a98:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		for(i = 15, k = 0; i<mess_length; ++i, ++k){
 8000a9c:	d1f9      	bne.n	8000a92 <xbee_receive+0x7a>
		xbee_rx.data_flag = 1;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
		array[i] = 0;
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <xbee_receive+0xc0>)
 8000aa8:	f100 0235 	add.w	r2, r0, #53	; 0x35
 8000aac:	f803 1f01 	strb.w	r1, [r3, #1]!
	for(int i=0; i<length; i++){
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d1fb      	bne.n	8000aac <xbee_receive+0x94>
 8000ab4:	e7e0      	b.n	8000a78 <xbee_receive+0x60>
		if(xbee_rx.mess_loaded[mess_length-1] == 0 && xbee_rx.mess_loaded[mess_length-2] == 0 && xbee_rx.mess_loaded[mess_length-3] == 0){
 8000ab6:	7b43      	ldrb	r3, [r0, #13]
 8000ab8:	7b01      	ldrb	r1, [r0, #12]
 8000aba:	7ac2      	ldrb	r2, [r0, #11]
 8000abc:	430b      	orrs	r3, r1
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	d1f0      	bne.n	8000aa4 <xbee_receive+0x8c>
			xbee_rx.response = 1;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	6583      	str	r3, [r0, #88]	; 0x58
 8000ac6:	e7ed      	b.n	8000aa4 <xbee_receive+0x8c>
 8000ac8:	f890 3055 	ldrb.w	r3, [r0, #85]	; 0x55
 8000acc:	e7c4      	b.n	8000a58 <xbee_receive+0x40>
 8000ace:	bf00      	nop
 8000ad0:	20000129 	.word	0x20000129
 8000ad4:	200000fa 	.word	0x200000fa
 8000ad8:	200000f7 	.word	0x200000f7
 8000adc:	20000106 	.word	0x20000106

08000ae0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000ae0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000ae2:	e003      	b.n	8000aec <LoopCopyDataInit>

08000ae4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000ae4:	4b0b      	ldr	r3, [pc, #44]	; (8000b14 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000ae6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000ae8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000aea:	3104      	adds	r1, #4

08000aec <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000aec:	480a      	ldr	r0, [pc, #40]	; (8000b18 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000aee:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000af0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000af2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000af4:	d3f6      	bcc.n	8000ae4 <CopyDataInit>
  ldr r2, =_sbss
 8000af6:	4a0a      	ldr	r2, [pc, #40]	; (8000b20 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000af8:	e002      	b.n	8000b00 <LoopFillZerobss>

08000afa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000afa:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000afc:	f842 3b04 	str.w	r3, [r2], #4

08000b00 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000b00:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000b02:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000b04:	d3f9      	bcc.n	8000afa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b06:	f7ff fda7 	bl	8000658 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b0a:	f001 fa79 	bl	8002000 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b0e:	f7ff fc0b 	bl	8000328 <main>
  bx lr
 8000b12:	4770      	bx	lr
  ldr r3, =_sidata
 8000b14:	080029cc 	.word	0x080029cc
  ldr r0, =_sdata
 8000b18:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000b1c:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8000b20:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8000b24:	20000564 	.word	0x20000564

08000b28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b28:	e7fe      	b.n	8000b28 <ADC1_2_IRQHandler>
	...

08000b2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b2c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b32:	4a0d      	ldr	r2, [pc, #52]	; (8000b68 <HAL_InitTick+0x3c>)
{
 8000b34:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b36:	7811      	ldrb	r1, [r2, #0]
 8000b38:	4a0c      	ldr	r2, [pc, #48]	; (8000b6c <HAL_InitTick+0x40>)
 8000b3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b3e:	6812      	ldr	r2, [r2, #0]
 8000b40:	fbb2 f0f3 	udiv	r0, r2, r3
 8000b44:	f000 f8a4 	bl	8000c90 <HAL_SYSTICK_Config>
 8000b48:	b908      	cbnz	r0, 8000b4e <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b4a:	2d0f      	cmp	r5, #15
 8000b4c:	d901      	bls.n	8000b52 <HAL_InitTick+0x26>
    return HAL_ERROR;
 8000b4e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000b50:	bd38      	pop	{r3, r4, r5, pc}
 8000b52:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b54:	4602      	mov	r2, r0
 8000b56:	4629      	mov	r1, r5
 8000b58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b5c:	f000 f852 	bl	8000c04 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b60:	4b03      	ldr	r3, [pc, #12]	; (8000b70 <HAL_InitTick+0x44>)
 8000b62:	4620      	mov	r0, r4
 8000b64:	601d      	str	r5, [r3, #0]
}
 8000b66:	bd38      	pop	{r3, r4, r5, pc}
 8000b68:	20000008 	.word	0x20000008
 8000b6c:	20000004 	.word	0x20000004
 8000b70:	2000000c 	.word	0x2000000c

08000b74 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b74:	4a07      	ldr	r2, [pc, #28]	; (8000b94 <HAL_Init+0x20>)
{
 8000b76:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b78:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b7a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b7c:	f043 0310 	orr.w	r3, r3, #16
 8000b80:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b82:	f000 f82d 	bl	8000be0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b86:	2000      	movs	r0, #0
 8000b88:	f7ff ffd0 	bl	8000b2c <HAL_InitTick>
  HAL_MspInit();
 8000b8c:	f7ff fd0c 	bl	80005a8 <HAL_MspInit>
}
 8000b90:	2000      	movs	r0, #0
 8000b92:	bd08      	pop	{r3, pc}
 8000b94:	40022000 	.word	0x40022000

08000b98 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000b98:	4a03      	ldr	r2, [pc, #12]	; (8000ba8 <HAL_IncTick+0x10>)
 8000b9a:	4b04      	ldr	r3, [pc, #16]	; (8000bac <HAL_IncTick+0x14>)
 8000b9c:	6811      	ldr	r1, [r2, #0]
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	440b      	add	r3, r1
 8000ba2:	6013      	str	r3, [r2, #0]
}
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	20000550 	.word	0x20000550
 8000bac:	20000008 	.word	0x20000008

08000bb0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000bb0:	4b01      	ldr	r3, [pc, #4]	; (8000bb8 <HAL_GetTick+0x8>)
 8000bb2:	6818      	ldr	r0, [r3, #0]
}
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	20000550 	.word	0x20000550

08000bbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bbc:	b538      	push	{r3, r4, r5, lr}
 8000bbe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000bc0:	f7ff fff6 	bl	8000bb0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bc4:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000bc6:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8000bc8:	d002      	beq.n	8000bd0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bca:	4b04      	ldr	r3, [pc, #16]	; (8000bdc <HAL_Delay+0x20>)
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bd0:	f7ff ffee 	bl	8000bb0 <HAL_GetTick>
 8000bd4:	1b40      	subs	r0, r0, r5
 8000bd6:	42a0      	cmp	r0, r4
 8000bd8:	d3fa      	bcc.n	8000bd0 <HAL_Delay+0x14>
  {
  }
}
 8000bda:	bd38      	pop	{r3, r4, r5, pc}
 8000bdc:	20000008 	.word	0x20000008

08000be0 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000be0:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be4:	4a06      	ldr	r2, [pc, #24]	; (8000c00 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000be6:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be8:	68d0      	ldr	r0, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bee:	4008      	ands	r0, r1
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf0:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000bf2:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000bfa:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c04:	4b19      	ldr	r3, [pc, #100]	; (8000c6c <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c06:	b430      	push	{r4, r5}
 8000c08:	68db      	ldr	r3, [r3, #12]
 8000c0a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c0e:	f1c3 0507 	rsb	r5, r3, #7
 8000c12:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c14:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c18:	bf28      	it	cs
 8000c1a:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c1c:	2c06      	cmp	r4, #6
 8000c1e:	d919      	bls.n	8000c54 <HAL_NVIC_SetPriority+0x50>
 8000c20:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000c24:	3b03      	subs	r3, #3
 8000c26:	409c      	lsls	r4, r3
 8000c28:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c2c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000c30:	40ac      	lsls	r4, r5
 8000c32:	ea21 0104 	bic.w	r1, r1, r4
 8000c36:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000c38:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c3a:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8000c3e:	db0c      	blt.n	8000c5a <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c40:	0109      	lsls	r1, r1, #4
 8000c42:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000c46:	b2c9      	uxtb	r1, r1
 8000c48:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000c4c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000c50:	bc30      	pop	{r4, r5}
 8000c52:	4770      	bx	lr
 8000c54:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c56:	4613      	mov	r3, r2
 8000c58:	e7e8      	b.n	8000c2c <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5a:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <HAL_NVIC_SetPriority+0x6c>)
 8000c5c:	f000 000f 	and.w	r0, r0, #15
 8000c60:	0109      	lsls	r1, r1, #4
 8000c62:	b2c9      	uxtb	r1, r1
 8000c64:	4403      	add	r3, r0
 8000c66:	7619      	strb	r1, [r3, #24]
 8000c68:	bc30      	pop	{r4, r5}
 8000c6a:	4770      	bx	lr
 8000c6c:	e000ed00 	.word	0xe000ed00
 8000c70:	e000ecfc 	.word	0xe000ecfc

08000c74 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000c74:	2800      	cmp	r0, #0
 8000c76:	db07      	blt.n	8000c88 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c78:	2301      	movs	r3, #1
 8000c7a:	f000 011f 	and.w	r1, r0, #31
 8000c7e:	4a03      	ldr	r2, [pc, #12]	; (8000c8c <HAL_NVIC_EnableIRQ+0x18>)
 8000c80:	408b      	lsls	r3, r1
 8000c82:	0940      	lsrs	r0, r0, #5
 8000c84:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	e000e100 	.word	0xe000e100

08000c90 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c90:	3801      	subs	r0, #1
 8000c92:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c96:	d20d      	bcs.n	8000cb4 <HAL_SYSTICK_Config+0x24>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c98:	b430      	push	{r4, r5}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9a:	25f0      	movs	r5, #240	; 0xf0
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c9c:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c9e:	2107      	movs	r1, #7
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ca0:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <HAL_SYSTICK_Config+0x28>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca2:	4c06      	ldr	r4, [pc, #24]	; (8000cbc <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ca4:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca6:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000caa:	4610      	mov	r0, r2
   return SysTick_Config(TicksNumb);
}
 8000cac:	bc30      	pop	{r4, r5}
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cae:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cb0:	6019      	str	r1, [r3, #0]
 8000cb2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	4770      	bx	lr
 8000cb8:	e000e010 	.word	0xe000e010
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000cc0:	b340      	cbz	r0, 8000d14 <HAL_DMA_Init+0x54>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000cc2:	4603      	mov	r3, r0
{
 8000cc4:	b4f0      	push	{r4, r5, r6, r7}
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000cc6:	e9d0 2601 	ldrd	r2, r6, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000cca:	f44f 7580 	mov.w	r5, #256	; 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000cce:	2400      	movs	r4, #0
  tmp |=  hdma->Init.Direction        |
 8000cd0:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cd2:	68de      	ldr	r6, [r3, #12]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000cd4:	6800      	ldr	r0, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cd6:	4332      	orrs	r2, r6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000cd8:	490f      	ldr	r1, [pc, #60]	; (8000d18 <HAL_DMA_Init+0x58>)
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cda:	691e      	ldr	r6, [r3, #16]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000cdc:	4f0f      	ldr	r7, [pc, #60]	; (8000d1c <HAL_DMA_Init+0x5c>)
 8000cde:	4401      	add	r1, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ce0:	4332      	orrs	r2, r6
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ce2:	695e      	ldr	r6, [r3, #20]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000ce4:	fba7 7101 	umull	r7, r1, r7, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ce8:	4332      	orrs	r2, r6
 8000cea:	699e      	ldr	r6, [r3, #24]
          hdma->Init.Mode                | hdma->Init.Priority;
 8000cec:	69df      	ldr	r7, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cee:	4332      	orrs	r2, r6
  tmp = hdma->Instance->CCR;
 8000cf0:	6806      	ldr	r6, [r0, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000cf2:	0909      	lsrs	r1, r1, #4
 8000cf4:	0089      	lsls	r1, r1, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000cf6:	f426 567f 	bic.w	r6, r6, #16320	; 0x3fc0
          hdma->Init.Mode                | hdma->Init.Priority;
 8000cfa:	433a      	orrs	r2, r7
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000cfc:	f026 0630 	bic.w	r6, r6, #48	; 0x30
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000d00:	6419      	str	r1, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000d02:	4907      	ldr	r1, [pc, #28]	; (8000d20 <HAL_DMA_Init+0x60>)
  tmp |=  hdma->Init.Direction        |
 8000d04:	4332      	orrs	r2, r6
  hdma->DmaBaseAddress = DMA1;
 8000d06:	63d9      	str	r1, [r3, #60]	; 0x3c
  hdma->Instance->CCR = tmp;
 8000d08:	6002      	str	r2, [r0, #0]
  hdma->Lock = HAL_UNLOCKED;
 8000d0a:	841d      	strh	r5, [r3, #32]

  return HAL_OK;
 8000d0c:	4620      	mov	r0, r4
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d0e:	639c      	str	r4, [r3, #56]	; 0x38
}
 8000d10:	bcf0      	pop	{r4, r5, r6, r7}
 8000d12:	4770      	bx	lr
    return HAL_ERROR;
 8000d14:	2001      	movs	r0, #1
}
 8000d16:	4770      	bx	lr
 8000d18:	bffdfff8 	.word	0xbffdfff8
 8000d1c:	cccccccd 	.word	0xcccccccd
 8000d20:	40020000 	.word	0x40020000

08000d24 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d24:	b4f0      	push	{r4, r5, r6, r7}
 8000d26:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000d28:	f890 0020 	ldrb.w	r0, [r0, #32]
 8000d2c:	2801      	cmp	r0, #1
 8000d2e:	d038      	beq.n	8000da2 <HAL_DMA_Start_IT+0x7e>
 8000d30:	2501      	movs	r5, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000d32:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
  __HAL_LOCK(hdma);
 8000d36:	f884 5020 	strb.w	r5, [r4, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8000d3a:	42a8      	cmp	r0, r5
 8000d3c:	d005      	beq.n	8000d4a <HAL_DMA_Start_IT+0x26>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000d3e:	2300      	movs	r3, #0
 8000d40:	f884 3020 	strb.w	r3, [r4, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000d44:	2002      	movs	r0, #2
  }    
  return status;
}
 8000d46:	bcf0      	pop	{r4, r5, r6, r7}
 8000d48:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8000d4a:	2702      	movs	r7, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d4c:	2600      	movs	r6, #0
    __HAL_DMA_DISABLE(hdma);
 8000d4e:	6825      	ldr	r5, [r4, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 8000d50:	f884 7021 	strb.w	r7, [r4, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d54:	63a6      	str	r6, [r4, #56]	; 0x38
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000d56:	6c27      	ldr	r7, [r4, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8000d58:	682e      	ldr	r6, [r5, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000d5a:	40b8      	lsls	r0, r7
    __HAL_DMA_DISABLE(hdma);
 8000d5c:	f026 0601 	bic.w	r6, r6, #1
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000d60:	6be7      	ldr	r7, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8000d62:	602e      	str	r6, [r5, #0]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000d64:	6866      	ldr	r6, [r4, #4]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000d66:	6078      	str	r0, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 8000d68:	606b      	str	r3, [r5, #4]
    if(NULL != hdma->XferHalfCpltCallback)
 8000d6a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000d6c:	2e10      	cmp	r6, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000d6e:	bf0b      	itete	eq
 8000d70:	60aa      	streq	r2, [r5, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8000d72:	60a9      	strne	r1, [r5, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000d74:	60e9      	streq	r1, [r5, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8000d76:	60ea      	strne	r2, [r5, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8000d78:	b153      	cbz	r3, 8000d90 <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d7a:	682b      	ldr	r3, [r5, #0]
 8000d7c:	f043 030e 	orr.w	r3, r3, #14
 8000d80:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 8000d82:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000d84:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8000d86:	f043 0301 	orr.w	r3, r3, #1
 8000d8a:	602b      	str	r3, [r5, #0]
}
 8000d8c:	bcf0      	pop	{r4, r5, r6, r7}
 8000d8e:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000d90:	682b      	ldr	r3, [r5, #0]
 8000d92:	f023 0304 	bic.w	r3, r3, #4
 8000d96:	602b      	str	r3, [r5, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000d98:	682b      	ldr	r3, [r5, #0]
 8000d9a:	f043 030a 	orr.w	r3, r3, #10
 8000d9e:	602b      	str	r3, [r5, #0]
 8000da0:	e7ef      	b.n	8000d82 <HAL_DMA_Start_IT+0x5e>
  __HAL_LOCK(hdma);
 8000da2:	2002      	movs	r0, #2
}
 8000da4:	bcf0      	pop	{r4, r5, r6, r7}
 8000da6:	4770      	bx	lr

08000da8 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000da8:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{
 8000dac:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000dae:	2a02      	cmp	r2, #2
 8000db0:	d006      	beq.n	8000dc0 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000db2:	2104      	movs	r1, #4
    __HAL_UNLOCK(hdma);
 8000db4:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000db6:	6381      	str	r1, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8000db8:	f880 2020 	strb.w	r2, [r0, #32]
    return HAL_ERROR;
 8000dbc:	2001      	movs	r0, #1
}
 8000dbe:	4770      	bx	lr
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000dc0:	2101      	movs	r1, #1
{
 8000dc2:	b470      	push	{r4, r5, r6}
  __HAL_UNLOCK(hdma);      
 8000dc4:	f44f 7580 	mov.w	r5, #256	; 0x100
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dc8:	681a      	ldr	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000dca:	6c1e      	ldr	r6, [r3, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dcc:	6814      	ldr	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000dce:	40b1      	lsls	r1, r6
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dd0:	f024 040e 	bic.w	r4, r4, #14
 8000dd4:	6014      	str	r4, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8000dd6:	6814      	ldr	r4, [r2, #0]
  return status; 
 8000dd8:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8000dda:	f024 0401 	bic.w	r4, r4, #1
 8000dde:	6014      	str	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000de0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000de2:	6051      	str	r1, [r2, #4]
  __HAL_UNLOCK(hdma);      
 8000de4:	841d      	strh	r5, [r3, #32]
}
 8000de6:	bc70      	pop	{r4, r5, r6}
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop

08000dec <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000dec:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{  
 8000df0:	4603      	mov	r3, r0
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000df2:	2a02      	cmp	r2, #2
 8000df4:	d003      	beq.n	8000dfe <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000df6:	2204      	movs	r2, #4
    status = HAL_ERROR;
 8000df8:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dfa:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000dfc:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dfe:	6802      	ldr	r2, [r0, #0]
{  
 8000e00:	b510      	push	{r4, lr}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e02:	6811      	ldr	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000e04:	481b      	ldr	r0, [pc, #108]	; (8000e74 <HAL_DMA_Abort_IT+0x88>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e06:	f021 010e 	bic.w	r1, r1, #14
 8000e0a:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8000e0c:	6811      	ldr	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000e0e:	4282      	cmp	r2, r0
    __HAL_DMA_DISABLE(hdma);
 8000e10:	f021 0101 	bic.w	r1, r1, #1
 8000e14:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000e16:	d021      	beq.n	8000e5c <HAL_DMA_Abort_IT+0x70>
 8000e18:	4917      	ldr	r1, [pc, #92]	; (8000e78 <HAL_DMA_Abort_IT+0x8c>)
 8000e1a:	428a      	cmp	r2, r1
 8000e1c:	d01a      	beq.n	8000e54 <HAL_DMA_Abort_IT+0x68>
 8000e1e:	3114      	adds	r1, #20
 8000e20:	428a      	cmp	r2, r1
 8000e22:	d01d      	beq.n	8000e60 <HAL_DMA_Abort_IT+0x74>
 8000e24:	3114      	adds	r1, #20
 8000e26:	428a      	cmp	r2, r1
 8000e28:	d01d      	beq.n	8000e66 <HAL_DMA_Abort_IT+0x7a>
 8000e2a:	3114      	adds	r1, #20
 8000e2c:	428a      	cmp	r2, r1
 8000e2e:	d01d      	beq.n	8000e6c <HAL_DMA_Abort_IT+0x80>
 8000e30:	3114      	adds	r1, #20
 8000e32:	428a      	cmp	r2, r1
 8000e34:	bf0c      	ite	eq
 8000e36:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
 8000e3a:	f04f 7280 	movne.w	r2, #16777216	; 0x1000000
    __HAL_UNLOCK(hdma);
 8000e3e:	f44f 7080 	mov.w	r0, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000e42:	4c0e      	ldr	r4, [pc, #56]	; (8000e7c <HAL_DMA_Abort_IT+0x90>)
    if(hdma->XferAbortCallback != NULL)
 8000e44:	6b59      	ldr	r1, [r3, #52]	; 0x34
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000e46:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8000e48:	8418      	strh	r0, [r3, #32]
    if(hdma->XferAbortCallback != NULL)
 8000e4a:	b129      	cbz	r1, 8000e58 <HAL_DMA_Abort_IT+0x6c>
      hdma->XferAbortCallback(hdma);
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	4788      	blx	r1
  HAL_StatusTypeDef status = HAL_OK;
 8000e50:	2000      	movs	r0, #0
}
 8000e52:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000e54:	2210      	movs	r2, #16
 8000e56:	e7f2      	b.n	8000e3e <HAL_DMA_Abort_IT+0x52>
  HAL_StatusTypeDef status = HAL_OK;
 8000e58:	4608      	mov	r0, r1
}
 8000e5a:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	e7ee      	b.n	8000e3e <HAL_DMA_Abort_IT+0x52>
 8000e60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e64:	e7eb      	b.n	8000e3e <HAL_DMA_Abort_IT+0x52>
 8000e66:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e6a:	e7e8      	b.n	8000e3e <HAL_DMA_Abort_IT+0x52>
 8000e6c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e70:	e7e5      	b.n	8000e3e <HAL_DMA_Abort_IT+0x52>
 8000e72:	bf00      	nop
 8000e74:	40020008 	.word	0x40020008
 8000e78:	4002001c 	.word	0x4002001c
 8000e7c:	40020000 	.word	0x40020000

08000e80 <HAL_DMA_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000e80:	2204      	movs	r2, #4
{
 8000e82:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000e84:	e9d0 610f 	ldrd	r6, r1, [r0, #60]	; 0x3c
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000e88:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000e8a:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000e8c:	408a      	lsls	r2, r1
 8000e8e:	4222      	tst	r2, r4
  uint32_t source_it = hdma->Instance->CCR;
 8000e90:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000e92:	d01f      	beq.n	8000ed4 <HAL_DMA_IRQHandler+0x54>
 8000e94:	076a      	lsls	r2, r5, #29
 8000e96:	d51d      	bpl.n	8000ed4 <HAL_DMA_IRQHandler+0x54>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	0691      	lsls	r1, r2, #26
 8000e9c:	d403      	bmi.n	8000ea6 <HAL_DMA_IRQHandler+0x26>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	f022 0204 	bic.w	r2, r2, #4
 8000ea4:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000ea6:	4a3e      	ldr	r2, [pc, #248]	; (8000fa0 <HAL_DMA_IRQHandler+0x120>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d05a      	beq.n	8000f62 <HAL_DMA_IRQHandler+0xe2>
 8000eac:	3214      	adds	r2, #20
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d05f      	beq.n	8000f72 <HAL_DMA_IRQHandler+0xf2>
 8000eb2:	3214      	adds	r2, #20
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d066      	beq.n	8000f86 <HAL_DMA_IRQHandler+0x106>
 8000eb8:	3214      	adds	r2, #20
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d069      	beq.n	8000f92 <HAL_DMA_IRQHandler+0x112>
 8000ebe:	3214      	adds	r2, #20
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d05b      	beq.n	8000f7c <HAL_DMA_IRQHandler+0xfc>
 8000ec4:	3214      	adds	r2, #20
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	bf0c      	ite	eq
 8000eca:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8000ece:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8000ed2:	e047      	b.n	8000f64 <HAL_DMA_IRQHandler+0xe4>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000ed4:	2202      	movs	r2, #2
 8000ed6:	408a      	lsls	r2, r1
 8000ed8:	4222      	tst	r2, r4
 8000eda:	d022      	beq.n	8000f22 <HAL_DMA_IRQHandler+0xa2>
 8000edc:	07aa      	lsls	r2, r5, #30
 8000ede:	d520      	bpl.n	8000f22 <HAL_DMA_IRQHandler+0xa2>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	0691      	lsls	r1, r2, #26
 8000ee4:	d406      	bmi.n	8000ef4 <HAL_DMA_IRQHandler+0x74>
      hdma->State = HAL_DMA_STATE_READY;
 8000ee6:	2101      	movs	r1, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	f022 020a 	bic.w	r2, r2, #10
 8000eee:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8000ef0:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000ef4:	4a2a      	ldr	r2, [pc, #168]	; (8000fa0 <HAL_DMA_IRQHandler+0x120>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d029      	beq.n	8000f4e <HAL_DMA_IRQHandler+0xce>
 8000efa:	3214      	adds	r2, #20
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d040      	beq.n	8000f82 <HAL_DMA_IRQHandler+0x102>
 8000f00:	3214      	adds	r2, #20
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d042      	beq.n	8000f8c <HAL_DMA_IRQHandler+0x10c>
 8000f06:	3214      	adds	r2, #20
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d034      	beq.n	8000f76 <HAL_DMA_IRQHandler+0xf6>
 8000f0c:	3214      	adds	r2, #20
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d042      	beq.n	8000f98 <HAL_DMA_IRQHandler+0x118>
 8000f12:	3214      	adds	r2, #20
 8000f14:	4293      	cmp	r3, r2
 8000f16:	bf0c      	ite	eq
 8000f18:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8000f1c:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8000f20:	e016      	b.n	8000f50 <HAL_DMA_IRQHandler+0xd0>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000f22:	2208      	movs	r2, #8
 8000f24:	408a      	lsls	r2, r1
 8000f26:	4222      	tst	r2, r4
 8000f28:	d019      	beq.n	8000f5e <HAL_DMA_IRQHandler+0xde>
 8000f2a:	072a      	lsls	r2, r5, #28
 8000f2c:	d517      	bpl.n	8000f5e <HAL_DMA_IRQHandler+0xde>
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f2e:	2401      	movs	r4, #1
    __HAL_UNLOCK(hdma);
 8000f30:	f44f 7580 	mov.w	r5, #256	; 0x100
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f34:	681a      	ldr	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f36:	fa04 f101 	lsl.w	r1, r4, r1
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f3a:	f022 020e 	bic.w	r2, r2, #14
 8000f3e:	601a      	str	r2, [r3, #0]
    if (hdma->XferErrorCallback != NULL)
 8000f40:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f42:	6071      	str	r1, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000f44:	6384      	str	r4, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8000f46:	8405      	strh	r5, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8000f48:	b14b      	cbz	r3, 8000f5e <HAL_DMA_IRQHandler+0xde>
}
 8000f4a:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8000f4c:	4718      	bx	r3
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000f4e:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma);
 8000f50:	2100      	movs	r1, #0
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000f52:	4c14      	ldr	r4, [pc, #80]	; (8000fa4 <HAL_DMA_IRQHandler+0x124>)
    if(hdma->XferCpltCallback != NULL)
 8000f54:	6a82      	ldr	r2, [r0, #40]	; 0x28
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000f56:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(hdma);
 8000f58:	f880 1020 	strb.w	r1, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8000f5c:	b93a      	cbnz	r2, 8000f6e <HAL_DMA_IRQHandler+0xee>
}
 8000f5e:	bc70      	pop	{r4, r5, r6}
 8000f60:	4770      	bx	lr
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000f62:	2304      	movs	r3, #4
 8000f64:	490f      	ldr	r1, [pc, #60]	; (8000fa4 <HAL_DMA_IRQHandler+0x124>)
    if(hdma->XferHalfCpltCallback != NULL)
 8000f66:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000f68:	604b      	str	r3, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8000f6a:	2a00      	cmp	r2, #0
 8000f6c:	d0f7      	beq.n	8000f5e <HAL_DMA_IRQHandler+0xde>
}
 8000f6e:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 8000f70:	4710      	bx	r2
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000f72:	2340      	movs	r3, #64	; 0x40
 8000f74:	e7f6      	b.n	8000f64 <HAL_DMA_IRQHandler+0xe4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000f76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f7a:	e7e9      	b.n	8000f50 <HAL_DMA_IRQHandler+0xd0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000f7c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000f80:	e7f0      	b.n	8000f64 <HAL_DMA_IRQHandler+0xe4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000f82:	2320      	movs	r3, #32
 8000f84:	e7e4      	b.n	8000f50 <HAL_DMA_IRQHandler+0xd0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000f86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f8a:	e7eb      	b.n	8000f64 <HAL_DMA_IRQHandler+0xe4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000f8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f90:	e7de      	b.n	8000f50 <HAL_DMA_IRQHandler+0xd0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000f92:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f96:	e7e5      	b.n	8000f64 <HAL_DMA_IRQHandler+0xe4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000f98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f9c:	e7d8      	b.n	8000f50 <HAL_DMA_IRQHandler+0xd0>
 8000f9e:	bf00      	nop
 8000fa0:	40020008 	.word	0x40020008
 8000fa4:	40020000 	.word	0x40020000

08000fa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fac:	680c      	ldr	r4, [r1, #0]
{
 8000fae:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fb0:	2c00      	cmp	r4, #0
 8000fb2:	f000 80a1 	beq.w	80010f8 <HAL_GPIO_Init+0x150>
  uint32_t config = 0x00u;
 8000fb6:	2600      	movs	r6, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fb8:	f8df c1fc 	ldr.w	ip, [pc, #508]	; 80011b8 <HAL_GPIO_Init+0x210>
  uint32_t position = 0x00u;
 8000fbc:	4633      	mov	r3, r6
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000fbe:	4f79      	ldr	r7, [pc, #484]	; (80011a4 <HAL_GPIO_Init+0x1fc>)
      switch (GPIO_Init->Mode)
 8000fc0:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 80011bc <HAL_GPIO_Init+0x214>
 8000fc4:	f8df e1f8 	ldr.w	lr, [pc, #504]	; 80011c0 <HAL_GPIO_Init+0x218>
 8000fc8:	9000      	str	r0, [sp, #0]
 8000fca:	e004      	b.n	8000fd6 <HAL_GPIO_Init+0x2e>
        }
      }
    }

	position++;
 8000fcc:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fce:	fa34 f203 	lsrs.w	r2, r4, r3
 8000fd2:	f000 8091 	beq.w	80010f8 <HAL_GPIO_Init+0x150>
    ioposition = (0x01uL << position);
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	409a      	lsls	r2, r3
    if (iocurrent == ioposition)
 8000fda:	ea32 0004 	bics.w	r0, r2, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fde:	ea02 0504 	and.w	r5, r2, r4
    if (iocurrent == ioposition)
 8000fe2:	d1f3      	bne.n	8000fcc <HAL_GPIO_Init+0x24>
      switch (GPIO_Init->Mode)
 8000fe4:	684c      	ldr	r4, [r1, #4]
 8000fe6:	2c12      	cmp	r4, #18
 8000fe8:	f200 8089 	bhi.w	80010fe <HAL_GPIO_Init+0x156>
 8000fec:	2c12      	cmp	r4, #18
 8000fee:	d80c      	bhi.n	800100a <HAL_GPIO_Init+0x62>
 8000ff0:	e8df f004 	tbb	[pc, r4]
 8000ff4:	0ac0c38e 	.word	0x0ac0c38e
 8000ff8:	0b0b0b0b 	.word	0x0b0b0b0b
 8000ffc:	0b0b0b0b 	.word	0x0b0b0b0b
 8001000:	0b0b0b0b 	.word	0x0b0b0b0b
 8001004:	bd0b      	.short	0xbd0b
 8001006:	ba          	.byte	0xba
 8001007:	00          	.byte	0x00
 8001008:	2600      	movs	r6, #0
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800100a:	2dff      	cmp	r5, #255	; 0xff
 800100c:	f200 8087 	bhi.w	800111e <HAL_GPIO_Init+0x176>
 8001010:	f8dd 9000 	ldr.w	r9, [sp]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001014:	ea4f 0a83 	mov.w	sl, r3, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001018:	240f      	movs	r4, #15
 800101a:	f8d9 2000 	ldr.w	r2, [r9]
 800101e:	fa04 fb0a 	lsl.w	fp, r4, sl
 8001022:	ea22 020b 	bic.w	r2, r2, fp
 8001026:	fa06 fa0a 	lsl.w	sl, r6, sl
 800102a:	ea42 020a 	orr.w	r2, r2, sl
 800102e:	f8c9 2000 	str.w	r2, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001032:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8001036:	f019 5f80 	tst.w	r9, #268435456	; 0x10000000
 800103a:	f000 8093 	beq.w	8001164 <HAL_GPIO_Init+0x1bc>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800103e:	f8dc a018 	ldr.w	sl, [ip, #24]
 8001042:	f023 0203 	bic.w	r2, r3, #3
 8001046:	f04a 0a01 	orr.w	sl, sl, #1
 800104a:	f8cc a018 	str.w	sl, [ip, #24]
 800104e:	f8dc a018 	ldr.w	sl, [ip, #24]
 8001052:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001056:	f00a 0a01 	and.w	sl, sl, #1
 800105a:	f8cd a00c 	str.w	sl, [sp, #12]
 800105e:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001062:	f003 0a03 	and.w	sl, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001066:	f8dd b00c 	ldr.w	fp, [sp, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800106a:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 800106e:	f8d2 b008 	ldr.w	fp, [r2, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001072:	fa04 f40a 	lsl.w	r4, r4, sl
 8001076:	ea2b 0004 	bic.w	r0, fp, r4
 800107a:	9001      	str	r0, [sp, #4]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800107c:	9c00      	ldr	r4, [sp, #0]
 800107e:	484a      	ldr	r0, [pc, #296]	; (80011a8 <HAL_GPIO_Init+0x200>)
 8001080:	4284      	cmp	r4, r0
 8001082:	d016      	beq.n	80010b2 <HAL_GPIO_Init+0x10a>
 8001084:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8001088:	4284      	cmp	r4, r0
 800108a:	f000 8081 	beq.w	8001190 <HAL_GPIO_Init+0x1e8>
 800108e:	4847      	ldr	r0, [pc, #284]	; (80011ac <HAL_GPIO_Init+0x204>)
 8001090:	9c00      	ldr	r4, [sp, #0]
 8001092:	4284      	cmp	r4, r0
 8001094:	d073      	beq.n	800117e <HAL_GPIO_Init+0x1d6>
 8001096:	4846      	ldr	r0, [pc, #280]	; (80011b0 <HAL_GPIO_Init+0x208>)
 8001098:	9c00      	ldr	r4, [sp, #0]
 800109a:	4284      	cmp	r4, r0
 800109c:	bf0c      	ite	eq
 800109e:	f04f 0b03 	moveq.w	fp, #3
 80010a2:	f04f 0b04 	movne.w	fp, #4
 80010a6:	9801      	ldr	r0, [sp, #4]
 80010a8:	fa0b fa0a 	lsl.w	sl, fp, sl
 80010ac:	ea40 000a 	orr.w	r0, r0, sl
 80010b0:	9001      	str	r0, [sp, #4]
        AFIO->EXTICR[position >> 2u] = temp;
 80010b2:	9801      	ldr	r0, [sp, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010b4:	f419 3f80 	tst.w	r9, #65536	; 0x10000
        AFIO->EXTICR[position >> 2u] = temp;
 80010b8:	6090      	str	r0, [r2, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80010ba:	683a      	ldr	r2, [r7, #0]
 80010bc:	bf14      	ite	ne
 80010be:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010c0:	43aa      	biceq	r2, r5
 80010c2:	603a      	str	r2, [r7, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80010c4:	687a      	ldr	r2, [r7, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010c6:	f419 3f00 	tst.w	r9, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80010ca:	bf14      	ite	ne
 80010cc:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80010ce:	43aa      	biceq	r2, r5
 80010d0:	607a      	str	r2, [r7, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80010d2:	68ba      	ldr	r2, [r7, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010d4:	f419 1f80 	tst.w	r9, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80010d8:	bf14      	ite	ne
 80010da:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010dc:	43aa      	biceq	r2, r5
 80010de:	60ba      	str	r2, [r7, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010e0:	f419 1f00 	tst.w	r9, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80010e4:	68fa      	ldr	r2, [r7, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010e6:	d03a      	beq.n	800115e <HAL_GPIO_Init+0x1b6>
          SET_BIT(EXTI->FTSR, iocurrent);
 80010e8:	4315      	orrs	r5, r2
 80010ea:	60fd      	str	r5, [r7, #12]
 80010ec:	680c      	ldr	r4, [r1, #0]
	position++;
 80010ee:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010f0:	fa34 f203 	lsrs.w	r2, r4, r3
 80010f4:	f47f af6f 	bne.w	8000fd6 <HAL_GPIO_Init+0x2e>
  }
}
 80010f8:	b005      	add	sp, #20
 80010fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80010fe:	4544      	cmp	r4, r8
 8001100:	d006      	beq.n	8001110 <HAL_GPIO_Init+0x168>
 8001102:	d914      	bls.n	800112e <HAL_GPIO_Init+0x186>
 8001104:	4574      	cmp	r4, lr
 8001106:	d003      	beq.n	8001110 <HAL_GPIO_Init+0x168>
 8001108:	482a      	ldr	r0, [pc, #168]	; (80011b4 <HAL_GPIO_Init+0x20c>)
 800110a:	4284      	cmp	r4, r0
 800110c:	f47f af7d 	bne.w	800100a <HAL_GPIO_Init+0x62>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001110:	688c      	ldr	r4, [r1, #8]
 8001112:	b9e4      	cbnz	r4, 800114e <HAL_GPIO_Init+0x1a6>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001114:	2dff      	cmp	r5, #255	; 0xff
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001116:	f04f 0604 	mov.w	r6, #4
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800111a:	f67f af79 	bls.w	8001010 <HAL_GPIO_Init+0x68>
 800111e:	9a00      	ldr	r2, [sp, #0]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001120:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8001124:	f1aa 0a20 	sub.w	sl, sl, #32
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001128:	f102 0904 	add.w	r9, r2, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800112c:	e774      	b.n	8001018 <HAL_GPIO_Init+0x70>
      switch (GPIO_Init->Mode)
 800112e:	f8df 9094 	ldr.w	r9, [pc, #148]	; 80011c4 <HAL_GPIO_Init+0x21c>
 8001132:	454c      	cmp	r4, r9
 8001134:	d0ec      	beq.n	8001110 <HAL_GPIO_Init+0x168>
 8001136:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 800113a:	454c      	cmp	r4, r9
 800113c:	d0e8      	beq.n	8001110 <HAL_GPIO_Init+0x168>
 800113e:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8001142:	454c      	cmp	r4, r9
 8001144:	f47f af61 	bne.w	800100a <HAL_GPIO_Init+0x62>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001148:	688c      	ldr	r4, [r1, #8]
 800114a:	2c00      	cmp	r4, #0
 800114c:	d0e2      	beq.n	8001114 <HAL_GPIO_Init+0x16c>
            GPIOx->BSRR = ioposition;
 800114e:	9800      	ldr	r0, [sp, #0]
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001150:	2c01      	cmp	r4, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001152:	f04f 0608 	mov.w	r6, #8
            GPIOx->BSRR = ioposition;
 8001156:	bf0c      	ite	eq
 8001158:	6102      	streq	r2, [r0, #16]
            GPIOx->BRR = ioposition;
 800115a:	6142      	strne	r2, [r0, #20]
 800115c:	e755      	b.n	800100a <HAL_GPIO_Init+0x62>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800115e:	ea22 0505 	bic.w	r5, r2, r5
 8001162:	60fd      	str	r5, [r7, #12]
 8001164:	680c      	ldr	r4, [r1, #0]
 8001166:	e731      	b.n	8000fcc <HAL_GPIO_Init+0x24>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001168:	68ce      	ldr	r6, [r1, #12]
 800116a:	360c      	adds	r6, #12
          break;
 800116c:	e74d      	b.n	800100a <HAL_GPIO_Init+0x62>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800116e:	68ce      	ldr	r6, [r1, #12]
 8001170:	3604      	adds	r6, #4
          break;
 8001172:	e74a      	b.n	800100a <HAL_GPIO_Init+0x62>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001174:	68ce      	ldr	r6, [r1, #12]
 8001176:	3608      	adds	r6, #8
          break;
 8001178:	e747      	b.n	800100a <HAL_GPIO_Init+0x62>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800117a:	68ce      	ldr	r6, [r1, #12]
          break;
 800117c:	e745      	b.n	800100a <HAL_GPIO_Init+0x62>
 800117e:	f04f 0b02 	mov.w	fp, #2
 8001182:	9801      	ldr	r0, [sp, #4]
 8001184:	fa0b fa0a 	lsl.w	sl, fp, sl
 8001188:	ea40 000a 	orr.w	r0, r0, sl
 800118c:	9001      	str	r0, [sp, #4]
 800118e:	e790      	b.n	80010b2 <HAL_GPIO_Init+0x10a>
 8001190:	f04f 0b01 	mov.w	fp, #1
 8001194:	9801      	ldr	r0, [sp, #4]
 8001196:	fa0b fa0a 	lsl.w	sl, fp, sl
 800119a:	ea40 000a 	orr.w	r0, r0, sl
 800119e:	9001      	str	r0, [sp, #4]
 80011a0:	e787      	b.n	80010b2 <HAL_GPIO_Init+0x10a>
 80011a2:	bf00      	nop
 80011a4:	40010400 	.word	0x40010400
 80011a8:	40010800 	.word	0x40010800
 80011ac:	40011000 	.word	0x40011000
 80011b0:	40011400 	.word	0x40011400
 80011b4:	10320000 	.word	0x10320000
 80011b8:	40021000 	.word	0x40021000
 80011bc:	10220000 	.word	0x10220000
 80011c0:	10310000 	.word	0x10310000
 80011c4:	10120000 	.word	0x10120000

080011c8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80011c8:	6883      	ldr	r3, [r0, #8]
 80011ca:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80011cc:	bf14      	ite	ne
 80011ce:	2001      	movne	r0, #1
 80011d0:	2000      	moveq	r0, #0
 80011d2:	4770      	bx	lr

080011d4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011d4:	b902      	cbnz	r2, 80011d8 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011d6:	0409      	lsls	r1, r1, #16
 80011d8:	6101      	str	r1, [r0, #16]
  }
}
 80011da:	4770      	bx	lr

080011dc <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80011dc:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011de:	ea01 0203 	and.w	r2, r1, r3
 80011e2:	ea21 0103 	bic.w	r1, r1, r3
 80011e6:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80011ea:	6101      	str	r1, [r0, #16]
}
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop

080011f0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80011f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011f2:	b087      	sub	sp, #28
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80011f4:	2800      	cmp	r0, #0
 80011f6:	d072      	beq.n	80012de <HAL_PCD_Init+0xee>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80011f8:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 80011fc:	4605      	mov	r5, r0
 80011fe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001202:	2b00      	cmp	r3, #0
 8001204:	d066      	beq.n	80012d4 <HAL_PCD_Init+0xe4>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001206:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001208:	462e      	mov	r6, r5
  hpcd->State = HAL_PCD_STATE_BUSY;
 800120a:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 800120e:	6828      	ldr	r0, [r5, #0]
 8001210:	f000 fed4 	bl	8001fbc <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001214:	f856 cb10 	ldr.w	ip, [r6], #16
 8001218:	466c      	mov	r4, sp
 800121a:	4637      	mov	r7, r6
 800121c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800121e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	1d2f      	adds	r7, r5, #4
 8001224:	6023      	str	r3, [r4, #0]
 8001226:	4660      	mov	r0, ip
 8001228:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800122c:	f000 febe 	bl	8001fac <USB_CoreInit>
 8001230:	4604      	mov	r4, r0
 8001232:	b130      	cbz	r0, 8001242 <HAL_PCD_Init+0x52>

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
 8001234:	2401      	movs	r4, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001236:	2302      	movs	r3, #2
  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8001238:	4620      	mov	r0, r4
    hpcd->State = HAL_PCD_STATE_ERROR;
 800123a:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
}
 800123e:	b007      	add	sp, #28
 8001240:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001242:	4601      	mov	r1, r0
 8001244:	6828      	ldr	r0, [r5, #0]
 8001246:	f000 fec3 	bl	8001fd0 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800124a:	6868      	ldr	r0, [r5, #4]
 800124c:	b350      	cbz	r0, 80012a4 <HAL_PCD_Init+0xb4>
 800124e:	4622      	mov	r2, r4
    hpcd->IN_ep[i].is_in = 1U;
 8001250:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001254:	4621      	mov	r1, r4
    hpcd->IN_ep[i].is_in = 1U;
 8001256:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 800125a:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800125e:	f102 0c01 	add.w	ip, r2, #1
    hpcd->IN_ep[i].num = i;
 8001262:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001266:	86da      	strh	r2, [r3, #54]	; 0x36
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001268:	fa5f f28c 	uxtb.w	r2, ip
 800126c:	4282      	cmp	r2, r0
    hpcd->IN_ep[i].xfer_buff = 0U;
 800126e:	e9c3 110e 	strd	r1, r1, [r3, #56]	; 0x38
    hpcd->IN_ep[i].is_in = 1U;
 8001272:	f883 e029 	strb.w	lr, [r3, #41]	; 0x29
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001276:	f883 102b 	strb.w	r1, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_len = 0U;
 800127a:	6419      	str	r1, [r3, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800127c:	d3eb      	bcc.n	8001256 <HAL_PCD_Init+0x66>
    hpcd->OUT_ep[i].is_in = 0U;
 800127e:	2200      	movs	r2, #0
 8001280:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8001284:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001288:	1c61      	adds	r1, r4, #1
    hpcd->OUT_ep[i].num = i;
 800128a:	f883 4168 	strb.w	r4, [r3, #360]	; 0x168
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800128e:	b2cc      	uxtb	r4, r1
 8001290:	4284      	cmp	r4, r0
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001292:	e9c3 225e 	strd	r2, r2, [r3, #376]	; 0x178
    hpcd->OUT_ep[i].is_in = 0U;
 8001296:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800129a:	f883 216b 	strb.w	r2, [r3, #363]	; 0x16b
    hpcd->OUT_ep[i].xfer_len = 0U;
 800129e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012a2:	d3ed      	bcc.n	8001280 <HAL_PCD_Init+0x90>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012a4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80012a6:	466c      	mov	r4, sp
 80012a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012aa:	6836      	ldr	r6, [r6, #0]
 80012ac:	6828      	ldr	r0, [r5, #0]
 80012ae:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80012b2:	6026      	str	r6, [r4, #0]
 80012b4:	f000 fe8e 	bl	8001fd4 <USB_DevInit>
 80012b8:	4604      	mov	r4, r0
 80012ba:	2800      	cmp	r0, #0
 80012bc:	d1ba      	bne.n	8001234 <HAL_PCD_Init+0x44>
  hpcd->State = HAL_PCD_STATE_READY;
 80012be:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 80012c0:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
  (void)USB_DevDisconnect(hpcd->Instance);
 80012c4:	6828      	ldr	r0, [r5, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 80012c6:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80012ca:	f000 fe97 	bl	8001ffc <USB_DevDisconnect>
}
 80012ce:	4620      	mov	r0, r4
 80012d0:	b007      	add	sp, #28
 80012d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 80012d4:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 80012d8:	f7ff faae 	bl	8000838 <HAL_PCD_MspInit>
 80012dc:	e793      	b.n	8001206 <HAL_PCD_Init+0x16>
    return HAL_ERROR;
 80012de:	2401      	movs	r4, #1
}
 80012e0:	4620      	mov	r0, r4
 80012e2:	b007      	add	sp, #28
 80012e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012e6:	bf00      	nop

080012e8 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012e8:	2800      	cmp	r0, #0
 80012ea:	f000 81c3 	beq.w	8001674 <HAL_RCC_OscConfig+0x38c>
{
 80012ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012f2:	6803      	ldr	r3, [r0, #0]
 80012f4:	4604      	mov	r4, r0
 80012f6:	07dd      	lsls	r5, r3, #31
{
 80012f8:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012fa:	d535      	bpl.n	8001368 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012fc:	49a6      	ldr	r1, [pc, #664]	; (8001598 <HAL_RCC_OscConfig+0x2b0>)
 80012fe:	684a      	ldr	r2, [r1, #4]
 8001300:	f002 020c 	and.w	r2, r2, #12
 8001304:	2a04      	cmp	r2, #4
 8001306:	f000 80ef 	beq.w	80014e8 <HAL_RCC_OscConfig+0x200>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800130a:	684a      	ldr	r2, [r1, #4]
 800130c:	f002 020c 	and.w	r2, r2, #12
 8001310:	2a08      	cmp	r2, #8
 8001312:	f000 80e5 	beq.w	80014e0 <HAL_RCC_OscConfig+0x1f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001316:	6863      	ldr	r3, [r4, #4]
 8001318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800131c:	d010      	beq.n	8001340 <HAL_RCC_OscConfig+0x58>
 800131e:	2b00      	cmp	r3, #0
 8001320:	f000 810d 	beq.w	800153e <HAL_RCC_OscConfig+0x256>
 8001324:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001328:	f000 818f 	beq.w	800164a <HAL_RCC_OscConfig+0x362>
 800132c:	4b9a      	ldr	r3, [pc, #616]	; (8001598 <HAL_RCC_OscConfig+0x2b0>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	e004      	b.n	800134a <HAL_RCC_OscConfig+0x62>
 8001340:	4a95      	ldr	r2, [pc, #596]	; (8001598 <HAL_RCC_OscConfig+0x2b0>)
 8001342:	6813      	ldr	r3, [r2, #0]
 8001344:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001348:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800134a:	f7ff fc31 	bl	8000bb0 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800134e:	4e92      	ldr	r6, [pc, #584]	; (8001598 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 8001350:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001352:	e005      	b.n	8001360 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001354:	f7ff fc2c 	bl	8000bb0 <HAL_GetTick>
 8001358:	1b40      	subs	r0, r0, r5
 800135a:	2864      	cmp	r0, #100	; 0x64
 800135c:	f200 80eb 	bhi.w	8001536 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001360:	6833      	ldr	r3, [r6, #0]
 8001362:	039a      	lsls	r2, r3, #14
 8001364:	d5f6      	bpl.n	8001354 <HAL_RCC_OscConfig+0x6c>
 8001366:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001368:	079f      	lsls	r7, r3, #30
 800136a:	d528      	bpl.n	80013be <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800136c:	4a8a      	ldr	r2, [pc, #552]	; (8001598 <HAL_RCC_OscConfig+0x2b0>)
 800136e:	6851      	ldr	r1, [r2, #4]
 8001370:	f011 0f0c 	tst.w	r1, #12
 8001374:	f000 808e 	beq.w	8001494 <HAL_RCC_OscConfig+0x1ac>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001378:	6851      	ldr	r1, [r2, #4]
 800137a:	f001 010c 	and.w	r1, r1, #12
 800137e:	2908      	cmp	r1, #8
 8001380:	f000 8084 	beq.w	800148c <HAL_RCC_OscConfig+0x1a4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001384:	6923      	ldr	r3, [r4, #16]
 8001386:	2b00      	cmp	r3, #0
 8001388:	f000 8125 	beq.w	80015d6 <HAL_RCC_OscConfig+0x2ee>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800138c:	2201      	movs	r2, #1
 800138e:	4b83      	ldr	r3, [pc, #524]	; (800159c <HAL_RCC_OscConfig+0x2b4>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001390:	4e81      	ldr	r6, [pc, #516]	; (8001598 <HAL_RCC_OscConfig+0x2b0>)
        __HAL_RCC_HSI_ENABLE();
 8001392:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001394:	f7ff fc0c 	bl	8000bb0 <HAL_GetTick>
 8001398:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800139a:	e005      	b.n	80013a8 <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800139c:	f7ff fc08 	bl	8000bb0 <HAL_GetTick>
 80013a0:	1b40      	subs	r0, r0, r5
 80013a2:	2802      	cmp	r0, #2
 80013a4:	f200 80c7 	bhi.w	8001536 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013a8:	6833      	ldr	r3, [r6, #0]
 80013aa:	0798      	lsls	r0, r3, #30
 80013ac:	d5f6      	bpl.n	800139c <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ae:	6833      	ldr	r3, [r6, #0]
 80013b0:	6962      	ldr	r2, [r4, #20]
 80013b2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80013b6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80013ba:	6033      	str	r3, [r6, #0]
 80013bc:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013be:	071a      	lsls	r2, r3, #28
 80013c0:	d41f      	bmi.n	8001402 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013c2:	075d      	lsls	r5, r3, #29
 80013c4:	d541      	bpl.n	800144a <HAL_RCC_OscConfig+0x162>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013c6:	4b74      	ldr	r3, [pc, #464]	; (8001598 <HAL_RCC_OscConfig+0x2b0>)
 80013c8:	69da      	ldr	r2, [r3, #28]
 80013ca:	00d0      	lsls	r0, r2, #3
 80013cc:	d57d      	bpl.n	80014ca <HAL_RCC_OscConfig+0x1e2>
    FlagStatus       pwrclkchanged = RESET;
 80013ce:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013d0:	4b73      	ldr	r3, [pc, #460]	; (80015a0 <HAL_RCC_OscConfig+0x2b8>)
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	05d1      	lsls	r1, r2, #23
 80013d6:	f140 809d 	bpl.w	8001514 <HAL_RCC_OscConfig+0x22c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013da:	68e3      	ldr	r3, [r4, #12]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	f000 810b 	beq.w	80015f8 <HAL_RCC_OscConfig+0x310>
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	f000 80c5 	beq.w	8001572 <HAL_RCC_OscConfig+0x28a>
 80013e8:	2b05      	cmp	r3, #5
 80013ea:	4b6b      	ldr	r3, [pc, #428]	; (8001598 <HAL_RCC_OscConfig+0x2b0>)
 80013ec:	6a1a      	ldr	r2, [r3, #32]
 80013ee:	f000 8139 	beq.w	8001664 <HAL_RCC_OscConfig+0x37c>
 80013f2:	f022 0201 	bic.w	r2, r2, #1
 80013f6:	621a      	str	r2, [r3, #32]
 80013f8:	6a1a      	ldr	r2, [r3, #32]
 80013fa:	f022 0204 	bic.w	r2, r2, #4
 80013fe:	621a      	str	r2, [r3, #32]
 8001400:	e0ff      	b.n	8001602 <HAL_RCC_OscConfig+0x31a>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001402:	69a3      	ldr	r3, [r4, #24]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d050      	beq.n	80014aa <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_ENABLE();
 8001408:	2201      	movs	r2, #1
 800140a:	4b66      	ldr	r3, [pc, #408]	; (80015a4 <HAL_RCC_OscConfig+0x2bc>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800140c:	4e62      	ldr	r6, [pc, #392]	; (8001598 <HAL_RCC_OscConfig+0x2b0>)
      __HAL_RCC_LSI_ENABLE();
 800140e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001410:	f7ff fbce 	bl	8000bb0 <HAL_GetTick>
 8001414:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001416:	e005      	b.n	8001424 <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001418:	f7ff fbca 	bl	8000bb0 <HAL_GetTick>
 800141c:	1b40      	subs	r0, r0, r5
 800141e:	2802      	cmp	r0, #2
 8001420:	f200 8089 	bhi.w	8001536 <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001424:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001426:	079b      	lsls	r3, r3, #30
 8001428:	d5f6      	bpl.n	8001418 <HAL_RCC_OscConfig+0x130>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800142a:	4b5f      	ldr	r3, [pc, #380]	; (80015a8 <HAL_RCC_OscConfig+0x2c0>)
 800142c:	4a5f      	ldr	r2, [pc, #380]	; (80015ac <HAL_RCC_OscConfig+0x2c4>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	fba2 2303 	umull	r2, r3, r2, r3
 8001434:	0a5b      	lsrs	r3, r3, #9
 8001436:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001438:	bf00      	nop
  }
  while (Delay --);
 800143a:	9b01      	ldr	r3, [sp, #4]
 800143c:	1e5a      	subs	r2, r3, #1
 800143e:	9201      	str	r2, [sp, #4]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d1f9      	bne.n	8001438 <HAL_RCC_OscConfig+0x150>
 8001444:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001446:	075d      	lsls	r5, r3, #29
 8001448:	d4bd      	bmi.n	80013c6 <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800144a:	69e0      	ldr	r0, [r4, #28]
 800144c:	b1d0      	cbz	r0, 8001484 <HAL_RCC_OscConfig+0x19c>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800144e:	4d52      	ldr	r5, [pc, #328]	; (8001598 <HAL_RCC_OscConfig+0x2b0>)
 8001450:	686a      	ldr	r2, [r5, #4]
 8001452:	f002 020c 	and.w	r2, r2, #12
 8001456:	2a08      	cmp	r2, #8
 8001458:	f000 80e6 	beq.w	8001628 <HAL_RCC_OscConfig+0x340>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800145c:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800145e:	f04f 0100 	mov.w	r1, #0
 8001462:	4a53      	ldr	r2, [pc, #332]	; (80015b0 <HAL_RCC_OscConfig+0x2c8>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001464:	f000 8108 	beq.w	8001678 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_PLL_DISABLE();
 8001468:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 800146a:	f7ff fba1 	bl	8000bb0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800146e:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8001470:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001472:	e004      	b.n	800147e <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001474:	f7ff fb9c 	bl	8000bb0 <HAL_GetTick>
 8001478:	1b40      	subs	r0, r0, r5
 800147a:	2802      	cmp	r0, #2
 800147c:	d85b      	bhi.n	8001536 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800147e:	6823      	ldr	r3, [r4, #0]
 8001480:	019b      	lsls	r3, r3, #6
 8001482:	d4f7      	bmi.n	8001474 <HAL_RCC_OscConfig+0x18c>
  return HAL_OK;
 8001484:	2000      	movs	r0, #0
}
 8001486:	b002      	add	sp, #8
 8001488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800148c:	6852      	ldr	r2, [r2, #4]
 800148e:	03d6      	lsls	r6, r2, #15
 8001490:	f53f af78 	bmi.w	8001384 <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001494:	4a40      	ldr	r2, [pc, #256]	; (8001598 <HAL_RCC_OscConfig+0x2b0>)
 8001496:	6812      	ldr	r2, [r2, #0]
 8001498:	0795      	lsls	r5, r2, #30
 800149a:	d52f      	bpl.n	80014fc <HAL_RCC_OscConfig+0x214>
 800149c:	6922      	ldr	r2, [r4, #16]
 800149e:	2a01      	cmp	r2, #1
 80014a0:	d02c      	beq.n	80014fc <HAL_RCC_OscConfig+0x214>
        return HAL_ERROR;
 80014a2:	2001      	movs	r0, #1
}
 80014a4:	b002      	add	sp, #8
 80014a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 80014aa:	4a3e      	ldr	r2, [pc, #248]	; (80015a4 <HAL_RCC_OscConfig+0x2bc>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ac:	4e3a      	ldr	r6, [pc, #232]	; (8001598 <HAL_RCC_OscConfig+0x2b0>)
      __HAL_RCC_LSI_DISABLE();
 80014ae:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80014b0:	f7ff fb7e 	bl	8000bb0 <HAL_GetTick>
 80014b4:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014b6:	e004      	b.n	80014c2 <HAL_RCC_OscConfig+0x1da>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014b8:	f7ff fb7a 	bl	8000bb0 <HAL_GetTick>
 80014bc:	1b40      	subs	r0, r0, r5
 80014be:	2802      	cmp	r0, #2
 80014c0:	d839      	bhi.n	8001536 <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014c2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80014c4:	079f      	lsls	r7, r3, #30
 80014c6:	d4f7      	bmi.n	80014b8 <HAL_RCC_OscConfig+0x1d0>
 80014c8:	e7bc      	b.n	8001444 <HAL_RCC_OscConfig+0x15c>
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ca:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 80014cc:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ce:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014d2:	61da      	str	r2, [r3, #28]
 80014d4:	69db      	ldr	r3, [r3, #28]
 80014d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014da:	9300      	str	r3, [sp, #0]
 80014dc:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 80014de:	e777      	b.n	80013d0 <HAL_RCC_OscConfig+0xe8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014e0:	684a      	ldr	r2, [r1, #4]
 80014e2:	03d0      	lsls	r0, r2, #15
 80014e4:	f57f af17 	bpl.w	8001316 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e8:	4a2b      	ldr	r2, [pc, #172]	; (8001598 <HAL_RCC_OscConfig+0x2b0>)
 80014ea:	6812      	ldr	r2, [r2, #0]
 80014ec:	0391      	lsls	r1, r2, #14
 80014ee:	f57f af3b 	bpl.w	8001368 <HAL_RCC_OscConfig+0x80>
 80014f2:	6862      	ldr	r2, [r4, #4]
 80014f4:	2a00      	cmp	r2, #0
 80014f6:	f47f af37 	bne.w	8001368 <HAL_RCC_OscConfig+0x80>
 80014fa:	e7d2      	b.n	80014a2 <HAL_RCC_OscConfig+0x1ba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014fc:	4926      	ldr	r1, [pc, #152]	; (8001598 <HAL_RCC_OscConfig+0x2b0>)
 80014fe:	6960      	ldr	r0, [r4, #20]
 8001500:	680a      	ldr	r2, [r1, #0]
 8001502:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001506:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 800150a:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800150c:	071a      	lsls	r2, r3, #28
 800150e:	f57f af58 	bpl.w	80013c2 <HAL_RCC_OscConfig+0xda>
 8001512:	e776      	b.n	8001402 <HAL_RCC_OscConfig+0x11a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001514:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001516:	461f      	mov	r7, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001518:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800151c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800151e:	f7ff fb47 	bl	8000bb0 <HAL_GetTick>
 8001522:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	05da      	lsls	r2, r3, #23
 8001528:	f53f af57 	bmi.w	80013da <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800152c:	f7ff fb40 	bl	8000bb0 <HAL_GetTick>
 8001530:	1b80      	subs	r0, r0, r6
 8001532:	2864      	cmp	r0, #100	; 0x64
 8001534:	d9f6      	bls.n	8001524 <HAL_RCC_OscConfig+0x23c>
            return HAL_TIMEOUT;
 8001536:	2003      	movs	r0, #3
}
 8001538:	b002      	add	sp, #8
 800153a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800153e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001542:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001546:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001548:	461e      	mov	r6, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800154a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001556:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001558:	f7ff fb2a 	bl	8000bb0 <HAL_GetTick>
 800155c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800155e:	e004      	b.n	800156a <HAL_RCC_OscConfig+0x282>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001560:	f7ff fb26 	bl	8000bb0 <HAL_GetTick>
 8001564:	1b40      	subs	r0, r0, r5
 8001566:	2864      	cmp	r0, #100	; 0x64
 8001568:	d8e5      	bhi.n	8001536 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800156a:	6833      	ldr	r3, [r6, #0]
 800156c:	039b      	lsls	r3, r3, #14
 800156e:	d4f7      	bmi.n	8001560 <HAL_RCC_OscConfig+0x278>
 8001570:	e6f9      	b.n	8001366 <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001572:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001576:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800157a:	6a1a      	ldr	r2, [r3, #32]
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800157c:	461f      	mov	r7, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800157e:	f022 0201 	bic.w	r2, r2, #1
 8001582:	621a      	str	r2, [r3, #32]
 8001584:	6a1a      	ldr	r2, [r3, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001586:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800158a:	f022 0204 	bic.w	r2, r2, #4
 800158e:	621a      	str	r2, [r3, #32]
      tickstart = HAL_GetTick();
 8001590:	f7ff fb0e 	bl	8000bb0 <HAL_GetTick>
 8001594:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001596:	e012      	b.n	80015be <HAL_RCC_OscConfig+0x2d6>
 8001598:	40021000 	.word	0x40021000
 800159c:	42420000 	.word	0x42420000
 80015a0:	40007000 	.word	0x40007000
 80015a4:	42420480 	.word	0x42420480
 80015a8:	20000004 	.word	0x20000004
 80015ac:	10624dd3 	.word	0x10624dd3
 80015b0:	42420060 	.word	0x42420060
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015b4:	f7ff fafc 	bl	8000bb0 <HAL_GetTick>
 80015b8:	1b80      	subs	r0, r0, r6
 80015ba:	4540      	cmp	r0, r8
 80015bc:	d8bb      	bhi.n	8001536 <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015be:	6a3b      	ldr	r3, [r7, #32]
 80015c0:	0798      	lsls	r0, r3, #30
 80015c2:	d4f7      	bmi.n	80015b4 <HAL_RCC_OscConfig+0x2cc>
    if (pwrclkchanged == SET)
 80015c4:	2d00      	cmp	r5, #0
 80015c6:	f43f af40 	beq.w	800144a <HAL_RCC_OscConfig+0x162>
      __HAL_RCC_PWR_CLK_DISABLE();
 80015ca:	4a44      	ldr	r2, [pc, #272]	; (80016dc <HAL_RCC_OscConfig+0x3f4>)
 80015cc:	69d3      	ldr	r3, [r2, #28]
 80015ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015d2:	61d3      	str	r3, [r2, #28]
 80015d4:	e739      	b.n	800144a <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 80015d6:	4a42      	ldr	r2, [pc, #264]	; (80016e0 <HAL_RCC_OscConfig+0x3f8>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015d8:	4e40      	ldr	r6, [pc, #256]	; (80016dc <HAL_RCC_OscConfig+0x3f4>)
        __HAL_RCC_HSI_DISABLE();
 80015da:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80015dc:	f7ff fae8 	bl	8000bb0 <HAL_GetTick>
 80015e0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015e2:	e004      	b.n	80015ee <HAL_RCC_OscConfig+0x306>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015e4:	f7ff fae4 	bl	8000bb0 <HAL_GetTick>
 80015e8:	1b40      	subs	r0, r0, r5
 80015ea:	2802      	cmp	r0, #2
 80015ec:	d8a3      	bhi.n	8001536 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ee:	6833      	ldr	r3, [r6, #0]
 80015f0:	0799      	lsls	r1, r3, #30
 80015f2:	d4f7      	bmi.n	80015e4 <HAL_RCC_OscConfig+0x2fc>
 80015f4:	6823      	ldr	r3, [r4, #0]
 80015f6:	e6e2      	b.n	80013be <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015f8:	4a38      	ldr	r2, [pc, #224]	; (80016dc <HAL_RCC_OscConfig+0x3f4>)
 80015fa:	6a13      	ldr	r3, [r2, #32]
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8001602:	f7ff fad5 	bl	8000bb0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001606:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800160a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800160c:	4f33      	ldr	r7, [pc, #204]	; (80016dc <HAL_RCC_OscConfig+0x3f4>)
 800160e:	e004      	b.n	800161a <HAL_RCC_OscConfig+0x332>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001610:	f7ff face 	bl	8000bb0 <HAL_GetTick>
 8001614:	1b80      	subs	r0, r0, r6
 8001616:	4540      	cmp	r0, r8
 8001618:	d88d      	bhi.n	8001536 <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800161a:	6a3b      	ldr	r3, [r7, #32]
 800161c:	079b      	lsls	r3, r3, #30
 800161e:	d5f7      	bpl.n	8001610 <HAL_RCC_OscConfig+0x328>
    if (pwrclkchanged == SET)
 8001620:	2d00      	cmp	r5, #0
 8001622:	f43f af12 	beq.w	800144a <HAL_RCC_OscConfig+0x162>
 8001626:	e7d0      	b.n	80015ca <HAL_RCC_OscConfig+0x2e2>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001628:	2801      	cmp	r0, #1
 800162a:	f43f af2c 	beq.w	8001486 <HAL_RCC_OscConfig+0x19e>
        pll_config = RCC->CFGR;
 800162e:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001630:	6a22      	ldr	r2, [r4, #32]
 8001632:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8001636:	4291      	cmp	r1, r2
 8001638:	f47f af33 	bne.w	80014a2 <HAL_RCC_OscConfig+0x1ba>
 800163c:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800163e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
  return HAL_OK;
 8001642:	1a18      	subs	r0, r3, r0
 8001644:	bf18      	it	ne
 8001646:	2001      	movne	r0, #1
 8001648:	e71d      	b.n	8001486 <HAL_RCC_OscConfig+0x19e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800164a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800164e:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	e672      	b.n	800134a <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001664:	f042 0204 	orr.w	r2, r2, #4
 8001668:	621a      	str	r2, [r3, #32]
 800166a:	6a1a      	ldr	r2, [r3, #32]
 800166c:	f042 0201 	orr.w	r2, r2, #1
 8001670:	621a      	str	r2, [r3, #32]
 8001672:	e7c6      	b.n	8001602 <HAL_RCC_OscConfig+0x31a>
    return HAL_ERROR;
 8001674:	2001      	movs	r0, #1
}
 8001676:	4770      	bx	lr
        __HAL_RCC_PLL_DISABLE();
 8001678:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 800167a:	f7ff fa99 	bl	8000bb0 <HAL_GetTick>
 800167e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001680:	e005      	b.n	800168e <HAL_RCC_OscConfig+0x3a6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001682:	f7ff fa95 	bl	8000bb0 <HAL_GetTick>
 8001686:	1b80      	subs	r0, r0, r6
 8001688:	2802      	cmp	r0, #2
 800168a:	f63f af54 	bhi.w	8001536 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800168e:	682b      	ldr	r3, [r5, #0]
 8001690:	0199      	lsls	r1, r3, #6
 8001692:	d4f6      	bmi.n	8001682 <HAL_RCC_OscConfig+0x39a>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001694:	6a23      	ldr	r3, [r4, #32]
 8001696:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800169a:	d105      	bne.n	80016a8 <HAL_RCC_OscConfig+0x3c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800169c:	686a      	ldr	r2, [r5, #4]
 800169e:	68a1      	ldr	r1, [r4, #8]
 80016a0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80016a4:	430a      	orrs	r2, r1
 80016a6:	606a      	str	r2, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80016a8:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016aa:	4d0c      	ldr	r5, [pc, #48]	; (80016dc <HAL_RCC_OscConfig+0x3f4>)
 80016ac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80016ae:	686a      	ldr	r2, [r5, #4]
 80016b0:	430b      	orrs	r3, r1
 80016b2:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 80016b6:	490b      	ldr	r1, [pc, #44]	; (80016e4 <HAL_RCC_OscConfig+0x3fc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016b8:	4313      	orrs	r3, r2
 80016ba:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80016bc:	6008      	str	r0, [r1, #0]
        tickstart = HAL_GetTick();
 80016be:	f7ff fa77 	bl	8000bb0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016c2:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 80016c4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016c6:	e005      	b.n	80016d4 <HAL_RCC_OscConfig+0x3ec>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016c8:	f7ff fa72 	bl	8000bb0 <HAL_GetTick>
 80016cc:	1b40      	subs	r0, r0, r5
 80016ce:	2802      	cmp	r0, #2
 80016d0:	f63f af31 	bhi.w	8001536 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016d4:	6823      	ldr	r3, [r4, #0]
 80016d6:	019a      	lsls	r2, r3, #6
 80016d8:	d5f6      	bpl.n	80016c8 <HAL_RCC_OscConfig+0x3e0>
 80016da:	e6d3      	b.n	8001484 <HAL_RCC_OscConfig+0x19c>
 80016dc:	40021000 	.word	0x40021000
 80016e0:	42420000 	.word	0x42420000
 80016e4:	42420060 	.word	0x42420060

080016e8 <HAL_RCC_GetSysClockFreq>:
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80016e8:	f240 2201 	movw	r2, #513	; 0x201
{
 80016ec:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80016ee:	4b15      	ldr	r3, [pc, #84]	; (8001744 <HAL_RCC_GetSysClockFreq+0x5c>)
 80016f0:	f10d 0c18 	add.w	ip, sp, #24
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80016f4:	f8ad 2004 	strh.w	r2, [sp, #4]
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80016f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016fa:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 80016fe:	4a12      	ldr	r2, [pc, #72]	; (8001748 <HAL_RCC_GetSysClockFreq+0x60>)
 8001700:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001702:	f003 010c 	and.w	r1, r3, #12
 8001706:	2908      	cmp	r1, #8
 8001708:	d002      	beq.n	8001710 <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 800170a:	4810      	ldr	r0, [pc, #64]	; (800174c <HAL_RCC_GetSysClockFreq+0x64>)
}
 800170c:	b006      	add	sp, #24
 800170e:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001710:	f3c3 4183 	ubfx	r1, r3, #18, #4
 8001714:	4461      	add	r1, ip
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001716:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001718:	f811 1c10 	ldrb.w	r1, [r1, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800171c:	d50c      	bpl.n	8001738 <HAL_RCC_GetSysClockFreq+0x50>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800171e:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001720:	480a      	ldr	r0, [pc, #40]	; (800174c <HAL_RCC_GetSysClockFreq+0x64>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001722:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001726:	fb00 f001 	mul.w	r0, r0, r1
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800172a:	4463      	add	r3, ip
 800172c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001730:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001734:	b006      	add	sp, #24
 8001736:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001738:	4805      	ldr	r0, [pc, #20]	; (8001750 <HAL_RCC_GetSysClockFreq+0x68>)
 800173a:	fb00 f001 	mul.w	r0, r0, r1
}
 800173e:	b006      	add	sp, #24
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	08002980 	.word	0x08002980
 8001748:	40021000 	.word	0x40021000
 800174c:	007a1200 	.word	0x007a1200
 8001750:	003d0900 	.word	0x003d0900

08001754 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001754:	2800      	cmp	r0, #0
 8001756:	f000 808c 	beq.w	8001872 <HAL_RCC_ClockConfig+0x11e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800175a:	4a49      	ldr	r2, [pc, #292]	; (8001880 <HAL_RCC_ClockConfig+0x12c>)
{
 800175c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001760:	6813      	ldr	r3, [r2, #0]
 8001762:	4604      	mov	r4, r0
 8001764:	f003 0307 	and.w	r3, r3, #7
 8001768:	428b      	cmp	r3, r1
 800176a:	460d      	mov	r5, r1
 800176c:	d20c      	bcs.n	8001788 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800176e:	6813      	ldr	r3, [r2, #0]
 8001770:	f023 0307 	bic.w	r3, r3, #7
 8001774:	430b      	orrs	r3, r1
 8001776:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001778:	6813      	ldr	r3, [r2, #0]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	428b      	cmp	r3, r1
 8001780:	d002      	beq.n	8001788 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8001782:	2001      	movs	r0, #1
}
 8001784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001788:	6823      	ldr	r3, [r4, #0]
 800178a:	0798      	lsls	r0, r3, #30
 800178c:	d514      	bpl.n	80017b8 <HAL_RCC_ClockConfig+0x64>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800178e:	0759      	lsls	r1, r3, #29
 8001790:	d504      	bpl.n	800179c <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001792:	493c      	ldr	r1, [pc, #240]	; (8001884 <HAL_RCC_ClockConfig+0x130>)
 8001794:	684a      	ldr	r2, [r1, #4]
 8001796:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800179a:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800179c:	071a      	lsls	r2, r3, #28
 800179e:	d504      	bpl.n	80017aa <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017a0:	4938      	ldr	r1, [pc, #224]	; (8001884 <HAL_RCC_ClockConfig+0x130>)
 80017a2:	684a      	ldr	r2, [r1, #4]
 80017a4:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 80017a8:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017aa:	4936      	ldr	r1, [pc, #216]	; (8001884 <HAL_RCC_ClockConfig+0x130>)
 80017ac:	68a0      	ldr	r0, [r4, #8]
 80017ae:	684a      	ldr	r2, [r1, #4]
 80017b0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80017b4:	4302      	orrs	r2, r0
 80017b6:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017b8:	07df      	lsls	r7, r3, #31
 80017ba:	d520      	bpl.n	80017fe <HAL_RCC_ClockConfig+0xaa>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017bc:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017be:	4b31      	ldr	r3, [pc, #196]	; (8001884 <HAL_RCC_ClockConfig+0x130>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017c0:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c2:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017c4:	d057      	beq.n	8001876 <HAL_RCC_ClockConfig+0x122>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017c6:	2a02      	cmp	r2, #2
 80017c8:	d050      	beq.n	800186c <HAL_RCC_ClockConfig+0x118>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ca:	0799      	lsls	r1, r3, #30
 80017cc:	d5d9      	bpl.n	8001782 <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017ce:	4e2d      	ldr	r6, [pc, #180]	; (8001884 <HAL_RCC_ClockConfig+0x130>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017d0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017d4:	6873      	ldr	r3, [r6, #4]
 80017d6:	f023 0303 	bic.w	r3, r3, #3
 80017da:	4313      	orrs	r3, r2
 80017dc:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80017de:	f7ff f9e7 	bl	8000bb0 <HAL_GetTick>
 80017e2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017e4:	e004      	b.n	80017f0 <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017e6:	f7ff f9e3 	bl	8000bb0 <HAL_GetTick>
 80017ea:	1bc0      	subs	r0, r0, r7
 80017ec:	4540      	cmp	r0, r8
 80017ee:	d845      	bhi.n	800187c <HAL_RCC_ClockConfig+0x128>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017f0:	6873      	ldr	r3, [r6, #4]
 80017f2:	6862      	ldr	r2, [r4, #4]
 80017f4:	f003 030c 	and.w	r3, r3, #12
 80017f8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80017fc:	d1f3      	bne.n	80017e6 <HAL_RCC_ClockConfig+0x92>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017fe:	4a20      	ldr	r2, [pc, #128]	; (8001880 <HAL_RCC_ClockConfig+0x12c>)
 8001800:	6813      	ldr	r3, [r2, #0]
 8001802:	f003 0307 	and.w	r3, r3, #7
 8001806:	42ab      	cmp	r3, r5
 8001808:	d909      	bls.n	800181e <HAL_RCC_ClockConfig+0xca>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800180a:	6813      	ldr	r3, [r2, #0]
 800180c:	f023 0307 	bic.w	r3, r3, #7
 8001810:	432b      	orrs	r3, r5
 8001812:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001814:	6813      	ldr	r3, [r2, #0]
 8001816:	f003 0307 	and.w	r3, r3, #7
 800181a:	42ab      	cmp	r3, r5
 800181c:	d1b1      	bne.n	8001782 <HAL_RCC_ClockConfig+0x2e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800181e:	6823      	ldr	r3, [r4, #0]
 8001820:	075a      	lsls	r2, r3, #29
 8001822:	d506      	bpl.n	8001832 <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001824:	4917      	ldr	r1, [pc, #92]	; (8001884 <HAL_RCC_ClockConfig+0x130>)
 8001826:	68e0      	ldr	r0, [r4, #12]
 8001828:	684a      	ldr	r2, [r1, #4]
 800182a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800182e:	4302      	orrs	r2, r0
 8001830:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001832:	071b      	lsls	r3, r3, #28
 8001834:	d507      	bpl.n	8001846 <HAL_RCC_ClockConfig+0xf2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001836:	4a13      	ldr	r2, [pc, #76]	; (8001884 <HAL_RCC_ClockConfig+0x130>)
 8001838:	6921      	ldr	r1, [r4, #16]
 800183a:	6853      	ldr	r3, [r2, #4]
 800183c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001840:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001844:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001846:	f7ff ff4f 	bl	80016e8 <HAL_RCC_GetSysClockFreq>
 800184a:	4b0e      	ldr	r3, [pc, #56]	; (8001884 <HAL_RCC_ClockConfig+0x130>)
 800184c:	4a0e      	ldr	r2, [pc, #56]	; (8001888 <HAL_RCC_ClockConfig+0x134>)
 800184e:	685b      	ldr	r3, [r3, #4]
  HAL_InitTick(uwTickPrio);
 8001850:	490e      	ldr	r1, [pc, #56]	; (800188c <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001852:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001856:	5cd3      	ldrb	r3, [r2, r3]
 8001858:	4a0d      	ldr	r2, [pc, #52]	; (8001890 <HAL_RCC_ClockConfig+0x13c>)
 800185a:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick(uwTickPrio);
 800185e:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001860:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 8001862:	f7ff f963 	bl	8000b2c <HAL_InitTick>
  return HAL_OK;
 8001866:	2000      	movs	r0, #0
}
 8001868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800186c:	0198      	lsls	r0, r3, #6
 800186e:	d4ae      	bmi.n	80017ce <HAL_RCC_ClockConfig+0x7a>
 8001870:	e787      	b.n	8001782 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8001872:	2001      	movs	r0, #1
}
 8001874:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001876:	039e      	lsls	r6, r3, #14
 8001878:	d4a9      	bmi.n	80017ce <HAL_RCC_ClockConfig+0x7a>
 800187a:	e782      	b.n	8001782 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 800187c:	2003      	movs	r0, #3
 800187e:	e781      	b.n	8001784 <HAL_RCC_ClockConfig+0x30>
 8001880:	40022000 	.word	0x40022000
 8001884:	40021000 	.word	0x40021000
 8001888:	08002968 	.word	0x08002968
 800188c:	2000000c 	.word	0x2000000c
 8001890:	20000004 	.word	0x20000004

08001894 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001894:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001896:	4905      	ldr	r1, [pc, #20]	; (80018ac <HAL_RCC_GetPCLK1Freq+0x18>)
 8001898:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 800189a:	4a05      	ldr	r2, [pc, #20]	; (80018b0 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800189c:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80018a0:	5ccb      	ldrb	r3, [r1, r3]
 80018a2:	6810      	ldr	r0, [r2, #0]
}
 80018a4:	40d8      	lsrs	r0, r3
 80018a6:	4770      	bx	lr
 80018a8:	40021000 	.word	0x40021000
 80018ac:	08002978 	.word	0x08002978
 80018b0:	20000004 	.word	0x20000004

080018b4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80018b4:	4b04      	ldr	r3, [pc, #16]	; (80018c8 <HAL_RCC_GetPCLK2Freq+0x14>)
 80018b6:	4905      	ldr	r1, [pc, #20]	; (80018cc <HAL_RCC_GetPCLK2Freq+0x18>)
 80018b8:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 80018ba:	4a05      	ldr	r2, [pc, #20]	; (80018d0 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80018bc:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80018c0:	5ccb      	ldrb	r3, [r1, r3]
 80018c2:	6810      	ldr	r0, [r2, #0]
}
 80018c4:	40d8      	lsrs	r0, r3
 80018c6:	4770      	bx	lr
 80018c8:	40021000 	.word	0x40021000
 80018cc:	08002978 	.word	0x08002978
 80018d0:	20000004 	.word	0x20000004

080018d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80018d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018d8:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80018da:	6800      	ldr	r0, [r0, #0]
{
 80018dc:	b082      	sub	sp, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80018de:	07c3      	lsls	r3, r0, #31
 80018e0:	d52a      	bpl.n	8001938 <HAL_RCCEx_PeriphCLKConfig+0x64>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018e2:	4b39      	ldr	r3, [pc, #228]	; (80019c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 80018e4:	69da      	ldr	r2, [r3, #28]
 80018e6:	00d7      	lsls	r7, r2, #3
 80018e8:	d53d      	bpl.n	8001966 <HAL_RCCEx_PeriphCLKConfig+0x92>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ea:	4b38      	ldr	r3, [pc, #224]	; (80019cc <HAL_RCCEx_PeriphCLKConfig+0xf8>)
    FlagStatus       pwrclkchanged = RESET;
 80018ec:	2500      	movs	r5, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	05d6      	lsls	r6, r2, #23
 80018f2:	d546      	bpl.n	8001982 <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80018f4:	4e34      	ldr	r6, [pc, #208]	; (80019c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 80018f6:	6a33      	ldr	r3, [r6, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80018f8:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80018fc:	d00f      	beq.n	800191e <HAL_RCCEx_PeriphCLKConfig+0x4a>
 80018fe:	6861      	ldr	r1, [r4, #4]
 8001900:	f401 7240 	and.w	r2, r1, #768	; 0x300
 8001904:	429a      	cmp	r2, r3
 8001906:	d00b      	beq.n	8001920 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001908:	2701      	movs	r7, #1
      __HAL_RCC_BACKUPRESET_RELEASE();
 800190a:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800190c:	6a33      	ldr	r3, [r6, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800190e:	4a30      	ldr	r2, [pc, #192]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001910:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8001914:	6017      	str	r7, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001916:	6010      	str	r0, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001918:	6231      	str	r1, [r6, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800191a:	07d9      	lsls	r1, r3, #31
 800191c:	d445      	bmi.n	80019aa <HAL_RCCEx_PeriphCLKConfig+0xd6>
 800191e:	6861      	ldr	r1, [r4, #4]
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001920:	4a29      	ldr	r2, [pc, #164]	; (80019c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8001922:	6a13      	ldr	r3, [r2, #32]
 8001924:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001928:	430b      	orrs	r3, r1
 800192a:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800192c:	b11d      	cbz	r5, 8001936 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800192e:	69d3      	ldr	r3, [r2, #28]
 8001930:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001934:	61d3      	str	r3, [r2, #28]
 8001936:	6820      	ldr	r0, [r4, #0]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001938:	0783      	lsls	r3, r0, #30
 800193a:	d506      	bpl.n	800194a <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800193c:	4922      	ldr	r1, [pc, #136]	; (80019c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 800193e:	68a3      	ldr	r3, [r4, #8]
 8001940:	684a      	ldr	r2, [r1, #4]
 8001942:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001946:	431a      	orrs	r2, r3
 8001948:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800194a:	f010 0010 	ands.w	r0, r0, #16
 800194e:	d007      	beq.n	8001960 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001950:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001952:	4a1d      	ldr	r2, [pc, #116]	; (80019c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8001954:	68e1      	ldr	r1, [r4, #12]
 8001956:	6853      	ldr	r3, [r2, #4]
 8001958:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800195c:	430b      	orrs	r3, r1
 800195e:	6053      	str	r3, [r2, #4]
}
 8001960:	b002      	add	sp, #8
 8001962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8001966:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 8001968:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800196a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800196e:	61da      	str	r2, [r3, #28]
 8001970:	69db      	ldr	r3, [r3, #28]
 8001972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001976:	9301      	str	r3, [sp, #4]
 8001978:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800197a:	4b14      	ldr	r3, [pc, #80]	; (80019cc <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	05d6      	lsls	r6, r2, #23
 8001980:	d4b8      	bmi.n	80018f4 <HAL_RCCEx_PeriphCLKConfig+0x20>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001982:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001984:	461f      	mov	r7, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001986:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800198a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800198c:	f7ff f910 	bl	8000bb0 <HAL_GetTick>
 8001990:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	05d8      	lsls	r0, r3, #23
 8001996:	d4ad      	bmi.n	80018f4 <HAL_RCCEx_PeriphCLKConfig+0x20>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001998:	f7ff f90a 	bl	8000bb0 <HAL_GetTick>
 800199c:	1b83      	subs	r3, r0, r6
 800199e:	2b64      	cmp	r3, #100	; 0x64
 80019a0:	d9f7      	bls.n	8001992 <HAL_RCCEx_PeriphCLKConfig+0xbe>
          return HAL_TIMEOUT;
 80019a2:	2003      	movs	r0, #3
}
 80019a4:	b002      	add	sp, #8
 80019a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tickstart = HAL_GetTick();
 80019aa:	f7ff f901 	bl	8000bb0 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ae:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80019b2:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019b4:	e004      	b.n	80019c0 <HAL_RCCEx_PeriphCLKConfig+0xec>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019b6:	f7ff f8fb 	bl	8000bb0 <HAL_GetTick>
 80019ba:	1bc0      	subs	r0, r0, r7
 80019bc:	4540      	cmp	r0, r8
 80019be:	d8f0      	bhi.n	80019a2 <HAL_RCCEx_PeriphCLKConfig+0xce>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019c0:	6a33      	ldr	r3, [r6, #32]
 80019c2:	079a      	lsls	r2, r3, #30
 80019c4:	d5f7      	bpl.n	80019b6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80019c6:	e7aa      	b.n	800191e <HAL_RCCEx_PeriphCLKConfig+0x4a>
 80019c8:	40021000 	.word	0x40021000
 80019cc:	40007000 	.word	0x40007000
 80019d0:	42420440 	.word	0x42420440

080019d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80019d4:	b538      	push	{r3, r4, r5, lr}
 80019d6:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80019d8:	6803      	ldr	r3, [r0, #0]
 80019da:	68c0      	ldr	r0, [r0, #12]
 80019dc:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80019de:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80019e0:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 80019e4:	4301      	orrs	r1, r0
 80019e6:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 80019e8:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80019ea:	e9d4 5004 	ldrd	r5, r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR1,
 80019ee:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80019f2:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 80019f4:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80019f8:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80019fa:	430a      	orrs	r2, r1
 80019fc:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80019fe:	695a      	ldr	r2, [r3, #20]
 8001a00:	69a0      	ldr	r0, [r4, #24]


  if(huart->Instance == USART1)
 8001a02:	4913      	ldr	r1, [pc, #76]	; (8001a50 <UART_SetConfig+0x7c>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001a04:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001a08:	4302      	orrs	r2, r0
  if(huart->Instance == USART1)
 8001a0a:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001a0c:	615a      	str	r2, [r3, #20]
  if(huart->Instance == USART1)
 8001a0e:	d01b      	beq.n	8001a48 <UART_SetConfig+0x74>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001a10:	f7ff ff40 	bl	8001894 <HAL_RCC_GetPCLK1Freq>
 8001a14:	4603      	mov	r3, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001a16:	6862      	ldr	r2, [r4, #4]
 8001a18:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001a1c:	0092      	lsls	r2, r2, #2
 8001a1e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001a22:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a26:	2264      	movs	r2, #100	; 0x64
 8001a28:	480a      	ldr	r0, [pc, #40]	; (8001a54 <UART_SetConfig+0x80>)
 8001a2a:	6824      	ldr	r4, [r4, #0]
 8001a2c:	fba0 5103 	umull	r5, r1, r0, r3
 8001a30:	0949      	lsrs	r1, r1, #5
 8001a32:	fb02 3311 	mls	r3, r2, r1, r3
 8001a36:	011b      	lsls	r3, r3, #4
 8001a38:	3332      	adds	r3, #50	; 0x32
 8001a3a:	fba0 2303 	umull	r2, r3, r0, r3
 8001a3e:	0109      	lsls	r1, r1, #4
 8001a40:	eb01 1353 	add.w	r3, r1, r3, lsr #5
 8001a44:	60a3      	str	r3, [r4, #8]
#endif /* USART_CR1_OVER8 */
}
 8001a46:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8001a48:	f7ff ff34 	bl	80018b4 <HAL_RCC_GetPCLK2Freq>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	e7e2      	b.n	8001a16 <UART_SetConfig+0x42>
 8001a50:	40013800 	.word	0x40013800
 8001a54:	51eb851f 	.word	0x51eb851f

08001a58 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a5c:	4607      	mov	r7, r0
 8001a5e:	460e      	mov	r6, r1
 8001a60:	4690      	mov	r8, r2
 8001a62:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	e001      	b.n	8001a6c <UART_WaitOnFlagUntilTimeout.constprop.0+0x14>
    if (Timeout != HAL_MAX_DELAY)
 8001a68:	1c6a      	adds	r2, r5, #1
 8001a6a:	d106      	bne.n	8001a7a <UART_WaitOnFlagUntilTimeout.constprop.0+0x22>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001a6c:	681c      	ldr	r4, [r3, #0]
 8001a6e:	ea36 0204 	bics.w	r2, r6, r4
 8001a72:	d1f9      	bne.n	8001a68 <UART_WaitOnFlagUntilTimeout.constprop.0+0x10>
  return HAL_OK;
 8001a74:	2000      	movs	r0, #0
}
 8001a76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001a7a:	b135      	cbz	r5, 8001a8a <UART_WaitOnFlagUntilTimeout.constprop.0+0x32>
 8001a7c:	f7ff f898 	bl	8000bb0 <HAL_GetTick>
 8001a80:	eba0 0008 	sub.w	r0, r0, r8
 8001a84:	4285      	cmp	r5, r0
 8001a86:	d2ed      	bcs.n	8001a64 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
 8001a88:	683b      	ldr	r3, [r7, #0]
        huart->gState  = HAL_UART_STATE_READY;
 8001a8a:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 8001a8c:	2400      	movs	r4, #0
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001a8e:	68da      	ldr	r2, [r3, #12]
        __HAL_UNLOCK(huart);
 8001a90:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001a92:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001a96:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a98:	695a      	ldr	r2, [r3, #20]
 8001a9a:	f022 0201 	bic.w	r2, r2, #1
 8001a9e:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001aa0:	f887 1039 	strb.w	r1, [r7, #57]	; 0x39
        __HAL_UNLOCK(huart);
 8001aa4:	f887 4038 	strb.w	r4, [r7, #56]	; 0x38
        huart->RxState = HAL_UART_STATE_READY;
 8001aa8:	f887 103a 	strb.w	r1, [r7, #58]	; 0x3a
        return HAL_TIMEOUT;
 8001aac:	e7e3      	b.n	8001a76 <UART_WaitOnFlagUntilTimeout.constprop.0+0x1e>
 8001aae:	bf00      	nop

08001ab0 <HAL_UART_Init>:
  if (huart == NULL)
 8001ab0:	b360      	cbz	r0, 8001b0c <HAL_UART_Init+0x5c>
{
 8001ab2:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8001ab4:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001ab8:	4604      	mov	r4, r0
 8001aba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001abe:	b303      	cbz	r3, 8001b02 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8001ac0:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001ac2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001ac4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001ac8:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8001aca:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001acc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001ad0:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001ad2:	f7ff ff7f 	bl	80019d4 <UART_SetConfig>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ad6:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8001ad8:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ada:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 8001adc:	4628      	mov	r0, r5
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ade:	691a      	ldr	r2, [r3, #16]
 8001ae0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ae4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ae6:	695a      	ldr	r2, [r3, #20]
 8001ae8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001aec:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001aee:	68da      	ldr	r2, [r3, #12]
 8001af0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001af4:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001af6:	63e5      	str	r5, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001af8:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001afc:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
}
 8001b00:	bd38      	pop	{r3, r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 8001b02:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001b06:	f7fe fde1 	bl	80006cc <HAL_UART_MspInit>
 8001b0a:	e7d9      	b.n	8001ac0 <HAL_UART_Init+0x10>
    return HAL_ERROR;
 8001b0c:	2001      	movs	r0, #1
}
 8001b0e:	4770      	bx	lr

08001b10 <HAL_UART_Transmit>:
{
 8001b10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b14:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8001b16:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 8001b1a:	2820      	cmp	r0, #32
 8001b1c:	d142      	bne.n	8001ba4 <HAL_UART_Transmit+0x94>
    if ((pData == NULL) || (Size == 0U))
 8001b1e:	460e      	mov	r6, r1
 8001b20:	2900      	cmp	r1, #0
 8001b22:	d03c      	beq.n	8001b9e <HAL_UART_Transmit+0x8e>
 8001b24:	4615      	mov	r5, r2
 8001b26:	2a00      	cmp	r2, #0
 8001b28:	d039      	beq.n	8001b9e <HAL_UART_Transmit+0x8e>
 8001b2a:	461f      	mov	r7, r3
    __HAL_LOCK(huart);
 8001b2c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d037      	beq.n	8001ba4 <HAL_UART_Transmit+0x94>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b34:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 8001b36:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b38:	f04f 0800 	mov.w	r8, #0
    __HAL_LOCK(huart);
 8001b3c:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b40:	f8c4 803c 	str.w	r8, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b44:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001b48:	f7ff f832 	bl	8000bb0 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b4c:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8001b4e:	4681      	mov	r9, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize = Size;
 8001b54:	84a5      	strh	r5, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8001b56:	84e5      	strh	r5, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b58:	d027      	beq.n	8001baa <HAL_UART_Transmit+0x9a>
    __HAL_UNLOCK(huart);
 8001b5a:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 8001b5c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 8001b5e:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	b95b      	cbnz	r3, 8001b7e <HAL_UART_Transmit+0x6e>
 8001b66:	e029      	b.n	8001bbc <HAL_UART_Transmit+0xac>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b68:	6823      	ldr	r3, [r4, #0]
 8001b6a:	f816 2b01 	ldrb.w	r2, [r6], #1
 8001b6e:	605a      	str	r2, [r3, #4]
      huart->TxXferCount--;
 8001b70:	8ce5      	ldrh	r5, [r4, #38]	; 0x26
 8001b72:	3d01      	subs	r5, #1
 8001b74:	b2ad      	uxth	r5, r5
 8001b76:	84e5      	strh	r5, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001b78:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8001b7a:	b289      	uxth	r1, r1
 8001b7c:	b1f1      	cbz	r1, 8001bbc <HAL_UART_Transmit+0xac>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b7e:	463b      	mov	r3, r7
 8001b80:	464a      	mov	r2, r9
 8001b82:	2180      	movs	r1, #128	; 0x80
 8001b84:	4620      	mov	r0, r4
 8001b86:	f7ff ff67 	bl	8001a58 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8001b8a:	b9a0      	cbnz	r0, 8001bb6 <HAL_UART_Transmit+0xa6>
      if (pdata8bits == NULL)
 8001b8c:	2e00      	cmp	r6, #0
 8001b8e:	d1eb      	bne.n	8001b68 <HAL_UART_Transmit+0x58>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b90:	f838 3b02 	ldrh.w	r3, [r8], #2
 8001b94:	6822      	ldr	r2, [r4, #0]
 8001b96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b9a:	6053      	str	r3, [r2, #4]
        pdata16bits++;
 8001b9c:	e7e8      	b.n	8001b70 <HAL_UART_Transmit+0x60>
      return  HAL_ERROR;
 8001b9e:	2001      	movs	r0, #1
}
 8001ba0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8001ba4:	2002      	movs	r0, #2
}
 8001ba6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001baa:	6923      	ldr	r3, [r4, #16]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d1d4      	bne.n	8001b5a <HAL_UART_Transmit+0x4a>
 8001bb0:	46b0      	mov	r8, r6
      pdata8bits  = NULL;
 8001bb2:	461e      	mov	r6, r3
 8001bb4:	e7d1      	b.n	8001b5a <HAL_UART_Transmit+0x4a>
        return HAL_TIMEOUT;
 8001bb6:	2003      	movs	r0, #3
}
 8001bb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001bbc:	463b      	mov	r3, r7
 8001bbe:	464a      	mov	r2, r9
 8001bc0:	2140      	movs	r1, #64	; 0x40
 8001bc2:	4620      	mov	r0, r4
 8001bc4:	f7ff ff48 	bl	8001a58 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8001bc8:	2800      	cmp	r0, #0
 8001bca:	d1f4      	bne.n	8001bb6 <HAL_UART_Transmit+0xa6>
    huart->gState = HAL_UART_STATE_READY;
 8001bcc:	2320      	movs	r3, #32
 8001bce:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8001bd2:	e7e5      	b.n	8001ba0 <HAL_UART_Transmit+0x90>

08001bd4 <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8001bd4:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001bd8:	2b20      	cmp	r3, #32
 8001bda:	d13c      	bne.n	8001c56 <HAL_UART_Receive_DMA+0x82>
    if ((pData == NULL) || (Size == 0U))
 8001bdc:	2900      	cmp	r1, #0
 8001bde:	d038      	beq.n	8001c52 <HAL_UART_Receive_DMA+0x7e>
 8001be0:	2a00      	cmp	r2, #0
 8001be2:	d036      	beq.n	8001c52 <HAL_UART_Receive_DMA+0x7e>
{
 8001be4:	b5f0      	push	{r4, r5, r6, r7, lr}
    __HAL_LOCK(huart);
 8001be6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001bea:	4604      	mov	r4, r0
 8001bec:	2b01      	cmp	r3, #1
{
 8001bee:	b083      	sub	sp, #12
    __HAL_LOCK(huart);
 8001bf0:	d033      	beq.n	8001c5a <HAL_UART_Receive_DMA+0x86>
 8001bf2:	2601      	movs	r6, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bf4:	2500      	movs	r5, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001bf6:	2722      	movs	r7, #34	; 0x22
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8001bf8:	6b40      	ldr	r0, [r0, #52]	; 0x34
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8001bfa:	4613      	mov	r3, r2
    huart->pRxBuffPtr = pData;
 8001bfc:	62a1      	str	r1, [r4, #40]	; 0x28
    huart->RxXferSize = Size;
 8001bfe:	85a2      	strh	r2, [r4, #44]	; 0x2c
    __HAL_LOCK(huart);
 8001c00:	f884 6038 	strb.w	r6, [r4, #56]	; 0x38
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8001c04:	460a      	mov	r2, r1
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8001c06:	4e16      	ldr	r6, [pc, #88]	; (8001c60 <HAL_UART_Receive_DMA+0x8c>)
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8001c08:	4916      	ldr	r1, [pc, #88]	; (8001c64 <HAL_UART_Receive_DMA+0x90>)
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c0a:	63e5      	str	r5, [r4, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001c0c:	f884 703a 	strb.w	r7, [r4, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8001c10:	6286      	str	r6, [r0, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8001c12:	62c1      	str	r1, [r0, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8001c14:	4e14      	ldr	r6, [pc, #80]	; (8001c68 <HAL_UART_Receive_DMA+0x94>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8001c16:	6821      	ldr	r1, [r4, #0]
    huart->hdmarx->XferAbortCallback = NULL;
 8001c18:	6345      	str	r5, [r0, #52]	; 0x34
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8001c1a:	6306      	str	r6, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8001c1c:	3104      	adds	r1, #4
 8001c1e:	f7ff f881 	bl	8000d24 <HAL_DMA_Start_IT>
    return HAL_OK;
 8001c22:	4628      	mov	r0, r5
    __HAL_UART_CLEAR_OREFLAG(huart);
 8001c24:	6823      	ldr	r3, [r4, #0]
 8001c26:	9501      	str	r5, [sp, #4]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	9201      	str	r2, [sp, #4]
 8001c2c:	685a      	ldr	r2, [r3, #4]
    __HAL_UNLOCK(huart);
 8001c2e:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    __HAL_UART_CLEAR_OREFLAG(huart);
 8001c32:	9201      	str	r2, [sp, #4]
 8001c34:	9a01      	ldr	r2, [sp, #4]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001c36:	68da      	ldr	r2, [r3, #12]
 8001c38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c3c:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c3e:	695a      	ldr	r2, [r3, #20]
 8001c40:	f042 0201 	orr.w	r2, r2, #1
 8001c44:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001c46:	695a      	ldr	r2, [r3, #20]
 8001c48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c4c:	615a      	str	r2, [r3, #20]
}
 8001c4e:	b003      	add	sp, #12
 8001c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8001c52:	2001      	movs	r0, #1
}
 8001c54:	4770      	bx	lr
    return HAL_BUSY;
 8001c56:	2002      	movs	r0, #2
 8001c58:	4770      	bx	lr
 8001c5a:	2002      	movs	r0, #2
}
 8001c5c:	b003      	add	sp, #12
 8001c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c60:	08001ced 	.word	0x08001ced
 8001c64:	08001dad 	.word	0x08001dad
 8001c68:	08001dbd 	.word	0x08001dbd

08001c6c <HAL_UART_DMAStop>:
{
 8001c6c:	b510      	push	{r4, lr}
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8001c6e:	6803      	ldr	r3, [r0, #0]
{
 8001c70:	4604      	mov	r4, r0
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8001c72:	6959      	ldr	r1, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8001c74:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
 8001c78:	2a21      	cmp	r2, #33	; 0x21
 8001c7a:	d006      	beq.n	8001c8a <HAL_UART_DMAStop+0x1e>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001c7c:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001c7e:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
 8001c82:	2a22      	cmp	r2, #34	; 0x22
 8001c84:	d018      	beq.n	8001cb8 <HAL_UART_DMAStop+0x4c>
}
 8001c86:	2000      	movs	r0, #0
 8001c88:	bd10      	pop	{r4, pc}
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8001c8a:	0609      	lsls	r1, r1, #24
 8001c8c:	d5f6      	bpl.n	8001c7c <HAL_UART_DMAStop+0x10>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001c8e:	695a      	ldr	r2, [r3, #20]
    if (huart->hdmatx != NULL)
 8001c90:	6b00      	ldr	r0, [r0, #48]	; 0x30
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001c92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c96:	615a      	str	r2, [r3, #20]
    if (huart->hdmatx != NULL)
 8001c98:	b110      	cbz	r0, 8001ca0 <HAL_UART_DMAStop+0x34>
      HAL_DMA_Abort(huart->hdmatx);
 8001c9a:	f7ff f885 	bl	8000da8 <HAL_DMA_Abort>
 8001c9e:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_READY;
 8001ca0:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8001ca2:	68da      	ldr	r2, [r3, #12]
 8001ca4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001ca8:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001caa:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001cae:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001cb0:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
 8001cb4:	2a22      	cmp	r2, #34	; 0x22
 8001cb6:	d1e6      	bne.n	8001c86 <HAL_UART_DMAStop+0x1a>
 8001cb8:	064a      	lsls	r2, r1, #25
 8001cba:	d5e4      	bpl.n	8001c86 <HAL_UART_DMAStop+0x1a>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001cbc:	695a      	ldr	r2, [r3, #20]
    if (huart->hdmarx != NULL)
 8001cbe:	6b60      	ldr	r0, [r4, #52]	; 0x34
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001cc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cc4:	615a      	str	r2, [r3, #20]
    if (huart->hdmarx != NULL)
 8001cc6:	b110      	cbz	r0, 8001cce <HAL_UART_DMAStop+0x62>
      HAL_DMA_Abort(huart->hdmarx);
 8001cc8:	f7ff f86e 	bl	8000da8 <HAL_DMA_Abort>
 8001ccc:	6823      	ldr	r3, [r4, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8001cce:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001cd0:	68da      	ldr	r2, [r3, #12]
}
 8001cd2:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001cd4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001cd8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001cda:	695a      	ldr	r2, [r3, #20]
 8001cdc:	f022 0201 	bic.w	r2, r2, #1
 8001ce0:	615a      	str	r2, [r3, #20]
  huart->RxState = HAL_UART_STATE_READY;
 8001ce2:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
}
 8001ce6:	bd10      	pop	{r4, pc}

08001ce8 <HAL_UART_TxCpltCallback>:
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop

08001cec <UART_DMAReceiveCplt>:
{
 8001cec:	b508      	push	{r3, lr}
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cee:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001cf0:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f013 0320 	ands.w	r3, r3, #32
 8001cf8:	d110      	bne.n	8001d1c <UART_DMAReceiveCplt+0x30>
    huart->RxState = HAL_UART_STATE_READY;
 8001cfa:	2120      	movs	r1, #32
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001cfc:	6802      	ldr	r2, [r0, #0]
    huart->RxXferCount = 0U;
 8001cfe:	85c3      	strh	r3, [r0, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001d00:	68d3      	ldr	r3, [r2, #12]
 8001d02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d06:	60d3      	str	r3, [r2, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d08:	6953      	ldr	r3, [r2, #20]
 8001d0a:	f023 0301 	bic.w	r3, r3, #1
 8001d0e:	6153      	str	r3, [r2, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d10:	6953      	ldr	r3, [r2, #20]
 8001d12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d16:	6153      	str	r3, [r2, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8001d18:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 8001d1c:	f7fe fbfc 	bl	8000518 <HAL_UART_RxCpltCallback>
}
 8001d20:	bd08      	pop	{r3, pc}
 8001d22:	bf00      	nop

08001d24 <UART_Receive_IT.part.0>:
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8001d24:	b508      	push	{r3, lr}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d26:	6883      	ldr	r3, [r0, #8]
 8001d28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d2c:	d017      	beq.n	8001d5e <UART_Receive_IT.part.0+0x3a>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001d2e:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001d30:	b173      	cbz	r3, 8001d50 <UART_Receive_IT.part.0+0x2c>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001d32:	6803      	ldr	r3, [r0, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d3a:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8001d3c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001d3e:	3301      	adds	r3, #1
 8001d40:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8001d42:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8001d44:	3b01      	subs	r3, #1
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8001d4a:	b19b      	cbz	r3, 8001d74 <UART_Receive_IT.part.0+0x50>
}
 8001d4c:	2000      	movs	r0, #0
 8001d4e:	bd08      	pop	{r3, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001d50:	6903      	ldr	r3, [r0, #16]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1ed      	bne.n	8001d32 <UART_Receive_IT.part.0+0xe>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001d56:	6803      	ldr	r3, [r0, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	7013      	strb	r3, [r2, #0]
 8001d5c:	e7ee      	b.n	8001d3c <UART_Receive_IT.part.0+0x18>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d5e:	6903      	ldr	r3, [r0, #16]
 8001d60:	b9e3      	cbnz	r3, 8001d9c <UART_Receive_IT.part.0+0x78>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001d62:	6802      	ldr	r2, [r0, #0]
 8001d64:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001d66:	6852      	ldr	r2, [r2, #4]
 8001d68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d6c:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 8001d70:	6283      	str	r3, [r0, #40]	; 0x28
 8001d72:	e7e6      	b.n	8001d42 <UART_Receive_IT.part.0+0x1e>
      huart->RxState = HAL_UART_STATE_READY;
 8001d74:	2120      	movs	r1, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001d76:	6803      	ldr	r3, [r0, #0]
 8001d78:	68da      	ldr	r2, [r3, #12]
 8001d7a:	f022 0220 	bic.w	r2, r2, #32
 8001d7e:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001d80:	68da      	ldr	r2, [r3, #12]
 8001d82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d86:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001d88:	695a      	ldr	r2, [r3, #20]
 8001d8a:	f022 0201 	bic.w	r2, r2, #1
 8001d8e:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001d90:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8001d94:	f7fe fbc0 	bl	8000518 <HAL_UART_RxCpltCallback>
}
 8001d98:	2000      	movs	r0, #0
 8001d9a:	bd08      	pop	{r3, pc}
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001d9c:	6803      	ldr	r3, [r0, #0]
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001d9e:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	7013      	strb	r3, [r2, #0]
 8001da4:	e7ca      	b.n	8001d3c <UART_Receive_IT.part.0+0x18>
 8001da6:	bf00      	nop

08001da8 <HAL_UART_RxHalfCpltCallback>:
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop

08001dac <UART_DMARxHalfCplt>:
{
 8001dac:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 8001dae:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001db0:	f7ff fffa 	bl	8001da8 <HAL_UART_RxHalfCpltCallback>
}
 8001db4:	bd08      	pop	{r3, pc}
 8001db6:	bf00      	nop

08001db8 <HAL_UART_ErrorCallback>:
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop

08001dbc <UART_DMAError>:
{
 8001dbc:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001dbe:	6a40      	ldr	r0, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8001dc0:	6803      	ldr	r3, [r0, #0]
 8001dc2:	6959      	ldr	r1, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8001dc4:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
 8001dc8:	2a21      	cmp	r2, #33	; 0x21
 8001dca:	d00b      	beq.n	8001de4 <UART_DMAError+0x28>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001dcc:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001dce:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
 8001dd2:	2a22      	cmp	r2, #34	; 0x22
 8001dd4:	d016      	beq.n	8001e04 <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8001dd6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001dd8:	f043 0310 	orr.w	r3, r3, #16
 8001ddc:	63c3      	str	r3, [r0, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8001dde:	f7ff ffeb 	bl	8001db8 <HAL_UART_ErrorCallback>
}
 8001de2:	bd08      	pop	{r3, pc}
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8001de4:	0609      	lsls	r1, r1, #24
 8001de6:	d5f1      	bpl.n	8001dcc <UART_DMAError+0x10>
    huart->TxXferCount = 0x00U;
 8001de8:	2200      	movs	r2, #0
  huart->gState = HAL_UART_STATE_READY;
 8001dea:	2120      	movs	r1, #32
    huart->TxXferCount = 0x00U;
 8001dec:	84c2      	strh	r2, [r0, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8001dee:	68da      	ldr	r2, [r3, #12]
 8001df0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001df4:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001df6:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001dfa:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001dfc:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
 8001e00:	2a22      	cmp	r2, #34	; 0x22
 8001e02:	d1e8      	bne.n	8001dd6 <UART_DMAError+0x1a>
 8001e04:	064a      	lsls	r2, r1, #25
 8001e06:	d5e6      	bpl.n	8001dd6 <UART_DMAError+0x1a>
    huart->RxXferCount = 0x00U;
 8001e08:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8001e0a:	2120      	movs	r1, #32
    huart->RxXferCount = 0x00U;
 8001e0c:	85c2      	strh	r2, [r0, #46]	; 0x2e
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001e0e:	68da      	ldr	r2, [r3, #12]
 8001e10:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001e14:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e16:	695a      	ldr	r2, [r3, #20]
 8001e18:	f022 0201 	bic.w	r2, r2, #1
 8001e1c:	615a      	str	r2, [r3, #20]
  huart->RxState = HAL_UART_STATE_READY;
 8001e1e:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
}
 8001e22:	e7d8      	b.n	8001dd6 <UART_DMAError+0x1a>

08001e24 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001e24:	6803      	ldr	r3, [r0, #0]
{
 8001e26:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001e28:	681a      	ldr	r2, [r3, #0]
{
 8001e2a:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8001e2c:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001e2e:	68dd      	ldr	r5, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001e30:	6959      	ldr	r1, [r3, #20]
  if (errorflags == RESET)
 8001e32:	d10c      	bne.n	8001e4e <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e34:	0691      	lsls	r1, r2, #26
 8001e36:	d501      	bpl.n	8001e3c <HAL_UART_IRQHandler+0x18>
 8001e38:	06ae      	lsls	r6, r5, #26
 8001e3a:	d44e      	bmi.n	8001eda <HAL_UART_IRQHandler+0xb6>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001e3c:	0616      	lsls	r6, r2, #24
 8001e3e:	d501      	bpl.n	8001e44 <HAL_UART_IRQHandler+0x20>
 8001e40:	0628      	lsls	r0, r5, #24
 8001e42:	d452      	bmi.n	8001eea <HAL_UART_IRQHandler+0xc6>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001e44:	0651      	lsls	r1, r2, #25
 8001e46:	d501      	bpl.n	8001e4c <HAL_UART_IRQHandler+0x28>
 8001e48:	066a      	lsls	r2, r5, #25
 8001e4a:	d46a      	bmi.n	8001f22 <HAL_UART_IRQHandler+0xfe>
}
 8001e4c:	bd70      	pop	{r4, r5, r6, pc}
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001e4e:	f001 0101 	and.w	r1, r1, #1
 8001e52:	f405 7090 	and.w	r0, r5, #288	; 0x120
 8001e56:	4308      	orrs	r0, r1
 8001e58:	d0f0      	beq.n	8001e3c <HAL_UART_IRQHandler+0x18>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001e5a:	07d0      	lsls	r0, r2, #31
 8001e5c:	d505      	bpl.n	8001e6a <HAL_UART_IRQHandler+0x46>
 8001e5e:	05ee      	lsls	r6, r5, #23
 8001e60:	d503      	bpl.n	8001e6a <HAL_UART_IRQHandler+0x46>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001e62:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001e64:	f040 0001 	orr.w	r0, r0, #1
 8001e68:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e6a:	0750      	lsls	r0, r2, #29
 8001e6c:	d52c      	bpl.n	8001ec8 <HAL_UART_IRQHandler+0xa4>
 8001e6e:	b129      	cbz	r1, 8001e7c <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001e70:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e72:	0796      	lsls	r6, r2, #30
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001e74:	f040 0002 	orr.w	r0, r0, #2
 8001e78:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e7a:	d429      	bmi.n	8001ed0 <HAL_UART_IRQHandler+0xac>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001e7c:	0716      	lsls	r6, r2, #28
 8001e7e:	d507      	bpl.n	8001e90 <HAL_UART_IRQHandler+0x6c>
 8001e80:	f005 0020 	and.w	r0, r5, #32
 8001e84:	4301      	orrs	r1, r0
 8001e86:	d003      	beq.n	8001e90 <HAL_UART_IRQHandler+0x6c>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001e88:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001e8a:	f041 0108 	orr.w	r1, r1, #8
 8001e8e:	63e1      	str	r1, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001e90:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001e92:	2900      	cmp	r1, #0
 8001e94:	d0da      	beq.n	8001e4c <HAL_UART_IRQHandler+0x28>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e96:	0690      	lsls	r0, r2, #26
 8001e98:	d509      	bpl.n	8001eae <HAL_UART_IRQHandler+0x8a>
 8001e9a:	06a9      	lsls	r1, r5, #26
 8001e9c:	d507      	bpl.n	8001eae <HAL_UART_IRQHandler+0x8a>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001e9e:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
 8001ea2:	2a22      	cmp	r2, #34	; 0x22
 8001ea4:	d103      	bne.n	8001eae <HAL_UART_IRQHandler+0x8a>
 8001ea6:	4620      	mov	r0, r4
 8001ea8:	f7ff ff3c 	bl	8001d24 <UART_Receive_IT.part.0>
 8001eac:	6823      	ldr	r3, [r4, #0]
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001eae:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001eb0:	6be5      	ldr	r5, [r4, #60]	; 0x3c
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001eb2:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001eb6:	f005 0508 	and.w	r5, r5, #8
 8001eba:	4315      	orrs	r5, r2
 8001ebc:	d13c      	bne.n	8001f38 <HAL_UART_IRQHandler+0x114>
        HAL_UART_ErrorCallback(huart);
 8001ebe:	4620      	mov	r0, r4
 8001ec0:	f7ff ff7a 	bl	8001db8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ec4:	63e5      	str	r5, [r4, #60]	; 0x3c
}
 8001ec6:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ec8:	0790      	lsls	r0, r2, #30
 8001eca:	d5d7      	bpl.n	8001e7c <HAL_UART_IRQHandler+0x58>
 8001ecc:	2900      	cmp	r1, #0
 8001ece:	d0d5      	beq.n	8001e7c <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001ed0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001ed2:	f040 0004 	orr.w	r0, r0, #4
 8001ed6:	63e0      	str	r0, [r4, #60]	; 0x3c
 8001ed8:	e7d0      	b.n	8001e7c <HAL_UART_IRQHandler+0x58>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001eda:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001ede:	2b22      	cmp	r3, #34	; 0x22
 8001ee0:	d1b4      	bne.n	8001e4c <HAL_UART_IRQHandler+0x28>
}
 8001ee2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001ee6:	f7ff bf1d 	b.w	8001d24 <UART_Receive_IT.part.0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001eea:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8001eee:	2a21      	cmp	r2, #33	; 0x21
 8001ef0:	d1ac      	bne.n	8001e4c <HAL_UART_IRQHandler+0x28>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ef2:	68a2      	ldr	r2, [r4, #8]
 8001ef4:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001ef8:	d042      	beq.n	8001f80 <HAL_UART_IRQHandler+0x15c>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001efa:	6a22      	ldr	r2, [r4, #32]
 8001efc:	1c51      	adds	r1, r2, #1
 8001efe:	6221      	str	r1, [r4, #32]
 8001f00:	7812      	ldrb	r2, [r2, #0]
 8001f02:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8001f04:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8001f06:	3a01      	subs	r2, #1
 8001f08:	b292      	uxth	r2, r2
 8001f0a:	84e2      	strh	r2, [r4, #38]	; 0x26
 8001f0c:	2a00      	cmp	r2, #0
 8001f0e:	d19d      	bne.n	8001e4c <HAL_UART_IRQHandler+0x28>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001f10:	68da      	ldr	r2, [r3, #12]
 8001f12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f16:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001f18:	68da      	ldr	r2, [r3, #12]
 8001f1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f1e:	60da      	str	r2, [r3, #12]
}
 8001f20:	bd70      	pop	{r4, r5, r6, pc}
  huart->gState = HAL_UART_STATE_READY;
 8001f22:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001f24:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8001f26:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001f28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f2c:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001f2e:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8001f32:	f7ff fed9 	bl	8001ce8 <HAL_UART_TxCpltCallback>
}
 8001f36:	bd70      	pop	{r4, r5, r6, pc}
  huart->RxState = HAL_UART_STATE_READY;
 8001f38:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001f3a:	68da      	ldr	r2, [r3, #12]
 8001f3c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001f40:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f42:	695a      	ldr	r2, [r3, #20]
 8001f44:	f022 0201 	bic.w	r2, r2, #1
 8001f48:	615a      	str	r2, [r3, #20]
  huart->RxState = HAL_UART_STATE_READY;
 8001f4a:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f4e:	695a      	ldr	r2, [r3, #20]
 8001f50:	0652      	lsls	r2, r2, #25
 8001f52:	d511      	bpl.n	8001f78 <HAL_UART_IRQHandler+0x154>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f54:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8001f56:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f5c:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8001f5e:	b158      	cbz	r0, 8001f78 <HAL_UART_IRQHandler+0x154>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001f60:	4b0d      	ldr	r3, [pc, #52]	; (8001f98 <HAL_UART_IRQHandler+0x174>)
 8001f62:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001f64:	f7fe ff42 	bl	8000dec <HAL_DMA_Abort_IT>
 8001f68:	2800      	cmp	r0, #0
 8001f6a:	f43f af6f 	beq.w	8001e4c <HAL_UART_IRQHandler+0x28>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001f6e:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8001f70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001f74:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001f76:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8001f78:	4620      	mov	r0, r4
 8001f7a:	f7ff ff1d 	bl	8001db8 <HAL_UART_ErrorCallback>
}
 8001f7e:	bd70      	pop	{r4, r5, r6, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f80:	6922      	ldr	r2, [r4, #16]
 8001f82:	2a00      	cmp	r2, #0
 8001f84:	d1b9      	bne.n	8001efa <HAL_UART_IRQHandler+0xd6>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001f86:	6a22      	ldr	r2, [r4, #32]
 8001f88:	f832 1b02 	ldrh.w	r1, [r2], #2
 8001f8c:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001f90:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8001f92:	6222      	str	r2, [r4, #32]
 8001f94:	e7b6      	b.n	8001f04 <HAL_UART_IRQHandler+0xe0>
 8001f96:	bf00      	nop
 8001f98:	08001f9d 	.word	0x08001f9d

08001f9c <UART_DMAAbortOnError>:
{
 8001f9c:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8001f9e:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001fa0:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8001fa2:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001fa4:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8001fa6:	f7ff ff07 	bl	8001db8 <HAL_UART_ErrorCallback>
}
 8001faa:	bd08      	pop	{r3, pc}

08001fac <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001fac:	b084      	sub	sp, #16
 8001fae:	a801      	add	r0, sp, #4
 8001fb0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8001fb4:	b004      	add	sp, #16
 8001fb6:	2000      	movs	r0, #0
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop

08001fbc <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8001fbc:	f244 02ff 	movw	r2, #16639	; 0x40ff
{
 8001fc0:	4603      	mov	r3, r0
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8001fc2:	f8b0 1040 	ldrh.w	r1, [r0, #64]	; 0x40

  return HAL_OK;
}
 8001fc6:	2000      	movs	r0, #0
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8001fc8:	400a      	ands	r2, r1
 8001fca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
}
 8001fce:	4770      	bx	lr

08001fd0 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001fd0:	2000      	movs	r0, #0
 8001fd2:	4770      	bx	lr

08001fd4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001fd4:	b084      	sub	sp, #16
 8001fd6:	b430      	push	{r4, r5}
 8001fd8:	4604      	mov	r4, r0
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8001fda:	2501      	movs	r5, #1

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8001fdc:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8001fde:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
{
 8001fe2:	ad03      	add	r5, sp, #12
  USBx->CNTR = 0U;
 8001fe4:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40
{
 8001fe8:	e885 000e 	stmia.w	r5, {r1, r2, r3}

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8001fec:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8001ff0:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50

  return HAL_OK;
}
 8001ff4:	bc30      	pop	{r4, r5}
 8001ff6:	b004      	add	sp, #16
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop

08001ffc <USB_DevDisconnect>:
 8001ffc:	2000      	movs	r0, #0
 8001ffe:	4770      	bx	lr

08002000 <__libc_init_array>:
 8002000:	b570      	push	{r4, r5, r6, lr}
 8002002:	2600      	movs	r6, #0
 8002004:	4d0c      	ldr	r5, [pc, #48]	; (8002038 <__libc_init_array+0x38>)
 8002006:	4c0d      	ldr	r4, [pc, #52]	; (800203c <__libc_init_array+0x3c>)
 8002008:	1b64      	subs	r4, r4, r5
 800200a:	10a4      	asrs	r4, r4, #2
 800200c:	42a6      	cmp	r6, r4
 800200e:	d109      	bne.n	8002024 <__libc_init_array+0x24>
 8002010:	f000 fc8c 	bl	800292c <_init>
 8002014:	2600      	movs	r6, #0
 8002016:	4d0a      	ldr	r5, [pc, #40]	; (8002040 <__libc_init_array+0x40>)
 8002018:	4c0a      	ldr	r4, [pc, #40]	; (8002044 <__libc_init_array+0x44>)
 800201a:	1b64      	subs	r4, r4, r5
 800201c:	10a4      	asrs	r4, r4, #2
 800201e:	42a6      	cmp	r6, r4
 8002020:	d105      	bne.n	800202e <__libc_init_array+0x2e>
 8002022:	bd70      	pop	{r4, r5, r6, pc}
 8002024:	f855 3b04 	ldr.w	r3, [r5], #4
 8002028:	4798      	blx	r3
 800202a:	3601      	adds	r6, #1
 800202c:	e7ee      	b.n	800200c <__libc_init_array+0xc>
 800202e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002032:	4798      	blx	r3
 8002034:	3601      	adds	r6, #1
 8002036:	e7f2      	b.n	800201e <__libc_init_array+0x1e>
 8002038:	080029c4 	.word	0x080029c4
 800203c:	080029c4 	.word	0x080029c4
 8002040:	080029c4 	.word	0x080029c4
 8002044:	080029c8 	.word	0x080029c8

08002048 <malloc>:
 8002048:	4b02      	ldr	r3, [pc, #8]	; (8002054 <malloc+0xc>)
 800204a:	4601      	mov	r1, r0
 800204c:	6818      	ldr	r0, [r3, #0]
 800204e:	f000 b857 	b.w	8002100 <_malloc_r>
 8002052:	bf00      	nop
 8002054:	20000010 	.word	0x20000010

08002058 <free>:
 8002058:	4b02      	ldr	r3, [pc, #8]	; (8002064 <free+0xc>)
 800205a:	4601      	mov	r1, r0
 800205c:	6818      	ldr	r0, [r3, #0]
 800205e:	f000 b803 	b.w	8002068 <_free_r>
 8002062:	bf00      	nop
 8002064:	20000010 	.word	0x20000010

08002068 <_free_r>:
 8002068:	b538      	push	{r3, r4, r5, lr}
 800206a:	4605      	mov	r5, r0
 800206c:	2900      	cmp	r1, #0
 800206e:	d043      	beq.n	80020f8 <_free_r+0x90>
 8002070:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002074:	1f0c      	subs	r4, r1, #4
 8002076:	2b00      	cmp	r3, #0
 8002078:	bfb8      	it	lt
 800207a:	18e4      	addlt	r4, r4, r3
 800207c:	f000 f8e4 	bl	8002248 <__malloc_lock>
 8002080:	4a1e      	ldr	r2, [pc, #120]	; (80020fc <_free_r+0x94>)
 8002082:	6813      	ldr	r3, [r2, #0]
 8002084:	4610      	mov	r0, r2
 8002086:	b933      	cbnz	r3, 8002096 <_free_r+0x2e>
 8002088:	6063      	str	r3, [r4, #4]
 800208a:	6014      	str	r4, [r2, #0]
 800208c:	4628      	mov	r0, r5
 800208e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002092:	f000 b8df 	b.w	8002254 <__malloc_unlock>
 8002096:	42a3      	cmp	r3, r4
 8002098:	d90a      	bls.n	80020b0 <_free_r+0x48>
 800209a:	6821      	ldr	r1, [r4, #0]
 800209c:	1862      	adds	r2, r4, r1
 800209e:	4293      	cmp	r3, r2
 80020a0:	bf01      	itttt	eq
 80020a2:	681a      	ldreq	r2, [r3, #0]
 80020a4:	685b      	ldreq	r3, [r3, #4]
 80020a6:	1852      	addeq	r2, r2, r1
 80020a8:	6022      	streq	r2, [r4, #0]
 80020aa:	6063      	str	r3, [r4, #4]
 80020ac:	6004      	str	r4, [r0, #0]
 80020ae:	e7ed      	b.n	800208c <_free_r+0x24>
 80020b0:	461a      	mov	r2, r3
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	b10b      	cbz	r3, 80020ba <_free_r+0x52>
 80020b6:	42a3      	cmp	r3, r4
 80020b8:	d9fa      	bls.n	80020b0 <_free_r+0x48>
 80020ba:	6811      	ldr	r1, [r2, #0]
 80020bc:	1850      	adds	r0, r2, r1
 80020be:	42a0      	cmp	r0, r4
 80020c0:	d10b      	bne.n	80020da <_free_r+0x72>
 80020c2:	6820      	ldr	r0, [r4, #0]
 80020c4:	4401      	add	r1, r0
 80020c6:	1850      	adds	r0, r2, r1
 80020c8:	4283      	cmp	r3, r0
 80020ca:	6011      	str	r1, [r2, #0]
 80020cc:	d1de      	bne.n	800208c <_free_r+0x24>
 80020ce:	6818      	ldr	r0, [r3, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	4401      	add	r1, r0
 80020d4:	6011      	str	r1, [r2, #0]
 80020d6:	6053      	str	r3, [r2, #4]
 80020d8:	e7d8      	b.n	800208c <_free_r+0x24>
 80020da:	d902      	bls.n	80020e2 <_free_r+0x7a>
 80020dc:	230c      	movs	r3, #12
 80020de:	602b      	str	r3, [r5, #0]
 80020e0:	e7d4      	b.n	800208c <_free_r+0x24>
 80020e2:	6820      	ldr	r0, [r4, #0]
 80020e4:	1821      	adds	r1, r4, r0
 80020e6:	428b      	cmp	r3, r1
 80020e8:	bf01      	itttt	eq
 80020ea:	6819      	ldreq	r1, [r3, #0]
 80020ec:	685b      	ldreq	r3, [r3, #4]
 80020ee:	1809      	addeq	r1, r1, r0
 80020f0:	6021      	streq	r1, [r4, #0]
 80020f2:	6063      	str	r3, [r4, #4]
 80020f4:	6054      	str	r4, [r2, #4]
 80020f6:	e7c9      	b.n	800208c <_free_r+0x24>
 80020f8:	bd38      	pop	{r3, r4, r5, pc}
 80020fa:	bf00      	nop
 80020fc:	20000150 	.word	0x20000150

08002100 <_malloc_r>:
 8002100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002102:	1ccd      	adds	r5, r1, #3
 8002104:	f025 0503 	bic.w	r5, r5, #3
 8002108:	3508      	adds	r5, #8
 800210a:	2d0c      	cmp	r5, #12
 800210c:	bf38      	it	cc
 800210e:	250c      	movcc	r5, #12
 8002110:	2d00      	cmp	r5, #0
 8002112:	4606      	mov	r6, r0
 8002114:	db01      	blt.n	800211a <_malloc_r+0x1a>
 8002116:	42a9      	cmp	r1, r5
 8002118:	d903      	bls.n	8002122 <_malloc_r+0x22>
 800211a:	230c      	movs	r3, #12
 800211c:	6033      	str	r3, [r6, #0]
 800211e:	2000      	movs	r0, #0
 8002120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002122:	f000 f891 	bl	8002248 <__malloc_lock>
 8002126:	4921      	ldr	r1, [pc, #132]	; (80021ac <_malloc_r+0xac>)
 8002128:	680a      	ldr	r2, [r1, #0]
 800212a:	4614      	mov	r4, r2
 800212c:	b99c      	cbnz	r4, 8002156 <_malloc_r+0x56>
 800212e:	4f20      	ldr	r7, [pc, #128]	; (80021b0 <_malloc_r+0xb0>)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	b923      	cbnz	r3, 800213e <_malloc_r+0x3e>
 8002134:	4621      	mov	r1, r4
 8002136:	4630      	mov	r0, r6
 8002138:	f000 f83c 	bl	80021b4 <_sbrk_r>
 800213c:	6038      	str	r0, [r7, #0]
 800213e:	4629      	mov	r1, r5
 8002140:	4630      	mov	r0, r6
 8002142:	f000 f837 	bl	80021b4 <_sbrk_r>
 8002146:	1c43      	adds	r3, r0, #1
 8002148:	d123      	bne.n	8002192 <_malloc_r+0x92>
 800214a:	230c      	movs	r3, #12
 800214c:	4630      	mov	r0, r6
 800214e:	6033      	str	r3, [r6, #0]
 8002150:	f000 f880 	bl	8002254 <__malloc_unlock>
 8002154:	e7e3      	b.n	800211e <_malloc_r+0x1e>
 8002156:	6823      	ldr	r3, [r4, #0]
 8002158:	1b5b      	subs	r3, r3, r5
 800215a:	d417      	bmi.n	800218c <_malloc_r+0x8c>
 800215c:	2b0b      	cmp	r3, #11
 800215e:	d903      	bls.n	8002168 <_malloc_r+0x68>
 8002160:	6023      	str	r3, [r4, #0]
 8002162:	441c      	add	r4, r3
 8002164:	6025      	str	r5, [r4, #0]
 8002166:	e004      	b.n	8002172 <_malloc_r+0x72>
 8002168:	6863      	ldr	r3, [r4, #4]
 800216a:	42a2      	cmp	r2, r4
 800216c:	bf0c      	ite	eq
 800216e:	600b      	streq	r3, [r1, #0]
 8002170:	6053      	strne	r3, [r2, #4]
 8002172:	4630      	mov	r0, r6
 8002174:	f000 f86e 	bl	8002254 <__malloc_unlock>
 8002178:	f104 000b 	add.w	r0, r4, #11
 800217c:	1d23      	adds	r3, r4, #4
 800217e:	f020 0007 	bic.w	r0, r0, #7
 8002182:	1ac2      	subs	r2, r0, r3
 8002184:	d0cc      	beq.n	8002120 <_malloc_r+0x20>
 8002186:	1a1b      	subs	r3, r3, r0
 8002188:	50a3      	str	r3, [r4, r2]
 800218a:	e7c9      	b.n	8002120 <_malloc_r+0x20>
 800218c:	4622      	mov	r2, r4
 800218e:	6864      	ldr	r4, [r4, #4]
 8002190:	e7cc      	b.n	800212c <_malloc_r+0x2c>
 8002192:	1cc4      	adds	r4, r0, #3
 8002194:	f024 0403 	bic.w	r4, r4, #3
 8002198:	42a0      	cmp	r0, r4
 800219a:	d0e3      	beq.n	8002164 <_malloc_r+0x64>
 800219c:	1a21      	subs	r1, r4, r0
 800219e:	4630      	mov	r0, r6
 80021a0:	f000 f808 	bl	80021b4 <_sbrk_r>
 80021a4:	3001      	adds	r0, #1
 80021a6:	d1dd      	bne.n	8002164 <_malloc_r+0x64>
 80021a8:	e7cf      	b.n	800214a <_malloc_r+0x4a>
 80021aa:	bf00      	nop
 80021ac:	20000150 	.word	0x20000150
 80021b0:	20000154 	.word	0x20000154

080021b4 <_sbrk_r>:
 80021b4:	b538      	push	{r3, r4, r5, lr}
 80021b6:	2300      	movs	r3, #0
 80021b8:	4d05      	ldr	r5, [pc, #20]	; (80021d0 <_sbrk_r+0x1c>)
 80021ba:	4604      	mov	r4, r0
 80021bc:	4608      	mov	r0, r1
 80021be:	602b      	str	r3, [r5, #0]
 80021c0:	f000 fba6 	bl	8002910 <_sbrk>
 80021c4:	1c43      	adds	r3, r0, #1
 80021c6:	d102      	bne.n	80021ce <_sbrk_r+0x1a>
 80021c8:	682b      	ldr	r3, [r5, #0]
 80021ca:	b103      	cbz	r3, 80021ce <_sbrk_r+0x1a>
 80021cc:	6023      	str	r3, [r4, #0]
 80021ce:	bd38      	pop	{r3, r4, r5, pc}
 80021d0:	20000554 	.word	0x20000554

080021d4 <siprintf>:
 80021d4:	b40e      	push	{r1, r2, r3}
 80021d6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80021da:	b500      	push	{lr}
 80021dc:	b09c      	sub	sp, #112	; 0x70
 80021de:	ab1d      	add	r3, sp, #116	; 0x74
 80021e0:	9002      	str	r0, [sp, #8]
 80021e2:	9006      	str	r0, [sp, #24]
 80021e4:	9107      	str	r1, [sp, #28]
 80021e6:	9104      	str	r1, [sp, #16]
 80021e8:	4808      	ldr	r0, [pc, #32]	; (800220c <siprintf+0x38>)
 80021ea:	4909      	ldr	r1, [pc, #36]	; (8002210 <siprintf+0x3c>)
 80021ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80021f0:	9105      	str	r1, [sp, #20]
 80021f2:	6800      	ldr	r0, [r0, #0]
 80021f4:	a902      	add	r1, sp, #8
 80021f6:	9301      	str	r3, [sp, #4]
 80021f8:	f000 f88e 	bl	8002318 <_svfiprintf_r>
 80021fc:	2200      	movs	r2, #0
 80021fe:	9b02      	ldr	r3, [sp, #8]
 8002200:	701a      	strb	r2, [r3, #0]
 8002202:	b01c      	add	sp, #112	; 0x70
 8002204:	f85d eb04 	ldr.w	lr, [sp], #4
 8002208:	b003      	add	sp, #12
 800220a:	4770      	bx	lr
 800220c:	20000010 	.word	0x20000010
 8002210:	ffff0208 	.word	0xffff0208

08002214 <strcpy>:
 8002214:	4603      	mov	r3, r0
 8002216:	f811 2b01 	ldrb.w	r2, [r1], #1
 800221a:	f803 2b01 	strb.w	r2, [r3], #1
 800221e:	2a00      	cmp	r2, #0
 8002220:	d1f9      	bne.n	8002216 <strcpy+0x2>
 8002222:	4770      	bx	lr

08002224 <strncmp>:
 8002224:	b510      	push	{r4, lr}
 8002226:	b16a      	cbz	r2, 8002244 <strncmp+0x20>
 8002228:	3901      	subs	r1, #1
 800222a:	1884      	adds	r4, r0, r2
 800222c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002230:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8002234:	4293      	cmp	r3, r2
 8002236:	d103      	bne.n	8002240 <strncmp+0x1c>
 8002238:	42a0      	cmp	r0, r4
 800223a:	d001      	beq.n	8002240 <strncmp+0x1c>
 800223c:	2b00      	cmp	r3, #0
 800223e:	d1f5      	bne.n	800222c <strncmp+0x8>
 8002240:	1a98      	subs	r0, r3, r2
 8002242:	bd10      	pop	{r4, pc}
 8002244:	4610      	mov	r0, r2
 8002246:	e7fc      	b.n	8002242 <strncmp+0x1e>

08002248 <__malloc_lock>:
 8002248:	4801      	ldr	r0, [pc, #4]	; (8002250 <__malloc_lock+0x8>)
 800224a:	f000 bafb 	b.w	8002844 <__retarget_lock_acquire_recursive>
 800224e:	bf00      	nop
 8002250:	2000055c 	.word	0x2000055c

08002254 <__malloc_unlock>:
 8002254:	4801      	ldr	r0, [pc, #4]	; (800225c <__malloc_unlock+0x8>)
 8002256:	f000 baf6 	b.w	8002846 <__retarget_lock_release_recursive>
 800225a:	bf00      	nop
 800225c:	2000055c 	.word	0x2000055c

08002260 <__ssputs_r>:
 8002260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002264:	688e      	ldr	r6, [r1, #8]
 8002266:	4682      	mov	sl, r0
 8002268:	429e      	cmp	r6, r3
 800226a:	460c      	mov	r4, r1
 800226c:	4690      	mov	r8, r2
 800226e:	461f      	mov	r7, r3
 8002270:	d838      	bhi.n	80022e4 <__ssputs_r+0x84>
 8002272:	898a      	ldrh	r2, [r1, #12]
 8002274:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002278:	d032      	beq.n	80022e0 <__ssputs_r+0x80>
 800227a:	6825      	ldr	r5, [r4, #0]
 800227c:	6909      	ldr	r1, [r1, #16]
 800227e:	3301      	adds	r3, #1
 8002280:	eba5 0901 	sub.w	r9, r5, r1
 8002284:	6965      	ldr	r5, [r4, #20]
 8002286:	444b      	add	r3, r9
 8002288:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800228c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002290:	106d      	asrs	r5, r5, #1
 8002292:	429d      	cmp	r5, r3
 8002294:	bf38      	it	cc
 8002296:	461d      	movcc	r5, r3
 8002298:	0553      	lsls	r3, r2, #21
 800229a:	d531      	bpl.n	8002300 <__ssputs_r+0xa0>
 800229c:	4629      	mov	r1, r5
 800229e:	f7ff ff2f 	bl	8002100 <_malloc_r>
 80022a2:	4606      	mov	r6, r0
 80022a4:	b950      	cbnz	r0, 80022bc <__ssputs_r+0x5c>
 80022a6:	230c      	movs	r3, #12
 80022a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022ac:	f8ca 3000 	str.w	r3, [sl]
 80022b0:	89a3      	ldrh	r3, [r4, #12]
 80022b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022b6:	81a3      	strh	r3, [r4, #12]
 80022b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022bc:	464a      	mov	r2, r9
 80022be:	6921      	ldr	r1, [r4, #16]
 80022c0:	f000 fad0 	bl	8002864 <memcpy>
 80022c4:	89a3      	ldrh	r3, [r4, #12]
 80022c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80022ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022ce:	81a3      	strh	r3, [r4, #12]
 80022d0:	6126      	str	r6, [r4, #16]
 80022d2:	444e      	add	r6, r9
 80022d4:	6026      	str	r6, [r4, #0]
 80022d6:	463e      	mov	r6, r7
 80022d8:	6165      	str	r5, [r4, #20]
 80022da:	eba5 0509 	sub.w	r5, r5, r9
 80022de:	60a5      	str	r5, [r4, #8]
 80022e0:	42be      	cmp	r6, r7
 80022e2:	d900      	bls.n	80022e6 <__ssputs_r+0x86>
 80022e4:	463e      	mov	r6, r7
 80022e6:	4632      	mov	r2, r6
 80022e8:	4641      	mov	r1, r8
 80022ea:	6820      	ldr	r0, [r4, #0]
 80022ec:	f000 fac8 	bl	8002880 <memmove>
 80022f0:	68a3      	ldr	r3, [r4, #8]
 80022f2:	6822      	ldr	r2, [r4, #0]
 80022f4:	1b9b      	subs	r3, r3, r6
 80022f6:	4432      	add	r2, r6
 80022f8:	2000      	movs	r0, #0
 80022fa:	60a3      	str	r3, [r4, #8]
 80022fc:	6022      	str	r2, [r4, #0]
 80022fe:	e7db      	b.n	80022b8 <__ssputs_r+0x58>
 8002300:	462a      	mov	r2, r5
 8002302:	f000 fad7 	bl	80028b4 <_realloc_r>
 8002306:	4606      	mov	r6, r0
 8002308:	2800      	cmp	r0, #0
 800230a:	d1e1      	bne.n	80022d0 <__ssputs_r+0x70>
 800230c:	4650      	mov	r0, sl
 800230e:	6921      	ldr	r1, [r4, #16]
 8002310:	f7ff feaa 	bl	8002068 <_free_r>
 8002314:	e7c7      	b.n	80022a6 <__ssputs_r+0x46>
	...

08002318 <_svfiprintf_r>:
 8002318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800231c:	4698      	mov	r8, r3
 800231e:	898b      	ldrh	r3, [r1, #12]
 8002320:	4607      	mov	r7, r0
 8002322:	061b      	lsls	r3, r3, #24
 8002324:	460d      	mov	r5, r1
 8002326:	4614      	mov	r4, r2
 8002328:	b09d      	sub	sp, #116	; 0x74
 800232a:	d50e      	bpl.n	800234a <_svfiprintf_r+0x32>
 800232c:	690b      	ldr	r3, [r1, #16]
 800232e:	b963      	cbnz	r3, 800234a <_svfiprintf_r+0x32>
 8002330:	2140      	movs	r1, #64	; 0x40
 8002332:	f7ff fee5 	bl	8002100 <_malloc_r>
 8002336:	6028      	str	r0, [r5, #0]
 8002338:	6128      	str	r0, [r5, #16]
 800233a:	b920      	cbnz	r0, 8002346 <_svfiprintf_r+0x2e>
 800233c:	230c      	movs	r3, #12
 800233e:	603b      	str	r3, [r7, #0]
 8002340:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002344:	e0d1      	b.n	80024ea <_svfiprintf_r+0x1d2>
 8002346:	2340      	movs	r3, #64	; 0x40
 8002348:	616b      	str	r3, [r5, #20]
 800234a:	2300      	movs	r3, #0
 800234c:	9309      	str	r3, [sp, #36]	; 0x24
 800234e:	2320      	movs	r3, #32
 8002350:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002354:	2330      	movs	r3, #48	; 0x30
 8002356:	f04f 0901 	mov.w	r9, #1
 800235a:	f8cd 800c 	str.w	r8, [sp, #12]
 800235e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002504 <_svfiprintf_r+0x1ec>
 8002362:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002366:	4623      	mov	r3, r4
 8002368:	469a      	mov	sl, r3
 800236a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800236e:	b10a      	cbz	r2, 8002374 <_svfiprintf_r+0x5c>
 8002370:	2a25      	cmp	r2, #37	; 0x25
 8002372:	d1f9      	bne.n	8002368 <_svfiprintf_r+0x50>
 8002374:	ebba 0b04 	subs.w	fp, sl, r4
 8002378:	d00b      	beq.n	8002392 <_svfiprintf_r+0x7a>
 800237a:	465b      	mov	r3, fp
 800237c:	4622      	mov	r2, r4
 800237e:	4629      	mov	r1, r5
 8002380:	4638      	mov	r0, r7
 8002382:	f7ff ff6d 	bl	8002260 <__ssputs_r>
 8002386:	3001      	adds	r0, #1
 8002388:	f000 80aa 	beq.w	80024e0 <_svfiprintf_r+0x1c8>
 800238c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800238e:	445a      	add	r2, fp
 8002390:	9209      	str	r2, [sp, #36]	; 0x24
 8002392:	f89a 3000 	ldrb.w	r3, [sl]
 8002396:	2b00      	cmp	r3, #0
 8002398:	f000 80a2 	beq.w	80024e0 <_svfiprintf_r+0x1c8>
 800239c:	2300      	movs	r3, #0
 800239e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80023a6:	f10a 0a01 	add.w	sl, sl, #1
 80023aa:	9304      	str	r3, [sp, #16]
 80023ac:	9307      	str	r3, [sp, #28]
 80023ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80023b2:	931a      	str	r3, [sp, #104]	; 0x68
 80023b4:	4654      	mov	r4, sl
 80023b6:	2205      	movs	r2, #5
 80023b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80023bc:	4851      	ldr	r0, [pc, #324]	; (8002504 <_svfiprintf_r+0x1ec>)
 80023be:	f000 fa43 	bl	8002848 <memchr>
 80023c2:	9a04      	ldr	r2, [sp, #16]
 80023c4:	b9d8      	cbnz	r0, 80023fe <_svfiprintf_r+0xe6>
 80023c6:	06d0      	lsls	r0, r2, #27
 80023c8:	bf44      	itt	mi
 80023ca:	2320      	movmi	r3, #32
 80023cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80023d0:	0711      	lsls	r1, r2, #28
 80023d2:	bf44      	itt	mi
 80023d4:	232b      	movmi	r3, #43	; 0x2b
 80023d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80023da:	f89a 3000 	ldrb.w	r3, [sl]
 80023de:	2b2a      	cmp	r3, #42	; 0x2a
 80023e0:	d015      	beq.n	800240e <_svfiprintf_r+0xf6>
 80023e2:	4654      	mov	r4, sl
 80023e4:	2000      	movs	r0, #0
 80023e6:	f04f 0c0a 	mov.w	ip, #10
 80023ea:	9a07      	ldr	r2, [sp, #28]
 80023ec:	4621      	mov	r1, r4
 80023ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80023f2:	3b30      	subs	r3, #48	; 0x30
 80023f4:	2b09      	cmp	r3, #9
 80023f6:	d94e      	bls.n	8002496 <_svfiprintf_r+0x17e>
 80023f8:	b1b0      	cbz	r0, 8002428 <_svfiprintf_r+0x110>
 80023fa:	9207      	str	r2, [sp, #28]
 80023fc:	e014      	b.n	8002428 <_svfiprintf_r+0x110>
 80023fe:	eba0 0308 	sub.w	r3, r0, r8
 8002402:	fa09 f303 	lsl.w	r3, r9, r3
 8002406:	4313      	orrs	r3, r2
 8002408:	46a2      	mov	sl, r4
 800240a:	9304      	str	r3, [sp, #16]
 800240c:	e7d2      	b.n	80023b4 <_svfiprintf_r+0x9c>
 800240e:	9b03      	ldr	r3, [sp, #12]
 8002410:	1d19      	adds	r1, r3, #4
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	9103      	str	r1, [sp, #12]
 8002416:	2b00      	cmp	r3, #0
 8002418:	bfbb      	ittet	lt
 800241a:	425b      	neglt	r3, r3
 800241c:	f042 0202 	orrlt.w	r2, r2, #2
 8002420:	9307      	strge	r3, [sp, #28]
 8002422:	9307      	strlt	r3, [sp, #28]
 8002424:	bfb8      	it	lt
 8002426:	9204      	strlt	r2, [sp, #16]
 8002428:	7823      	ldrb	r3, [r4, #0]
 800242a:	2b2e      	cmp	r3, #46	; 0x2e
 800242c:	d10c      	bne.n	8002448 <_svfiprintf_r+0x130>
 800242e:	7863      	ldrb	r3, [r4, #1]
 8002430:	2b2a      	cmp	r3, #42	; 0x2a
 8002432:	d135      	bne.n	80024a0 <_svfiprintf_r+0x188>
 8002434:	9b03      	ldr	r3, [sp, #12]
 8002436:	3402      	adds	r4, #2
 8002438:	1d1a      	adds	r2, r3, #4
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	9203      	str	r2, [sp, #12]
 800243e:	2b00      	cmp	r3, #0
 8002440:	bfb8      	it	lt
 8002442:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002446:	9305      	str	r3, [sp, #20]
 8002448:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002514 <_svfiprintf_r+0x1fc>
 800244c:	2203      	movs	r2, #3
 800244e:	4650      	mov	r0, sl
 8002450:	7821      	ldrb	r1, [r4, #0]
 8002452:	f000 f9f9 	bl	8002848 <memchr>
 8002456:	b140      	cbz	r0, 800246a <_svfiprintf_r+0x152>
 8002458:	2340      	movs	r3, #64	; 0x40
 800245a:	eba0 000a 	sub.w	r0, r0, sl
 800245e:	fa03 f000 	lsl.w	r0, r3, r0
 8002462:	9b04      	ldr	r3, [sp, #16]
 8002464:	3401      	adds	r4, #1
 8002466:	4303      	orrs	r3, r0
 8002468:	9304      	str	r3, [sp, #16]
 800246a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800246e:	2206      	movs	r2, #6
 8002470:	4825      	ldr	r0, [pc, #148]	; (8002508 <_svfiprintf_r+0x1f0>)
 8002472:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002476:	f000 f9e7 	bl	8002848 <memchr>
 800247a:	2800      	cmp	r0, #0
 800247c:	d038      	beq.n	80024f0 <_svfiprintf_r+0x1d8>
 800247e:	4b23      	ldr	r3, [pc, #140]	; (800250c <_svfiprintf_r+0x1f4>)
 8002480:	bb1b      	cbnz	r3, 80024ca <_svfiprintf_r+0x1b2>
 8002482:	9b03      	ldr	r3, [sp, #12]
 8002484:	3307      	adds	r3, #7
 8002486:	f023 0307 	bic.w	r3, r3, #7
 800248a:	3308      	adds	r3, #8
 800248c:	9303      	str	r3, [sp, #12]
 800248e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002490:	4433      	add	r3, r6
 8002492:	9309      	str	r3, [sp, #36]	; 0x24
 8002494:	e767      	b.n	8002366 <_svfiprintf_r+0x4e>
 8002496:	460c      	mov	r4, r1
 8002498:	2001      	movs	r0, #1
 800249a:	fb0c 3202 	mla	r2, ip, r2, r3
 800249e:	e7a5      	b.n	80023ec <_svfiprintf_r+0xd4>
 80024a0:	2300      	movs	r3, #0
 80024a2:	f04f 0c0a 	mov.w	ip, #10
 80024a6:	4619      	mov	r1, r3
 80024a8:	3401      	adds	r4, #1
 80024aa:	9305      	str	r3, [sp, #20]
 80024ac:	4620      	mov	r0, r4
 80024ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80024b2:	3a30      	subs	r2, #48	; 0x30
 80024b4:	2a09      	cmp	r2, #9
 80024b6:	d903      	bls.n	80024c0 <_svfiprintf_r+0x1a8>
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d0c5      	beq.n	8002448 <_svfiprintf_r+0x130>
 80024bc:	9105      	str	r1, [sp, #20]
 80024be:	e7c3      	b.n	8002448 <_svfiprintf_r+0x130>
 80024c0:	4604      	mov	r4, r0
 80024c2:	2301      	movs	r3, #1
 80024c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80024c8:	e7f0      	b.n	80024ac <_svfiprintf_r+0x194>
 80024ca:	ab03      	add	r3, sp, #12
 80024cc:	9300      	str	r3, [sp, #0]
 80024ce:	462a      	mov	r2, r5
 80024d0:	4638      	mov	r0, r7
 80024d2:	4b0f      	ldr	r3, [pc, #60]	; (8002510 <_svfiprintf_r+0x1f8>)
 80024d4:	a904      	add	r1, sp, #16
 80024d6:	f3af 8000 	nop.w
 80024da:	1c42      	adds	r2, r0, #1
 80024dc:	4606      	mov	r6, r0
 80024de:	d1d6      	bne.n	800248e <_svfiprintf_r+0x176>
 80024e0:	89ab      	ldrh	r3, [r5, #12]
 80024e2:	065b      	lsls	r3, r3, #25
 80024e4:	f53f af2c 	bmi.w	8002340 <_svfiprintf_r+0x28>
 80024e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80024ea:	b01d      	add	sp, #116	; 0x74
 80024ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024f0:	ab03      	add	r3, sp, #12
 80024f2:	9300      	str	r3, [sp, #0]
 80024f4:	462a      	mov	r2, r5
 80024f6:	4638      	mov	r0, r7
 80024f8:	4b05      	ldr	r3, [pc, #20]	; (8002510 <_svfiprintf_r+0x1f8>)
 80024fa:	a904      	add	r1, sp, #16
 80024fc:	f000 f87c 	bl	80025f8 <_printf_i>
 8002500:	e7eb      	b.n	80024da <_svfiprintf_r+0x1c2>
 8002502:	bf00      	nop
 8002504:	08002991 	.word	0x08002991
 8002508:	0800299b 	.word	0x0800299b
 800250c:	00000000 	.word	0x00000000
 8002510:	08002261 	.word	0x08002261
 8002514:	08002997 	.word	0x08002997

08002518 <_printf_common>:
 8002518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800251c:	4616      	mov	r6, r2
 800251e:	4699      	mov	r9, r3
 8002520:	688a      	ldr	r2, [r1, #8]
 8002522:	690b      	ldr	r3, [r1, #16]
 8002524:	4607      	mov	r7, r0
 8002526:	4293      	cmp	r3, r2
 8002528:	bfb8      	it	lt
 800252a:	4613      	movlt	r3, r2
 800252c:	6033      	str	r3, [r6, #0]
 800252e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002532:	460c      	mov	r4, r1
 8002534:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002538:	b10a      	cbz	r2, 800253e <_printf_common+0x26>
 800253a:	3301      	adds	r3, #1
 800253c:	6033      	str	r3, [r6, #0]
 800253e:	6823      	ldr	r3, [r4, #0]
 8002540:	0699      	lsls	r1, r3, #26
 8002542:	bf42      	ittt	mi
 8002544:	6833      	ldrmi	r3, [r6, #0]
 8002546:	3302      	addmi	r3, #2
 8002548:	6033      	strmi	r3, [r6, #0]
 800254a:	6825      	ldr	r5, [r4, #0]
 800254c:	f015 0506 	ands.w	r5, r5, #6
 8002550:	d106      	bne.n	8002560 <_printf_common+0x48>
 8002552:	f104 0a19 	add.w	sl, r4, #25
 8002556:	68e3      	ldr	r3, [r4, #12]
 8002558:	6832      	ldr	r2, [r6, #0]
 800255a:	1a9b      	subs	r3, r3, r2
 800255c:	42ab      	cmp	r3, r5
 800255e:	dc28      	bgt.n	80025b2 <_printf_common+0x9a>
 8002560:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002564:	1e13      	subs	r3, r2, #0
 8002566:	6822      	ldr	r2, [r4, #0]
 8002568:	bf18      	it	ne
 800256a:	2301      	movne	r3, #1
 800256c:	0692      	lsls	r2, r2, #26
 800256e:	d42d      	bmi.n	80025cc <_printf_common+0xb4>
 8002570:	4649      	mov	r1, r9
 8002572:	4638      	mov	r0, r7
 8002574:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002578:	47c0      	blx	r8
 800257a:	3001      	adds	r0, #1
 800257c:	d020      	beq.n	80025c0 <_printf_common+0xa8>
 800257e:	6823      	ldr	r3, [r4, #0]
 8002580:	68e5      	ldr	r5, [r4, #12]
 8002582:	f003 0306 	and.w	r3, r3, #6
 8002586:	2b04      	cmp	r3, #4
 8002588:	bf18      	it	ne
 800258a:	2500      	movne	r5, #0
 800258c:	6832      	ldr	r2, [r6, #0]
 800258e:	f04f 0600 	mov.w	r6, #0
 8002592:	68a3      	ldr	r3, [r4, #8]
 8002594:	bf08      	it	eq
 8002596:	1aad      	subeq	r5, r5, r2
 8002598:	6922      	ldr	r2, [r4, #16]
 800259a:	bf08      	it	eq
 800259c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80025a0:	4293      	cmp	r3, r2
 80025a2:	bfc4      	itt	gt
 80025a4:	1a9b      	subgt	r3, r3, r2
 80025a6:	18ed      	addgt	r5, r5, r3
 80025a8:	341a      	adds	r4, #26
 80025aa:	42b5      	cmp	r5, r6
 80025ac:	d11a      	bne.n	80025e4 <_printf_common+0xcc>
 80025ae:	2000      	movs	r0, #0
 80025b0:	e008      	b.n	80025c4 <_printf_common+0xac>
 80025b2:	2301      	movs	r3, #1
 80025b4:	4652      	mov	r2, sl
 80025b6:	4649      	mov	r1, r9
 80025b8:	4638      	mov	r0, r7
 80025ba:	47c0      	blx	r8
 80025bc:	3001      	adds	r0, #1
 80025be:	d103      	bne.n	80025c8 <_printf_common+0xb0>
 80025c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025c8:	3501      	adds	r5, #1
 80025ca:	e7c4      	b.n	8002556 <_printf_common+0x3e>
 80025cc:	2030      	movs	r0, #48	; 0x30
 80025ce:	18e1      	adds	r1, r4, r3
 80025d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80025d4:	1c5a      	adds	r2, r3, #1
 80025d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80025da:	4422      	add	r2, r4
 80025dc:	3302      	adds	r3, #2
 80025de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80025e2:	e7c5      	b.n	8002570 <_printf_common+0x58>
 80025e4:	2301      	movs	r3, #1
 80025e6:	4622      	mov	r2, r4
 80025e8:	4649      	mov	r1, r9
 80025ea:	4638      	mov	r0, r7
 80025ec:	47c0      	blx	r8
 80025ee:	3001      	adds	r0, #1
 80025f0:	d0e6      	beq.n	80025c0 <_printf_common+0xa8>
 80025f2:	3601      	adds	r6, #1
 80025f4:	e7d9      	b.n	80025aa <_printf_common+0x92>
	...

080025f8 <_printf_i>:
 80025f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80025fc:	460c      	mov	r4, r1
 80025fe:	7e27      	ldrb	r7, [r4, #24]
 8002600:	4691      	mov	r9, r2
 8002602:	2f78      	cmp	r7, #120	; 0x78
 8002604:	4680      	mov	r8, r0
 8002606:	469a      	mov	sl, r3
 8002608:	990c      	ldr	r1, [sp, #48]	; 0x30
 800260a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800260e:	d807      	bhi.n	8002620 <_printf_i+0x28>
 8002610:	2f62      	cmp	r7, #98	; 0x62
 8002612:	d80a      	bhi.n	800262a <_printf_i+0x32>
 8002614:	2f00      	cmp	r7, #0
 8002616:	f000 80d9 	beq.w	80027cc <_printf_i+0x1d4>
 800261a:	2f58      	cmp	r7, #88	; 0x58
 800261c:	f000 80a4 	beq.w	8002768 <_printf_i+0x170>
 8002620:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002624:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002628:	e03a      	b.n	80026a0 <_printf_i+0xa8>
 800262a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800262e:	2b15      	cmp	r3, #21
 8002630:	d8f6      	bhi.n	8002620 <_printf_i+0x28>
 8002632:	a001      	add	r0, pc, #4	; (adr r0, 8002638 <_printf_i+0x40>)
 8002634:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002638:	08002691 	.word	0x08002691
 800263c:	080026a5 	.word	0x080026a5
 8002640:	08002621 	.word	0x08002621
 8002644:	08002621 	.word	0x08002621
 8002648:	08002621 	.word	0x08002621
 800264c:	08002621 	.word	0x08002621
 8002650:	080026a5 	.word	0x080026a5
 8002654:	08002621 	.word	0x08002621
 8002658:	08002621 	.word	0x08002621
 800265c:	08002621 	.word	0x08002621
 8002660:	08002621 	.word	0x08002621
 8002664:	080027b3 	.word	0x080027b3
 8002668:	080026d5 	.word	0x080026d5
 800266c:	08002795 	.word	0x08002795
 8002670:	08002621 	.word	0x08002621
 8002674:	08002621 	.word	0x08002621
 8002678:	080027d5 	.word	0x080027d5
 800267c:	08002621 	.word	0x08002621
 8002680:	080026d5 	.word	0x080026d5
 8002684:	08002621 	.word	0x08002621
 8002688:	08002621 	.word	0x08002621
 800268c:	0800279d 	.word	0x0800279d
 8002690:	680b      	ldr	r3, [r1, #0]
 8002692:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002696:	1d1a      	adds	r2, r3, #4
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	600a      	str	r2, [r1, #0]
 800269c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80026a0:	2301      	movs	r3, #1
 80026a2:	e0a4      	b.n	80027ee <_printf_i+0x1f6>
 80026a4:	6825      	ldr	r5, [r4, #0]
 80026a6:	6808      	ldr	r0, [r1, #0]
 80026a8:	062e      	lsls	r6, r5, #24
 80026aa:	f100 0304 	add.w	r3, r0, #4
 80026ae:	d50a      	bpl.n	80026c6 <_printf_i+0xce>
 80026b0:	6805      	ldr	r5, [r0, #0]
 80026b2:	600b      	str	r3, [r1, #0]
 80026b4:	2d00      	cmp	r5, #0
 80026b6:	da03      	bge.n	80026c0 <_printf_i+0xc8>
 80026b8:	232d      	movs	r3, #45	; 0x2d
 80026ba:	426d      	negs	r5, r5
 80026bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80026c0:	230a      	movs	r3, #10
 80026c2:	485e      	ldr	r0, [pc, #376]	; (800283c <_printf_i+0x244>)
 80026c4:	e019      	b.n	80026fa <_printf_i+0x102>
 80026c6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80026ca:	6805      	ldr	r5, [r0, #0]
 80026cc:	600b      	str	r3, [r1, #0]
 80026ce:	bf18      	it	ne
 80026d0:	b22d      	sxthne	r5, r5
 80026d2:	e7ef      	b.n	80026b4 <_printf_i+0xbc>
 80026d4:	680b      	ldr	r3, [r1, #0]
 80026d6:	6825      	ldr	r5, [r4, #0]
 80026d8:	1d18      	adds	r0, r3, #4
 80026da:	6008      	str	r0, [r1, #0]
 80026dc:	0628      	lsls	r0, r5, #24
 80026de:	d501      	bpl.n	80026e4 <_printf_i+0xec>
 80026e0:	681d      	ldr	r5, [r3, #0]
 80026e2:	e002      	b.n	80026ea <_printf_i+0xf2>
 80026e4:	0669      	lsls	r1, r5, #25
 80026e6:	d5fb      	bpl.n	80026e0 <_printf_i+0xe8>
 80026e8:	881d      	ldrh	r5, [r3, #0]
 80026ea:	2f6f      	cmp	r7, #111	; 0x6f
 80026ec:	bf0c      	ite	eq
 80026ee:	2308      	moveq	r3, #8
 80026f0:	230a      	movne	r3, #10
 80026f2:	4852      	ldr	r0, [pc, #328]	; (800283c <_printf_i+0x244>)
 80026f4:	2100      	movs	r1, #0
 80026f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80026fa:	6866      	ldr	r6, [r4, #4]
 80026fc:	2e00      	cmp	r6, #0
 80026fe:	bfa8      	it	ge
 8002700:	6821      	ldrge	r1, [r4, #0]
 8002702:	60a6      	str	r6, [r4, #8]
 8002704:	bfa4      	itt	ge
 8002706:	f021 0104 	bicge.w	r1, r1, #4
 800270a:	6021      	strge	r1, [r4, #0]
 800270c:	b90d      	cbnz	r5, 8002712 <_printf_i+0x11a>
 800270e:	2e00      	cmp	r6, #0
 8002710:	d04d      	beq.n	80027ae <_printf_i+0x1b6>
 8002712:	4616      	mov	r6, r2
 8002714:	fbb5 f1f3 	udiv	r1, r5, r3
 8002718:	fb03 5711 	mls	r7, r3, r1, r5
 800271c:	5dc7      	ldrb	r7, [r0, r7]
 800271e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002722:	462f      	mov	r7, r5
 8002724:	42bb      	cmp	r3, r7
 8002726:	460d      	mov	r5, r1
 8002728:	d9f4      	bls.n	8002714 <_printf_i+0x11c>
 800272a:	2b08      	cmp	r3, #8
 800272c:	d10b      	bne.n	8002746 <_printf_i+0x14e>
 800272e:	6823      	ldr	r3, [r4, #0]
 8002730:	07df      	lsls	r7, r3, #31
 8002732:	d508      	bpl.n	8002746 <_printf_i+0x14e>
 8002734:	6923      	ldr	r3, [r4, #16]
 8002736:	6861      	ldr	r1, [r4, #4]
 8002738:	4299      	cmp	r1, r3
 800273a:	bfde      	ittt	le
 800273c:	2330      	movle	r3, #48	; 0x30
 800273e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002742:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8002746:	1b92      	subs	r2, r2, r6
 8002748:	6122      	str	r2, [r4, #16]
 800274a:	464b      	mov	r3, r9
 800274c:	4621      	mov	r1, r4
 800274e:	4640      	mov	r0, r8
 8002750:	f8cd a000 	str.w	sl, [sp]
 8002754:	aa03      	add	r2, sp, #12
 8002756:	f7ff fedf 	bl	8002518 <_printf_common>
 800275a:	3001      	adds	r0, #1
 800275c:	d14c      	bne.n	80027f8 <_printf_i+0x200>
 800275e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002762:	b004      	add	sp, #16
 8002764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002768:	4834      	ldr	r0, [pc, #208]	; (800283c <_printf_i+0x244>)
 800276a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800276e:	680e      	ldr	r6, [r1, #0]
 8002770:	6823      	ldr	r3, [r4, #0]
 8002772:	f856 5b04 	ldr.w	r5, [r6], #4
 8002776:	061f      	lsls	r7, r3, #24
 8002778:	600e      	str	r6, [r1, #0]
 800277a:	d514      	bpl.n	80027a6 <_printf_i+0x1ae>
 800277c:	07d9      	lsls	r1, r3, #31
 800277e:	bf44      	itt	mi
 8002780:	f043 0320 	orrmi.w	r3, r3, #32
 8002784:	6023      	strmi	r3, [r4, #0]
 8002786:	b91d      	cbnz	r5, 8002790 <_printf_i+0x198>
 8002788:	6823      	ldr	r3, [r4, #0]
 800278a:	f023 0320 	bic.w	r3, r3, #32
 800278e:	6023      	str	r3, [r4, #0]
 8002790:	2310      	movs	r3, #16
 8002792:	e7af      	b.n	80026f4 <_printf_i+0xfc>
 8002794:	6823      	ldr	r3, [r4, #0]
 8002796:	f043 0320 	orr.w	r3, r3, #32
 800279a:	6023      	str	r3, [r4, #0]
 800279c:	2378      	movs	r3, #120	; 0x78
 800279e:	4828      	ldr	r0, [pc, #160]	; (8002840 <_printf_i+0x248>)
 80027a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80027a4:	e7e3      	b.n	800276e <_printf_i+0x176>
 80027a6:	065e      	lsls	r6, r3, #25
 80027a8:	bf48      	it	mi
 80027aa:	b2ad      	uxthmi	r5, r5
 80027ac:	e7e6      	b.n	800277c <_printf_i+0x184>
 80027ae:	4616      	mov	r6, r2
 80027b0:	e7bb      	b.n	800272a <_printf_i+0x132>
 80027b2:	680b      	ldr	r3, [r1, #0]
 80027b4:	6826      	ldr	r6, [r4, #0]
 80027b6:	1d1d      	adds	r5, r3, #4
 80027b8:	6960      	ldr	r0, [r4, #20]
 80027ba:	600d      	str	r5, [r1, #0]
 80027bc:	0635      	lsls	r5, r6, #24
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	d501      	bpl.n	80027c6 <_printf_i+0x1ce>
 80027c2:	6018      	str	r0, [r3, #0]
 80027c4:	e002      	b.n	80027cc <_printf_i+0x1d4>
 80027c6:	0671      	lsls	r1, r6, #25
 80027c8:	d5fb      	bpl.n	80027c2 <_printf_i+0x1ca>
 80027ca:	8018      	strh	r0, [r3, #0]
 80027cc:	2300      	movs	r3, #0
 80027ce:	4616      	mov	r6, r2
 80027d0:	6123      	str	r3, [r4, #16]
 80027d2:	e7ba      	b.n	800274a <_printf_i+0x152>
 80027d4:	680b      	ldr	r3, [r1, #0]
 80027d6:	1d1a      	adds	r2, r3, #4
 80027d8:	600a      	str	r2, [r1, #0]
 80027da:	681e      	ldr	r6, [r3, #0]
 80027dc:	2100      	movs	r1, #0
 80027de:	4630      	mov	r0, r6
 80027e0:	6862      	ldr	r2, [r4, #4]
 80027e2:	f000 f831 	bl	8002848 <memchr>
 80027e6:	b108      	cbz	r0, 80027ec <_printf_i+0x1f4>
 80027e8:	1b80      	subs	r0, r0, r6
 80027ea:	6060      	str	r0, [r4, #4]
 80027ec:	6863      	ldr	r3, [r4, #4]
 80027ee:	6123      	str	r3, [r4, #16]
 80027f0:	2300      	movs	r3, #0
 80027f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80027f6:	e7a8      	b.n	800274a <_printf_i+0x152>
 80027f8:	4632      	mov	r2, r6
 80027fa:	4649      	mov	r1, r9
 80027fc:	4640      	mov	r0, r8
 80027fe:	6923      	ldr	r3, [r4, #16]
 8002800:	47d0      	blx	sl
 8002802:	3001      	adds	r0, #1
 8002804:	d0ab      	beq.n	800275e <_printf_i+0x166>
 8002806:	6823      	ldr	r3, [r4, #0]
 8002808:	079b      	lsls	r3, r3, #30
 800280a:	d413      	bmi.n	8002834 <_printf_i+0x23c>
 800280c:	68e0      	ldr	r0, [r4, #12]
 800280e:	9b03      	ldr	r3, [sp, #12]
 8002810:	4298      	cmp	r0, r3
 8002812:	bfb8      	it	lt
 8002814:	4618      	movlt	r0, r3
 8002816:	e7a4      	b.n	8002762 <_printf_i+0x16a>
 8002818:	2301      	movs	r3, #1
 800281a:	4632      	mov	r2, r6
 800281c:	4649      	mov	r1, r9
 800281e:	4640      	mov	r0, r8
 8002820:	47d0      	blx	sl
 8002822:	3001      	adds	r0, #1
 8002824:	d09b      	beq.n	800275e <_printf_i+0x166>
 8002826:	3501      	adds	r5, #1
 8002828:	68e3      	ldr	r3, [r4, #12]
 800282a:	9903      	ldr	r1, [sp, #12]
 800282c:	1a5b      	subs	r3, r3, r1
 800282e:	42ab      	cmp	r3, r5
 8002830:	dcf2      	bgt.n	8002818 <_printf_i+0x220>
 8002832:	e7eb      	b.n	800280c <_printf_i+0x214>
 8002834:	2500      	movs	r5, #0
 8002836:	f104 0619 	add.w	r6, r4, #25
 800283a:	e7f5      	b.n	8002828 <_printf_i+0x230>
 800283c:	080029a2 	.word	0x080029a2
 8002840:	080029b3 	.word	0x080029b3

08002844 <__retarget_lock_acquire_recursive>:
 8002844:	4770      	bx	lr

08002846 <__retarget_lock_release_recursive>:
 8002846:	4770      	bx	lr

08002848 <memchr>:
 8002848:	4603      	mov	r3, r0
 800284a:	b510      	push	{r4, lr}
 800284c:	b2c9      	uxtb	r1, r1
 800284e:	4402      	add	r2, r0
 8002850:	4293      	cmp	r3, r2
 8002852:	4618      	mov	r0, r3
 8002854:	d101      	bne.n	800285a <memchr+0x12>
 8002856:	2000      	movs	r0, #0
 8002858:	e003      	b.n	8002862 <memchr+0x1a>
 800285a:	7804      	ldrb	r4, [r0, #0]
 800285c:	3301      	adds	r3, #1
 800285e:	428c      	cmp	r4, r1
 8002860:	d1f6      	bne.n	8002850 <memchr+0x8>
 8002862:	bd10      	pop	{r4, pc}

08002864 <memcpy>:
 8002864:	440a      	add	r2, r1
 8002866:	4291      	cmp	r1, r2
 8002868:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800286c:	d100      	bne.n	8002870 <memcpy+0xc>
 800286e:	4770      	bx	lr
 8002870:	b510      	push	{r4, lr}
 8002872:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002876:	4291      	cmp	r1, r2
 8002878:	f803 4f01 	strb.w	r4, [r3, #1]!
 800287c:	d1f9      	bne.n	8002872 <memcpy+0xe>
 800287e:	bd10      	pop	{r4, pc}

08002880 <memmove>:
 8002880:	4288      	cmp	r0, r1
 8002882:	b510      	push	{r4, lr}
 8002884:	eb01 0402 	add.w	r4, r1, r2
 8002888:	d902      	bls.n	8002890 <memmove+0x10>
 800288a:	4284      	cmp	r4, r0
 800288c:	4623      	mov	r3, r4
 800288e:	d807      	bhi.n	80028a0 <memmove+0x20>
 8002890:	1e43      	subs	r3, r0, #1
 8002892:	42a1      	cmp	r1, r4
 8002894:	d008      	beq.n	80028a8 <memmove+0x28>
 8002896:	f811 2b01 	ldrb.w	r2, [r1], #1
 800289a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800289e:	e7f8      	b.n	8002892 <memmove+0x12>
 80028a0:	4601      	mov	r1, r0
 80028a2:	4402      	add	r2, r0
 80028a4:	428a      	cmp	r2, r1
 80028a6:	d100      	bne.n	80028aa <memmove+0x2a>
 80028a8:	bd10      	pop	{r4, pc}
 80028aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80028ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80028b2:	e7f7      	b.n	80028a4 <memmove+0x24>

080028b4 <_realloc_r>:
 80028b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028b6:	4607      	mov	r7, r0
 80028b8:	4614      	mov	r4, r2
 80028ba:	460e      	mov	r6, r1
 80028bc:	b921      	cbnz	r1, 80028c8 <_realloc_r+0x14>
 80028be:	4611      	mov	r1, r2
 80028c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80028c4:	f7ff bc1c 	b.w	8002100 <_malloc_r>
 80028c8:	b922      	cbnz	r2, 80028d4 <_realloc_r+0x20>
 80028ca:	f7ff fbcd 	bl	8002068 <_free_r>
 80028ce:	4625      	mov	r5, r4
 80028d0:	4628      	mov	r0, r5
 80028d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028d4:	f000 f814 	bl	8002900 <_malloc_usable_size_r>
 80028d8:	42a0      	cmp	r0, r4
 80028da:	d20f      	bcs.n	80028fc <_realloc_r+0x48>
 80028dc:	4621      	mov	r1, r4
 80028de:	4638      	mov	r0, r7
 80028e0:	f7ff fc0e 	bl	8002100 <_malloc_r>
 80028e4:	4605      	mov	r5, r0
 80028e6:	2800      	cmp	r0, #0
 80028e8:	d0f2      	beq.n	80028d0 <_realloc_r+0x1c>
 80028ea:	4631      	mov	r1, r6
 80028ec:	4622      	mov	r2, r4
 80028ee:	f7ff ffb9 	bl	8002864 <memcpy>
 80028f2:	4631      	mov	r1, r6
 80028f4:	4638      	mov	r0, r7
 80028f6:	f7ff fbb7 	bl	8002068 <_free_r>
 80028fa:	e7e9      	b.n	80028d0 <_realloc_r+0x1c>
 80028fc:	4635      	mov	r5, r6
 80028fe:	e7e7      	b.n	80028d0 <_realloc_r+0x1c>

08002900 <_malloc_usable_size_r>:
 8002900:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002904:	1f18      	subs	r0, r3, #4
 8002906:	2b00      	cmp	r3, #0
 8002908:	bfbc      	itt	lt
 800290a:	580b      	ldrlt	r3, [r1, r0]
 800290c:	18c0      	addlt	r0, r0, r3
 800290e:	4770      	bx	lr

08002910 <_sbrk>:
 8002910:	4b04      	ldr	r3, [pc, #16]	; (8002924 <_sbrk+0x14>)
 8002912:	4602      	mov	r2, r0
 8002914:	6819      	ldr	r1, [r3, #0]
 8002916:	b909      	cbnz	r1, 800291c <_sbrk+0xc>
 8002918:	4903      	ldr	r1, [pc, #12]	; (8002928 <_sbrk+0x18>)
 800291a:	6019      	str	r1, [r3, #0]
 800291c:	6818      	ldr	r0, [r3, #0]
 800291e:	4402      	add	r2, r0
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	4770      	bx	lr
 8002924:	20000158 	.word	0x20000158
 8002928:	20000568 	.word	0x20000568

0800292c <_init>:
 800292c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800292e:	bf00      	nop
 8002930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002932:	bc08      	pop	{r3}
 8002934:	469e      	mov	lr, r3
 8002936:	4770      	bx	lr

08002938 <_fini>:
 8002938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800293a:	bf00      	nop
 800293c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800293e:	bc08      	pop	{r3}
 8002940:	469e      	mov	lr, r3
 8002942:	4770      	bx	lr
