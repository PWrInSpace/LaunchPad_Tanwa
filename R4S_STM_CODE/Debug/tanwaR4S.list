
tanwaR4S.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000231c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  0800242c  0800242c  0001242c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002478  08002478  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002478  08002478  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002478  08002478  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002478  08002478  00012478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800247c  0800247c  0001247c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002480  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f4  20000070  080024f0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000564  080024f0  00020564  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010142  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e76  00000000  00000000  000301db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000930  00000000  00000000  00033058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c80  00000000  00000000  00033988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005d5a  00000000  00000000  00034608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f95b  00000000  00000000  0003a362  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a554  00000000  00000000  00049cbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d4211  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000018dc  00000000  00000000  000d4264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000076cd  00000000  00000000  000d5b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08002414 	.word	0x08002414

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08002414 	.word	0x08002414

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <_ZN7IgniterC1EP12GPIO_TypeDeftS1_t>:
#include <Igniter.hh>

//(names of args start with '_' sign)
Igniter::Igniter(GPIO_TypeDef* _GPIO_PORT_IGNITER, uint16_t _PIN_IGNITER, GPIO_TypeDef* _IGN_GPIO_PORT_TEST_CON, uint16_t _IGN_PIN_TEST_CON){
 8000160:	b480      	push	{r7}
 8000162:	b085      	sub	sp, #20
 8000164:	af00      	add	r7, sp, #0
 8000166:	60f8      	str	r0, [r7, #12]
 8000168:	60b9      	str	r1, [r7, #8]
 800016a:	603b      	str	r3, [r7, #0]
 800016c:	4613      	mov	r3, r2
 800016e:	80fb      	strh	r3, [r7, #6]
	GPIO_PORT_IGNITER = _GPIO_PORT_IGNITER;
 8000170:	68fb      	ldr	r3, [r7, #12]
 8000172:	68ba      	ldr	r2, [r7, #8]
 8000174:	601a      	str	r2, [r3, #0]
	PIN_IGNITER = _PIN_IGNITER;
 8000176:	68fb      	ldr	r3, [r7, #12]
 8000178:	88fa      	ldrh	r2, [r7, #6]
 800017a:	809a      	strh	r2, [r3, #4]
	GPIO_PORT_TEST_CON = _IGN_GPIO_PORT_TEST_CON;
 800017c:	68fb      	ldr	r3, [r7, #12]
 800017e:	683a      	ldr	r2, [r7, #0]
 8000180:	609a      	str	r2, [r3, #8]
	PIN_TEST_CON = _IGN_PIN_TEST_CON;
 8000182:	68fb      	ldr	r3, [r7, #12]
 8000184:	8b3a      	ldrh	r2, [r7, #24]
 8000186:	819a      	strh	r2, [r3, #12]
}
 8000188:	68fb      	ldr	r3, [r7, #12]
 800018a:	4618      	mov	r0, r3
 800018c:	3714      	adds	r7, #20
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr

08000194 <_ZNK7Igniter12is_connectedEv>:

bool Igniter::is_connected() const{
 8000194:	b580      	push	{r7, lr}
 8000196:	b082      	sub	sp, #8
 8000198:	af00      	add	r7, sp, #0
 800019a:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(GPIO_PORT_TEST_CON, PIN_TEST_CON) == GPIO_PIN_SET)
 800019c:	687b      	ldr	r3, [r7, #4]
 800019e:	689a      	ldr	r2, [r3, #8]
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	899b      	ldrh	r3, [r3, #12]
 80001a4:	4619      	mov	r1, r3
 80001a6:	4610      	mov	r0, r2
 80001a8:	f001 f87e 	bl	80012a8 <HAL_GPIO_ReadPin>
 80001ac:	4603      	mov	r3, r0
 80001ae:	2b01      	cmp	r3, #1
 80001b0:	bf0c      	ite	eq
 80001b2:	2301      	moveq	r3, #1
 80001b4:	2300      	movne	r3, #0
 80001b6:	b2db      	uxtb	r3, r3
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d001      	beq.n	80001c0 <_ZNK7Igniter12is_connectedEv+0x2c>
		return 1;
 80001bc:	2301      	movs	r3, #1
 80001be:	e000      	b.n	80001c2 <_ZNK7Igniter12is_connectedEv+0x2e>
	else
		return 0;
 80001c0:	2300      	movs	r3, #0
}
 80001c2:	4618      	mov	r0, r3
 80001c4:	3708      	adds	r7, #8
 80001c6:	46bd      	mov	sp, r7
 80001c8:	bd80      	pop	{r7, pc}

080001ca <_ZN7Igniter4FIREEv>:

void Igniter::FIRE(){
 80001ca:	b580      	push	{r7, lr}
 80001cc:	b082      	sub	sp, #8
 80001ce:	af00      	add	r7, sp, #0
 80001d0:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIO_PORT_IGNITER, PIN_IGNITER, GPIO_PIN_SET);
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	6818      	ldr	r0, [r3, #0]
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	889b      	ldrh	r3, [r3, #4]
 80001da:	2201      	movs	r2, #1
 80001dc:	4619      	mov	r1, r3
 80001de:	f001 f869 	bl	80012b4 <HAL_GPIO_WritePin>
}
 80001e2:	bf00      	nop
 80001e4:	3708      	adds	r7, #8
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bd80      	pop	{r7, pc}
	...

080001ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80001f0:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001f2:	2400      	movs	r4, #0
 80001f4:	9404      	str	r4, [sp, #16]
 80001f6:	9405      	str	r4, [sp, #20]
 80001f8:	9406      	str	r4, [sp, #24]
 80001fa:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001fc:	4b2b      	ldr	r3, [pc, #172]	; (80002ac <MX_GPIO_Init+0xc0>)
 80001fe:	699a      	ldr	r2, [r3, #24]
 8000200:	f042 0210 	orr.w	r2, r2, #16
 8000204:	619a      	str	r2, [r3, #24]
 8000206:	699a      	ldr	r2, [r3, #24]
 8000208:	f002 0210 	and.w	r2, r2, #16
 800020c:	9200      	str	r2, [sp, #0]
 800020e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000210:	699a      	ldr	r2, [r3, #24]
 8000212:	f042 0220 	orr.w	r2, r2, #32
 8000216:	619a      	str	r2, [r3, #24]
 8000218:	699a      	ldr	r2, [r3, #24]
 800021a:	f002 0220 	and.w	r2, r2, #32
 800021e:	9201      	str	r2, [sp, #4]
 8000220:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000222:	699a      	ldr	r2, [r3, #24]
 8000224:	f042 0204 	orr.w	r2, r2, #4
 8000228:	619a      	str	r2, [r3, #24]
 800022a:	699a      	ldr	r2, [r3, #24]
 800022c:	f002 0204 	and.w	r2, r2, #4
 8000230:	9202      	str	r2, [sp, #8]
 8000232:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000234:	699a      	ldr	r2, [r3, #24]
 8000236:	f042 0208 	orr.w	r2, r2, #8
 800023a:	619a      	str	r2, [r3, #24]
 800023c:	699b      	ldr	r3, [r3, #24]
 800023e:	f003 0308 	and.w	r3, r3, #8
 8000242:	9303      	str	r3, [sp, #12]
 8000244:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUILD_IN_LED_GPIO_Port, BUILD_IN_LED_Pin, GPIO_PIN_RESET);
 8000246:	4d1a      	ldr	r5, [pc, #104]	; (80002b0 <MX_GPIO_Init+0xc4>)
 8000248:	4622      	mov	r2, r4
 800024a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800024e:	4628      	mov	r0, r5
 8000250:	f001 f830 	bl	80012b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IGN_FIRE_GPIO_Port, IGN_FIRE_Pin, GPIO_PIN_RESET);
 8000254:	4e17      	ldr	r6, [pc, #92]	; (80002b4 <MX_GPIO_Init+0xc8>)
 8000256:	4622      	mov	r2, r4
 8000258:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800025c:	4630      	mov	r0, r6
 800025e:	f001 f829 	bl	80012b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUILD_IN_LED_Pin;
 8000262:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000266:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000268:	f04f 0801 	mov.w	r8, #1
 800026c:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000270:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000272:	2702      	movs	r7, #2
 8000274:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(BUILD_IN_LED_GPIO_Port, &GPIO_InitStruct);
 8000276:	a904      	add	r1, sp, #16
 8000278:	4628      	mov	r0, r5
 800027a:	f000 ff05 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IGN_TEST_CON_Pin;
 800027e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000282:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000284:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000286:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(IGN_TEST_CON_GPIO_Port, &GPIO_InitStruct);
 8000288:	a904      	add	r1, sp, #16
 800028a:	4628      	mov	r0, r5
 800028c:	f000 fefc 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IGN_FIRE_Pin;
 8000290:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000294:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000296:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800029a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800029c:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(IGN_FIRE_GPIO_Port, &GPIO_InitStruct);
 800029e:	a904      	add	r1, sp, #16
 80002a0:	4630      	mov	r0, r6
 80002a2:	f000 fef1 	bl	8001088 <HAL_GPIO_Init>

}
 80002a6:	b008      	add	sp, #32
 80002a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80002ac:	40021000 	.word	0x40021000
 80002b0:	40011000 	.word	0x40011000
 80002b4:	40010800 	.word	0x40010800

080002b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ba:	b08b      	sub	sp, #44	; 0x2c
 80002bc:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002be:	f000 fcb7 	bl	8000c30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002c2:	f000 f8f3 	bl	80004ac <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002c6:	f7ff ff91 	bl	80001ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002ca:	f000 f9f7 	bl	80006bc <MX_USART2_UART_Init>
  MX_USB_PCD_Init();
 80002ce:	f000 fad9 	bl	8000884 <MX_USB_PCD_Init>
  MX_USART3_UART_Init();
 80002d2:	f000 fa0d 	bl	80006f0 <MX_USART3_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  __HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);
 80002d6:	4b68      	ldr	r3, [pc, #416]	; (8000478 <main+0x1c0>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	68da      	ldr	r2, [r3, #12]
 80002dc:	4b66      	ldr	r3, [pc, #408]	; (8000478 <main+0x1c0>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	f042 0210 	orr.w	r2, r2, #16
 80002e4:	60da      	str	r2, [r3, #12]
  HAL_UART_Receive_DMA(&huart2, (uint8_t*) xbee_rx.mess_loaded, DATA_LENGTH);
 80002e6:	2232      	movs	r2, #50	; 0x32
 80002e8:	4964      	ldr	r1, [pc, #400]	; (800047c <main+0x1c4>)
 80002ea:	4863      	ldr	r0, [pc, #396]	; (8000478 <main+0x1c0>)
 80002ec:	f001 fd4a 	bl	8001d84 <HAL_UART_Receive_DMA>
  xbee_init(&communication, 0x0013A20041C283E5, &huart2); //inicjalizacja modułu xbee
 80002f0:	4b61      	ldr	r3, [pc, #388]	; (8000478 <main+0x1c0>)
 80002f2:	9300      	str	r3, [sp, #0]
 80002f4:	a35e      	add	r3, pc, #376	; (adr r3, 8000470 <main+0x1b8>)
 80002f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80002fa:	4861      	ldr	r0, [pc, #388]	; (8000480 <main+0x1c8>)
 80002fc:	f000 fafd 	bl	80008fa <xbee_init>
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 8000300:	4b5d      	ldr	r3, [pc, #372]	; (8000478 <main+0x1c0>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	68da      	ldr	r2, [r3, #12]
 8000306:	4b5c      	ldr	r3, [pc, #368]	; (8000478 <main+0x1c0>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	f042 0220 	orr.w	r2, r2, #32
 800030e:	60da      	str	r2, [r3, #12]

///ADDED FOR BLUETOOTH///
 // HAL_GPIO_WritePin(Bluetooth_reset_GPIO_Port, Bluetooth_reset_Pin, SET);//ADDITIONAL PIN PC14 FOR RESET //
  HAL_Delay(1000);
 8000310:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000314:	f000 fcb0 	bl	8000c78 <HAL_Delay>
  /* USER CODE END 2 */

  /* USER CODE BEGIN WHILE */

  // INIT
  Igniter igniter(IGN_FIRE_GPIO_Port, IGN_FIRE_Pin, IGN_TEST_CON_GPIO_Port, IGN_TEST_CON_Pin);
 8000318:	4638      	mov	r0, r7
 800031a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800031e:	9300      	str	r3, [sp, #0]
 8000320:	4b58      	ldr	r3, [pc, #352]	; (8000484 <main+0x1cc>)
 8000322:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000326:	4958      	ldr	r1, [pc, #352]	; (8000488 <main+0x1d0>)
 8000328:	f7ff ff1a 	bl	8000160 <_ZN7IgniterC1EP12GPIO_TypeDeftS1_t>

  state = 0; //touch only for tests
 800032c:	4b57      	ldr	r3, [pc, #348]	; (800048c <main+0x1d4>)
 800032e:	2200      	movs	r2, #0
 8000330:	701a      	strb	r2, [r3, #0]
  while (1)
  {
	  xbee_transmit_char(communication, dataOut);
 8000332:	4e53      	ldr	r6, [pc, #332]	; (8000480 <main+0x1c8>)
 8000334:	4b56      	ldr	r3, [pc, #344]	; (8000490 <main+0x1d8>)
 8000336:	9305      	str	r3, [sp, #20]
 8000338:	466d      	mov	r5, sp
 800033a:	f106 0410 	add.w	r4, r6, #16
 800033e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000340:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000342:	6823      	ldr	r3, [r4, #0]
 8000344:	602b      	str	r3, [r5, #0]
 8000346:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800034a:	f000 fb9c 	bl	8000a86 <xbee_transmit_char>
	  HAL_Delay(50);
 800034e:	2032      	movs	r0, #50	; 0x32
 8000350:	f000 fc92 	bl	8000c78 <HAL_Delay>
	  switch(state){
 8000354:	4b4d      	ldr	r3, [pc, #308]	; (800048c <main+0x1d4>)
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	2b06      	cmp	r3, #6
 800035a:	d8ea      	bhi.n	8000332 <main+0x7a>
 800035c:	a201      	add	r2, pc, #4	; (adr r2, 8000364 <main+0xac>)
 800035e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000362:	bf00      	nop
 8000364:	08000381 	.word	0x08000381
 8000368:	080003b1 	.word	0x080003b1
 800036c:	080003c9 	.word	0x080003c9
 8000370:	080003f9 	.word	0x080003f9
 8000374:	08000431 	.word	0x08000431
 8000378:	08000439 	.word	0x08000439
 800037c:	08000455 	.word	0x08000455
		  case 0: //test state
			  if(igniter.is_connected()){
 8000380:	463b      	mov	r3, r7
 8000382:	4618      	mov	r0, r3
 8000384:	f7ff ff06 	bl	8000194 <_ZNK7Igniter12is_connectedEv>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d004      	beq.n	8000398 <main+0xe0>
   				  HAL_GPIO_TogglePin(BUILD_IN_LED_GPIO_Port, BUILD_IN_LED_Pin);
 800038e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000392:	483c      	ldr	r0, [pc, #240]	; (8000484 <main+0x1cc>)
 8000394:	f000 ff94 	bl	80012c0 <HAL_GPIO_TogglePin>
   			  }

   			  //place for random tests
   			  //Fill.test_open_close();
   			  //QD.test_open_close();
   			  HAL_Delay(1000);
 8000398:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800039c:	f000 fc6c 	bl	8000c78 <HAL_Delay>
   			  //state = 1;
   			  strcpy(dataIn, "DINI");	//xd
 80003a0:	4b3c      	ldr	r3, [pc, #240]	; (8000494 <main+0x1dc>)
 80003a2:	4a3d      	ldr	r2, [pc, #244]	; (8000498 <main+0x1e0>)
 80003a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80003a8:	6018      	str	r0, [r3, #0]
 80003aa:	3304      	adds	r3, #4
 80003ac:	7019      	strb	r1, [r3, #0]
   			  break;
 80003ae:	e05c      	b.n	800046a <main+0x1b2>
   		  case 1:	//IDLE
   			  if(strncmp(dataIn, "DINI", 4) == 0){ // signal == init
 80003b0:	2204      	movs	r2, #4
 80003b2:	4939      	ldr	r1, [pc, #228]	; (8000498 <main+0x1e0>)
 80003b4:	4837      	ldr	r0, [pc, #220]	; (8000494 <main+0x1dc>)
 80003b6:	f001 ffff 	bl	80023b8 <strncmp>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14d      	bne.n	800045c <main+0x1a4>
   				  //TODO: send ready
   				  state = 2;
 80003c0:	4b32      	ldr	r3, [pc, #200]	; (800048c <main+0x1d4>)
 80003c2:	2202      	movs	r2, #2
 80003c4:	701a      	strb	r2, [r3, #0]
   			  }
   			  break;
 80003c6:	e049      	b.n	800045c <main+0x1a4>
   		  case 2:	//ARMED(hard) DABR
   			  if(igniter.is_connected() && strncmp(dataIn, "DARM", 4) == 0){ // signal == arm
 80003c8:	463b      	mov	r3, r7
 80003ca:	4618      	mov	r0, r3
 80003cc:	f7ff fee2 	bl	8000194 <_ZNK7Igniter12is_connectedEv>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d009      	beq.n	80003ea <main+0x132>
 80003d6:	2204      	movs	r2, #4
 80003d8:	4930      	ldr	r1, [pc, #192]	; (800049c <main+0x1e4>)
 80003da:	482e      	ldr	r0, [pc, #184]	; (8000494 <main+0x1dc>)
 80003dc:	f001 ffec 	bl	80023b8 <strncmp>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d101      	bne.n	80003ea <main+0x132>
 80003e6:	2301      	movs	r3, #1
 80003e8:	e000      	b.n	80003ec <main+0x134>
 80003ea:	2300      	movs	r3, #0
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d037      	beq.n	8000460 <main+0x1a8>
   			  	  state = 3;
 80003f0:	4b26      	ldr	r3, [pc, #152]	; (800048c <main+0x1d4>)
 80003f2:	2203      	movs	r2, #3
 80003f4:	701a      	strb	r2, [r3, #0]
   			  }
   			  break;
 80003f6:	e033      	b.n	8000460 <main+0x1a8>
   		  case 3:	//ARMED(soft)
   			  	  if(strncmp (dataIn, "DSTA", 4) == 0){	//signal == fire
 80003f8:	2204      	movs	r2, #4
 80003fa:	4929      	ldr	r1, [pc, #164]	; (80004a0 <main+0x1e8>)
 80003fc:	4825      	ldr	r0, [pc, #148]	; (8000494 <main+0x1dc>)
 80003fe:	f001 ffdb 	bl	80023b8 <strncmp>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d107      	bne.n	8000418 <main+0x160>
   			  		  igniter.FIRE();
 8000408:	463b      	mov	r3, r7
 800040a:	4618      	mov	r0, r3
 800040c:	f7ff fedd 	bl	80001ca <_ZN7Igniter4FIREEv>
   			  		  state = 5;
 8000410:	4b1e      	ldr	r3, [pc, #120]	; (800048c <main+0x1d4>)
 8000412:	2205      	movs	r2, #5
 8000414:	701a      	strb	r2, [r3, #0]
   			  	  }
   			  	  else if(strncmp (dataIn, "DABR", 4) == 0){	//signal == abort
   			  		  state = 4;
   			  	  }
   			  break;
 8000416:	e025      	b.n	8000464 <main+0x1ac>
   			  	  else if(strncmp (dataIn, "DABR", 4) == 0){	//signal == abort
 8000418:	2204      	movs	r2, #4
 800041a:	4922      	ldr	r1, [pc, #136]	; (80004a4 <main+0x1ec>)
 800041c:	481d      	ldr	r0, [pc, #116]	; (8000494 <main+0x1dc>)
 800041e:	f001 ffcb 	bl	80023b8 <strncmp>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	d11d      	bne.n	8000464 <main+0x1ac>
   			  		  state = 4;
 8000428:	4b18      	ldr	r3, [pc, #96]	; (800048c <main+0x1d4>)
 800042a:	2204      	movs	r2, #4
 800042c:	701a      	strb	r2, [r3, #0]
   			  break;
 800042e:	e019      	b.n	8000464 <main+0x1ac>
   		  case 4:	//ABORT
   			  HAL_Delay(1000000);
 8000430:	481d      	ldr	r0, [pc, #116]	; (80004a8 <main+0x1f0>)
 8000432:	f000 fc21 	bl	8000c78 <HAL_Delay>
   			  break;
 8000436:	e018      	b.n	800046a <main+0x1b2>
   		  case 5:	//FLIGHT
   			  //TODO: Send "fired" 	//n - times
   			 if( ! igniter.is_connected()){
 8000438:	463b      	mov	r3, r7
 800043a:	4618      	mov	r0, r3
 800043c:	f7ff feaa 	bl	8000194 <_ZNK7Igniter12is_connectedEv>
 8000440:	4603      	mov	r3, r0
 8000442:	f083 0301 	eor.w	r3, r3, #1
 8000446:	b2db      	uxtb	r3, r3
 8000448:	2b00      	cmp	r3, #0
 800044a:	d00d      	beq.n	8000468 <main+0x1b0>
   				  state = 6;
 800044c:	4b0f      	ldr	r3, [pc, #60]	; (800048c <main+0x1d4>)
 800044e:	2206      	movs	r2, #6
 8000450:	701a      	strb	r2, [r3, #0]
   			  }
   			  break;
 8000452:	e009      	b.n	8000468 <main+0x1b0>
   		  case 6:	//END
   			  HAL_Delay(1000000);
 8000454:	4814      	ldr	r0, [pc, #80]	; (80004a8 <main+0x1f0>)
 8000456:	f000 fc0f 	bl	8000c78 <HAL_Delay>
   			  break;
 800045a:	e006      	b.n	800046a <main+0x1b2>
   			  break;
 800045c:	bf00      	nop
 800045e:	e768      	b.n	8000332 <main+0x7a>
   			  break;
 8000460:	bf00      	nop
 8000462:	e766      	b.n	8000332 <main+0x7a>
   			  break;
 8000464:	bf00      	nop
 8000466:	e764      	b.n	8000332 <main+0x7a>
   			  break;
 8000468:	bf00      	nop
	  xbee_transmit_char(communication, dataOut);
 800046a:	e762      	b.n	8000332 <main+0x7a>
 800046c:	f3af 8000 	nop.w
 8000470:	41c283e5 	.word	0x41c283e5
 8000474:	0013a200 	.word	0x0013a200
 8000478:	20000224 	.word	0x20000224
 800047c:	20000090 	.word	0x20000090
 8000480:	2000012c 	.word	0x2000012c
 8000484:	40011000 	.word	0x40011000
 8000488:	40010800 	.word	0x40010800
 800048c:	200000e8 	.word	0x200000e8
 8000490:	2000010c 	.word	0x2000010c
 8000494:	200000ec 	.word	0x200000ec
 8000498:	0800242c 	.word	0x0800242c
 800049c:	08002434 	.word	0x08002434
 80004a0:	0800243c 	.word	0x0800243c
 80004a4:	08002444 	.word	0x08002444
 80004a8:	000f4240 	.word	0x000f4240

080004ac <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b094      	sub	sp, #80	; 0x50
 80004b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004b6:	2228      	movs	r2, #40	; 0x28
 80004b8:	2100      	movs	r1, #0
 80004ba:	4618      	mov	r0, r3
 80004bc:	f001 feb6 	bl	800222c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004c0:	f107 0314 	add.w	r3, r7, #20
 80004c4:	2200      	movs	r2, #0
 80004c6:	601a      	str	r2, [r3, #0]
 80004c8:	605a      	str	r2, [r3, #4]
 80004ca:	609a      	str	r2, [r3, #8]
 80004cc:	60da      	str	r2, [r3, #12]
 80004ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004d0:	1d3b      	adds	r3, r7, #4
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	605a      	str	r2, [r3, #4]
 80004d8:	609a      	str	r2, [r3, #8]
 80004da:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004dc:	2301      	movs	r3, #1
 80004de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004e6:	2300      	movs	r3, #0
 80004e8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004ea:	2301      	movs	r3, #1
 80004ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004ee:	2302      	movs	r3, #2
 80004f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80004f8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80004fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000502:	4618      	mov	r0, r3
 8000504:	f000 ff66 	bl	80013d4 <HAL_RCC_OscConfig>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	bf14      	ite	ne
 800050e:	2301      	movne	r3, #1
 8000510:	2300      	moveq	r3, #0
 8000512:	b2db      	uxtb	r3, r3
 8000514:	2b00      	cmp	r3, #0
 8000516:	d001      	beq.n	800051c <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8000518:	f000 f870 	bl	80005fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800051c:	230f      	movs	r3, #15
 800051e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000520:	2302      	movs	r3, #2
 8000522:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000524:	2300      	movs	r3, #0
 8000526:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000528:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800052c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800052e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000532:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000534:	f107 0314 	add.w	r3, r7, #20
 8000538:	2101      	movs	r1, #1
 800053a:	4618      	mov	r0, r3
 800053c:	f001 f996 	bl	800186c <HAL_RCC_ClockConfig>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	bf14      	ite	ne
 8000546:	2301      	movne	r3, #1
 8000548:	2300      	moveq	r3, #0
 800054a:	b2db      	uxtb	r3, r3
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <_Z18SystemClock_Configv+0xa8>
  {
    Error_Handler();
 8000550:	f000 f854 	bl	80005fc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000554:	2310      	movs	r3, #16
 8000556:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000558:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800055c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800055e:	1d3b      	adds	r3, r7, #4
 8000560:	4618      	mov	r0, r3
 8000562:	f001 fa5b 	bl	8001a1c <HAL_RCCEx_PeriphCLKConfig>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	bf14      	ite	ne
 800056c:	2301      	movne	r3, #1
 800056e:	2300      	moveq	r3, #0
 8000570:	b2db      	uxtb	r3, r3
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <_Z18SystemClock_Configv+0xce>
  {
    Error_Handler();
 8000576:	f000 f841 	bl	80005fc <Error_Handler>
  }
}
 800057a:	bf00      	nop
 800057c:	3750      	adds	r7, #80	; 0x50
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
	...

08000584 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a14      	ldr	r2, [pc, #80]	; (80005e4 <HAL_UART_RxCpltCallback+0x60>)
 8000592:	4293      	cmp	r3, r2
 8000594:	d122      	bne.n	80005dc <HAL_UART_RxCpltCallback+0x58>
		__HAL_UART_CLEAR_IDLEFLAG(&huart2);
 8000596:	2300      	movs	r3, #0
 8000598:	60fb      	str	r3, [r7, #12]
 800059a:	4b13      	ldr	r3, [pc, #76]	; (80005e8 <HAL_UART_RxCpltCallback+0x64>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	60fb      	str	r3, [r7, #12]
 80005a2:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <HAL_UART_RxCpltCallback+0x64>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	685b      	ldr	r3, [r3, #4]
 80005a8:	60fb      	str	r3, [r7, #12]
 80005aa:	68fb      	ldr	r3, [r7, #12]
		HAL_UART_DMAStop(&huart2);
 80005ac:	480e      	ldr	r0, [pc, #56]	; (80005e8 <HAL_UART_RxCpltCallback+0x64>)
 80005ae:	f001 fc3d 	bl	8001e2c <HAL_UART_DMAStop>

		xbee_receive(); //odebranie całej wiadomości
 80005b2:	f000 fa7f 	bl	8000ab4 <xbee_receive>
		if(xbee_rx.data_flag){  //jeżeli wiadomość była danymi to ta zmienna będzie miała wartość 1
 80005b6:	4b0d      	ldr	r3, [pc, #52]	; (80005ec <HAL_UART_RxCpltCallback+0x68>)
 80005b8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d008      	beq.n	80005d2 <HAL_UART_RxCpltCallback+0x4e>
			TUTAJ WEDLE UZNANIA PRZECHWYTUJECIE DANE KTORE PRZYSZŁY
			macie do dyspozycji tablice 'xbee_rx.data_array' o wielkości 'DATA_ARRAY' - 30, w której są wartości
			jeżeli chcecie zatrzymać te dane musicie skopiować wartości tej tabilicy
			pobranie adresu jest złym pomysłem bo przy każdym odebraniu tablica zmienia swoją zawartosć
			*/
			if(xbee_rx.data_array[0] == 'D'){
 80005c0:	4b0a      	ldr	r3, [pc, #40]	; (80005ec <HAL_UART_RxCpltCallback+0x68>)
 80005c2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80005c6:	2b44      	cmp	r3, #68	; 0x44
 80005c8:	d103      	bne.n	80005d2 <HAL_UART_RxCpltCallback+0x4e>
				strcpy(dataIn, xbee_rx.data_array);
 80005ca:	4909      	ldr	r1, [pc, #36]	; (80005f0 <HAL_UART_RxCpltCallback+0x6c>)
 80005cc:	4809      	ldr	r0, [pc, #36]	; (80005f4 <HAL_UART_RxCpltCallback+0x70>)
 80005ce:	f001 feeb 	bl	80023a8 <strcpy>
			}
		}
		//tutaj zmienić tylko huart
		HAL_UART_Receive_DMA(&huart2, (uint8_t*) xbee_rx.mess_loaded, DATA_LENGTH);
 80005d2:	2232      	movs	r2, #50	; 0x32
 80005d4:	4908      	ldr	r1, [pc, #32]	; (80005f8 <HAL_UART_RxCpltCallback+0x74>)
 80005d6:	4804      	ldr	r0, [pc, #16]	; (80005e8 <HAL_UART_RxCpltCallback+0x64>)
 80005d8:	f001 fbd4 	bl	8001d84 <HAL_UART_Receive_DMA>
	}
}
 80005dc:	bf00      	nop
 80005de:	3710      	adds	r7, #16
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40004400 	.word	0x40004400
 80005e8:	20000224 	.word	0x20000224
 80005ec:	2000008c 	.word	0x2000008c
 80005f0:	200000c2 	.word	0x200000c2
 80005f4:	200000ec 	.word	0x200000ec
 80005f8:	20000090 	.word	0x20000090

080005fc <Error_Handler>:

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void){
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000600:	b672      	cpsid	i
}
 8000602:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000604:	e7fe      	b.n	8000604 <Error_Handler+0x8>
	...

08000608 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000608:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800060a:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <HAL_MspInit+0x3c>)
 800060c:	699a      	ldr	r2, [r3, #24]
 800060e:	f042 0201 	orr.w	r2, r2, #1
 8000612:	619a      	str	r2, [r3, #24]
 8000614:	699a      	ldr	r2, [r3, #24]
 8000616:	f002 0201 	and.w	r2, r2, #1
 800061a:	9200      	str	r2, [sp, #0]
 800061c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800061e:	69da      	ldr	r2, [r3, #28]
 8000620:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000624:	61da      	str	r2, [r3, #28]
 8000626:	69db      	ldr	r3, [r3, #28]
 8000628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800062c:	9301      	str	r3, [sp, #4]
 800062e:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000630:	4a05      	ldr	r2, [pc, #20]	; (8000648 <HAL_MspInit+0x40>)
 8000632:	6853      	ldr	r3, [r2, #4]
 8000634:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000638:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800063c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800063e:	b002      	add	sp, #8
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	40021000 	.word	0x40021000
 8000648:	40010000 	.word	0x40010000

0800064c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800064c:	e7fe      	b.n	800064c <NMI_Handler>

0800064e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800064e:	e7fe      	b.n	800064e <HardFault_Handler>

08000650 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000650:	e7fe      	b.n	8000650 <MemManage_Handler>

08000652 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000652:	e7fe      	b.n	8000652 <BusFault_Handler>

08000654 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000654:	e7fe      	b.n	8000654 <UsageFault_Handler>

08000656 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000656:	4770      	bx	lr

08000658 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000658:	4770      	bx	lr

0800065a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800065a:	4770      	bx	lr

0800065c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800065c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800065e:	f000 faf9 	bl	8000c54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000662:	bd08      	pop	{r3, pc}

08000664 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000664:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000666:	4802      	ldr	r0, [pc, #8]	; (8000670 <DMA1_Channel6_IRQHandler+0xc>)
 8000668:	f000 fc6e 	bl	8000f48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800066c:	bd08      	pop	{r3, pc}
 800066e:	bf00      	nop
 8000670:	2000015c 	.word	0x2000015c

08000674 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000674:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000676:	4802      	ldr	r0, [pc, #8]	; (8000680 <DMA1_Channel7_IRQHandler+0xc>)
 8000678:	f000 fc66 	bl	8000f48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800067c:	bd08      	pop	{r3, pc}
 800067e:	bf00      	nop
 8000680:	200001e0 	.word	0x200001e0

08000684 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000684:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000686:	4c07      	ldr	r4, [pc, #28]	; (80006a4 <USART2_IRQHandler+0x20>)
 8000688:	4620      	mov	r0, r4
 800068a:	f001 fca3 	bl	8001fd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  if(__HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE))
 800068e:	6823      	ldr	r3, [r4, #0]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	f013 0f10 	tst.w	r3, #16
 8000696:	d100      	bne.n	800069a <USART2_IRQHandler+0x16>
	  HAL_UART_RxCpltCallback(&huart2);

  /* USER CODE END USART2_IRQn 1 */
}
 8000698:	bd10      	pop	{r4, pc}
	  HAL_UART_RxCpltCallback(&huart2);
 800069a:	4620      	mov	r0, r4
 800069c:	f7ff ff72 	bl	8000584 <HAL_UART_RxCpltCallback>
}
 80006a0:	e7fa      	b.n	8000698 <USART2_IRQHandler+0x14>
 80006a2:	bf00      	nop
 80006a4:	20000224 	.word	0x20000224

080006a8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80006a8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80006aa:	4802      	ldr	r0, [pc, #8]	; (80006b4 <USART3_IRQHandler+0xc>)
 80006ac:	f001 fc92 	bl	8001fd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80006b0:	bd08      	pop	{r3, pc}
 80006b2:	bf00      	nop
 80006b4:	200001a0 	.word	0x200001a0

080006b8 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006b8:	4770      	bx	lr
	...

080006bc <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80006bc:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006be:	480a      	ldr	r0, [pc, #40]	; (80006e8 <MX_USART2_UART_Init+0x2c>)
 80006c0:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <MX_USART2_UART_Init+0x30>)
 80006c2:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 80006c4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80006c8:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ca:	2300      	movs	r3, #0
 80006cc:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006ce:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006d0:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006d2:	220c      	movs	r2, #12
 80006d4:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d6:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d8:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006da:	f001 fab1 	bl	8001c40 <HAL_UART_Init>
 80006de:	b900      	cbnz	r0, 80006e2 <MX_USART2_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006e0:	bd08      	pop	{r3, pc}
    Error_Handler();
 80006e2:	f7ff ff8b 	bl	80005fc <Error_Handler>
}
 80006e6:	e7fb      	b.n	80006e0 <MX_USART2_UART_Init+0x24>
 80006e8:	20000224 	.word	0x20000224
 80006ec:	40004400 	.word	0x40004400

080006f0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80006f0:	b508      	push	{r3, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006f2:	480a      	ldr	r0, [pc, #40]	; (800071c <MX_USART3_UART_Init+0x2c>)
 80006f4:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <MX_USART3_UART_Init+0x30>)
 80006f6:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 80006f8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80006fc:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006fe:	2300      	movs	r3, #0
 8000700:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000702:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000704:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000706:	220c      	movs	r2, #12
 8000708:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070a:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800070c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800070e:	f001 fa97 	bl	8001c40 <HAL_UART_Init>
 8000712:	b900      	cbnz	r0, 8000716 <MX_USART3_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000714:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000716:	f7ff ff71 	bl	80005fc <Error_Handler>
}
 800071a:	e7fb      	b.n	8000714 <MX_USART3_UART_Init+0x24>
 800071c:	200001a0 	.word	0x200001a0
 8000720:	40004800 	.word	0x40004800

08000724 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000724:	b570      	push	{r4, r5, r6, lr}
 8000726:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000728:	2300      	movs	r3, #0
 800072a:	9304      	str	r3, [sp, #16]
 800072c:	9305      	str	r3, [sp, #20]
 800072e:	9306      	str	r3, [sp, #24]
 8000730:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART2)
 8000732:	6803      	ldr	r3, [r0, #0]
 8000734:	4a4a      	ldr	r2, [pc, #296]	; (8000860 <HAL_UART_MspInit+0x13c>)
 8000736:	4293      	cmp	r3, r2
 8000738:	d004      	beq.n	8000744 <HAL_UART_MspInit+0x20>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 800073a:	4a4a      	ldr	r2, [pc, #296]	; (8000864 <HAL_UART_MspInit+0x140>)
 800073c:	4293      	cmp	r3, r2
 800073e:	d05c      	beq.n	80007fa <HAL_UART_MspInit+0xd6>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000740:	b008      	add	sp, #32
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	4604      	mov	r4, r0
    __HAL_RCC_USART2_CLK_ENABLE();
 8000746:	4b48      	ldr	r3, [pc, #288]	; (8000868 <HAL_UART_MspInit+0x144>)
 8000748:	69da      	ldr	r2, [r3, #28]
 800074a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800074e:	61da      	str	r2, [r3, #28]
 8000750:	69da      	ldr	r2, [r3, #28]
 8000752:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000756:	9200      	str	r2, [sp, #0]
 8000758:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	699a      	ldr	r2, [r3, #24]
 800075c:	f042 0204 	orr.w	r2, r2, #4
 8000760:	619a      	str	r2, [r3, #24]
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	f003 0304 	and.w	r3, r3, #4
 8000768:	9301      	str	r3, [sp, #4]
 800076a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800076c:	2304      	movs	r3, #4
 800076e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000770:	2302      	movs	r3, #2
 8000772:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000774:	2303      	movs	r3, #3
 8000776:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000778:	4e3c      	ldr	r6, [pc, #240]	; (800086c <HAL_UART_MspInit+0x148>)
 800077a:	a904      	add	r1, sp, #16
 800077c:	4630      	mov	r0, r6
 800077e:	f000 fc83 	bl	8001088 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000782:	2308      	movs	r3, #8
 8000784:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000786:	2500      	movs	r5, #0
 8000788:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078c:	a904      	add	r1, sp, #16
 800078e:	4630      	mov	r0, r6
 8000790:	f000 fc7a 	bl	8001088 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000794:	4836      	ldr	r0, [pc, #216]	; (8000870 <HAL_UART_MspInit+0x14c>)
 8000796:	4b37      	ldr	r3, [pc, #220]	; (8000874 <HAL_UART_MspInit+0x150>)
 8000798:	6003      	str	r3, [r0, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800079a:	6045      	str	r5, [r0, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800079c:	6085      	str	r5, [r0, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800079e:	2380      	movs	r3, #128	; 0x80
 80007a0:	60c3      	str	r3, [r0, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007a2:	6105      	str	r5, [r0, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007a4:	6145      	str	r5, [r0, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80007a6:	6185      	str	r5, [r0, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80007a8:	61c5      	str	r5, [r0, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80007aa:	f000 fae1 	bl	8000d70 <HAL_DMA_Init>
 80007ae:	b9f0      	cbnz	r0, 80007ee <HAL_UART_MspInit+0xca>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80007b0:	4b2f      	ldr	r3, [pc, #188]	; (8000870 <HAL_UART_MspInit+0x14c>)
 80007b2:	6363      	str	r3, [r4, #52]	; 0x34
 80007b4:	625c      	str	r4, [r3, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80007b6:	4830      	ldr	r0, [pc, #192]	; (8000878 <HAL_UART_MspInit+0x154>)
 80007b8:	4b30      	ldr	r3, [pc, #192]	; (800087c <HAL_UART_MspInit+0x158>)
 80007ba:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80007bc:	2310      	movs	r3, #16
 80007be:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007c0:	2300      	movs	r3, #0
 80007c2:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80007c4:	2280      	movs	r2, #128	; 0x80
 80007c6:	60c2      	str	r2, [r0, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007c8:	6103      	str	r3, [r0, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007ca:	6143      	str	r3, [r0, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80007cc:	6183      	str	r3, [r0, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80007ce:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80007d0:	f000 face 	bl	8000d70 <HAL_DMA_Init>
 80007d4:	b970      	cbnz	r0, 80007f4 <HAL_UART_MspInit+0xd0>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80007d6:	4b28      	ldr	r3, [pc, #160]	; (8000878 <HAL_UART_MspInit+0x154>)
 80007d8:	6323      	str	r3, [r4, #48]	; 0x30
 80007da:	625c      	str	r4, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80007dc:	2200      	movs	r2, #0
 80007de:	4611      	mov	r1, r2
 80007e0:	2026      	movs	r0, #38	; 0x26
 80007e2:	f000 fa6f 	bl	8000cc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80007e6:	2026      	movs	r0, #38	; 0x26
 80007e8:	f000 fa9e 	bl	8000d28 <HAL_NVIC_EnableIRQ>
 80007ec:	e7a8      	b.n	8000740 <HAL_UART_MspInit+0x1c>
      Error_Handler();
 80007ee:	f7ff ff05 	bl	80005fc <Error_Handler>
 80007f2:	e7dd      	b.n	80007b0 <HAL_UART_MspInit+0x8c>
      Error_Handler();
 80007f4:	f7ff ff02 	bl	80005fc <Error_Handler>
 80007f8:	e7ed      	b.n	80007d6 <HAL_UART_MspInit+0xb2>
    __HAL_RCC_USART3_CLK_ENABLE();
 80007fa:	4b1b      	ldr	r3, [pc, #108]	; (8000868 <HAL_UART_MspInit+0x144>)
 80007fc:	69da      	ldr	r2, [r3, #28]
 80007fe:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000802:	61da      	str	r2, [r3, #28]
 8000804:	69da      	ldr	r2, [r3, #28]
 8000806:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800080a:	9202      	str	r2, [sp, #8]
 800080c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800080e:	699a      	ldr	r2, [r3, #24]
 8000810:	f042 0208 	orr.w	r2, r2, #8
 8000814:	619a      	str	r2, [r3, #24]
 8000816:	699b      	ldr	r3, [r3, #24]
 8000818:	f003 0308 	and.w	r3, r3, #8
 800081c:	9303      	str	r3, [sp, #12]
 800081e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000820:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000824:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000826:	2302      	movs	r3, #2
 8000828:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800082a:	2303      	movs	r3, #3
 800082c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082e:	4d14      	ldr	r5, [pc, #80]	; (8000880 <HAL_UART_MspInit+0x15c>)
 8000830:	a904      	add	r1, sp, #16
 8000832:	4628      	mov	r0, r5
 8000834:	f000 fc28 	bl	8001088 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000838:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800083c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800083e:	2400      	movs	r4, #0
 8000840:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000844:	a904      	add	r1, sp, #16
 8000846:	4628      	mov	r0, r5
 8000848:	f000 fc1e 	bl	8001088 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800084c:	4622      	mov	r2, r4
 800084e:	4621      	mov	r1, r4
 8000850:	2027      	movs	r0, #39	; 0x27
 8000852:	f000 fa37 	bl	8000cc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000856:	2027      	movs	r0, #39	; 0x27
 8000858:	f000 fa66 	bl	8000d28 <HAL_NVIC_EnableIRQ>
}
 800085c:	e770      	b.n	8000740 <HAL_UART_MspInit+0x1c>
 800085e:	bf00      	nop
 8000860:	40004400 	.word	0x40004400
 8000864:	40004800 	.word	0x40004800
 8000868:	40021000 	.word	0x40021000
 800086c:	40010800 	.word	0x40010800
 8000870:	2000015c 	.word	0x2000015c
 8000874:	4002006c 	.word	0x4002006c
 8000878:	200001e0 	.word	0x200001e0
 800087c:	40020080 	.word	0x40020080
 8000880:	40010c00 	.word	0x40010c00

08000884 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8000884:	b508      	push	{r3, lr}
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000886:	4809      	ldr	r0, [pc, #36]	; (80008ac <MX_USB_PCD_Init+0x28>)
 8000888:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_USB_PCD_Init+0x2c>)
 800088a:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800088c:	2308      	movs	r3, #8
 800088e:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000890:	2302      	movs	r3, #2
 8000892:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000894:	2300      	movs	r3, #0
 8000896:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000898:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800089a:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800089c:	f000 fd19 	bl	80012d2 <HAL_PCD_Init>
 80008a0:	b900      	cbnz	r0, 80008a4 <MX_USB_PCD_Init+0x20>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80008a2:	bd08      	pop	{r3, pc}
    Error_Handler();
 80008a4:	f7ff feaa 	bl	80005fc <Error_Handler>
}
 80008a8:	e7fb      	b.n	80008a2 <MX_USB_PCD_Init+0x1e>
 80008aa:	bf00      	nop
 80008ac:	20000264 	.word	0x20000264
 80008b0:	40005c00 	.word	0x40005c00

080008b4 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{

  if(pcdHandle->Instance==USB)
 80008b4:	6802      	ldr	r2, [r0, #0]
 80008b6:	4b09      	ldr	r3, [pc, #36]	; (80008dc <HAL_PCD_MspInit+0x28>)
 80008b8:	429a      	cmp	r2, r3
 80008ba:	d000      	beq.n	80008be <HAL_PCD_MspInit+0xa>
 80008bc:	4770      	bx	lr
{
 80008be:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80008c0:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80008c4:	69da      	ldr	r2, [r3, #28]
 80008c6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80008ca:	61da      	str	r2, [r3, #28]
 80008cc:	69db      	ldr	r3, [r3, #28]
 80008ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80008d2:	9301      	str	r3, [sp, #4]
 80008d4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80008d6:	b002      	add	sp, #8
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	40005c00 	.word	0x40005c00

080008e0 <xbee_options_init>:


//Wpisanie opcji api do tablicy
//Tutaj bez dynamicznych bo nie ma kiedy zwolnić tablicy
void xbee_options_init(uint8_t *options){
	options[0] = START_BYTE;
 80008e0:	237e      	movs	r3, #126	; 0x7e
 80008e2:	7003      	strb	r3, [r0, #0]
	options[1] = FRAME_TYPE;
 80008e4:	2310      	movs	r3, #16
 80008e6:	7043      	strb	r3, [r0, #1]
	options[2] = FRAME_ID ;
 80008e8:	2300      	movs	r3, #0
 80008ea:	7083      	strb	r3, [r0, #2]
	options[3] = BT_1;
 80008ec:	22ff      	movs	r2, #255	; 0xff
 80008ee:	70c2      	strb	r2, [r0, #3]
	options[4] = BT_2;
 80008f0:	22fe      	movs	r2, #254	; 0xfe
 80008f2:	7102      	strb	r2, [r0, #4]
	options[5] = BORDCAST_RADIUS;
 80008f4:	7143      	strb	r3, [r0, #5]
	options[6] = OPTIONS;
 80008f6:	7183      	strb	r3, [r0, #6]
}
 80008f8:	4770      	bx	lr

080008fa <xbee_init>:

//Zamiana adresu na tablice
//Ogólna inicjalizacja xbee
void xbee_init(Xbee *sensor, uint64_t address, UART_HandleTypeDef *uart){
 80008fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008fc:	b083      	sub	sp, #12
 80008fe:	4606      	mov	r6, r0
 8000900:	4614      	mov	r4, r2
 8000902:	461f      	mov	r7, r3
	  uint8_t temp[8]; //tablica do wczytania oryginalego adresu;
	  int i, j;

	 sensor->huart = uart;
 8000904:	9b08      	ldr	r3, [sp, #32]
 8000906:	6203      	str	r3, [r0, #32]

	  xbee_options_init(sensor->options); //Inicjalizacja opcji, raz wystarczy
 8000908:	f7ff ffea 	bl	80008e0 <xbee_options_init>


	  //to idzie jeszcze poprawic do jednej petli
	  for(i=0; i<8; i++){
 800090c:	7f31      	ldrb	r1, [r6, #28]
 800090e:	f10d 35ff 	add.w	r5, sp, #4294967295
 8000912:	f10d 0307 	add.w	r3, sp, #7
		  temp[i] = address;
 8000916:	b2e2      	uxtb	r2, r4
 8000918:	f805 2f01 	strb.w	r2, [r5, #1]!
		  sensor->checksum += temp[i];
 800091c:	4411      	add	r1, r2
 800091e:	b2c9      	uxtb	r1, r1

		  address /= 0x100;
 8000920:	0a24      	lsrs	r4, r4, #8
 8000922:	ea44 6407 	orr.w	r4, r4, r7, lsl #24
 8000926:	0a3f      	lsrs	r7, r7, #8
	  for(i=0; i<8; i++){
 8000928:	429d      	cmp	r5, r3
 800092a:	d1f4      	bne.n	8000916 <xbee_init+0x1c>
 800092c:	7731      	strb	r1, [r6, #28]
 800092e:	f10d 0207 	add.w	r2, sp, #7
 8000932:	f106 0309 	add.w	r3, r6, #9
 8000936:	3611      	adds	r6, #17
	  }

	  //Wpisanie adresu do tablicy dynamicznej
	  for(i=7, j=0; i>=0; i--, j++){
		  sensor->address[j] = temp[i];
 8000938:	f812 1901 	ldrb.w	r1, [r2], #-1
 800093c:	f803 1b01 	strb.w	r1, [r3], #1
	  for(i=7, j=0; i>=0; i--, j++){
 8000940:	42b3      	cmp	r3, r6
 8000942:	d1f9      	bne.n	8000938 <xbee_init+0x3e>
	  }
}
 8000944:	b003      	add	sp, #12
 8000946:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000948 <xbee_length>:

//Obliczenie długości i wpisanie jej do tablicy
void xbee_length(Xbee *sensor){
	//Pierwszy element dlugosci to 0;
	int l;
	l = 14 + sensor->data_length;
 8000948:	6983      	ldr	r3, [r0, #24]
 800094a:	330e      	adds	r3, #14

	//Tworzymy tablice i wpisujemy wartosci
	sensor->length[0] = l/100;
 800094c:	4904      	ldr	r1, [pc, #16]	; (8000960 <xbee_length+0x18>)
 800094e:	fb81 2103 	smull	r2, r1, r1, r3
 8000952:	17da      	asrs	r2, r3, #31
 8000954:	ebc2 1261 	rsb	r2, r2, r1, asr #5
 8000958:	71c2      	strb	r2, [r0, #7]
	sensor->length[1] = l;
 800095a:	7203      	strb	r3, [r0, #8]
}
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	51eb851f 	.word	0x51eb851f

08000964 <xbee_checksum_count>:

//Obliczenie chceksumy
void xbee_checksum_count(Xbee *sensor){
 8000964:	b410      	push	{r4}
	int i=0;
	for(i=1; i<7; i++){
 8000966:	7f03      	ldrb	r3, [r0, #28]
 8000968:	1c42      	adds	r2, r0, #1
 800096a:	1dc4      	adds	r4, r0, #7
		sensor->checksum += sensor->options[i];
 800096c:	f812 1b01 	ldrb.w	r1, [r2], #1
 8000970:	440b      	add	r3, r1
 8000972:	b2db      	uxtb	r3, r3
	for(i=1; i<7; i++){
 8000974:	42a2      	cmp	r2, r4
 8000976:	d1f9      	bne.n	800096c <xbee_checksum_count+0x8>
 8000978:	7703      	strb	r3, [r0, #28]
	}
	for(i=0; i<sensor->data_length; i++){
 800097a:	6983      	ldr	r3, [r0, #24]
 800097c:	2b00      	cmp	r3, #0
 800097e:	dd0a      	ble.n	8000996 <xbee_checksum_count+0x32>
		sensor->checksum += sensor->data[i];
 8000980:	6944      	ldr	r4, [r0, #20]
 8000982:	1e62      	subs	r2, r4, #1
 8000984:	441c      	add	r4, r3
 8000986:	3c01      	subs	r4, #1
 8000988:	7f03      	ldrb	r3, [r0, #28]
 800098a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800098e:	440b      	add	r3, r1
 8000990:	7703      	strb	r3, [r0, #28]
	for(i=0; i<sensor->data_length; i++){
 8000992:	42a2      	cmp	r2, r4
 8000994:	d1f8      	bne.n	8000988 <xbee_checksum_count+0x24>
	}
	sensor->checksum = 0xff - sensor->checksum;
 8000996:	7f03      	ldrb	r3, [r0, #28]
 8000998:	43db      	mvns	r3, r3
 800099a:	7703      	strb	r3, [r0, #28]

}
 800099c:	bc10      	pop	{r4}
 800099e:	4770      	bx	lr

080009a0 <xbee_send>:

//Czy tutaj tworzyc tablice z cala wiadomoscia i wysłać całę odrazu
void xbee_send(Xbee *sensor){
 80009a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80009a4:	4604      	mov	r4, r0
	int i;

		//wyslanie znaku start
		HAL_UART_Transmit(sensor->huart, &sensor->options[0], 1, 100);
 80009a6:	2364      	movs	r3, #100	; 0x64
 80009a8:	2201      	movs	r2, #1
 80009aa:	4601      	mov	r1, r0
 80009ac:	6a00      	ldr	r0, [r0, #32]
 80009ae:	f001 f976 	bl	8001c9e <HAL_UART_Transmit>

		//wyslanie dlugosci
		for(i=0; i<2; i++){
			HAL_UART_Transmit(sensor->huart, &sensor->length[i], 1, 100);
 80009b2:	2364      	movs	r3, #100	; 0x64
 80009b4:	2201      	movs	r2, #1
 80009b6:	1de1      	adds	r1, r4, #7
 80009b8:	6a20      	ldr	r0, [r4, #32]
 80009ba:	f001 f970 	bl	8001c9e <HAL_UART_Transmit>
 80009be:	2364      	movs	r3, #100	; 0x64
 80009c0:	2201      	movs	r2, #1
 80009c2:	f104 0108 	add.w	r1, r4, #8
 80009c6:	6a20      	ldr	r0, [r4, #32]
 80009c8:	f001 f969 	bl	8001c9e <HAL_UART_Transmit>
		}

		//wyslanie danych klatki
		HAL_UART_Transmit(sensor->huart, &sensor->options[1], 1, 100);
 80009cc:	2364      	movs	r3, #100	; 0x64
 80009ce:	2201      	movs	r2, #1
 80009d0:	18a1      	adds	r1, r4, r2
 80009d2:	6a20      	ldr	r0, [r4, #32]
 80009d4:	f001 f963 	bl	8001c9e <HAL_UART_Transmit>
		HAL_UART_Transmit(sensor->huart, &sensor->options[2], 1, 100);
 80009d8:	2364      	movs	r3, #100	; 0x64
 80009da:	2201      	movs	r2, #1
 80009dc:	1ca1      	adds	r1, r4, #2
 80009de:	6a20      	ldr	r0, [r4, #32]
 80009e0:	f001 f95d 	bl	8001c9e <HAL_UART_Transmit>

		//Wyslanie adresu
		for(i=0; i<8; i++){
 80009e4:	f104 0509 	add.w	r5, r4, #9
 80009e8:	f104 0811 	add.w	r8, r4, #17
			HAL_UART_Transmit(sensor->huart, &sensor->address[i], 1, 100);
 80009ec:	2764      	movs	r7, #100	; 0x64
 80009ee:	2601      	movs	r6, #1
 80009f0:	463b      	mov	r3, r7
 80009f2:	4632      	mov	r2, r6
 80009f4:	4629      	mov	r1, r5
 80009f6:	6a20      	ldr	r0, [r4, #32]
 80009f8:	f001 f951 	bl	8001c9e <HAL_UART_Transmit>
		for(i=0; i<8; i++){
 80009fc:	3501      	adds	r5, #1
 80009fe:	4545      	cmp	r5, r8
 8000a00:	d1f6      	bne.n	80009f0 <xbee_send+0x50>
 8000a02:	1ce5      	adds	r5, r4, #3
 8000a04:	f104 0807 	add.w	r8, r4, #7
		}

		//wyslanie reszty opcji
		for(i=3; i<7; i++){
			HAL_UART_Transmit(sensor->huart, &sensor->options[i], 1, 100);
 8000a08:	2764      	movs	r7, #100	; 0x64
 8000a0a:	2601      	movs	r6, #1
 8000a0c:	463b      	mov	r3, r7
 8000a0e:	4632      	mov	r2, r6
 8000a10:	4629      	mov	r1, r5
 8000a12:	6a20      	ldr	r0, [r4, #32]
 8000a14:	f001 f943 	bl	8001c9e <HAL_UART_Transmit>
		for(i=3; i<7; i++){
 8000a18:	3501      	adds	r5, #1
 8000a1a:	4545      	cmp	r5, r8
 8000a1c:	d1f6      	bne.n	8000a0c <xbee_send+0x6c>
		}

		//wyslanie danych
		for(i=0; i<sensor->data_length; i++){
 8000a1e:	69a3      	ldr	r3, [r4, #24]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	dd0d      	ble.n	8000a40 <xbee_send+0xa0>
 8000a24:	2500      	movs	r5, #0
			HAL_UART_Transmit(sensor->huart, (uint8_t *) &sensor->data[i], 1, 100);
 8000a26:	2764      	movs	r7, #100	; 0x64
 8000a28:	2601      	movs	r6, #1
 8000a2a:	6961      	ldr	r1, [r4, #20]
 8000a2c:	463b      	mov	r3, r7
 8000a2e:	4632      	mov	r2, r6
 8000a30:	4429      	add	r1, r5
 8000a32:	6a20      	ldr	r0, [r4, #32]
 8000a34:	f001 f933 	bl	8001c9e <HAL_UART_Transmit>
		for(i=0; i<sensor->data_length; i++){
 8000a38:	3501      	adds	r5, #1
 8000a3a:	69a3      	ldr	r3, [r4, #24]
 8000a3c:	42ab      	cmp	r3, r5
 8000a3e:	dcf4      	bgt.n	8000a2a <xbee_send+0x8a>
		}

		//wyslanie checksumy
		HAL_UART_Transmit(sensor->huart, &sensor->checksum, 1, 100);
 8000a40:	2364      	movs	r3, #100	; 0x64
 8000a42:	2201      	movs	r2, #1
 8000a44:	f104 011c 	add.w	r1, r4, #28
 8000a48:	6a20      	ldr	r0, [r4, #32]
 8000a4a:	f001 f928 	bl	8001c9e <HAL_UART_Transmit>


		//Czyszczenie pamięci
		free(sensor->data);
 8000a4e:	6960      	ldr	r0, [r4, #20]
 8000a50:	f001 fbe4 	bl	800221c <free>
}
 8000a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000a58 <xbee_char_load>:
	xbee_checksum_count(&sensor);
	xbee_send(&sensor);
}

//wczytanie podanych danych do struktury
void xbee_char_load(char *data, Xbee *sensor){
 8000a58:	b570      	push	{r4, r5, r6, lr}
 8000a5a:	4605      	mov	r5, r0
 8000a5c:	460c      	mov	r4, r1
	sensor->data_length = strlen(data); //strlen niby powinien zadziałać bez
 8000a5e:	f7ff fb77 	bl	8000150 <strlen>
 8000a62:	4606      	mov	r6, r0
 8000a64:	61a0      	str	r0, [r4, #24]
	sensor->data = (uint8_t*)malloc(sensor->data_length * sizeof(uint8_t));//
 8000a66:	f001 fbd1 	bl	800220c <malloc>
 8000a6a:	6160      	str	r0, [r4, #20]

	for(int i=0; i<sensor->data_length; ++i){
 8000a6c:	2e00      	cmp	r6, #0
 8000a6e:	dd09      	ble.n	8000a84 <xbee_char_load+0x2c>
 8000a70:	1e68      	subs	r0, r5, #1
 8000a72:	2300      	movs	r3, #0
		sensor->data[i] = data[i];
 8000a74:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 8000a78:	6962      	ldr	r2, [r4, #20]
 8000a7a:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<sensor->data_length; ++i){
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	69a2      	ldr	r2, [r4, #24]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	dcf7      	bgt.n	8000a74 <xbee_char_load+0x1c>
	}
}
 8000a84:	bd70      	pop	{r4, r5, r6, pc}

08000a86 <xbee_transmit_char>:
void xbee_transmit_char(Xbee sensor, char *data){
 8000a86:	b084      	sub	sp, #16
 8000a88:	b508      	push	{r3, lr}
 8000a8a:	f10d 0c08 	add.w	ip, sp, #8
 8000a8e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	xbee_char_load(data, &sensor);
 8000a92:	4661      	mov	r1, ip
 8000a94:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8000a96:	f7ff ffdf 	bl	8000a58 <xbee_char_load>
	xbee_length(&sensor);
 8000a9a:	a802      	add	r0, sp, #8
 8000a9c:	f7ff ff54 	bl	8000948 <xbee_length>
	xbee_checksum_count(&sensor);
 8000aa0:	a802      	add	r0, sp, #8
 8000aa2:	f7ff ff5f 	bl	8000964 <xbee_checksum_count>
	xbee_send(&sensor);
 8000aa6:	a802      	add	r0, sp, #8
 8000aa8:	f7ff ff7a 	bl	80009a0 <xbee_send>
}
 8000aac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000ab0:	b004      	add	sp, #16
 8000ab2:	4770      	bx	lr

08000ab4 <xbee_receive>:
    return result;
}


///zastanowić się jak sensownie zwracać dane
void xbee_receive(){
 8000ab4:	b470      	push	{r4, r5, r6}
	for(int i=0; i<length; i++){
 8000ab6:	4b34      	ldr	r3, [pc, #208]	; (8000b88 <xbee_receive+0xd4>)
 8000ab8:	f1a3 0435 	sub.w	r4, r3, #53	; 0x35
 8000abc:	f103 011e 	add.w	r1, r3, #30
		array[i] = 0;
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	f803 2f01 	strb.w	r2, [r3, #1]!
	for(int i=0; i<length; i++){
 8000ac6:	428b      	cmp	r3, r1
 8000ac8:	d1fb      	bne.n	8000ac2 <xbee_receive+0xe>
	xbee_clear_array(xbee_rx.data_array, DATA_ARRAY);
	xbee_rx.data_flag = 0;
 8000aca:	4b30      	ldr	r3, [pc, #192]	; (8000b8c <xbee_receive+0xd8>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	//ogarnięcie długości
	xbee_rx.length = (xbee_rx.mess_loaded[1] << 8) + xbee_rx.mess_loaded[2];
 8000ad2:	795a      	ldrb	r2, [r3, #5]
 8000ad4:	799d      	ldrb	r5, [r3, #6]
 8000ad6:	eb05 2502 	add.w	r5, r5, r2, lsl #8
 8000ada:	601d      	str	r5, [r3, #0]
	//długość całej tablicy
	int mess_length = xbee_rx.length + 3; //3 bo dodajemy 4 elementy ale musimy odjąć jeden bo tablice sa numerowane od 0
 8000adc:	1cee      	adds	r6, r5, #3


	//sprawdzenie checksum
	for(int i=3; i<mess_length; i++){
 8000ade:	2e03      	cmp	r6, #3
 8000ae0:	dd0e      	ble.n	8000b00 <xbee_receive+0x4c>
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8000ae8:	3206      	adds	r2, #6
 8000aea:	1da0      	adds	r0, r4, #6
 8000aec:	4428      	add	r0, r5
		xbee_rx.checksum += xbee_rx.mess_loaded[i];
 8000aee:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8000af2:	440b      	add	r3, r1
 8000af4:	b2db      	uxtb	r3, r3
	for(int i=3; i<mess_length; i++){
 8000af6:	4282      	cmp	r2, r0
 8000af8:	d1f9      	bne.n	8000aee <xbee_receive+0x3a>
 8000afa:	4a24      	ldr	r2, [pc, #144]	; (8000b8c <xbee_receive+0xd8>)
 8000afc:	f882 3055 	strb.w	r3, [r2, #85]	; 0x55
	}
	xbee_rx.checksum = 0xff - xbee_rx.checksum;
 8000b00:	4a22      	ldr	r2, [pc, #136]	; (8000b8c <xbee_receive+0xd8>)
 8000b02:	f892 3055 	ldrb.w	r3, [r2, #85]	; 0x55
 8000b06:	43db      	mvns	r3, r3
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	f882 3055 	strb.w	r3, [r2, #85]	; 0x55
	//sprawdzenie czy checksum sie zgadza
	if(xbee_rx.checksum != xbee_rx.mess_loaded[mess_length]){
 8000b0e:	4432      	add	r2, r6
 8000b10:	7912      	ldrb	r2, [r2, #4]
 8000b12:	429a      	cmp	r2, r3
 8000b14:	d00e      	beq.n	8000b34 <xbee_receive+0x80>
 8000b16:	4b1e      	ldr	r3, [pc, #120]	; (8000b90 <xbee_receive+0xdc>)
 8000b18:	f104 0235 	add.w	r2, r4, #53	; 0x35
		array[i] = 0;
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	f803 1f01 	strb.w	r1, [r3, #1]!
	for(int i=0; i<length; i++){
 8000b22:	429a      	cmp	r2, r3
 8000b24:	d1fb      	bne.n	8000b1e <xbee_receive+0x6a>
	xbee_rx.length = 0;
 8000b26:	4b19      	ldr	r3, [pc, #100]	; (8000b8c <xbee_receive+0xd8>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
	xbee_rx.checksum = 0;
 8000b2c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
		//debug
		//xbee_rx.data_array[k] = '\n';
		//xbee_rx.data = xbee_data_convert(xbee_rx.data_array);
	}
	xbee_clear();
}
 8000b30:	bc70      	pop	{r4, r5, r6}
 8000b32:	4770      	bx	lr
	if(xbee_rx.length == 7){
 8000b34:	2d07      	cmp	r5, #7
 8000b36:	d01c      	beq.n	8000b72 <xbee_receive+0xbe>
		for(i = 15, k = 0; i<mess_length; ++i, ++k){
 8000b38:	2e0f      	cmp	r6, #15
 8000b3a:	dd08      	ble.n	8000b4e <xbee_receive+0x9a>
 8000b3c:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <xbee_receive+0xe0>)
 8000b3e:	1da2      	adds	r2, r4, #6
 8000b40:	4415      	add	r5, r2
			xbee_rx.data_array[k] = xbee_rx.mess_loaded[i];
 8000b42:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8000b46:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		for(i = 15, k = 0; i<mess_length; ++i, ++k){
 8000b4a:	42ab      	cmp	r3, r5
 8000b4c:	d1f9      	bne.n	8000b42 <xbee_receive+0x8e>
		xbee_rx.data_flag = 1;
 8000b4e:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <xbee_receive+0xd8>)
 8000b50:	2201      	movs	r2, #1
 8000b52:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	for(int i=0; i<length; i++){
 8000b56:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <xbee_receive+0xdc>)
 8000b58:	f104 0235 	add.w	r2, r4, #53	; 0x35
		array[i] = 0;
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	f803 1f01 	strb.w	r1, [r3, #1]!
	for(int i=0; i<length; i++){
 8000b62:	429a      	cmp	r2, r3
 8000b64:	d1fb      	bne.n	8000b5e <xbee_receive+0xaa>
	xbee_rx.length = 0;
 8000b66:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <xbee_receive+0xd8>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
	xbee_rx.checksum = 0;
 8000b6c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
}
 8000b70:	e7de      	b.n	8000b30 <xbee_receive+0x7c>
		if(xbee_rx.mess_loaded[mess_length-1] == 0 && xbee_rx.mess_loaded[mess_length-2] == 0 && xbee_rx.mess_loaded[mess_length-3] == 0){
 8000b72:	4a06      	ldr	r2, [pc, #24]	; (8000b8c <xbee_receive+0xd8>)
 8000b74:	7b53      	ldrb	r3, [r2, #13]
 8000b76:	7b11      	ldrb	r1, [r2, #12]
 8000b78:	430b      	orrs	r3, r1
 8000b7a:	7ad2      	ldrb	r2, [r2, #11]
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	d1ea      	bne.n	8000b56 <xbee_receive+0xa2>
			xbee_rx.response = 1;
 8000b80:	4b02      	ldr	r3, [pc, #8]	; (8000b8c <xbee_receive+0xd8>)
 8000b82:	2201      	movs	r2, #1
 8000b84:	659a      	str	r2, [r3, #88]	; 0x58
 8000b86:	e7e6      	b.n	8000b56 <xbee_receive+0xa2>
 8000b88:	200000c1 	.word	0x200000c1
 8000b8c:	2000008c 	.word	0x2000008c
 8000b90:	2000008f 	.word	0x2000008f
 8000b94:	2000009e 	.word	0x2000009e

08000b98 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000b98:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000b9a:	e003      	b.n	8000ba4 <LoopCopyDataInit>

08000b9c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	; (8000bcc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000b9e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000ba0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000ba2:	3104      	adds	r1, #4

08000ba4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000ba4:	480a      	ldr	r0, [pc, #40]	; (8000bd0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000ba6:	4b0b      	ldr	r3, [pc, #44]	; (8000bd4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000ba8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000baa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000bac:	d3f6      	bcc.n	8000b9c <CopyDataInit>
  ldr r2, =_sbss
 8000bae:	4a0a      	ldr	r2, [pc, #40]	; (8000bd8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000bb0:	e002      	b.n	8000bb8 <LoopFillZerobss>

08000bb2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000bb2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000bb4:	f842 3b04 	str.w	r3, [r2], #4

08000bb8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000bb8:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000bba:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000bbc:	d3f9      	bcc.n	8000bb2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bbe:	f7ff fd7b 	bl	80006b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bc2:	f001 faff 	bl	80021c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bc6:	f7ff fb77 	bl	80002b8 <main>
  bx lr
 8000bca:	4770      	bx	lr
  ldr r3, =_sidata
 8000bcc:	08002480 	.word	0x08002480
  ldr r0, =_sdata
 8000bd0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000bd4:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000bd8:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000bdc:	20000564 	.word	0x20000564

08000be0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000be0:	e7fe      	b.n	8000be0 <ADC1_2_IRQHandler>
	...

08000be4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be4:	b510      	push	{r4, lr}
 8000be6:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000be8:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <HAL_InitTick+0x40>)
 8000bea:	7818      	ldrb	r0, [r3, #0]
 8000bec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bf0:	fbb3 f3f0 	udiv	r3, r3, r0
 8000bf4:	4a0c      	ldr	r2, [pc, #48]	; (8000c28 <HAL_InitTick+0x44>)
 8000bf6:	6810      	ldr	r0, [r2, #0]
 8000bf8:	fbb0 f0f3 	udiv	r0, r0, r3
 8000bfc:	f000 f8a2 	bl	8000d44 <HAL_SYSTICK_Config>
 8000c00:	b968      	cbnz	r0, 8000c1e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c02:	2c0f      	cmp	r4, #15
 8000c04:	d901      	bls.n	8000c0a <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000c06:	2001      	movs	r0, #1
 8000c08:	e00a      	b.n	8000c20 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	4621      	mov	r1, r4
 8000c0e:	f04f 30ff 	mov.w	r0, #4294967295
 8000c12:	f000 f857 	bl	8000cc4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c16:	4b05      	ldr	r3, [pc, #20]	; (8000c2c <HAL_InitTick+0x48>)
 8000c18:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000c1a:	2000      	movs	r0, #0
 8000c1c:	e000      	b.n	8000c20 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000c1e:	2001      	movs	r0, #1
}
 8000c20:	bd10      	pop	{r4, pc}
 8000c22:	bf00      	nop
 8000c24:	20000004 	.word	0x20000004
 8000c28:	20000000 	.word	0x20000000
 8000c2c:	20000008 	.word	0x20000008

08000c30 <HAL_Init>:
{
 8000c30:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c32:	4a07      	ldr	r2, [pc, #28]	; (8000c50 <HAL_Init+0x20>)
 8000c34:	6813      	ldr	r3, [r2, #0]
 8000c36:	f043 0310 	orr.w	r3, r3, #16
 8000c3a:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c3c:	2003      	movs	r0, #3
 8000c3e:	f000 f82f 	bl	8000ca0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c42:	2000      	movs	r0, #0
 8000c44:	f7ff ffce 	bl	8000be4 <HAL_InitTick>
  HAL_MspInit();
 8000c48:	f7ff fcde 	bl	8000608 <HAL_MspInit>
}
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	bd08      	pop	{r3, pc}
 8000c50:	40022000 	.word	0x40022000

08000c54 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000c54:	4a03      	ldr	r2, [pc, #12]	; (8000c64 <HAL_IncTick+0x10>)
 8000c56:	6811      	ldr	r1, [r2, #0]
 8000c58:	4b03      	ldr	r3, [pc, #12]	; (8000c68 <HAL_IncTick+0x14>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	440b      	add	r3, r1
 8000c5e:	6013      	str	r3, [r2, #0]
}
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	20000550 	.word	0x20000550
 8000c68:	20000004 	.word	0x20000004

08000c6c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000c6c:	4b01      	ldr	r3, [pc, #4]	; (8000c74 <HAL_GetTick+0x8>)
 8000c6e:	6818      	ldr	r0, [r3, #0]
}
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	20000550 	.word	0x20000550

08000c78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c78:	b538      	push	{r3, r4, r5, lr}
 8000c7a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000c7c:	f7ff fff6 	bl	8000c6c <HAL_GetTick>
 8000c80:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c82:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000c86:	d002      	beq.n	8000c8e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c88:	4b04      	ldr	r3, [pc, #16]	; (8000c9c <HAL_Delay+0x24>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c8e:	f7ff ffed 	bl	8000c6c <HAL_GetTick>
 8000c92:	1b40      	subs	r0, r0, r5
 8000c94:	42a0      	cmp	r0, r4
 8000c96:	d3fa      	bcc.n	8000c8e <HAL_Delay+0x16>
  {
  }
}
 8000c98:	bd38      	pop	{r3, r4, r5, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20000004 	.word	0x20000004

08000ca0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca0:	4907      	ldr	r1, [pc, #28]	; (8000cc0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000ca2:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ca4:	0203      	lsls	r3, r0, #8
 8000ca6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000caa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000cae:	0412      	lsls	r2, r2, #16
 8000cb0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000cbc:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000cbe:	4770      	bx	lr
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cc4:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cc6:	4b16      	ldr	r3, [pc, #88]	; (8000d20 <HAL_NVIC_SetPriority+0x5c>)
 8000cc8:	68db      	ldr	r3, [r3, #12]
 8000cca:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cce:	f1c3 0407 	rsb	r4, r3, #7
 8000cd2:	2c04      	cmp	r4, #4
 8000cd4:	bf28      	it	cs
 8000cd6:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cd8:	1d1d      	adds	r5, r3, #4
 8000cda:	2d06      	cmp	r5, #6
 8000cdc:	bf8c      	ite	hi
 8000cde:	3b03      	subhi	r3, #3
 8000ce0:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce2:	f04f 35ff 	mov.w	r5, #4294967295
 8000ce6:	fa05 f404 	lsl.w	r4, r5, r4
 8000cea:	ea21 0104 	bic.w	r1, r1, r4
 8000cee:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf0:	fa05 f303 	lsl.w	r3, r5, r3
 8000cf4:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf8:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8000cfa:	2800      	cmp	r0, #0
 8000cfc:	db09      	blt.n	8000d12 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfe:	0109      	lsls	r1, r1, #4
 8000d00:	b2c9      	uxtb	r1, r1
 8000d02:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000d06:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000d0a:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000d0e:	bc30      	pop	{r4, r5}
 8000d10:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d12:	f000 000f 	and.w	r0, r0, #15
 8000d16:	0109      	lsls	r1, r1, #4
 8000d18:	b2c9      	uxtb	r1, r1
 8000d1a:	4b02      	ldr	r3, [pc, #8]	; (8000d24 <HAL_NVIC_SetPriority+0x60>)
 8000d1c:	5419      	strb	r1, [r3, r0]
 8000d1e:	e7f6      	b.n	8000d0e <HAL_NVIC_SetPriority+0x4a>
 8000d20:	e000ed00 	.word	0xe000ed00
 8000d24:	e000ed14 	.word	0xe000ed14

08000d28 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000d28:	2800      	cmp	r0, #0
 8000d2a:	db08      	blt.n	8000d3e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d2c:	0942      	lsrs	r2, r0, #5
 8000d2e:	f000 001f 	and.w	r0, r0, #31
 8000d32:	2301      	movs	r3, #1
 8000d34:	fa03 f000 	lsl.w	r0, r3, r0
 8000d38:	4b01      	ldr	r3, [pc, #4]	; (8000d40 <HAL_NVIC_EnableIRQ+0x18>)
 8000d3a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000d3e:	4770      	bx	lr
 8000d40:	e000e100 	.word	0xe000e100

08000d44 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d44:	3801      	subs	r0, #1
 8000d46:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d4a:	d20a      	bcs.n	8000d62 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d4c:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <HAL_SYSTICK_Config+0x24>)
 8000d4e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d50:	4a06      	ldr	r2, [pc, #24]	; (8000d6c <HAL_SYSTICK_Config+0x28>)
 8000d52:	21f0      	movs	r1, #240	; 0xf0
 8000d54:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d58:	2000      	movs	r0, #0
 8000d5a:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d5c:	2207      	movs	r2, #7
 8000d5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d60:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000d62:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	e000e010 	.word	0xe000e010
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000d70:	b360      	cbz	r0, 8000dcc <HAL_DMA_Init+0x5c>
{
 8000d72:	b410      	push	{r4}
 8000d74:	4602      	mov	r2, r0
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000d76:	6801      	ldr	r1, [r0, #0]
 8000d78:	4b15      	ldr	r3, [pc, #84]	; (8000dd0 <HAL_DMA_Init+0x60>)
 8000d7a:	440b      	add	r3, r1
 8000d7c:	4815      	ldr	r0, [pc, #84]	; (8000dd4 <HAL_DMA_Init+0x64>)
 8000d7e:	fba0 0303 	umull	r0, r3, r0, r3
 8000d82:	091b      	lsrs	r3, r3, #4
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	6413      	str	r3, [r2, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000d88:	4b13      	ldr	r3, [pc, #76]	; (8000dd8 <HAL_DMA_Init+0x68>)
 8000d8a:	63d3      	str	r3, [r2, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000d92:	6808      	ldr	r0, [r1, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000d94:	f420 507f 	bic.w	r0, r0, #16320	; 0x3fc0
 8000d98:	f020 0030 	bic.w	r0, r0, #48	; 0x30
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000d9c:	6853      	ldr	r3, [r2, #4]
 8000d9e:	6894      	ldr	r4, [r2, #8]
 8000da0:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000da2:	68d4      	ldr	r4, [r2, #12]
 8000da4:	4323      	orrs	r3, r4
 8000da6:	6914      	ldr	r4, [r2, #16]
 8000da8:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000daa:	6954      	ldr	r4, [r2, #20]
 8000dac:	4323      	orrs	r3, r4
 8000dae:	6994      	ldr	r4, [r2, #24]
 8000db0:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8000db2:	69d4      	ldr	r4, [r2, #28]
 8000db4:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8000db6:	4303      	orrs	r3, r0

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000db8:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000dba:	2000      	movs	r0, #0
 8000dbc:	6390      	str	r0, [r2, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000dc4:	f882 0020 	strb.w	r0, [r2, #32]

  return HAL_OK;
}
 8000dc8:	bc10      	pop	{r4}
 8000dca:	4770      	bx	lr
    return HAL_ERROR;
 8000dcc:	2001      	movs	r0, #1
}
 8000dce:	4770      	bx	lr
 8000dd0:	bffdfff8 	.word	0xbffdfff8
 8000dd4:	cccccccd 	.word	0xcccccccd
 8000dd8:	40020000 	.word	0x40020000

08000ddc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ddc:	b470      	push	{r4, r5, r6}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000dde:	f890 4020 	ldrb.w	r4, [r0, #32]
 8000de2:	2c01      	cmp	r4, #1
 8000de4:	d042      	beq.n	8000e6c <HAL_DMA_Start_IT+0x90>
 8000de6:	2401      	movs	r4, #1
 8000de8:	f880 4020 	strb.w	r4, [r0, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000dec:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
 8000df0:	2c01      	cmp	r4, #1
 8000df2:	d005      	beq.n	8000e00 <HAL_DMA_Start_IT+0x24>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000df4:	2300      	movs	r3, #0
 8000df6:	f880 3020 	strb.w	r3, [r0, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000dfa:	2002      	movs	r0, #2
  }    
  return status;
}
 8000dfc:	bc70      	pop	{r4, r5, r6}
 8000dfe:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e00:	2402      	movs	r4, #2
 8000e02:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e06:	2400      	movs	r4, #0
 8000e08:	6384      	str	r4, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8000e0a:	6805      	ldr	r5, [r0, #0]
 8000e0c:	682c      	ldr	r4, [r5, #0]
 8000e0e:	f024 0401 	bic.w	r4, r4, #1
 8000e12:	602c      	str	r4, [r5, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e14:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8000e16:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8000e18:	2401      	movs	r4, #1
 8000e1a:	40b4      	lsls	r4, r6
 8000e1c:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000e1e:	6804      	ldr	r4, [r0, #0]
 8000e20:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e22:	6843      	ldr	r3, [r0, #4]
 8000e24:	2b10      	cmp	r3, #16
 8000e26:	d011      	beq.n	8000e4c <HAL_DMA_Start_IT+0x70>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8000e28:	6803      	ldr	r3, [r0, #0]
 8000e2a:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8000e2c:	6803      	ldr	r3, [r0, #0]
 8000e2e:	60da      	str	r2, [r3, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8000e30:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000e32:	b183      	cbz	r3, 8000e56 <HAL_DMA_Start_IT+0x7a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e34:	6802      	ldr	r2, [r0, #0]
 8000e36:	6813      	ldr	r3, [r2, #0]
 8000e38:	f043 030e 	orr.w	r3, r3, #14
 8000e3c:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8000e3e:	6802      	ldr	r2, [r0, #0]
 8000e40:	6813      	ldr	r3, [r2, #0]
 8000e42:	f043 0301 	orr.w	r3, r3, #1
 8000e46:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e48:	2000      	movs	r0, #0
 8000e4a:	e7d7      	b.n	8000dfc <HAL_DMA_Start_IT+0x20>
    hdma->Instance->CPAR = DstAddress;
 8000e4c:	6803      	ldr	r3, [r0, #0]
 8000e4e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000e50:	6803      	ldr	r3, [r0, #0]
 8000e52:	60d9      	str	r1, [r3, #12]
 8000e54:	e7ec      	b.n	8000e30 <HAL_DMA_Start_IT+0x54>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e56:	6802      	ldr	r2, [r0, #0]
 8000e58:	6813      	ldr	r3, [r2, #0]
 8000e5a:	f023 0304 	bic.w	r3, r3, #4
 8000e5e:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000e60:	6802      	ldr	r2, [r0, #0]
 8000e62:	6813      	ldr	r3, [r2, #0]
 8000e64:	f043 030a 	orr.w	r3, r3, #10
 8000e68:	6013      	str	r3, [r2, #0]
 8000e6a:	e7e8      	b.n	8000e3e <HAL_DMA_Start_IT+0x62>
  __HAL_LOCK(hdma);
 8000e6c:	2002      	movs	r0, #2
 8000e6e:	e7c5      	b.n	8000dfc <HAL_DMA_Start_IT+0x20>

08000e70 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e70:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	d006      	beq.n	8000e86 <HAL_DMA_Abort+0x16>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e78:	2304      	movs	r3, #4
 8000e7a:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	f880 3020 	strb.w	r3, [r0, #32]
    return HAL_ERROR;
 8000e82:	2001      	movs	r0, #1
 8000e84:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e86:	6802      	ldr	r2, [r0, #0]
 8000e88:	6813      	ldr	r3, [r2, #0]
 8000e8a:	f023 030e 	bic.w	r3, r3, #14
 8000e8e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8000e90:	6802      	ldr	r2, [r0, #0]
 8000e92:	6813      	ldr	r3, [r2, #0]
 8000e94:	f023 0301 	bic.w	r3, r3, #1
 8000e98:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e9a:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	604b      	str	r3, [r1, #4]
  hdma->State = HAL_DMA_STATE_READY;
 8000ea6:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  __HAL_UNLOCK(hdma);      
 8000eaa:	2300      	movs	r3, #0
 8000eac:	f880 3020 	strb.w	r3, [r0, #32]
  return status; 
 8000eb0:	4618      	mov	r0, r3
}
 8000eb2:	4770      	bx	lr

08000eb4 <HAL_DMA_Abort_IT>:
{  
 8000eb4:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000eb6:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d003      	beq.n	8000ec6 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ebe:	2304      	movs	r3, #4
 8000ec0:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8000ec2:	2001      	movs	r0, #1
}
 8000ec4:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ec6:	6802      	ldr	r2, [r0, #0]
 8000ec8:	6813      	ldr	r3, [r2, #0]
 8000eca:	f023 030e 	bic.w	r3, r3, #14
 8000ece:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8000ed0:	6802      	ldr	r2, [r0, #0]
 8000ed2:	6813      	ldr	r3, [r2, #0]
 8000ed4:	f023 0301 	bic.w	r3, r3, #1
 8000ed8:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000eda:	6803      	ldr	r3, [r0, #0]
 8000edc:	4a18      	ldr	r2, [pc, #96]	; (8000f40 <HAL_DMA_Abort_IT+0x8c>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d013      	beq.n	8000f0a <HAL_DMA_Abort_IT+0x56>
 8000ee2:	3214      	adds	r2, #20
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d01e      	beq.n	8000f26 <HAL_DMA_Abort_IT+0x72>
 8000ee8:	3214      	adds	r2, #20
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d01d      	beq.n	8000f2a <HAL_DMA_Abort_IT+0x76>
 8000eee:	3214      	adds	r2, #20
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d01d      	beq.n	8000f30 <HAL_DMA_Abort_IT+0x7c>
 8000ef4:	3214      	adds	r2, #20
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d01d      	beq.n	8000f36 <HAL_DMA_Abort_IT+0x82>
 8000efa:	3214      	adds	r2, #20
 8000efc:	4293      	cmp	r3, r2
 8000efe:	bf0c      	ite	eq
 8000f00:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8000f04:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8000f08:	e000      	b.n	8000f0c <HAL_DMA_Abort_IT+0x58>
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	4a0d      	ldr	r2, [pc, #52]	; (8000f44 <HAL_DMA_Abort_IT+0x90>)
 8000f0e:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000f10:	2301      	movs	r3, #1
 8000f12:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000f16:	2300      	movs	r3, #0
 8000f18:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8000f1c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000f1e:	b16b      	cbz	r3, 8000f3c <HAL_DMA_Abort_IT+0x88>
      hdma->XferAbortCallback(hdma);
 8000f20:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000f22:	2000      	movs	r0, #0
 8000f24:	e7ce      	b.n	8000ec4 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000f26:	2310      	movs	r3, #16
 8000f28:	e7f0      	b.n	8000f0c <HAL_DMA_Abort_IT+0x58>
 8000f2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f2e:	e7ed      	b.n	8000f0c <HAL_DMA_Abort_IT+0x58>
 8000f30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f34:	e7ea      	b.n	8000f0c <HAL_DMA_Abort_IT+0x58>
 8000f36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f3a:	e7e7      	b.n	8000f0c <HAL_DMA_Abort_IT+0x58>
  HAL_StatusTypeDef status = HAL_OK;
 8000f3c:	2000      	movs	r0, #0
 8000f3e:	e7c1      	b.n	8000ec4 <HAL_DMA_Abort_IT+0x10>
 8000f40:	40020008 	.word	0x40020008
 8000f44:	40020000 	.word	0x40020000

08000f48 <HAL_DMA_IRQHandler>:
{
 8000f48:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000f4a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8000f4c:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000f4e:	6804      	ldr	r4, [r0, #0]
 8000f50:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000f52:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8000f54:	2304      	movs	r3, #4
 8000f56:	408b      	lsls	r3, r1
 8000f58:	4213      	tst	r3, r2
 8000f5a:	d034      	beq.n	8000fc6 <HAL_DMA_IRQHandler+0x7e>
 8000f5c:	f015 0f04 	tst.w	r5, #4
 8000f60:	d031      	beq.n	8000fc6 <HAL_DMA_IRQHandler+0x7e>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f62:	6823      	ldr	r3, [r4, #0]
 8000f64:	f013 0f20 	tst.w	r3, #32
 8000f68:	d103      	bne.n	8000f72 <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f6a:	6823      	ldr	r3, [r4, #0]
 8000f6c:	f023 0304 	bic.w	r3, r3, #4
 8000f70:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000f72:	6803      	ldr	r3, [r0, #0]
 8000f74:	4a42      	ldr	r2, [pc, #264]	; (8001080 <HAL_DMA_IRQHandler+0x138>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d013      	beq.n	8000fa2 <HAL_DMA_IRQHandler+0x5a>
 8000f7a:	3214      	adds	r2, #20
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d017      	beq.n	8000fb0 <HAL_DMA_IRQHandler+0x68>
 8000f80:	3214      	adds	r2, #20
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d016      	beq.n	8000fb4 <HAL_DMA_IRQHandler+0x6c>
 8000f86:	3214      	adds	r2, #20
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d016      	beq.n	8000fba <HAL_DMA_IRQHandler+0x72>
 8000f8c:	3214      	adds	r2, #20
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d016      	beq.n	8000fc0 <HAL_DMA_IRQHandler+0x78>
 8000f92:	3214      	adds	r2, #20
 8000f94:	4293      	cmp	r3, r2
 8000f96:	bf0c      	ite	eq
 8000f98:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8000f9c:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8000fa0:	e000      	b.n	8000fa4 <HAL_DMA_IRQHandler+0x5c>
 8000fa2:	2304      	movs	r3, #4
 8000fa4:	4a37      	ldr	r2, [pc, #220]	; (8001084 <HAL_DMA_IRQHandler+0x13c>)
 8000fa6:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8000fa8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000faa:	b103      	cbz	r3, 8000fae <HAL_DMA_IRQHandler+0x66>
      hdma->XferHalfCpltCallback(hdma);
 8000fac:	4798      	blx	r3
}
 8000fae:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000fb0:	2340      	movs	r3, #64	; 0x40
 8000fb2:	e7f7      	b.n	8000fa4 <HAL_DMA_IRQHandler+0x5c>
 8000fb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fb8:	e7f4      	b.n	8000fa4 <HAL_DMA_IRQHandler+0x5c>
 8000fba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fbe:	e7f1      	b.n	8000fa4 <HAL_DMA_IRQHandler+0x5c>
 8000fc0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000fc4:	e7ee      	b.n	8000fa4 <HAL_DMA_IRQHandler+0x5c>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	408b      	lsls	r3, r1
 8000fca:	4213      	tst	r3, r2
 8000fcc:	d03b      	beq.n	8001046 <HAL_DMA_IRQHandler+0xfe>
 8000fce:	f015 0f02 	tst.w	r5, #2
 8000fd2:	d038      	beq.n	8001046 <HAL_DMA_IRQHandler+0xfe>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000fd4:	6823      	ldr	r3, [r4, #0]
 8000fd6:	f013 0f20 	tst.w	r3, #32
 8000fda:	d106      	bne.n	8000fea <HAL_DMA_IRQHandler+0xa2>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000fdc:	6823      	ldr	r3, [r4, #0]
 8000fde:	f023 030a 	bic.w	r3, r3, #10
 8000fe2:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000fea:	6803      	ldr	r3, [r0, #0]
 8000fec:	4a24      	ldr	r2, [pc, #144]	; (8001080 <HAL_DMA_IRQHandler+0x138>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d013      	beq.n	800101a <HAL_DMA_IRQHandler+0xd2>
 8000ff2:	3214      	adds	r2, #20
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d01b      	beq.n	8001030 <HAL_DMA_IRQHandler+0xe8>
 8000ff8:	3214      	adds	r2, #20
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d01a      	beq.n	8001034 <HAL_DMA_IRQHandler+0xec>
 8000ffe:	3214      	adds	r2, #20
 8001000:	4293      	cmp	r3, r2
 8001002:	d01a      	beq.n	800103a <HAL_DMA_IRQHandler+0xf2>
 8001004:	3214      	adds	r2, #20
 8001006:	4293      	cmp	r3, r2
 8001008:	d01a      	beq.n	8001040 <HAL_DMA_IRQHandler+0xf8>
 800100a:	3214      	adds	r2, #20
 800100c:	4293      	cmp	r3, r2
 800100e:	bf0c      	ite	eq
 8001010:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8001014:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8001018:	e000      	b.n	800101c <HAL_DMA_IRQHandler+0xd4>
 800101a:	2302      	movs	r3, #2
 800101c:	4a19      	ldr	r2, [pc, #100]	; (8001084 <HAL_DMA_IRQHandler+0x13c>)
 800101e:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8001020:	2300      	movs	r3, #0
 8001022:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8001026:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001028:	2b00      	cmp	r3, #0
 800102a:	d0c0      	beq.n	8000fae <HAL_DMA_IRQHandler+0x66>
      hdma->XferCpltCallback(hdma);
 800102c:	4798      	blx	r3
 800102e:	e7be      	b.n	8000fae <HAL_DMA_IRQHandler+0x66>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001030:	2320      	movs	r3, #32
 8001032:	e7f3      	b.n	800101c <HAL_DMA_IRQHandler+0xd4>
 8001034:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001038:	e7f0      	b.n	800101c <HAL_DMA_IRQHandler+0xd4>
 800103a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800103e:	e7ed      	b.n	800101c <HAL_DMA_IRQHandler+0xd4>
 8001040:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001044:	e7ea      	b.n	800101c <HAL_DMA_IRQHandler+0xd4>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001046:	2308      	movs	r3, #8
 8001048:	fa03 f101 	lsl.w	r1, r3, r1
 800104c:	4211      	tst	r1, r2
 800104e:	d0ae      	beq.n	8000fae <HAL_DMA_IRQHandler+0x66>
 8001050:	f015 0f08 	tst.w	r5, #8
 8001054:	d0ab      	beq.n	8000fae <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001056:	6823      	ldr	r3, [r4, #0]
 8001058:	f023 030e 	bic.w	r3, r3, #14
 800105c:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800105e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001060:	2301      	movs	r3, #1
 8001062:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001064:	fa03 f202 	lsl.w	r2, r3, r2
 8001068:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800106a:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 800106c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001070:	2300      	movs	r3, #0
 8001072:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8001076:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001078:	2b00      	cmp	r3, #0
 800107a:	d098      	beq.n	8000fae <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 800107c:	4798      	blx	r3
  return;
 800107e:	e796      	b.n	8000fae <HAL_DMA_IRQHandler+0x66>
 8001080:	40020008 	.word	0x40020008
 8001084:	40020000 	.word	0x40020000

08001088 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800108c:	b083      	sub	sp, #12
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800108e:	680f      	ldr	r7, [r1, #0]
 8001090:	2f00      	cmp	r7, #0
 8001092:	f000 80f8 	beq.w	8001286 <HAL_GPIO_Init+0x1fe>
  uint32_t config = 0x00u;
 8001096:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8001098:	4613      	mov	r3, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800109a:	f8df c200 	ldr.w	ip, [pc, #512]	; 800129c <HAL_GPIO_Init+0x214>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800109e:	4d7b      	ldr	r5, [pc, #492]	; (800128c <HAL_GPIO_Init+0x204>)
      switch (GPIO_Init->Mode)
 80010a0:	4e7b      	ldr	r6, [pc, #492]	; (8001290 <HAL_GPIO_Init+0x208>)
 80010a2:	f8df e1fc 	ldr.w	lr, [pc, #508]	; 80012a0 <HAL_GPIO_Init+0x218>
 80010a6:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 80012a4 <HAL_GPIO_Init+0x21c>
 80010aa:	e09a      	b.n	80011e2 <HAL_GPIO_Init+0x15a>
 80010ac:	2200      	movs	r2, #0
 80010ae:	e01e      	b.n	80010ee <HAL_GPIO_Init+0x66>
 80010b0:	42b4      	cmp	r4, r6
 80010b2:	d00c      	beq.n	80010ce <HAL_GPIO_Init+0x46>
 80010b4:	d904      	bls.n	80010c0 <HAL_GPIO_Init+0x38>
 80010b6:	4574      	cmp	r4, lr
 80010b8:	d009      	beq.n	80010ce <HAL_GPIO_Init+0x46>
 80010ba:	4544      	cmp	r4, r8
 80010bc:	d007      	beq.n	80010ce <HAL_GPIO_Init+0x46>
 80010be:	e016      	b.n	80010ee <HAL_GPIO_Init+0x66>
 80010c0:	4f74      	ldr	r7, [pc, #464]	; (8001294 <HAL_GPIO_Init+0x20c>)
 80010c2:	42bc      	cmp	r4, r7
 80010c4:	d003      	beq.n	80010ce <HAL_GPIO_Init+0x46>
 80010c6:	f507 2770 	add.w	r7, r7, #983040	; 0xf0000
 80010ca:	42bc      	cmp	r4, r7
 80010cc:	d10b      	bne.n	80010e6 <HAL_GPIO_Init+0x5e>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010ce:	688a      	ldr	r2, [r1, #8]
 80010d0:	2a00      	cmp	r2, #0
 80010d2:	f000 80ca 	beq.w	800126a <HAL_GPIO_Init+0x1e2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010d6:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80010d8:	bf0c      	ite	eq
 80010da:	f8c0 9010 	streq.w	r9, [r0, #16]
            GPIOx->BRR = ioposition;
 80010de:	f8c0 9014 	strne.w	r9, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010e2:	2208      	movs	r2, #8
 80010e4:	e003      	b.n	80010ee <HAL_GPIO_Init+0x66>
      switch (GPIO_Init->Mode)
 80010e6:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 80010ea:	42bc      	cmp	r4, r7
 80010ec:	d0ef      	beq.n	80010ce <HAL_GPIO_Init+0x46>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010ee:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80010f2:	f200 80bc 	bhi.w	800126e <HAL_GPIO_Init+0x1e6>
 80010f6:	4607      	mov	r7, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010f8:	ea4f 0983 	mov.w	r9, r3, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010fc:	683c      	ldr	r4, [r7, #0]
 80010fe:	f04f 0b0f 	mov.w	fp, #15
 8001102:	fa0b fb09 	lsl.w	fp, fp, r9
 8001106:	ea24 040b 	bic.w	r4, r4, fp
 800110a:	fa02 f909 	lsl.w	r9, r2, r9
 800110e:	ea44 0409 	orr.w	r4, r4, r9
 8001112:	603c      	str	r4, [r7, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001114:	684c      	ldr	r4, [r1, #4]
 8001116:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 800111a:	d05d      	beq.n	80011d8 <HAL_GPIO_Init+0x150>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800111c:	f8dc 4018 	ldr.w	r4, [ip, #24]
 8001120:	f044 0401 	orr.w	r4, r4, #1
 8001124:	f8cc 4018 	str.w	r4, [ip, #24]
 8001128:	f8dc 4018 	ldr.w	r4, [ip, #24]
 800112c:	f004 0401 	and.w	r4, r4, #1
 8001130:	9401      	str	r4, [sp, #4]
 8001132:	9c01      	ldr	r4, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8001134:	f023 0403 	bic.w	r4, r3, #3
 8001138:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800113c:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 8001140:	f8d4 9008 	ldr.w	r9, [r4, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001144:	f003 0703 	and.w	r7, r3, #3
 8001148:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 800114c:	270f      	movs	r7, #15
 800114e:	fa07 f70b 	lsl.w	r7, r7, fp
 8001152:	ea29 0907 	bic.w	r9, r9, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001156:	4f50      	ldr	r7, [pc, #320]	; (8001298 <HAL_GPIO_Init+0x210>)
 8001158:	42b8      	cmp	r0, r7
 800115a:	f000 808e 	beq.w	800127a <HAL_GPIO_Init+0x1f2>
 800115e:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001162:	42b8      	cmp	r0, r7
 8001164:	f000 808b 	beq.w	800127e <HAL_GPIO_Init+0x1f6>
 8001168:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800116c:	42b8      	cmp	r0, r7
 800116e:	f000 8088 	beq.w	8001282 <HAL_GPIO_Init+0x1fa>
 8001172:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001176:	42b8      	cmp	r0, r7
 8001178:	bf0c      	ite	eq
 800117a:	2703      	moveq	r7, #3
 800117c:	2704      	movne	r7, #4
 800117e:	fa07 f70b 	lsl.w	r7, r7, fp
 8001182:	ea47 0709 	orr.w	r7, r7, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8001186:	60a7      	str	r7, [r4, #8]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001188:	684c      	ldr	r4, [r1, #4]
 800118a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800118e:	682c      	ldr	r4, [r5, #0]
 8001190:	bf14      	ite	ne
 8001192:	ea44 040a 	orrne.w	r4, r4, sl
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001196:	ea24 040a 	biceq.w	r4, r4, sl
 800119a:	602c      	str	r4, [r5, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800119c:	684c      	ldr	r4, [r1, #4]
 800119e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80011a2:	686c      	ldr	r4, [r5, #4]
 80011a4:	bf14      	ite	ne
 80011a6:	ea44 040a 	orrne.w	r4, r4, sl
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011aa:	ea24 040a 	biceq.w	r4, r4, sl
 80011ae:	606c      	str	r4, [r5, #4]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011b0:	684c      	ldr	r4, [r1, #4]
 80011b2:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80011b6:	68ac      	ldr	r4, [r5, #8]
 80011b8:	bf14      	ite	ne
 80011ba:	ea44 040a 	orrne.w	r4, r4, sl
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011be:	ea24 040a 	biceq.w	r4, r4, sl
 80011c2:	60ac      	str	r4, [r5, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011c4:	684c      	ldr	r4, [r1, #4]
 80011c6:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80011ca:	68ec      	ldr	r4, [r5, #12]
 80011cc:	bf14      	ite	ne
 80011ce:	ea44 040a 	orrne.w	r4, r4, sl
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011d2:	ea24 040a 	biceq.w	r4, r4, sl
 80011d6:	60ec      	str	r4, [r5, #12]
        }
      }
    }

	position++;
 80011d8:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011da:	680f      	ldr	r7, [r1, #0]
 80011dc:	fa37 f403 	lsrs.w	r4, r7, r3
 80011e0:	d051      	beq.n	8001286 <HAL_GPIO_Init+0x1fe>
    ioposition = (0x01uL << position);
 80011e2:	f04f 0901 	mov.w	r9, #1
 80011e6:	fa09 f903 	lsl.w	r9, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011ea:	ea09 0a07 	and.w	sl, r9, r7
    if (iocurrent == ioposition)
 80011ee:	ea39 0407 	bics.w	r4, r9, r7
 80011f2:	d1f1      	bne.n	80011d8 <HAL_GPIO_Init+0x150>
      switch (GPIO_Init->Mode)
 80011f4:	684c      	ldr	r4, [r1, #4]
 80011f6:	2c12      	cmp	r4, #18
 80011f8:	f63f af5a 	bhi.w	80010b0 <HAL_GPIO_Init+0x28>
 80011fc:	2c12      	cmp	r4, #18
 80011fe:	f63f af76 	bhi.w	80010ee <HAL_GPIO_Init+0x66>
 8001202:	a701      	add	r7, pc, #4	; (adr r7, 8001208 <HAL_GPIO_Init+0x180>)
 8001204:	f857 f024 	ldr.w	pc, [r7, r4, lsl #2]
 8001208:	080010cf 	.word	0x080010cf
 800120c:	08001255 	.word	0x08001255
 8001210:	0800125f 	.word	0x0800125f
 8001214:	080010ad 	.word	0x080010ad
 8001218:	080010ef 	.word	0x080010ef
 800121c:	080010ef 	.word	0x080010ef
 8001220:	080010ef 	.word	0x080010ef
 8001224:	080010ef 	.word	0x080010ef
 8001228:	080010ef 	.word	0x080010ef
 800122c:	080010ef 	.word	0x080010ef
 8001230:	080010ef 	.word	0x080010ef
 8001234:	080010ef 	.word	0x080010ef
 8001238:	080010ef 	.word	0x080010ef
 800123c:	080010ef 	.word	0x080010ef
 8001240:	080010ef 	.word	0x080010ef
 8001244:	080010ef 	.word	0x080010ef
 8001248:	080010ef 	.word	0x080010ef
 800124c:	08001259 	.word	0x08001259
 8001250:	08001265 	.word	0x08001265
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001254:	68ca      	ldr	r2, [r1, #12]
          break;
 8001256:	e74a      	b.n	80010ee <HAL_GPIO_Init+0x66>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001258:	68ca      	ldr	r2, [r1, #12]
 800125a:	3204      	adds	r2, #4
          break;
 800125c:	e747      	b.n	80010ee <HAL_GPIO_Init+0x66>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800125e:	68ca      	ldr	r2, [r1, #12]
 8001260:	3208      	adds	r2, #8
          break;
 8001262:	e744      	b.n	80010ee <HAL_GPIO_Init+0x66>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001264:	68ca      	ldr	r2, [r1, #12]
 8001266:	320c      	adds	r2, #12
          break;
 8001268:	e741      	b.n	80010ee <HAL_GPIO_Init+0x66>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800126a:	2204      	movs	r2, #4
 800126c:	e73f      	b.n	80010ee <HAL_GPIO_Init+0x66>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800126e:	1d07      	adds	r7, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001270:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8001274:	f1a9 0920 	sub.w	r9, r9, #32
 8001278:	e740      	b.n	80010fc <HAL_GPIO_Init+0x74>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800127a:	2700      	movs	r7, #0
 800127c:	e77f      	b.n	800117e <HAL_GPIO_Init+0xf6>
 800127e:	2701      	movs	r7, #1
 8001280:	e77d      	b.n	800117e <HAL_GPIO_Init+0xf6>
 8001282:	2702      	movs	r7, #2
 8001284:	e77b      	b.n	800117e <HAL_GPIO_Init+0xf6>
  }
}
 8001286:	b003      	add	sp, #12
 8001288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800128c:	40010400 	.word	0x40010400
 8001290:	10220000 	.word	0x10220000
 8001294:	10120000 	.word	0x10120000
 8001298:	40010800 	.word	0x40010800
 800129c:	40021000 	.word	0x40021000
 80012a0:	10310000 	.word	0x10310000
 80012a4:	10320000 	.word	0x10320000

080012a8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012a8:	6883      	ldr	r3, [r0, #8]
 80012aa:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80012ac:	bf14      	ite	ne
 80012ae:	2001      	movne	r0, #1
 80012b0:	2000      	moveq	r0, #0
 80012b2:	4770      	bx	lr

080012b4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012b4:	b10a      	cbz	r2, 80012ba <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012b6:	6101      	str	r1, [r0, #16]
 80012b8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012ba:	0409      	lsls	r1, r1, #16
 80012bc:	6101      	str	r1, [r0, #16]
  }
}
 80012be:	4770      	bx	lr

080012c0 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80012c0:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012c2:	ea01 0203 	and.w	r2, r1, r3
 80012c6:	ea21 0103 	bic.w	r1, r1, r3
 80012ca:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80012ce:	6101      	str	r1, [r0, #16]
}
 80012d0:	4770      	bx	lr

080012d2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80012d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012d4:	b087      	sub	sp, #28
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80012d6:	2800      	cmp	r0, #0
 80012d8:	d07a      	beq.n	80013d0 <HAL_PCD_Init+0xfe>
 80012da:	4605      	mov	r5, r0

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80012dc:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 80012e0:	b1db      	cbz	r3, 800131a <HAL_PCD_Init+0x48>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80012e2:	2303      	movs	r3, #3
 80012e4:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80012e8:	6828      	ldr	r0, [r5, #0]
 80012ea:	f000 ff4a 	bl	8002182 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012ee:	462c      	mov	r4, r5
 80012f0:	f854 7b10 	ldr.w	r7, [r4], #16
 80012f4:	466e      	mov	r6, sp
 80012f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012f8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80012fa:	6823      	ldr	r3, [r4, #0]
 80012fc:	6033      	str	r3, [r6, #0]
 80012fe:	1d2b      	adds	r3, r5, #4
 8001300:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001302:	4638      	mov	r0, r7
 8001304:	f000 ff36 	bl	8002174 <USB_CoreInit>
 8001308:	4604      	mov	r4, r0
 800130a:	b158      	cbz	r0, 8001324 <HAL_PCD_Init+0x52>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800130c:	2302      	movs	r3, #2
 800130e:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
    return HAL_ERROR;
 8001312:	2401      	movs	r4, #1
  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8001314:	4620      	mov	r0, r4
 8001316:	b007      	add	sp, #28
 8001318:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 800131a:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 800131e:	f7ff fac9 	bl	80008b4 <HAL_PCD_MspInit>
 8001322:	e7de      	b.n	80012e2 <HAL_PCD_Init+0x10>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001324:	2100      	movs	r1, #0
 8001326:	6828      	ldr	r0, [r5, #0]
 8001328:	f000 ff35 	bl	8002196 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800132c:	6868      	ldr	r0, [r5, #4]
 800132e:	b388      	cbz	r0, 8001394 <HAL_PCD_Init+0xc2>
 8001330:	4623      	mov	r3, r4
    hpcd->IN_ep[i].is_in = 1U;
 8001332:	2601      	movs	r6, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001334:	2100      	movs	r1, #0
    hpcd->IN_ep[i].is_in = 1U;
 8001336:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800133a:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800133e:	f882 6029 	strb.w	r6, [r2, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 8001342:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001346:	86d3      	strh	r3, [r2, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001348:	f882 102b 	strb.w	r1, [r2, #43]	; 0x2b
    hpcd->IN_ep[i].maxpacket = 0U;
 800134c:	6391      	str	r1, [r2, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 800134e:	63d1      	str	r1, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 8001350:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8001354:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8001358:	6411      	str	r1, [r2, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800135a:	3301      	adds	r3, #1
 800135c:	b2db      	uxtb	r3, r3
 800135e:	4283      	cmp	r3, r0
 8001360:	d3e9      	bcc.n	8001336 <HAL_PCD_Init+0x64>
    hpcd->OUT_ep[i].is_in = 0U;
 8001362:	2200      	movs	r2, #0
 8001364:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8001368:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800136c:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 8001370:	f883 4168 	strb.w	r4, [r3, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001374:	f883 216b 	strb.w	r2, [r3, #363]	; 0x16b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001378:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800137c:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001380:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8001384:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8001388:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800138c:	3401      	adds	r4, #1
 800138e:	b2e4      	uxtb	r4, r4
 8001390:	4284      	cmp	r4, r0
 8001392:	d3e7      	bcc.n	8001364 <HAL_PCD_Init+0x92>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001394:	462c      	mov	r4, r5
 8001396:	f854 7b10 	ldr.w	r7, [r4], #16
 800139a:	466e      	mov	r6, sp
 800139c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800139e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80013a0:	6823      	ldr	r3, [r4, #0]
 80013a2:	6033      	str	r3, [r6, #0]
 80013a4:	1d2b      	adds	r3, r5, #4
 80013a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013a8:	4638      	mov	r0, r7
 80013aa:	f000 fef6 	bl	800219a <USB_DevInit>
 80013ae:	4604      	mov	r4, r0
 80013b0:	b120      	cbz	r0, 80013bc <HAL_PCD_Init+0xea>
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013b2:	2302      	movs	r3, #2
 80013b4:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
    return HAL_ERROR;
 80013b8:	2401      	movs	r4, #1
 80013ba:	e7ab      	b.n	8001314 <HAL_PCD_Init+0x42>
  hpcd->USB_Address = 0U;
 80013bc:	2300      	movs	r3, #0
 80013be:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80013c2:	2301      	movs	r3, #1
 80013c4:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80013c8:	6828      	ldr	r0, [r5, #0]
 80013ca:	f000 fef9 	bl	80021c0 <USB_DevDisconnect>
  return HAL_OK;
 80013ce:	e7a1      	b.n	8001314 <HAL_PCD_Init+0x42>
    return HAL_ERROR;
 80013d0:	2401      	movs	r4, #1
 80013d2:	e79f      	b.n	8001314 <HAL_PCD_Init+0x42>

080013d4 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013d4:	2800      	cmp	r0, #0
 80013d6:	f000 8201 	beq.w	80017dc <HAL_RCC_OscConfig+0x408>
{
 80013da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013e2:	6803      	ldr	r3, [r0, #0]
 80013e4:	f013 0f01 	tst.w	r3, #1
 80013e8:	d02c      	beq.n	8001444 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013ea:	4baa      	ldr	r3, [pc, #680]	; (8001694 <HAL_RCC_OscConfig+0x2c0>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f003 030c 	and.w	r3, r3, #12
 80013f2:	2b04      	cmp	r3, #4
 80013f4:	d01d      	beq.n	8001432 <HAL_RCC_OscConfig+0x5e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013f6:	4ba7      	ldr	r3, [pc, #668]	; (8001694 <HAL_RCC_OscConfig+0x2c0>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f003 030c 	and.w	r3, r3, #12
 80013fe:	2b08      	cmp	r3, #8
 8001400:	d012      	beq.n	8001428 <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001402:	6863      	ldr	r3, [r4, #4]
 8001404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001408:	d041      	beq.n	800148e <HAL_RCC_OscConfig+0xba>
 800140a:	2b00      	cmp	r3, #0
 800140c:	d155      	bne.n	80014ba <HAL_RCC_OscConfig+0xe6>
 800140e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001412:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	e037      	b.n	8001498 <HAL_RCC_OscConfig+0xc4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001428:	4b9a      	ldr	r3, [pc, #616]	; (8001694 <HAL_RCC_OscConfig+0x2c0>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001430:	d0e7      	beq.n	8001402 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001432:	4b98      	ldr	r3, [pc, #608]	; (8001694 <HAL_RCC_OscConfig+0x2c0>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800143a:	d003      	beq.n	8001444 <HAL_RCC_OscConfig+0x70>
 800143c:	6863      	ldr	r3, [r4, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	f000 81ce 	beq.w	80017e0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001444:	6823      	ldr	r3, [r4, #0]
 8001446:	f013 0f02 	tst.w	r3, #2
 800144a:	d075      	beq.n	8001538 <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800144c:	4b91      	ldr	r3, [pc, #580]	; (8001694 <HAL_RCC_OscConfig+0x2c0>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f013 0f0c 	tst.w	r3, #12
 8001454:	d05f      	beq.n	8001516 <HAL_RCC_OscConfig+0x142>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001456:	4b8f      	ldr	r3, [pc, #572]	; (8001694 <HAL_RCC_OscConfig+0x2c0>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f003 030c 	and.w	r3, r3, #12
 800145e:	2b08      	cmp	r3, #8
 8001460:	d054      	beq.n	800150c <HAL_RCC_OscConfig+0x138>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001462:	6923      	ldr	r3, [r4, #16]
 8001464:	2b00      	cmp	r3, #0
 8001466:	f000 8089 	beq.w	800157c <HAL_RCC_OscConfig+0x1a8>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800146a:	4b8b      	ldr	r3, [pc, #556]	; (8001698 <HAL_RCC_OscConfig+0x2c4>)
 800146c:	2201      	movs	r2, #1
 800146e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001470:	f7ff fbfc 	bl	8000c6c <HAL_GetTick>
 8001474:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001476:	4e87      	ldr	r6, [pc, #540]	; (8001694 <HAL_RCC_OscConfig+0x2c0>)
 8001478:	6833      	ldr	r3, [r6, #0]
 800147a:	f013 0f02 	tst.w	r3, #2
 800147e:	d174      	bne.n	800156a <HAL_RCC_OscConfig+0x196>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001480:	f7ff fbf4 	bl	8000c6c <HAL_GetTick>
 8001484:	1b40      	subs	r0, r0, r5
 8001486:	2802      	cmp	r0, #2
 8001488:	d9f6      	bls.n	8001478 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_TIMEOUT;
 800148a:	2003      	movs	r0, #3
 800148c:	e1ad      	b.n	80017ea <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800148e:	4a81      	ldr	r2, [pc, #516]	; (8001694 <HAL_RCC_OscConfig+0x2c0>)
 8001490:	6813      	ldr	r3, [r2, #0]
 8001492:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001496:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001498:	6863      	ldr	r3, [r4, #4]
 800149a:	b343      	cbz	r3, 80014ee <HAL_RCC_OscConfig+0x11a>
        tickstart = HAL_GetTick();
 800149c:	f7ff fbe6 	bl	8000c6c <HAL_GetTick>
 80014a0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014a2:	4e7c      	ldr	r6, [pc, #496]	; (8001694 <HAL_RCC_OscConfig+0x2c0>)
 80014a4:	6833      	ldr	r3, [r6, #0]
 80014a6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80014aa:	d1cb      	bne.n	8001444 <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014ac:	f7ff fbde 	bl	8000c6c <HAL_GetTick>
 80014b0:	1b40      	subs	r0, r0, r5
 80014b2:	2864      	cmp	r0, #100	; 0x64
 80014b4:	d9f6      	bls.n	80014a4 <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 80014b6:	2003      	movs	r0, #3
 80014b8:	e197      	b.n	80017ea <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014be:	d009      	beq.n	80014d4 <HAL_RCC_OscConfig+0x100>
 80014c0:	4b74      	ldr	r3, [pc, #464]	; (8001694 <HAL_RCC_OscConfig+0x2c0>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	e7e1      	b.n	8001498 <HAL_RCC_OscConfig+0xc4>
 80014d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80014d8:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	e7d4      	b.n	8001498 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 80014ee:	f7ff fbbd 	bl	8000c6c <HAL_GetTick>
 80014f2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014f4:	4e67      	ldr	r6, [pc, #412]	; (8001694 <HAL_RCC_OscConfig+0x2c0>)
 80014f6:	6833      	ldr	r3, [r6, #0]
 80014f8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80014fc:	d0a2      	beq.n	8001444 <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014fe:	f7ff fbb5 	bl	8000c6c <HAL_GetTick>
 8001502:	1b40      	subs	r0, r0, r5
 8001504:	2864      	cmp	r0, #100	; 0x64
 8001506:	d9f6      	bls.n	80014f6 <HAL_RCC_OscConfig+0x122>
            return HAL_TIMEOUT;
 8001508:	2003      	movs	r0, #3
 800150a:	e16e      	b.n	80017ea <HAL_RCC_OscConfig+0x416>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800150c:	4b61      	ldr	r3, [pc, #388]	; (8001694 <HAL_RCC_OscConfig+0x2c0>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001514:	d1a5      	bne.n	8001462 <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001516:	4b5f      	ldr	r3, [pc, #380]	; (8001694 <HAL_RCC_OscConfig+0x2c0>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f013 0f02 	tst.w	r3, #2
 800151e:	d003      	beq.n	8001528 <HAL_RCC_OscConfig+0x154>
 8001520:	6923      	ldr	r3, [r4, #16]
 8001522:	2b01      	cmp	r3, #1
 8001524:	f040 815e 	bne.w	80017e4 <HAL_RCC_OscConfig+0x410>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001528:	4a5a      	ldr	r2, [pc, #360]	; (8001694 <HAL_RCC_OscConfig+0x2c0>)
 800152a:	6813      	ldr	r3, [r2, #0]
 800152c:	6961      	ldr	r1, [r4, #20]
 800152e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001532:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001536:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001538:	6823      	ldr	r3, [r4, #0]
 800153a:	f013 0f08 	tst.w	r3, #8
 800153e:	d03c      	beq.n	80015ba <HAL_RCC_OscConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001540:	69a3      	ldr	r3, [r4, #24]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d04f      	beq.n	80015e6 <HAL_RCC_OscConfig+0x212>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001546:	4b55      	ldr	r3, [pc, #340]	; (800169c <HAL_RCC_OscConfig+0x2c8>)
 8001548:	2201      	movs	r2, #1
 800154a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800154c:	f7ff fb8e 	bl	8000c6c <HAL_GetTick>
 8001550:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001552:	4e50      	ldr	r6, [pc, #320]	; (8001694 <HAL_RCC_OscConfig+0x2c0>)
 8001554:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001556:	f013 0f02 	tst.w	r3, #2
 800155a:	d121      	bne.n	80015a0 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800155c:	f7ff fb86 	bl	8000c6c <HAL_GetTick>
 8001560:	1b40      	subs	r0, r0, r5
 8001562:	2802      	cmp	r0, #2
 8001564:	d9f6      	bls.n	8001554 <HAL_RCC_OscConfig+0x180>
        {
          return HAL_TIMEOUT;
 8001566:	2003      	movs	r0, #3
 8001568:	e13f      	b.n	80017ea <HAL_RCC_OscConfig+0x416>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800156a:	4a4a      	ldr	r2, [pc, #296]	; (8001694 <HAL_RCC_OscConfig+0x2c0>)
 800156c:	6813      	ldr	r3, [r2, #0]
 800156e:	6961      	ldr	r1, [r4, #20]
 8001570:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001574:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001578:	6013      	str	r3, [r2, #0]
 800157a:	e7dd      	b.n	8001538 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 800157c:	4b46      	ldr	r3, [pc, #280]	; (8001698 <HAL_RCC_OscConfig+0x2c4>)
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001582:	f7ff fb73 	bl	8000c6c <HAL_GetTick>
 8001586:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001588:	4e42      	ldr	r6, [pc, #264]	; (8001694 <HAL_RCC_OscConfig+0x2c0>)
 800158a:	6833      	ldr	r3, [r6, #0]
 800158c:	f013 0f02 	tst.w	r3, #2
 8001590:	d0d2      	beq.n	8001538 <HAL_RCC_OscConfig+0x164>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001592:	f7ff fb6b 	bl	8000c6c <HAL_GetTick>
 8001596:	1b40      	subs	r0, r0, r5
 8001598:	2802      	cmp	r0, #2
 800159a:	d9f6      	bls.n	800158a <HAL_RCC_OscConfig+0x1b6>
            return HAL_TIMEOUT;
 800159c:	2003      	movs	r0, #3
 800159e:	e124      	b.n	80017ea <HAL_RCC_OscConfig+0x416>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80015a0:	4b3f      	ldr	r3, [pc, #252]	; (80016a0 <HAL_RCC_OscConfig+0x2cc>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a3f      	ldr	r2, [pc, #252]	; (80016a4 <HAL_RCC_OscConfig+0x2d0>)
 80015a6:	fba2 2303 	umull	r2, r3, r2, r3
 80015aa:	0a5b      	lsrs	r3, r3, #9
 80015ac:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80015ae:	bf00      	nop
  }
  while (Delay --);
 80015b0:	9b01      	ldr	r3, [sp, #4]
 80015b2:	1e5a      	subs	r2, r3, #1
 80015b4:	9201      	str	r2, [sp, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1f9      	bne.n	80015ae <HAL_RCC_OscConfig+0x1da>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015ba:	6823      	ldr	r3, [r4, #0]
 80015bc:	f013 0f04 	tst.w	r3, #4
 80015c0:	f000 809c 	beq.w	80016fc <HAL_RCC_OscConfig+0x328>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015c4:	4b33      	ldr	r3, [pc, #204]	; (8001694 <HAL_RCC_OscConfig+0x2c0>)
 80015c6:	69db      	ldr	r3, [r3, #28]
 80015c8:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80015cc:	d11d      	bne.n	800160a <HAL_RCC_OscConfig+0x236>
      __HAL_RCC_PWR_CLK_ENABLE();
 80015ce:	4b31      	ldr	r3, [pc, #196]	; (8001694 <HAL_RCC_OscConfig+0x2c0>)
 80015d0:	69da      	ldr	r2, [r3, #28]
 80015d2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80015d6:	61da      	str	r2, [r3, #28]
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 80015e2:	2501      	movs	r5, #1
 80015e4:	e012      	b.n	800160c <HAL_RCC_OscConfig+0x238>
      __HAL_RCC_LSI_DISABLE();
 80015e6:	4b2d      	ldr	r3, [pc, #180]	; (800169c <HAL_RCC_OscConfig+0x2c8>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80015ec:	f7ff fb3e 	bl	8000c6c <HAL_GetTick>
 80015f0:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015f2:	4e28      	ldr	r6, [pc, #160]	; (8001694 <HAL_RCC_OscConfig+0x2c0>)
 80015f4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80015f6:	f013 0f02 	tst.w	r3, #2
 80015fa:	d0de      	beq.n	80015ba <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015fc:	f7ff fb36 	bl	8000c6c <HAL_GetTick>
 8001600:	1b40      	subs	r0, r0, r5
 8001602:	2802      	cmp	r0, #2
 8001604:	d9f6      	bls.n	80015f4 <HAL_RCC_OscConfig+0x220>
          return HAL_TIMEOUT;
 8001606:	2003      	movs	r0, #3
 8001608:	e0ef      	b.n	80017ea <HAL_RCC_OscConfig+0x416>
    FlagStatus       pwrclkchanged = RESET;
 800160a:	2500      	movs	r5, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800160c:	4b26      	ldr	r3, [pc, #152]	; (80016a8 <HAL_RCC_OscConfig+0x2d4>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001614:	d011      	beq.n	800163a <HAL_RCC_OscConfig+0x266>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001616:	68e3      	ldr	r3, [r4, #12]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d022      	beq.n	8001662 <HAL_RCC_OscConfig+0x28e>
 800161c:	2b00      	cmp	r3, #0
 800161e:	d145      	bne.n	80016ac <HAL_RCC_OscConfig+0x2d8>
 8001620:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001624:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001628:	6a1a      	ldr	r2, [r3, #32]
 800162a:	f022 0201 	bic.w	r2, r2, #1
 800162e:	621a      	str	r2, [r3, #32]
 8001630:	6a1a      	ldr	r2, [r3, #32]
 8001632:	f022 0204 	bic.w	r2, r2, #4
 8001636:	621a      	str	r2, [r3, #32]
 8001638:	e018      	b.n	800166c <HAL_RCC_OscConfig+0x298>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800163a:	4a1b      	ldr	r2, [pc, #108]	; (80016a8 <HAL_RCC_OscConfig+0x2d4>)
 800163c:	6813      	ldr	r3, [r2, #0]
 800163e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001642:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001644:	f7ff fb12 	bl	8000c6c <HAL_GetTick>
 8001648:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800164a:	4f17      	ldr	r7, [pc, #92]	; (80016a8 <HAL_RCC_OscConfig+0x2d4>)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001652:	d1e0      	bne.n	8001616 <HAL_RCC_OscConfig+0x242>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001654:	f7ff fb0a 	bl	8000c6c <HAL_GetTick>
 8001658:	1b80      	subs	r0, r0, r6
 800165a:	2864      	cmp	r0, #100	; 0x64
 800165c:	d9f6      	bls.n	800164c <HAL_RCC_OscConfig+0x278>
          return HAL_TIMEOUT;
 800165e:	2003      	movs	r0, #3
 8001660:	e0c3      	b.n	80017ea <HAL_RCC_OscConfig+0x416>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001662:	4a0c      	ldr	r2, [pc, #48]	; (8001694 <HAL_RCC_OscConfig+0x2c0>)
 8001664:	6a13      	ldr	r3, [r2, #32]
 8001666:	f043 0301 	orr.w	r3, r3, #1
 800166a:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800166c:	68e3      	ldr	r3, [r4, #12]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d032      	beq.n	80016d8 <HAL_RCC_OscConfig+0x304>
      tickstart = HAL_GetTick();
 8001672:	f7ff fafb 	bl	8000c6c <HAL_GetTick>
 8001676:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001678:	4f06      	ldr	r7, [pc, #24]	; (8001694 <HAL_RCC_OscConfig+0x2c0>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800167a:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800167e:	6a3b      	ldr	r3, [r7, #32]
 8001680:	f013 0f02 	tst.w	r3, #2
 8001684:	d139      	bne.n	80016fa <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001686:	f7ff faf1 	bl	8000c6c <HAL_GetTick>
 800168a:	1b80      	subs	r0, r0, r6
 800168c:	4540      	cmp	r0, r8
 800168e:	d9f6      	bls.n	800167e <HAL_RCC_OscConfig+0x2aa>
          return HAL_TIMEOUT;
 8001690:	2003      	movs	r0, #3
 8001692:	e0aa      	b.n	80017ea <HAL_RCC_OscConfig+0x416>
 8001694:	40021000 	.word	0x40021000
 8001698:	42420000 	.word	0x42420000
 800169c:	42420480 	.word	0x42420480
 80016a0:	20000000 	.word	0x20000000
 80016a4:	10624dd3 	.word	0x10624dd3
 80016a8:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016ac:	2b05      	cmp	r3, #5
 80016ae:	d009      	beq.n	80016c4 <HAL_RCC_OscConfig+0x2f0>
 80016b0:	4b51      	ldr	r3, [pc, #324]	; (80017f8 <HAL_RCC_OscConfig+0x424>)
 80016b2:	6a1a      	ldr	r2, [r3, #32]
 80016b4:	f022 0201 	bic.w	r2, r2, #1
 80016b8:	621a      	str	r2, [r3, #32]
 80016ba:	6a1a      	ldr	r2, [r3, #32]
 80016bc:	f022 0204 	bic.w	r2, r2, #4
 80016c0:	621a      	str	r2, [r3, #32]
 80016c2:	e7d3      	b.n	800166c <HAL_RCC_OscConfig+0x298>
 80016c4:	4b4c      	ldr	r3, [pc, #304]	; (80017f8 <HAL_RCC_OscConfig+0x424>)
 80016c6:	6a1a      	ldr	r2, [r3, #32]
 80016c8:	f042 0204 	orr.w	r2, r2, #4
 80016cc:	621a      	str	r2, [r3, #32]
 80016ce:	6a1a      	ldr	r2, [r3, #32]
 80016d0:	f042 0201 	orr.w	r2, r2, #1
 80016d4:	621a      	str	r2, [r3, #32]
 80016d6:	e7c9      	b.n	800166c <HAL_RCC_OscConfig+0x298>
      tickstart = HAL_GetTick();
 80016d8:	f7ff fac8 	bl	8000c6c <HAL_GetTick>
 80016dc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016de:	4f46      	ldr	r7, [pc, #280]	; (80017f8 <HAL_RCC_OscConfig+0x424>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016e0:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016e4:	6a3b      	ldr	r3, [r7, #32]
 80016e6:	f013 0f02 	tst.w	r3, #2
 80016ea:	d006      	beq.n	80016fa <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ec:	f7ff fabe 	bl	8000c6c <HAL_GetTick>
 80016f0:	1b80      	subs	r0, r0, r6
 80016f2:	4540      	cmp	r0, r8
 80016f4:	d9f6      	bls.n	80016e4 <HAL_RCC_OscConfig+0x310>
          return HAL_TIMEOUT;
 80016f6:	2003      	movs	r0, #3
 80016f8:	e077      	b.n	80017ea <HAL_RCC_OscConfig+0x416>
    if (pwrclkchanged == SET)
 80016fa:	b9e5      	cbnz	r5, 8001736 <HAL_RCC_OscConfig+0x362>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016fc:	69e3      	ldr	r3, [r4, #28]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d072      	beq.n	80017e8 <HAL_RCC_OscConfig+0x414>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001702:	4a3d      	ldr	r2, [pc, #244]	; (80017f8 <HAL_RCC_OscConfig+0x424>)
 8001704:	6852      	ldr	r2, [r2, #4]
 8001706:	f002 020c 	and.w	r2, r2, #12
 800170a:	2a08      	cmp	r2, #8
 800170c:	d056      	beq.n	80017bc <HAL_RCC_OscConfig+0x3e8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800170e:	2b02      	cmp	r3, #2
 8001710:	d017      	beq.n	8001742 <HAL_RCC_OscConfig+0x36e>
        __HAL_RCC_PLL_DISABLE();
 8001712:	4b3a      	ldr	r3, [pc, #232]	; (80017fc <HAL_RCC_OscConfig+0x428>)
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001718:	f7ff faa8 	bl	8000c6c <HAL_GetTick>
 800171c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800171e:	4d36      	ldr	r5, [pc, #216]	; (80017f8 <HAL_RCC_OscConfig+0x424>)
 8001720:	682b      	ldr	r3, [r5, #0]
 8001722:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001726:	d047      	beq.n	80017b8 <HAL_RCC_OscConfig+0x3e4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001728:	f7ff faa0 	bl	8000c6c <HAL_GetTick>
 800172c:	1b00      	subs	r0, r0, r4
 800172e:	2802      	cmp	r0, #2
 8001730:	d9f6      	bls.n	8001720 <HAL_RCC_OscConfig+0x34c>
            return HAL_TIMEOUT;
 8001732:	2003      	movs	r0, #3
 8001734:	e059      	b.n	80017ea <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001736:	4a30      	ldr	r2, [pc, #192]	; (80017f8 <HAL_RCC_OscConfig+0x424>)
 8001738:	69d3      	ldr	r3, [r2, #28]
 800173a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800173e:	61d3      	str	r3, [r2, #28]
 8001740:	e7dc      	b.n	80016fc <HAL_RCC_OscConfig+0x328>
        __HAL_RCC_PLL_DISABLE();
 8001742:	4b2e      	ldr	r3, [pc, #184]	; (80017fc <HAL_RCC_OscConfig+0x428>)
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001748:	f7ff fa90 	bl	8000c6c <HAL_GetTick>
 800174c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800174e:	4e2a      	ldr	r6, [pc, #168]	; (80017f8 <HAL_RCC_OscConfig+0x424>)
 8001750:	6833      	ldr	r3, [r6, #0]
 8001752:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001756:	d006      	beq.n	8001766 <HAL_RCC_OscConfig+0x392>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001758:	f7ff fa88 	bl	8000c6c <HAL_GetTick>
 800175c:	1b40      	subs	r0, r0, r5
 800175e:	2802      	cmp	r0, #2
 8001760:	d9f6      	bls.n	8001750 <HAL_RCC_OscConfig+0x37c>
            return HAL_TIMEOUT;
 8001762:	2003      	movs	r0, #3
 8001764:	e041      	b.n	80017ea <HAL_RCC_OscConfig+0x416>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001766:	6a23      	ldr	r3, [r4, #32]
 8001768:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800176c:	d01a      	beq.n	80017a4 <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800176e:	4922      	ldr	r1, [pc, #136]	; (80017f8 <HAL_RCC_OscConfig+0x424>)
 8001770:	684a      	ldr	r2, [r1, #4]
 8001772:	6a23      	ldr	r3, [r4, #32]
 8001774:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001776:	4303      	orrs	r3, r0
 8001778:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800177c:	4313      	orrs	r3, r2
 800177e:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8001780:	4b1e      	ldr	r3, [pc, #120]	; (80017fc <HAL_RCC_OscConfig+0x428>)
 8001782:	2201      	movs	r2, #1
 8001784:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001786:	f7ff fa71 	bl	8000c6c <HAL_GetTick>
 800178a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800178c:	4d1a      	ldr	r5, [pc, #104]	; (80017f8 <HAL_RCC_OscConfig+0x424>)
 800178e:	682b      	ldr	r3, [r5, #0]
 8001790:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001794:	d10e      	bne.n	80017b4 <HAL_RCC_OscConfig+0x3e0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001796:	f7ff fa69 	bl	8000c6c <HAL_GetTick>
 800179a:	1b00      	subs	r0, r0, r4
 800179c:	2802      	cmp	r0, #2
 800179e:	d9f6      	bls.n	800178e <HAL_RCC_OscConfig+0x3ba>
            return HAL_TIMEOUT;
 80017a0:	2003      	movs	r0, #3
 80017a2:	e022      	b.n	80017ea <HAL_RCC_OscConfig+0x416>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017a4:	4a14      	ldr	r2, [pc, #80]	; (80017f8 <HAL_RCC_OscConfig+0x424>)
 80017a6:	6853      	ldr	r3, [r2, #4]
 80017a8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80017ac:	68a1      	ldr	r1, [r4, #8]
 80017ae:	430b      	orrs	r3, r1
 80017b0:	6053      	str	r3, [r2, #4]
 80017b2:	e7dc      	b.n	800176e <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 80017b4:	2000      	movs	r0, #0
 80017b6:	e018      	b.n	80017ea <HAL_RCC_OscConfig+0x416>
 80017b8:	2000      	movs	r0, #0
 80017ba:	e016      	b.n	80017ea <HAL_RCC_OscConfig+0x416>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d017      	beq.n	80017f0 <HAL_RCC_OscConfig+0x41c>
        pll_config = RCC->CFGR;
 80017c0:	4b0d      	ldr	r3, [pc, #52]	; (80017f8 <HAL_RCC_OscConfig+0x424>)
 80017c2:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017c4:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80017c8:	6a22      	ldr	r2, [r4, #32]
 80017ca:	4291      	cmp	r1, r2
 80017cc:	d112      	bne.n	80017f4 <HAL_RCC_OscConfig+0x420>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80017ce:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
        return HAL_ERROR;
 80017d4:	1a18      	subs	r0, r3, r0
 80017d6:	bf18      	it	ne
 80017d8:	2001      	movne	r0, #1
 80017da:	e006      	b.n	80017ea <HAL_RCC_OscConfig+0x416>
    return HAL_ERROR;
 80017dc:	2001      	movs	r0, #1
}
 80017de:	4770      	bx	lr
        return HAL_ERROR;
 80017e0:	2001      	movs	r0, #1
 80017e2:	e002      	b.n	80017ea <HAL_RCC_OscConfig+0x416>
        return HAL_ERROR;
 80017e4:	2001      	movs	r0, #1
 80017e6:	e000      	b.n	80017ea <HAL_RCC_OscConfig+0x416>
  return HAL_OK;
 80017e8:	2000      	movs	r0, #0
}
 80017ea:	b002      	add	sp, #8
 80017ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 80017f0:	2001      	movs	r0, #1
 80017f2:	e7fa      	b.n	80017ea <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
 80017f4:	2001      	movs	r0, #1
 80017f6:	e7f8      	b.n	80017ea <HAL_RCC_OscConfig+0x416>
 80017f8:	40021000 	.word	0x40021000
 80017fc:	42420060 	.word	0x42420060

08001800 <HAL_RCC_GetSysClockFreq>:
{
 8001800:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001802:	4b16      	ldr	r3, [pc, #88]	; (800185c <HAL_RCC_GetSysClockFreq+0x5c>)
 8001804:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001806:	f10d 0c18 	add.w	ip, sp, #24
 800180a:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800180e:	f240 2301 	movw	r3, #513	; 0x201
 8001812:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8001816:	4b12      	ldr	r3, [pc, #72]	; (8001860 <HAL_RCC_GetSysClockFreq+0x60>)
 8001818:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800181a:	f003 020c 	and.w	r2, r3, #12
 800181e:	2a08      	cmp	r2, #8
 8001820:	d002      	beq.n	8001828 <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 8001822:	4810      	ldr	r0, [pc, #64]	; (8001864 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8001824:	b006      	add	sp, #24
 8001826:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001828:	f3c3 4283 	ubfx	r2, r3, #18, #4
 800182c:	4462      	add	r2, ip
 800182e:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001832:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001836:	d00c      	beq.n	8001852 <HAL_RCC_GetSysClockFreq+0x52>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001838:	4b09      	ldr	r3, [pc, #36]	; (8001860 <HAL_RCC_GetSysClockFreq+0x60>)
 800183a:	685b      	ldr	r3, [r3, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800183c:	4809      	ldr	r0, [pc, #36]	; (8001864 <HAL_RCC_GetSysClockFreq+0x64>)
 800183e:	fb00 f002 	mul.w	r0, r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001842:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8001846:	4463      	add	r3, ip
 8001848:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800184c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001850:	e7e8      	b.n	8001824 <HAL_RCC_GetSysClockFreq+0x24>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001852:	4805      	ldr	r0, [pc, #20]	; (8001868 <HAL_RCC_GetSysClockFreq+0x68>)
 8001854:	fb00 f002 	mul.w	r0, r0, r2
 8001858:	e7e4      	b.n	8001824 <HAL_RCC_GetSysClockFreq+0x24>
 800185a:	bf00      	nop
 800185c:	08002464 	.word	0x08002464
 8001860:	40021000 	.word	0x40021000
 8001864:	007a1200 	.word	0x007a1200
 8001868:	003d0900 	.word	0x003d0900

0800186c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800186c:	2800      	cmp	r0, #0
 800186e:	f000 80a2 	beq.w	80019b6 <HAL_RCC_ClockConfig+0x14a>
{
 8001872:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001876:	460d      	mov	r5, r1
 8001878:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800187a:	4b53      	ldr	r3, [pc, #332]	; (80019c8 <HAL_RCC_ClockConfig+0x15c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	428b      	cmp	r3, r1
 8001884:	d20b      	bcs.n	800189e <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001886:	4a50      	ldr	r2, [pc, #320]	; (80019c8 <HAL_RCC_ClockConfig+0x15c>)
 8001888:	6813      	ldr	r3, [r2, #0]
 800188a:	f023 0307 	bic.w	r3, r3, #7
 800188e:	430b      	orrs	r3, r1
 8001890:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001892:	6813      	ldr	r3, [r2, #0]
 8001894:	f003 0307 	and.w	r3, r3, #7
 8001898:	428b      	cmp	r3, r1
 800189a:	f040 808e 	bne.w	80019ba <HAL_RCC_ClockConfig+0x14e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800189e:	6823      	ldr	r3, [r4, #0]
 80018a0:	f013 0f02 	tst.w	r3, #2
 80018a4:	d017      	beq.n	80018d6 <HAL_RCC_ClockConfig+0x6a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018a6:	f013 0f04 	tst.w	r3, #4
 80018aa:	d004      	beq.n	80018b6 <HAL_RCC_ClockConfig+0x4a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018ac:	4a47      	ldr	r2, [pc, #284]	; (80019cc <HAL_RCC_ClockConfig+0x160>)
 80018ae:	6853      	ldr	r3, [r2, #4]
 80018b0:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018b4:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018b6:	6823      	ldr	r3, [r4, #0]
 80018b8:	f013 0f08 	tst.w	r3, #8
 80018bc:	d004      	beq.n	80018c8 <HAL_RCC_ClockConfig+0x5c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018be:	4a43      	ldr	r2, [pc, #268]	; (80019cc <HAL_RCC_ClockConfig+0x160>)
 80018c0:	6853      	ldr	r3, [r2, #4]
 80018c2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80018c6:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018c8:	4a40      	ldr	r2, [pc, #256]	; (80019cc <HAL_RCC_ClockConfig+0x160>)
 80018ca:	6853      	ldr	r3, [r2, #4]
 80018cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018d0:	68a1      	ldr	r1, [r4, #8]
 80018d2:	430b      	orrs	r3, r1
 80018d4:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018d6:	6823      	ldr	r3, [r4, #0]
 80018d8:	f013 0f01 	tst.w	r3, #1
 80018dc:	d031      	beq.n	8001942 <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018de:	6862      	ldr	r2, [r4, #4]
 80018e0:	2a01      	cmp	r2, #1
 80018e2:	d020      	beq.n	8001926 <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018e4:	2a02      	cmp	r2, #2
 80018e6:	d025      	beq.n	8001934 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e8:	4b38      	ldr	r3, [pc, #224]	; (80019cc <HAL_RCC_ClockConfig+0x160>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f013 0f02 	tst.w	r3, #2
 80018f0:	d065      	beq.n	80019be <HAL_RCC_ClockConfig+0x152>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018f2:	4936      	ldr	r1, [pc, #216]	; (80019cc <HAL_RCC_ClockConfig+0x160>)
 80018f4:	684b      	ldr	r3, [r1, #4]
 80018f6:	f023 0303 	bic.w	r3, r3, #3
 80018fa:	4313      	orrs	r3, r2
 80018fc:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 80018fe:	f7ff f9b5 	bl	8000c6c <HAL_GetTick>
 8001902:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001904:	4f31      	ldr	r7, [pc, #196]	; (80019cc <HAL_RCC_ClockConfig+0x160>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001906:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f003 030c 	and.w	r3, r3, #12
 8001910:	6862      	ldr	r2, [r4, #4]
 8001912:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001916:	d014      	beq.n	8001942 <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001918:	f7ff f9a8 	bl	8000c6c <HAL_GetTick>
 800191c:	1b80      	subs	r0, r0, r6
 800191e:	4540      	cmp	r0, r8
 8001920:	d9f3      	bls.n	800190a <HAL_RCC_ClockConfig+0x9e>
        return HAL_TIMEOUT;
 8001922:	2003      	movs	r0, #3
 8001924:	e045      	b.n	80019b2 <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001926:	4b29      	ldr	r3, [pc, #164]	; (80019cc <HAL_RCC_ClockConfig+0x160>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800192e:	d1e0      	bne.n	80018f2 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8001930:	2001      	movs	r0, #1
 8001932:	e03e      	b.n	80019b2 <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001934:	4b25      	ldr	r3, [pc, #148]	; (80019cc <HAL_RCC_ClockConfig+0x160>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800193c:	d1d9      	bne.n	80018f2 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 800193e:	2001      	movs	r0, #1
 8001940:	e037      	b.n	80019b2 <HAL_RCC_ClockConfig+0x146>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001942:	4b21      	ldr	r3, [pc, #132]	; (80019c8 <HAL_RCC_ClockConfig+0x15c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	42ab      	cmp	r3, r5
 800194c:	d90a      	bls.n	8001964 <HAL_RCC_ClockConfig+0xf8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800194e:	4a1e      	ldr	r2, [pc, #120]	; (80019c8 <HAL_RCC_ClockConfig+0x15c>)
 8001950:	6813      	ldr	r3, [r2, #0]
 8001952:	f023 0307 	bic.w	r3, r3, #7
 8001956:	432b      	orrs	r3, r5
 8001958:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800195a:	6813      	ldr	r3, [r2, #0]
 800195c:	f003 0307 	and.w	r3, r3, #7
 8001960:	42ab      	cmp	r3, r5
 8001962:	d12e      	bne.n	80019c2 <HAL_RCC_ClockConfig+0x156>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001964:	6823      	ldr	r3, [r4, #0]
 8001966:	f013 0f04 	tst.w	r3, #4
 800196a:	d006      	beq.n	800197a <HAL_RCC_ClockConfig+0x10e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800196c:	4a17      	ldr	r2, [pc, #92]	; (80019cc <HAL_RCC_ClockConfig+0x160>)
 800196e:	6853      	ldr	r3, [r2, #4]
 8001970:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001974:	68e1      	ldr	r1, [r4, #12]
 8001976:	430b      	orrs	r3, r1
 8001978:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800197a:	6823      	ldr	r3, [r4, #0]
 800197c:	f013 0f08 	tst.w	r3, #8
 8001980:	d007      	beq.n	8001992 <HAL_RCC_ClockConfig+0x126>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001982:	4a12      	ldr	r2, [pc, #72]	; (80019cc <HAL_RCC_ClockConfig+0x160>)
 8001984:	6853      	ldr	r3, [r2, #4]
 8001986:	6921      	ldr	r1, [r4, #16]
 8001988:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800198c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001990:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001992:	f7ff ff35 	bl	8001800 <HAL_RCC_GetSysClockFreq>
 8001996:	4b0d      	ldr	r3, [pc, #52]	; (80019cc <HAL_RCC_ClockConfig+0x160>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800199e:	4a0c      	ldr	r2, [pc, #48]	; (80019d0 <HAL_RCC_ClockConfig+0x164>)
 80019a0:	5cd3      	ldrb	r3, [r2, r3]
 80019a2:	40d8      	lsrs	r0, r3
 80019a4:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <HAL_RCC_ClockConfig+0x168>)
 80019a6:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80019a8:	4b0b      	ldr	r3, [pc, #44]	; (80019d8 <HAL_RCC_ClockConfig+0x16c>)
 80019aa:	6818      	ldr	r0, [r3, #0]
 80019ac:	f7ff f91a 	bl	8000be4 <HAL_InitTick>
  return HAL_OK;
 80019b0:	2000      	movs	r0, #0
}
 80019b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 80019b6:	2001      	movs	r0, #1
}
 80019b8:	4770      	bx	lr
    return HAL_ERROR;
 80019ba:	2001      	movs	r0, #1
 80019bc:	e7f9      	b.n	80019b2 <HAL_RCC_ClockConfig+0x146>
        return HAL_ERROR;
 80019be:	2001      	movs	r0, #1
 80019c0:	e7f7      	b.n	80019b2 <HAL_RCC_ClockConfig+0x146>
    return HAL_ERROR;
 80019c2:	2001      	movs	r0, #1
 80019c4:	e7f5      	b.n	80019b2 <HAL_RCC_ClockConfig+0x146>
 80019c6:	bf00      	nop
 80019c8:	40022000 	.word	0x40022000
 80019cc:	40021000 	.word	0x40021000
 80019d0:	0800244c 	.word	0x0800244c
 80019d4:	20000000 	.word	0x20000000
 80019d8:	20000008 	.word	0x20000008

080019dc <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019dc:	4b04      	ldr	r3, [pc, #16]	; (80019f0 <HAL_RCC_GetPCLK1Freq+0x14>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80019e4:	4a03      	ldr	r2, [pc, #12]	; (80019f4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80019e6:	5cd3      	ldrb	r3, [r2, r3]
 80019e8:	4a03      	ldr	r2, [pc, #12]	; (80019f8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80019ea:	6810      	ldr	r0, [r2, #0]
}
 80019ec:	40d8      	lsrs	r0, r3
 80019ee:	4770      	bx	lr
 80019f0:	40021000 	.word	0x40021000
 80019f4:	0800245c 	.word	0x0800245c
 80019f8:	20000000 	.word	0x20000000

080019fc <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019fc:	4b04      	ldr	r3, [pc, #16]	; (8001a10 <HAL_RCC_GetPCLK2Freq+0x14>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001a04:	4a03      	ldr	r2, [pc, #12]	; (8001a14 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001a06:	5cd3      	ldrb	r3, [r2, r3]
 8001a08:	4a03      	ldr	r2, [pc, #12]	; (8001a18 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001a0a:	6810      	ldr	r0, [r2, #0]
}
 8001a0c:	40d8      	lsrs	r0, r3
 8001a0e:	4770      	bx	lr
 8001a10:	40021000 	.word	0x40021000
 8001a14:	0800245c 	.word	0x0800245c
 8001a18:	20000000 	.word	0x20000000

08001a1c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a20:	b082      	sub	sp, #8
 8001a22:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001a24:	6803      	ldr	r3, [r0, #0]
 8001a26:	f013 0f01 	tst.w	r3, #1
 8001a2a:	d034      	beq.n	8001a96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a2c:	4b3e      	ldr	r3, [pc, #248]	; (8001b28 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001a2e:	69db      	ldr	r3, [r3, #28]
 8001a30:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001a34:	d147      	bne.n	8001ac6 <HAL_RCCEx_PeriphCLKConfig+0xaa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a36:	4b3c      	ldr	r3, [pc, #240]	; (8001b28 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001a38:	69da      	ldr	r2, [r3, #28]
 8001a3a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a3e:	61da      	str	r2, [r3, #28]
 8001a40:	69db      	ldr	r3, [r3, #28]
 8001a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a46:	9301      	str	r3, [sp, #4]
 8001a48:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001a4a:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a4c:	4b37      	ldr	r3, [pc, #220]	; (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001a54:	d039      	beq.n	8001aca <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001a56:	4b34      	ldr	r3, [pc, #208]	; (8001b28 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001a58:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a5a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001a5e:	d011      	beq.n	8001a84 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8001a60:	6862      	ldr	r2, [r4, #4]
 8001a62:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d00c      	beq.n	8001a84 <HAL_RCCEx_PeriphCLKConfig+0x68>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a6a:	4a2f      	ldr	r2, [pc, #188]	; (8001b28 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001a6c:	6a13      	ldr	r3, [r2, #32]
 8001a6e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a72:	492f      	ldr	r1, [pc, #188]	; (8001b30 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8001a74:	2601      	movs	r6, #1
 8001a76:	600e      	str	r6, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a78:	2600      	movs	r6, #0
 8001a7a:	600e      	str	r6, [r1, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001a7c:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001a7e:	f013 0f01 	tst.w	r3, #1
 8001a82:	d136      	bne.n	8001af2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a84:	4a28      	ldr	r2, [pc, #160]	; (8001b28 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001a86:	6a13      	ldr	r3, [r2, #32]
 8001a88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a8c:	6861      	ldr	r1, [r4, #4]
 8001a8e:	430b      	orrs	r3, r1
 8001a90:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a92:	2d00      	cmp	r5, #0
 8001a94:	d13e      	bne.n	8001b14 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001a96:	6823      	ldr	r3, [r4, #0]
 8001a98:	f013 0f02 	tst.w	r3, #2
 8001a9c:	d006      	beq.n	8001aac <HAL_RCCEx_PeriphCLKConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001a9e:	4a22      	ldr	r2, [pc, #136]	; (8001b28 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001aa0:	6853      	ldr	r3, [r2, #4]
 8001aa2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001aa6:	68a1      	ldr	r1, [r4, #8]
 8001aa8:	430b      	orrs	r3, r1
 8001aaa:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001aac:	6823      	ldr	r3, [r4, #0]
 8001aae:	f013 0f10 	tst.w	r3, #16
 8001ab2:	d034      	beq.n	8001b1e <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001ab4:	4a1c      	ldr	r2, [pc, #112]	; (8001b28 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001ab6:	6853      	ldr	r3, [r2, #4]
 8001ab8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001abc:	68e1      	ldr	r1, [r4, #12]
 8001abe:	430b      	orrs	r3, r1
 8001ac0:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001ac2:	2000      	movs	r0, #0
 8001ac4:	e02c      	b.n	8001b20 <HAL_RCCEx_PeriphCLKConfig+0x104>
    FlagStatus       pwrclkchanged = RESET;
 8001ac6:	2500      	movs	r5, #0
 8001ac8:	e7c0      	b.n	8001a4c <HAL_RCCEx_PeriphCLKConfig+0x30>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aca:	4a18      	ldr	r2, [pc, #96]	; (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8001acc:	6813      	ldr	r3, [r2, #0]
 8001ace:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ad2:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001ad4:	f7ff f8ca 	bl	8000c6c <HAL_GetTick>
 8001ad8:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ada:	4f14      	ldr	r7, [pc, #80]	; (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001ae2:	d1b8      	bne.n	8001a56 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ae4:	f7ff f8c2 	bl	8000c6c <HAL_GetTick>
 8001ae8:	1b80      	subs	r0, r0, r6
 8001aea:	2864      	cmp	r0, #100	; 0x64
 8001aec:	d9f6      	bls.n	8001adc <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 8001aee:	2003      	movs	r0, #3
 8001af0:	e016      	b.n	8001b20 <HAL_RCCEx_PeriphCLKConfig+0x104>
        tickstart = HAL_GetTick();
 8001af2:	f7ff f8bb 	bl	8000c6c <HAL_GetTick>
 8001af6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001af8:	4f0b      	ldr	r7, [pc, #44]	; (8001b28 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001afa:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001afe:	6a3b      	ldr	r3, [r7, #32]
 8001b00:	f013 0f02 	tst.w	r3, #2
 8001b04:	d1be      	bne.n	8001a84 <HAL_RCCEx_PeriphCLKConfig+0x68>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b06:	f7ff f8b1 	bl	8000c6c <HAL_GetTick>
 8001b0a:	1b80      	subs	r0, r0, r6
 8001b0c:	4540      	cmp	r0, r8
 8001b0e:	d9f6      	bls.n	8001afe <HAL_RCCEx_PeriphCLKConfig+0xe2>
            return HAL_TIMEOUT;
 8001b10:	2003      	movs	r0, #3
 8001b12:	e005      	b.n	8001b20 <HAL_RCCEx_PeriphCLKConfig+0x104>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b14:	69d3      	ldr	r3, [r2, #28]
 8001b16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b1a:	61d3      	str	r3, [r2, #28]
 8001b1c:	e7bb      	b.n	8001a96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
  return HAL_OK;
 8001b1e:	2000      	movs	r0, #0
}
 8001b20:	b002      	add	sp, #8
 8001b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b26:	bf00      	nop
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	40007000 	.word	0x40007000
 8001b30:	42420440 	.word	0x42420440

08001b34 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001b34:	6802      	ldr	r2, [r0, #0]
 8001b36:	68d3      	ldr	r3, [r2, #12]
 8001b38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001b3c:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b3e:	6802      	ldr	r2, [r0, #0]
 8001b40:	6953      	ldr	r3, [r2, #20]
 8001b42:	f023 0301 	bic.w	r3, r3, #1
 8001b46:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001b48:	2320      	movs	r3, #32
 8001b4a:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 8001b4e:	4770      	bx	lr

08001b50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b50:	b510      	push	{r4, lr}
 8001b52:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b54:	6802      	ldr	r2, [r0, #0]
 8001b56:	6913      	ldr	r3, [r2, #16]
 8001b58:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b5c:	68c1      	ldr	r1, [r0, #12]
 8001b5e:	430b      	orrs	r3, r1
 8001b60:	6113      	str	r3, [r2, #16]
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
  MODIFY_REG(huart->Instance->CR1,
 8001b62:	6801      	ldr	r1, [r0, #0]
 8001b64:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001b66:	6883      	ldr	r3, [r0, #8]
 8001b68:	6900      	ldr	r0, [r0, #16]
 8001b6a:	4303      	orrs	r3, r0
 8001b6c:	6960      	ldr	r0, [r4, #20]
 8001b6e:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8001b70:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8001b74:	f022 020c 	bic.w	r2, r2, #12
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001b7c:	6822      	ldr	r2, [r4, #0]
 8001b7e:	6953      	ldr	r3, [r2, #20]
 8001b80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b84:	69a1      	ldr	r1, [r4, #24]
 8001b86:	430b      	orrs	r3, r1
 8001b88:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 8001b8a:	6822      	ldr	r2, [r4, #0]
 8001b8c:	4b10      	ldr	r3, [pc, #64]	; (8001bd0 <UART_SetConfig+0x80>)
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d01a      	beq.n	8001bc8 <UART_SetConfig+0x78>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001b92:	f7ff ff23 	bl	80019dc <HAL_RCC_GetPCLK1Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001b96:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b9a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b9e:	6863      	ldr	r3, [r4, #4]
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ba6:	6824      	ldr	r4, [r4, #0]
 8001ba8:	480a      	ldr	r0, [pc, #40]	; (8001bd4 <UART_SetConfig+0x84>)
 8001baa:	fba0 2103 	umull	r2, r1, r0, r3
 8001bae:	0949      	lsrs	r1, r1, #5
 8001bb0:	2264      	movs	r2, #100	; 0x64
 8001bb2:	fb02 3311 	mls	r3, r2, r1, r3
 8001bb6:	011b      	lsls	r3, r3, #4
 8001bb8:	3332      	adds	r3, #50	; 0x32
 8001bba:	fba0 2303 	umull	r2, r3, r0, r3
 8001bbe:	0109      	lsls	r1, r1, #4
 8001bc0:	eb01 1353 	add.w	r3, r1, r3, lsr #5
 8001bc4:	60a3      	str	r3, [r4, #8]
#endif /* USART_CR1_OVER8 */
}
 8001bc6:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8001bc8:	f7ff ff18 	bl	80019fc <HAL_RCC_GetPCLK2Freq>
 8001bcc:	e7e3      	b.n	8001b96 <UART_SetConfig+0x46>
 8001bce:	bf00      	nop
 8001bd0:	40013800 	.word	0x40013800
 8001bd4:	51eb851f 	.word	0x51eb851f

08001bd8 <UART_WaitOnFlagUntilTimeout>:
{
 8001bd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001bdc:	4680      	mov	r8, r0
 8001bde:	460e      	mov	r6, r1
 8001be0:	4615      	mov	r5, r2
 8001be2:	4699      	mov	r9, r3
 8001be4:	9f08      	ldr	r7, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001be6:	f8d8 2000 	ldr.w	r2, [r8]
 8001bea:	6814      	ldr	r4, [r2, #0]
 8001bec:	ea36 0304 	bics.w	r3, r6, r4
 8001bf0:	bf0c      	ite	eq
 8001bf2:	2401      	moveq	r4, #1
 8001bf4:	2400      	movne	r4, #0
 8001bf6:	42ac      	cmp	r4, r5
 8001bf8:	d11f      	bne.n	8001c3a <UART_WaitOnFlagUntilTimeout+0x62>
    if (Timeout != HAL_MAX_DELAY)
 8001bfa:	f1b7 3fff 	cmp.w	r7, #4294967295
 8001bfe:	d0f4      	beq.n	8001bea <UART_WaitOnFlagUntilTimeout+0x12>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001c00:	b12f      	cbz	r7, 8001c0e <UART_WaitOnFlagUntilTimeout+0x36>
 8001c02:	f7ff f833 	bl	8000c6c <HAL_GetTick>
 8001c06:	eba0 0009 	sub.w	r0, r0, r9
 8001c0a:	42b8      	cmp	r0, r7
 8001c0c:	d9eb      	bls.n	8001be6 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c0e:	f8d8 2000 	ldr.w	r2, [r8]
 8001c12:	68d3      	ldr	r3, [r2, #12]
 8001c14:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001c18:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c1a:	f8d8 2000 	ldr.w	r2, [r8]
 8001c1e:	6953      	ldr	r3, [r2, #20]
 8001c20:	f023 0301 	bic.w	r3, r3, #1
 8001c24:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001c26:	2320      	movs	r3, #32
 8001c28:	f888 3039 	strb.w	r3, [r8, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001c2c:	f888 303a 	strb.w	r3, [r8, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001c30:	2300      	movs	r3, #0
 8001c32:	f888 3038 	strb.w	r3, [r8, #56]	; 0x38
        return HAL_TIMEOUT;
 8001c36:	2003      	movs	r0, #3
 8001c38:	e000      	b.n	8001c3c <UART_WaitOnFlagUntilTimeout+0x64>
  return HAL_OK;
 8001c3a:	2000      	movs	r0, #0
}
 8001c3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001c40 <HAL_UART_Init>:
  if (huart == NULL)
 8001c40:	b358      	cbz	r0, 8001c9a <HAL_UART_Init+0x5a>
{
 8001c42:	b510      	push	{r4, lr}
 8001c44:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8001c46:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001c4a:	b30b      	cbz	r3, 8001c90 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8001c4c:	2324      	movs	r3, #36	; 0x24
 8001c4e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001c52:	6822      	ldr	r2, [r4, #0]
 8001c54:	68d3      	ldr	r3, [r2, #12]
 8001c56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001c5a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001c5c:	4620      	mov	r0, r4
 8001c5e:	f7ff ff77 	bl	8001b50 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c62:	6822      	ldr	r2, [r4, #0]
 8001c64:	6913      	ldr	r3, [r2, #16]
 8001c66:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001c6a:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c6c:	6822      	ldr	r2, [r4, #0]
 8001c6e:	6953      	ldr	r3, [r2, #20]
 8001c70:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001c74:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8001c76:	6822      	ldr	r2, [r4, #0]
 8001c78:	68d3      	ldr	r3, [r2, #12]
 8001c7a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c7e:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c80:	2000      	movs	r0, #0
 8001c82:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001c84:	2320      	movs	r3, #32
 8001c86:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001c8a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8001c8e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001c90:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001c94:	f7fe fd46 	bl	8000724 <HAL_UART_MspInit>
 8001c98:	e7d8      	b.n	8001c4c <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8001c9a:	2001      	movs	r0, #1
}
 8001c9c:	4770      	bx	lr

08001c9e <HAL_UART_Transmit>:
{
 8001c9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001ca6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	2b20      	cmp	r3, #32
 8001cae:	d15a      	bne.n	8001d66 <HAL_UART_Transmit+0xc8>
 8001cb0:	4604      	mov	r4, r0
 8001cb2:	460d      	mov	r5, r1
 8001cb4:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8001cb6:	2900      	cmp	r1, #0
 8001cb8:	d059      	beq.n	8001d6e <HAL_UART_Transmit+0xd0>
 8001cba:	2a00      	cmp	r2, #0
 8001cbc:	d059      	beq.n	8001d72 <HAL_UART_Transmit+0xd4>
    __HAL_LOCK(huart);
 8001cbe:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d057      	beq.n	8001d76 <HAL_UART_Transmit+0xd8>
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001cd0:	2321      	movs	r3, #33	; 0x21
 8001cd2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001cd6:	f7fe ffc9 	bl	8000c6c <HAL_GetTick>
 8001cda:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8001cdc:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8001ce0:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ce4:	68a3      	ldr	r3, [r4, #8]
 8001ce6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cea:	d00c      	beq.n	8001d06 <HAL_UART_Transmit+0x68>
      pdata16bits = NULL;
 8001cec:	f04f 0a00 	mov.w	sl, #0
    __HAL_UNLOCK(huart);
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 8001cf6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	b343      	cbz	r3, 8001d4e <HAL_UART_Transmit+0xb0>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001cfc:	f04f 0900 	mov.w	r9, #0
 8001d00:	f04f 0880 	mov.w	r8, #128	; 0x80
 8001d04:	e014      	b.n	8001d30 <HAL_UART_Transmit+0x92>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d06:	6923      	ldr	r3, [r4, #16]
 8001d08:	b913      	cbnz	r3, 8001d10 <HAL_UART_Transmit+0x72>
      pdata16bits = (uint16_t *) pData;
 8001d0a:	46aa      	mov	sl, r5
      pdata8bits  = NULL;
 8001d0c:	2500      	movs	r5, #0
 8001d0e:	e7ef      	b.n	8001cf0 <HAL_UART_Transmit+0x52>
      pdata16bits = NULL;
 8001d10:	f04f 0a00 	mov.w	sl, #0
 8001d14:	e7ec      	b.n	8001cf0 <HAL_UART_Transmit+0x52>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001d16:	6822      	ldr	r2, [r4, #0]
 8001d18:	f83a 3b02 	ldrh.w	r3, [sl], #2
 8001d1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d20:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8001d22:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8001d24:	3a01      	subs	r2, #1
 8001d26:	b292      	uxth	r2, r2
 8001d28:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001d2a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	b173      	cbz	r3, 8001d4e <HAL_UART_Transmit+0xb0>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d30:	9600      	str	r6, [sp, #0]
 8001d32:	463b      	mov	r3, r7
 8001d34:	464a      	mov	r2, r9
 8001d36:	4641      	mov	r1, r8
 8001d38:	4620      	mov	r0, r4
 8001d3a:	f7ff ff4d 	bl	8001bd8 <UART_WaitOnFlagUntilTimeout>
 8001d3e:	b9e0      	cbnz	r0, 8001d7a <HAL_UART_Transmit+0xdc>
      if (pdata8bits == NULL)
 8001d40:	2d00      	cmp	r5, #0
 8001d42:	d0e8      	beq.n	8001d16 <HAL_UART_Transmit+0x78>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d44:	6823      	ldr	r3, [r4, #0]
 8001d46:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001d4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001d4c:	e7e9      	b.n	8001d22 <HAL_UART_Transmit+0x84>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d4e:	9600      	str	r6, [sp, #0]
 8001d50:	463b      	mov	r3, r7
 8001d52:	2200      	movs	r2, #0
 8001d54:	2140      	movs	r1, #64	; 0x40
 8001d56:	4620      	mov	r0, r4
 8001d58:	f7ff ff3e 	bl	8001bd8 <UART_WaitOnFlagUntilTimeout>
 8001d5c:	b978      	cbnz	r0, 8001d7e <HAL_UART_Transmit+0xe0>
    huart->gState = HAL_UART_STATE_READY;
 8001d5e:	2320      	movs	r3, #32
 8001d60:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8001d64:	e000      	b.n	8001d68 <HAL_UART_Transmit+0xca>
    return HAL_BUSY;
 8001d66:	2002      	movs	r0, #2
}
 8001d68:	b002      	add	sp, #8
 8001d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return  HAL_ERROR;
 8001d6e:	2001      	movs	r0, #1
 8001d70:	e7fa      	b.n	8001d68 <HAL_UART_Transmit+0xca>
 8001d72:	2001      	movs	r0, #1
 8001d74:	e7f8      	b.n	8001d68 <HAL_UART_Transmit+0xca>
    __HAL_LOCK(huart);
 8001d76:	2002      	movs	r0, #2
 8001d78:	e7f6      	b.n	8001d68 <HAL_UART_Transmit+0xca>
        return HAL_TIMEOUT;
 8001d7a:	2003      	movs	r0, #3
 8001d7c:	e7f4      	b.n	8001d68 <HAL_UART_Transmit+0xca>
      return HAL_TIMEOUT;
 8001d7e:	2003      	movs	r0, #3
 8001d80:	e7f2      	b.n	8001d68 <HAL_UART_Transmit+0xca>
	...

08001d84 <HAL_UART_Receive_DMA>:
{
 8001d84:	b530      	push	{r4, r5, lr}
 8001d86:	b083      	sub	sp, #12
 8001d88:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 8001d8a:	f890 003a 	ldrb.w	r0, [r0, #58]	; 0x3a
 8001d8e:	b2c0      	uxtb	r0, r0
 8001d90:	2820      	cmp	r0, #32
 8001d92:	d13c      	bne.n	8001e0e <HAL_UART_Receive_DMA+0x8a>
    if ((pData == NULL) || (Size == 0U))
 8001d94:	2900      	cmp	r1, #0
 8001d96:	d03d      	beq.n	8001e14 <HAL_UART_Receive_DMA+0x90>
 8001d98:	2a00      	cmp	r2, #0
 8001d9a:	d03d      	beq.n	8001e18 <HAL_UART_Receive_DMA+0x94>
    __HAL_LOCK(huart);
 8001d9c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d03b      	beq.n	8001e1c <HAL_UART_Receive_DMA+0x98>
 8001da4:	2301      	movs	r3, #1
 8001da6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    huart->pRxBuffPtr = pData;
 8001daa:	62a1      	str	r1, [r4, #40]	; 0x28
    huart->RxXferSize = Size;
 8001dac:	85a2      	strh	r2, [r4, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dae:	2500      	movs	r5, #0
 8001db0:	63e5      	str	r5, [r4, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001db2:	2322      	movs	r3, #34	; 0x22
 8001db4:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8001db8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001dba:	4819      	ldr	r0, [pc, #100]	; (8001e20 <HAL_UART_Receive_DMA+0x9c>)
 8001dbc:	6298      	str	r0, [r3, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8001dbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001dc0:	4818      	ldr	r0, [pc, #96]	; (8001e24 <HAL_UART_Receive_DMA+0xa0>)
 8001dc2:	62d8      	str	r0, [r3, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8001dc4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001dc6:	4818      	ldr	r0, [pc, #96]	; (8001e28 <HAL_UART_Receive_DMA+0xa4>)
 8001dc8:	6318      	str	r0, [r3, #48]	; 0x30
    huart->hdmarx->XferAbortCallback = NULL;
 8001dca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001dcc:	635d      	str	r5, [r3, #52]	; 0x34
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8001dce:	6820      	ldr	r0, [r4, #0]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	460a      	mov	r2, r1
 8001dd4:	1d01      	adds	r1, r0, #4
 8001dd6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001dd8:	f7ff f800 	bl	8000ddc <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_OREFLAG(huart);
 8001ddc:	9501      	str	r5, [sp, #4]
 8001dde:	6823      	ldr	r3, [r4, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	9201      	str	r2, [sp, #4]
 8001de4:	685a      	ldr	r2, [r3, #4]
 8001de6:	9201      	str	r2, [sp, #4]
 8001de8:	9a01      	ldr	r2, [sp, #4]
    __HAL_UNLOCK(huart);
 8001dea:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001dee:	68da      	ldr	r2, [r3, #12]
 8001df0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001df4:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001df6:	6822      	ldr	r2, [r4, #0]
 8001df8:	6953      	ldr	r3, [r2, #20]
 8001dfa:	f043 0301 	orr.w	r3, r3, #1
 8001dfe:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e00:	6822      	ldr	r2, [r4, #0]
 8001e02:	6953      	ldr	r3, [r2, #20]
 8001e04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e08:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 8001e0a:	4628      	mov	r0, r5
 8001e0c:	e000      	b.n	8001e10 <HAL_UART_Receive_DMA+0x8c>
    return HAL_BUSY;
 8001e0e:	2002      	movs	r0, #2
}
 8001e10:	b003      	add	sp, #12
 8001e12:	bd30      	pop	{r4, r5, pc}
      return HAL_ERROR;
 8001e14:	2001      	movs	r0, #1
 8001e16:	e7fb      	b.n	8001e10 <HAL_UART_Receive_DMA+0x8c>
 8001e18:	2001      	movs	r0, #1
 8001e1a:	e7f9      	b.n	8001e10 <HAL_UART_Receive_DMA+0x8c>
    __HAL_LOCK(huart);
 8001e1c:	2002      	movs	r0, #2
 8001e1e:	e7f7      	b.n	8001e10 <HAL_UART_Receive_DMA+0x8c>
 8001e20:	08001e99 	.word	0x08001e99
 8001e24:	08001f6b 	.word	0x08001f6b
 8001e28:	08001f77 	.word	0x08001f77

08001e2c <HAL_UART_DMAStop>:
{
 8001e2c:	b510      	push	{r4, lr}
 8001e2e:	4604      	mov	r4, r0
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8001e30:	6802      	ldr	r2, [r0, #0]
 8001e32:	6951      	ldr	r1, [r2, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8001e34:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b21      	cmp	r3, #33	; 0x21
 8001e3c:	d008      	beq.n	8001e50 <HAL_UART_DMAStop+0x24>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001e3e:	6822      	ldr	r2, [r4, #0]
 8001e40:	6951      	ldr	r1, [r2, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001e42:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	2b22      	cmp	r3, #34	; 0x22
 8001e4a:	d015      	beq.n	8001e78 <HAL_UART_DMAStop+0x4c>
}
 8001e4c:	2000      	movs	r0, #0
 8001e4e:	bd10      	pop	{r4, pc}
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8001e50:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001e54:	d0f3      	beq.n	8001e3e <HAL_UART_DMAStop+0x12>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001e56:	6953      	ldr	r3, [r2, #20]
 8001e58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e5c:	6153      	str	r3, [r2, #20]
    if (huart->hdmatx != NULL)
 8001e5e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8001e60:	b108      	cbz	r0, 8001e66 <HAL_UART_DMAStop+0x3a>
      HAL_DMA_Abort(huart->hdmatx);
 8001e62:	f7ff f805 	bl	8000e70 <HAL_DMA_Abort>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8001e66:	6822      	ldr	r2, [r4, #0]
 8001e68:	68d3      	ldr	r3, [r2, #12]
 8001e6a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001e6e:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001e70:	2320      	movs	r3, #32
 8001e72:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 8001e76:	e7e2      	b.n	8001e3e <HAL_UART_DMAStop+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001e78:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001e7c:	d0e6      	beq.n	8001e4c <HAL_UART_DMAStop+0x20>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e7e:	6953      	ldr	r3, [r2, #20]
 8001e80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e84:	6153      	str	r3, [r2, #20]
    if (huart->hdmarx != NULL)
 8001e86:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001e88:	b108      	cbz	r0, 8001e8e <HAL_UART_DMAStop+0x62>
      HAL_DMA_Abort(huart->hdmarx);
 8001e8a:	f7fe fff1 	bl	8000e70 <HAL_DMA_Abort>
    UART_EndRxTransfer(huart);
 8001e8e:	4620      	mov	r0, r4
 8001e90:	f7ff fe50 	bl	8001b34 <UART_EndRxTransfer>
 8001e94:	e7da      	b.n	8001e4c <HAL_UART_DMAStop+0x20>

08001e96 <HAL_UART_TxCpltCallback>:
}
 8001e96:	4770      	bx	lr

08001e98 <UART_DMAReceiveCplt>:
{
 8001e98:	b508      	push	{r3, lr}
 8001e9a:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e9c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f013 0f20 	tst.w	r3, #32
 8001ea6:	d113      	bne.n	8001ed0 <UART_DMAReceiveCplt+0x38>
    huart->RxXferCount = 0U;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	85c3      	strh	r3, [r0, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001eac:	6802      	ldr	r2, [r0, #0]
 8001eae:	68d3      	ldr	r3, [r2, #12]
 8001eb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001eb4:	60d3      	str	r3, [r2, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001eb6:	6802      	ldr	r2, [r0, #0]
 8001eb8:	6953      	ldr	r3, [r2, #20]
 8001eba:	f023 0301 	bic.w	r3, r3, #1
 8001ebe:	6153      	str	r3, [r2, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001ec0:	6802      	ldr	r2, [r0, #0]
 8001ec2:	6953      	ldr	r3, [r2, #20]
 8001ec4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ec8:	6153      	str	r3, [r2, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8001eca:	2320      	movs	r3, #32
 8001ecc:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 8001ed0:	f7fe fb58 	bl	8000584 <HAL_UART_RxCpltCallback>
}
 8001ed4:	bd08      	pop	{r3, pc}

08001ed6 <UART_Receive_IT>:
{
 8001ed6:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001ed8:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	2b22      	cmp	r3, #34	; 0x22
 8001ee0:	d130      	bne.n	8001f44 <UART_Receive_IT+0x6e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ee2:	6883      	ldr	r3, [r0, #8]
 8001ee4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ee8:	d006      	beq.n	8001ef8 <UART_Receive_IT+0x22>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001eea:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001eec:	b183      	cbz	r3, 8001f10 <UART_Receive_IT+0x3a>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001eee:	6803      	ldr	r3, [r0, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ef6:	e02b      	b.n	8001f50 <UART_Receive_IT+0x7a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ef8:	6903      	ldr	r3, [r0, #16]
 8001efa:	bb2b      	cbnz	r3, 8001f48 <UART_Receive_IT+0x72>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8001efc:	6a82      	ldr	r2, [r0, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001efe:	6803      	ldr	r3, [r0, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f06:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8001f08:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001f0a:	3302      	adds	r3, #2
 8001f0c:	6283      	str	r3, [r0, #40]	; 0x28
 8001f0e:	e023      	b.n	8001f58 <UART_Receive_IT+0x82>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001f10:	6903      	ldr	r3, [r0, #16]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1eb      	bne.n	8001eee <UART_Receive_IT+0x18>
 8001f16:	e018      	b.n	8001f4a <UART_Receive_IT+0x74>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001f18:	6802      	ldr	r2, [r0, #0]
 8001f1a:	68d3      	ldr	r3, [r2, #12]
 8001f1c:	f023 0320 	bic.w	r3, r3, #32
 8001f20:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001f22:	6802      	ldr	r2, [r0, #0]
 8001f24:	68d3      	ldr	r3, [r2, #12]
 8001f26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f2a:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001f2c:	6802      	ldr	r2, [r0, #0]
 8001f2e:	6953      	ldr	r3, [r2, #20]
 8001f30:	f023 0301 	bic.w	r3, r3, #1
 8001f34:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001f36:	2320      	movs	r3, #32
 8001f38:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8001f3c:	f7fe fb22 	bl	8000584 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8001f40:	2000      	movs	r0, #0
 8001f42:	e010      	b.n	8001f66 <UART_Receive_IT+0x90>
    return HAL_BUSY;
 8001f44:	2002      	movs	r0, #2
 8001f46:	e00e      	b.n	8001f66 <UART_Receive_IT+0x90>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001f48:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001f4a:	6803      	ldr	r3, [r0, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8001f52:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001f54:	3301      	adds	r3, #1
 8001f56:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8001f58:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d0d9      	beq.n	8001f18 <UART_Receive_IT+0x42>
    return HAL_OK;
 8001f64:	2000      	movs	r0, #0
}
 8001f66:	bd08      	pop	{r3, pc}

08001f68 <HAL_UART_RxHalfCpltCallback>:
}
 8001f68:	4770      	bx	lr

08001f6a <UART_DMARxHalfCplt>:
{
 8001f6a:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 8001f6c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001f6e:	f7ff fffb 	bl	8001f68 <HAL_UART_RxHalfCpltCallback>
}
 8001f72:	bd08      	pop	{r3, pc}

08001f74 <HAL_UART_ErrorCallback>:
}
 8001f74:	4770      	bx	lr

08001f76 <UART_DMAError>:
{
 8001f76:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f78:	6a44      	ldr	r4, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8001f7a:	6822      	ldr	r2, [r4, #0]
 8001f7c:	6951      	ldr	r1, [r2, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8001f7e:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b21      	cmp	r3, #33	; 0x21
 8001f86:	d00e      	beq.n	8001fa6 <UART_DMAError+0x30>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001f88:	6823      	ldr	r3, [r4, #0]
 8001f8a:	695a      	ldr	r2, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001f8c:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b22      	cmp	r3, #34	; 0x22
 8001f94:	d014      	beq.n	8001fc0 <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8001f96:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001f98:	f043 0310 	orr.w	r3, r3, #16
 8001f9c:	63e3      	str	r3, [r4, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8001f9e:	4620      	mov	r0, r4
 8001fa0:	f7ff ffe8 	bl	8001f74 <HAL_UART_ErrorCallback>
}
 8001fa4:	bd10      	pop	{r4, pc}
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8001fa6:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001faa:	d0ed      	beq.n	8001f88 <UART_DMAError+0x12>
    huart->TxXferCount = 0x00U;
 8001fac:	2300      	movs	r3, #0
 8001fae:	84e3      	strh	r3, [r4, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8001fb0:	68d3      	ldr	r3, [r2, #12]
 8001fb2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001fb6:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001fb8:	2320      	movs	r3, #32
 8001fba:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 8001fbe:	e7e3      	b.n	8001f88 <UART_DMAError+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001fc0:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001fc4:	d0e7      	beq.n	8001f96 <UART_DMAError+0x20>
    huart->RxXferCount = 0x00U;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	85e3      	strh	r3, [r4, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8001fca:	4620      	mov	r0, r4
 8001fcc:	f7ff fdb2 	bl	8001b34 <UART_EndRxTransfer>
 8001fd0:	e7e1      	b.n	8001f96 <UART_DMAError+0x20>
	...

08001fd4 <HAL_UART_IRQHandler>:
{
 8001fd4:	b538      	push	{r3, r4, r5, lr}
 8001fd6:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001fd8:	6802      	ldr	r2, [r0, #0]
 8001fda:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001fdc:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001fde:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 8001fe0:	f013 0f0f 	tst.w	r3, #15
 8001fe4:	d109      	bne.n	8001ffa <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001fe6:	f013 0f20 	tst.w	r3, #32
 8001fea:	d00c      	beq.n	8002006 <HAL_UART_IRQHandler+0x32>
 8001fec:	f010 0f20 	tst.w	r0, #32
 8001ff0:	d009      	beq.n	8002006 <HAL_UART_IRQHandler+0x32>
      UART_Receive_IT(huart);
 8001ff2:	4620      	mov	r0, r4
 8001ff4:	f7ff ff6f 	bl	8001ed6 <UART_Receive_IT>
      return;
 8001ff8:	e012      	b.n	8002020 <HAL_UART_IRQHandler+0x4c>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001ffa:	f001 0101 	and.w	r1, r1, #1
 8001ffe:	f400 7590 	and.w	r5, r0, #288	; 0x120
 8002002:	430d      	orrs	r5, r1
 8002004:	d10d      	bne.n	8002022 <HAL_UART_IRQHandler+0x4e>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002006:	f013 0f80 	tst.w	r3, #128	; 0x80
 800200a:	d002      	beq.n	8002012 <HAL_UART_IRQHandler+0x3e>
 800200c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002010:	d170      	bne.n	80020f4 <HAL_UART_IRQHandler+0x120>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002012:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002016:	d003      	beq.n	8002020 <HAL_UART_IRQHandler+0x4c>
 8002018:	f010 0f40 	tst.w	r0, #64	; 0x40
 800201c:	f040 8095 	bne.w	800214a <HAL_UART_IRQHandler+0x176>
}
 8002020:	bd38      	pop	{r3, r4, r5, pc}
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002022:	f013 0f01 	tst.w	r3, #1
 8002026:	d006      	beq.n	8002036 <HAL_UART_IRQHandler+0x62>
 8002028:	f410 7f80 	tst.w	r0, #256	; 0x100
 800202c:	d003      	beq.n	8002036 <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800202e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002030:	f042 0201 	orr.w	r2, r2, #1
 8002034:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002036:	f013 0f04 	tst.w	r3, #4
 800203a:	d00b      	beq.n	8002054 <HAL_UART_IRQHandler+0x80>
 800203c:	b191      	cbz	r1, 8002064 <HAL_UART_IRQHandler+0x90>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800203e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002040:	f042 0202 	orr.w	r2, r2, #2
 8002044:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002046:	f013 0f02 	tst.w	r3, #2
 800204a:	d107      	bne.n	800205c <HAL_UART_IRQHandler+0x88>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800204c:	f013 0f08 	tst.w	r3, #8
 8002050:	d10f      	bne.n	8002072 <HAL_UART_IRQHandler+0x9e>
 8002052:	e012      	b.n	800207a <HAL_UART_IRQHandler+0xa6>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002054:	f013 0f02 	tst.w	r3, #2
 8002058:	d004      	beq.n	8002064 <HAL_UART_IRQHandler+0x90>
 800205a:	b119      	cbz	r1, 8002064 <HAL_UART_IRQHandler+0x90>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800205c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800205e:	f042 0204 	orr.w	r2, r2, #4
 8002062:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002064:	f013 0f08 	tst.w	r3, #8
 8002068:	d007      	beq.n	800207a <HAL_UART_IRQHandler+0xa6>
 800206a:	f000 0220 	and.w	r2, r0, #32
 800206e:	430a      	orrs	r2, r1
 8002070:	d003      	beq.n	800207a <HAL_UART_IRQHandler+0xa6>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002072:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002074:	f042 0208 	orr.w	r2, r2, #8
 8002078:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800207a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800207c:	2a00      	cmp	r2, #0
 800207e:	d0cf      	beq.n	8002020 <HAL_UART_IRQHandler+0x4c>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002080:	f013 0f20 	tst.w	r3, #32
 8002084:	d002      	beq.n	800208c <HAL_UART_IRQHandler+0xb8>
 8002086:	f010 0f20 	tst.w	r0, #32
 800208a:	d10e      	bne.n	80020aa <HAL_UART_IRQHandler+0xd6>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800208c:	6823      	ldr	r3, [r4, #0]
 800208e:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002090:	6be3      	ldr	r3, [r4, #60]	; 0x3c
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002092:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002096:	f003 0308 	and.w	r3, r3, #8
 800209a:	4313      	orrs	r3, r2
 800209c:	d109      	bne.n	80020b2 <HAL_UART_IRQHandler+0xde>
        HAL_UART_ErrorCallback(huart);
 800209e:	4620      	mov	r0, r4
 80020a0:	f7ff ff68 	bl	8001f74 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020a4:	2300      	movs	r3, #0
 80020a6:	63e3      	str	r3, [r4, #60]	; 0x3c
 80020a8:	e7ba      	b.n	8002020 <HAL_UART_IRQHandler+0x4c>
        UART_Receive_IT(huart);
 80020aa:	4620      	mov	r0, r4
 80020ac:	f7ff ff13 	bl	8001ed6 <UART_Receive_IT>
 80020b0:	e7ec      	b.n	800208c <HAL_UART_IRQHandler+0xb8>
        UART_EndRxTransfer(huart);
 80020b2:	4620      	mov	r0, r4
 80020b4:	f7ff fd3e 	bl	8001b34 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020b8:	6823      	ldr	r3, [r4, #0]
 80020ba:	695a      	ldr	r2, [r3, #20]
 80020bc:	f012 0f40 	tst.w	r2, #64	; 0x40
 80020c0:	d014      	beq.n	80020ec <HAL_UART_IRQHandler+0x118>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80020c2:	695a      	ldr	r2, [r3, #20]
 80020c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020c8:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80020ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80020cc:	b153      	cbz	r3, 80020e4 <HAL_UART_IRQHandler+0x110>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80020ce:	4a24      	ldr	r2, [pc, #144]	; (8002160 <HAL_UART_IRQHandler+0x18c>)
 80020d0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80020d2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80020d4:	f7fe feee 	bl	8000eb4 <HAL_DMA_Abort_IT>
 80020d8:	2800      	cmp	r0, #0
 80020da:	d0a1      	beq.n	8002020 <HAL_UART_IRQHandler+0x4c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80020dc:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80020de:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80020e0:	4798      	blx	r3
 80020e2:	e79d      	b.n	8002020 <HAL_UART_IRQHandler+0x4c>
            HAL_UART_ErrorCallback(huart);
 80020e4:	4620      	mov	r0, r4
 80020e6:	f7ff ff45 	bl	8001f74 <HAL_UART_ErrorCallback>
 80020ea:	e799      	b.n	8002020 <HAL_UART_IRQHandler+0x4c>
          HAL_UART_ErrorCallback(huart);
 80020ec:	4620      	mov	r0, r4
 80020ee:	f7ff ff41 	bl	8001f74 <HAL_UART_ErrorCallback>
 80020f2:	e795      	b.n	8002020 <HAL_UART_IRQHandler+0x4c>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80020f4:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b21      	cmp	r3, #33	; 0x21
 80020fc:	d190      	bne.n	8002020 <HAL_UART_IRQHandler+0x4c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020fe:	68a3      	ldr	r3, [r4, #8]
 8002100:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002104:	d015      	beq.n	8002132 <HAL_UART_IRQHandler+0x15e>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002106:	6a23      	ldr	r3, [r4, #32]
 8002108:	1c59      	adds	r1, r3, #1
 800210a:	6221      	str	r1, [r4, #32]
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	6053      	str	r3, [r2, #4]
    if (--huart->TxXferCount == 0U)
 8002110:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002112:	3b01      	subs	r3, #1
 8002114:	b29b      	uxth	r3, r3
 8002116:	84e3      	strh	r3, [r4, #38]	; 0x26
 8002118:	2b00      	cmp	r3, #0
 800211a:	d181      	bne.n	8002020 <HAL_UART_IRQHandler+0x4c>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800211c:	6822      	ldr	r2, [r4, #0]
 800211e:	68d3      	ldr	r3, [r2, #12]
 8002120:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002124:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002126:	6822      	ldr	r2, [r4, #0]
 8002128:	68d3      	ldr	r3, [r2, #12]
 800212a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800212e:	60d3      	str	r3, [r2, #12]
 8002130:	e776      	b.n	8002020 <HAL_UART_IRQHandler+0x4c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002132:	6923      	ldr	r3, [r4, #16]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d1e6      	bne.n	8002106 <HAL_UART_IRQHandler+0x132>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002138:	6a23      	ldr	r3, [r4, #32]
 800213a:	881b      	ldrh	r3, [r3, #0]
 800213c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002140:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 8002142:	6a23      	ldr	r3, [r4, #32]
 8002144:	3302      	adds	r3, #2
 8002146:	6223      	str	r3, [r4, #32]
 8002148:	e7e2      	b.n	8002110 <HAL_UART_IRQHandler+0x13c>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800214a:	68d3      	ldr	r3, [r2, #12]
 800214c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002150:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002152:	2320      	movs	r3, #32
 8002154:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8002158:	4620      	mov	r0, r4
 800215a:	f7ff fe9c 	bl	8001e96 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 800215e:	e75f      	b.n	8002020 <HAL_UART_IRQHandler+0x4c>
 8002160:	08002165 	.word	0x08002165

08002164 <UART_DMAAbortOnError>:
{
 8002164:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002166:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8002168:	2300      	movs	r3, #0
 800216a:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800216c:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800216e:	f7ff ff01 	bl	8001f74 <HAL_UART_ErrorCallback>
}
 8002172:	bd08      	pop	{r3, pc}

08002174 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002174:	b084      	sub	sp, #16
 8002176:	a801      	add	r0, sp, #4
 8002178:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 800217c:	2000      	movs	r0, #0
 800217e:	b004      	add	sp, #16
 8002180:	4770      	bx	lr

08002182 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002182:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8002186:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800218a:	045b      	lsls	r3, r3, #17
 800218c:	0c5b      	lsrs	r3, r3, #17
 800218e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8002192:	2000      	movs	r0, #0
 8002194:	4770      	bx	lr

08002196 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002196:	2000      	movs	r0, #0
 8002198:	4770      	bx	lr

0800219a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800219a:	b084      	sub	sp, #16
 800219c:	b410      	push	{r4}
 800219e:	4604      	mov	r4, r0
 80021a0:	a802      	add	r0, sp, #8
 80021a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80021a6:	2301      	movs	r3, #1
 80021a8:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80021ac:	2000      	movs	r0, #0
 80021ae:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80021b2:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80021b6:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50

  return HAL_OK;
}
 80021ba:	bc10      	pop	{r4}
 80021bc:	b004      	add	sp, #16
 80021be:	4770      	bx	lr

080021c0 <USB_DevDisconnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 80021c0:	2000      	movs	r0, #0
 80021c2:	4770      	bx	lr

080021c4 <__libc_init_array>:
 80021c4:	b570      	push	{r4, r5, r6, lr}
 80021c6:	2600      	movs	r6, #0
 80021c8:	4d0c      	ldr	r5, [pc, #48]	; (80021fc <__libc_init_array+0x38>)
 80021ca:	4c0d      	ldr	r4, [pc, #52]	; (8002200 <__libc_init_array+0x3c>)
 80021cc:	1b64      	subs	r4, r4, r5
 80021ce:	10a4      	asrs	r4, r4, #2
 80021d0:	42a6      	cmp	r6, r4
 80021d2:	d109      	bne.n	80021e8 <__libc_init_array+0x24>
 80021d4:	f000 f91e 	bl	8002414 <_init>
 80021d8:	2600      	movs	r6, #0
 80021da:	4d0a      	ldr	r5, [pc, #40]	; (8002204 <__libc_init_array+0x40>)
 80021dc:	4c0a      	ldr	r4, [pc, #40]	; (8002208 <__libc_init_array+0x44>)
 80021de:	1b64      	subs	r4, r4, r5
 80021e0:	10a4      	asrs	r4, r4, #2
 80021e2:	42a6      	cmp	r6, r4
 80021e4:	d105      	bne.n	80021f2 <__libc_init_array+0x2e>
 80021e6:	bd70      	pop	{r4, r5, r6, pc}
 80021e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80021ec:	4798      	blx	r3
 80021ee:	3601      	adds	r6, #1
 80021f0:	e7ee      	b.n	80021d0 <__libc_init_array+0xc>
 80021f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80021f6:	4798      	blx	r3
 80021f8:	3601      	adds	r6, #1
 80021fa:	e7f2      	b.n	80021e2 <__libc_init_array+0x1e>
 80021fc:	08002478 	.word	0x08002478
 8002200:	08002478 	.word	0x08002478
 8002204:	08002478 	.word	0x08002478
 8002208:	0800247c 	.word	0x0800247c

0800220c <malloc>:
 800220c:	4b02      	ldr	r3, [pc, #8]	; (8002218 <malloc+0xc>)
 800220e:	4601      	mov	r1, r0
 8002210:	6818      	ldr	r0, [r3, #0]
 8002212:	f000 b85f 	b.w	80022d4 <_malloc_r>
 8002216:	bf00      	nop
 8002218:	2000000c 	.word	0x2000000c

0800221c <free>:
 800221c:	4b02      	ldr	r3, [pc, #8]	; (8002228 <free+0xc>)
 800221e:	4601      	mov	r1, r0
 8002220:	6818      	ldr	r0, [r3, #0]
 8002222:	f000 b80b 	b.w	800223c <_free_r>
 8002226:	bf00      	nop
 8002228:	2000000c 	.word	0x2000000c

0800222c <memset>:
 800222c:	4603      	mov	r3, r0
 800222e:	4402      	add	r2, r0
 8002230:	4293      	cmp	r3, r2
 8002232:	d100      	bne.n	8002236 <memset+0xa>
 8002234:	4770      	bx	lr
 8002236:	f803 1b01 	strb.w	r1, [r3], #1
 800223a:	e7f9      	b.n	8002230 <memset+0x4>

0800223c <_free_r>:
 800223c:	b538      	push	{r3, r4, r5, lr}
 800223e:	4605      	mov	r5, r0
 8002240:	2900      	cmp	r1, #0
 8002242:	d043      	beq.n	80022cc <_free_r+0x90>
 8002244:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002248:	1f0c      	subs	r4, r1, #4
 800224a:	2b00      	cmp	r3, #0
 800224c:	bfb8      	it	lt
 800224e:	18e4      	addlt	r4, r4, r3
 8002250:	f000 f8c4 	bl	80023dc <__malloc_lock>
 8002254:	4a1e      	ldr	r2, [pc, #120]	; (80022d0 <_free_r+0x94>)
 8002256:	6813      	ldr	r3, [r2, #0]
 8002258:	4610      	mov	r0, r2
 800225a:	b933      	cbnz	r3, 800226a <_free_r+0x2e>
 800225c:	6063      	str	r3, [r4, #4]
 800225e:	6014      	str	r4, [r2, #0]
 8002260:	4628      	mov	r0, r5
 8002262:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002266:	f000 b8bf 	b.w	80023e8 <__malloc_unlock>
 800226a:	42a3      	cmp	r3, r4
 800226c:	d90a      	bls.n	8002284 <_free_r+0x48>
 800226e:	6821      	ldr	r1, [r4, #0]
 8002270:	1862      	adds	r2, r4, r1
 8002272:	4293      	cmp	r3, r2
 8002274:	bf01      	itttt	eq
 8002276:	681a      	ldreq	r2, [r3, #0]
 8002278:	685b      	ldreq	r3, [r3, #4]
 800227a:	1852      	addeq	r2, r2, r1
 800227c:	6022      	streq	r2, [r4, #0]
 800227e:	6063      	str	r3, [r4, #4]
 8002280:	6004      	str	r4, [r0, #0]
 8002282:	e7ed      	b.n	8002260 <_free_r+0x24>
 8002284:	461a      	mov	r2, r3
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	b10b      	cbz	r3, 800228e <_free_r+0x52>
 800228a:	42a3      	cmp	r3, r4
 800228c:	d9fa      	bls.n	8002284 <_free_r+0x48>
 800228e:	6811      	ldr	r1, [r2, #0]
 8002290:	1850      	adds	r0, r2, r1
 8002292:	42a0      	cmp	r0, r4
 8002294:	d10b      	bne.n	80022ae <_free_r+0x72>
 8002296:	6820      	ldr	r0, [r4, #0]
 8002298:	4401      	add	r1, r0
 800229a:	1850      	adds	r0, r2, r1
 800229c:	4283      	cmp	r3, r0
 800229e:	6011      	str	r1, [r2, #0]
 80022a0:	d1de      	bne.n	8002260 <_free_r+0x24>
 80022a2:	6818      	ldr	r0, [r3, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	4401      	add	r1, r0
 80022a8:	6011      	str	r1, [r2, #0]
 80022aa:	6053      	str	r3, [r2, #4]
 80022ac:	e7d8      	b.n	8002260 <_free_r+0x24>
 80022ae:	d902      	bls.n	80022b6 <_free_r+0x7a>
 80022b0:	230c      	movs	r3, #12
 80022b2:	602b      	str	r3, [r5, #0]
 80022b4:	e7d4      	b.n	8002260 <_free_r+0x24>
 80022b6:	6820      	ldr	r0, [r4, #0]
 80022b8:	1821      	adds	r1, r4, r0
 80022ba:	428b      	cmp	r3, r1
 80022bc:	bf01      	itttt	eq
 80022be:	6819      	ldreq	r1, [r3, #0]
 80022c0:	685b      	ldreq	r3, [r3, #4]
 80022c2:	1809      	addeq	r1, r1, r0
 80022c4:	6021      	streq	r1, [r4, #0]
 80022c6:	6063      	str	r3, [r4, #4]
 80022c8:	6054      	str	r4, [r2, #4]
 80022ca:	e7c9      	b.n	8002260 <_free_r+0x24>
 80022cc:	bd38      	pop	{r3, r4, r5, pc}
 80022ce:	bf00      	nop
 80022d0:	20000150 	.word	0x20000150

080022d4 <_malloc_r>:
 80022d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022d6:	1ccd      	adds	r5, r1, #3
 80022d8:	f025 0503 	bic.w	r5, r5, #3
 80022dc:	3508      	adds	r5, #8
 80022de:	2d0c      	cmp	r5, #12
 80022e0:	bf38      	it	cc
 80022e2:	250c      	movcc	r5, #12
 80022e4:	2d00      	cmp	r5, #0
 80022e6:	4606      	mov	r6, r0
 80022e8:	db01      	blt.n	80022ee <_malloc_r+0x1a>
 80022ea:	42a9      	cmp	r1, r5
 80022ec:	d903      	bls.n	80022f6 <_malloc_r+0x22>
 80022ee:	230c      	movs	r3, #12
 80022f0:	6033      	str	r3, [r6, #0]
 80022f2:	2000      	movs	r0, #0
 80022f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022f6:	f000 f871 	bl	80023dc <__malloc_lock>
 80022fa:	4921      	ldr	r1, [pc, #132]	; (8002380 <_malloc_r+0xac>)
 80022fc:	680a      	ldr	r2, [r1, #0]
 80022fe:	4614      	mov	r4, r2
 8002300:	b99c      	cbnz	r4, 800232a <_malloc_r+0x56>
 8002302:	4f20      	ldr	r7, [pc, #128]	; (8002384 <_malloc_r+0xb0>)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	b923      	cbnz	r3, 8002312 <_malloc_r+0x3e>
 8002308:	4621      	mov	r1, r4
 800230a:	4630      	mov	r0, r6
 800230c:	f000 f83c 	bl	8002388 <_sbrk_r>
 8002310:	6038      	str	r0, [r7, #0]
 8002312:	4629      	mov	r1, r5
 8002314:	4630      	mov	r0, r6
 8002316:	f000 f837 	bl	8002388 <_sbrk_r>
 800231a:	1c43      	adds	r3, r0, #1
 800231c:	d123      	bne.n	8002366 <_malloc_r+0x92>
 800231e:	230c      	movs	r3, #12
 8002320:	4630      	mov	r0, r6
 8002322:	6033      	str	r3, [r6, #0]
 8002324:	f000 f860 	bl	80023e8 <__malloc_unlock>
 8002328:	e7e3      	b.n	80022f2 <_malloc_r+0x1e>
 800232a:	6823      	ldr	r3, [r4, #0]
 800232c:	1b5b      	subs	r3, r3, r5
 800232e:	d417      	bmi.n	8002360 <_malloc_r+0x8c>
 8002330:	2b0b      	cmp	r3, #11
 8002332:	d903      	bls.n	800233c <_malloc_r+0x68>
 8002334:	6023      	str	r3, [r4, #0]
 8002336:	441c      	add	r4, r3
 8002338:	6025      	str	r5, [r4, #0]
 800233a:	e004      	b.n	8002346 <_malloc_r+0x72>
 800233c:	6863      	ldr	r3, [r4, #4]
 800233e:	42a2      	cmp	r2, r4
 8002340:	bf0c      	ite	eq
 8002342:	600b      	streq	r3, [r1, #0]
 8002344:	6053      	strne	r3, [r2, #4]
 8002346:	4630      	mov	r0, r6
 8002348:	f000 f84e 	bl	80023e8 <__malloc_unlock>
 800234c:	f104 000b 	add.w	r0, r4, #11
 8002350:	1d23      	adds	r3, r4, #4
 8002352:	f020 0007 	bic.w	r0, r0, #7
 8002356:	1ac2      	subs	r2, r0, r3
 8002358:	d0cc      	beq.n	80022f4 <_malloc_r+0x20>
 800235a:	1a1b      	subs	r3, r3, r0
 800235c:	50a3      	str	r3, [r4, r2]
 800235e:	e7c9      	b.n	80022f4 <_malloc_r+0x20>
 8002360:	4622      	mov	r2, r4
 8002362:	6864      	ldr	r4, [r4, #4]
 8002364:	e7cc      	b.n	8002300 <_malloc_r+0x2c>
 8002366:	1cc4      	adds	r4, r0, #3
 8002368:	f024 0403 	bic.w	r4, r4, #3
 800236c:	42a0      	cmp	r0, r4
 800236e:	d0e3      	beq.n	8002338 <_malloc_r+0x64>
 8002370:	1a21      	subs	r1, r4, r0
 8002372:	4630      	mov	r0, r6
 8002374:	f000 f808 	bl	8002388 <_sbrk_r>
 8002378:	3001      	adds	r0, #1
 800237a:	d1dd      	bne.n	8002338 <_malloc_r+0x64>
 800237c:	e7cf      	b.n	800231e <_malloc_r+0x4a>
 800237e:	bf00      	nop
 8002380:	20000150 	.word	0x20000150
 8002384:	20000154 	.word	0x20000154

08002388 <_sbrk_r>:
 8002388:	b538      	push	{r3, r4, r5, lr}
 800238a:	2300      	movs	r3, #0
 800238c:	4d05      	ldr	r5, [pc, #20]	; (80023a4 <_sbrk_r+0x1c>)
 800238e:	4604      	mov	r4, r0
 8002390:	4608      	mov	r0, r1
 8002392:	602b      	str	r3, [r5, #0]
 8002394:	f000 f830 	bl	80023f8 <_sbrk>
 8002398:	1c43      	adds	r3, r0, #1
 800239a:	d102      	bne.n	80023a2 <_sbrk_r+0x1a>
 800239c:	682b      	ldr	r3, [r5, #0]
 800239e:	b103      	cbz	r3, 80023a2 <_sbrk_r+0x1a>
 80023a0:	6023      	str	r3, [r4, #0]
 80023a2:	bd38      	pop	{r3, r4, r5, pc}
 80023a4:	20000554 	.word	0x20000554

080023a8 <strcpy>:
 80023a8:	4603      	mov	r3, r0
 80023aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80023ae:	f803 2b01 	strb.w	r2, [r3], #1
 80023b2:	2a00      	cmp	r2, #0
 80023b4:	d1f9      	bne.n	80023aa <strcpy+0x2>
 80023b6:	4770      	bx	lr

080023b8 <strncmp>:
 80023b8:	b510      	push	{r4, lr}
 80023ba:	b16a      	cbz	r2, 80023d8 <strncmp+0x20>
 80023bc:	3901      	subs	r1, #1
 80023be:	1884      	adds	r4, r0, r2
 80023c0:	f810 3b01 	ldrb.w	r3, [r0], #1
 80023c4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d103      	bne.n	80023d4 <strncmp+0x1c>
 80023cc:	42a0      	cmp	r0, r4
 80023ce:	d001      	beq.n	80023d4 <strncmp+0x1c>
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d1f5      	bne.n	80023c0 <strncmp+0x8>
 80023d4:	1a98      	subs	r0, r3, r2
 80023d6:	bd10      	pop	{r4, pc}
 80023d8:	4610      	mov	r0, r2
 80023da:	e7fc      	b.n	80023d6 <strncmp+0x1e>

080023dc <__malloc_lock>:
 80023dc:	4801      	ldr	r0, [pc, #4]	; (80023e4 <__malloc_lock+0x8>)
 80023de:	f000 b809 	b.w	80023f4 <__retarget_lock_acquire_recursive>
 80023e2:	bf00      	nop
 80023e4:	2000055c 	.word	0x2000055c

080023e8 <__malloc_unlock>:
 80023e8:	4801      	ldr	r0, [pc, #4]	; (80023f0 <__malloc_unlock+0x8>)
 80023ea:	f000 b804 	b.w	80023f6 <__retarget_lock_release_recursive>
 80023ee:	bf00      	nop
 80023f0:	2000055c 	.word	0x2000055c

080023f4 <__retarget_lock_acquire_recursive>:
 80023f4:	4770      	bx	lr

080023f6 <__retarget_lock_release_recursive>:
 80023f6:	4770      	bx	lr

080023f8 <_sbrk>:
 80023f8:	4b04      	ldr	r3, [pc, #16]	; (800240c <_sbrk+0x14>)
 80023fa:	4602      	mov	r2, r0
 80023fc:	6819      	ldr	r1, [r3, #0]
 80023fe:	b909      	cbnz	r1, 8002404 <_sbrk+0xc>
 8002400:	4903      	ldr	r1, [pc, #12]	; (8002410 <_sbrk+0x18>)
 8002402:	6019      	str	r1, [r3, #0]
 8002404:	6818      	ldr	r0, [r3, #0]
 8002406:	4402      	add	r2, r0
 8002408:	601a      	str	r2, [r3, #0]
 800240a:	4770      	bx	lr
 800240c:	20000158 	.word	0x20000158
 8002410:	20000568 	.word	0x20000568

08002414 <_init>:
 8002414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002416:	bf00      	nop
 8002418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800241a:	bc08      	pop	{r3}
 800241c:	469e      	mov	lr, r3
 800241e:	4770      	bx	lr

08002420 <_fini>:
 8002420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002422:	bf00      	nop
 8002424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002426:	bc08      	pop	{r3}
 8002428:	469e      	mov	lr, r3
 800242a:	4770      	bx	lr
