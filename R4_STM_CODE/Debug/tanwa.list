
tanwa.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005690  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  080057a0  080057a0  000157a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005850  08005850  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08005850  08005850  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005850  08005850  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005850  08005850  00015850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005854  08005854  00015854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08005858  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000131c  200001e0  08005a38  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200014fc  08005a38  000214fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020372  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000046f4  00000000  00000000  0004057b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00011219  00000000  00000000  00044c6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001170  00000000  00000000  00055e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001470  00000000  00000000  00056ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005b72  00000000  00000000  00058468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c2b4  00000000  00000000  0005dfda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f626  00000000  00000000  0007a28e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001098b4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003178  00000000  00000000  00109908  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08005788 	.word	0x08005788

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08005788 	.word	0x08005788

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2iz>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d215      	bcs.n	8000922 <__aeabi_d2iz+0x36>
 80008f6:	d511      	bpl.n	800091c <__aeabi_d2iz+0x30>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d912      	bls.n	8000928 <__aeabi_d2iz+0x3c>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000912:	fa23 f002 	lsr.w	r0, r3, r2
 8000916:	bf18      	it	ne
 8000918:	4240      	negne	r0, r0
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d105      	bne.n	8000934 <__aeabi_d2iz+0x48>
 8000928:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800092c:	bf08      	it	eq
 800092e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <igniter_init>:
#include "Igniter.h"

//make struct 'Igniter', fill it, return pointer to it    (names of args start with '_' sign)
Igniter* igniter_init(GPIO_TypeDef* _GPIO_PORT_IGNITER, uint16_t _PIN_IGNITER, GPIO_TypeDef* _GPIO_PORT_TEST_CON, uint16_t _PIN_TEST_CON)
{
 800093c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000940:	4680      	mov	r8, r0
 8000942:	460f      	mov	r7, r1
 8000944:	4616      	mov	r6, r2
 8000946:	461d      	mov	r5, r3
	Igniter* I = malloc(sizeof(Igniter));	 //allocate space for struct
 8000948:	2010      	movs	r0, #16
 800094a:	f004 facd 	bl	8004ee8 <malloc>
	//fill whole struct
	I->GPIO_PORT_IGNITER = _GPIO_PORT_IGNITER;
 800094e:	f8c0 8000 	str.w	r8, [r0]
	I->PIN_IGNITER = _PIN_IGNITER;
 8000952:	8087      	strh	r7, [r0, #4]
	I->GPIO_PORT_TEST_CON = _GPIO_PORT_TEST_CON;
 8000954:	6086      	str	r6, [r0, #8]
	I->PIN_TEST_CON = _PIN_TEST_CON;
 8000956:	8185      	strh	r5, [r0, #12]
	return I;
}
 8000958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800095c <igniter_is_connected>:

bool igniter_is_connected(Igniter* Igniter){
 800095c:	b508      	push	{r3, lr}
	if(HAL_GPIO_ReadPin(Igniter->GPIO_PORT_TEST_CON, Igniter->PIN_TEST_CON) == 1)
 800095e:	8981      	ldrh	r1, [r0, #12]
 8000960:	6880      	ldr	r0, [r0, #8]
 8000962:	f000 fdff 	bl	8001564 <HAL_GPIO_ReadPin>
		return 1;
	else
		return 0;
}
 8000966:	2801      	cmp	r0, #1
 8000968:	bf14      	ite	ne
 800096a:	2000      	movne	r0, #0
 800096c:	2001      	moveq	r0, #1
 800096e:	bd08      	pop	{r3, pc}

08000970 <motor_init>:
#include <L298.h>

//make struct 'Motor', fill it, return pointer to it    (names for args start with '_' sign)
Motor* motor_init(GPIO_TypeDef* _GPIO_PORT_IN1, uint16_t _PIN_IN1, GPIO_TypeDef* _GPIO_PORT_IN2, uint16_t _PIN_IN2,
		TIM_HandleTypeDef* _TIM_NR_EN, uint16_t _TIM_CHANNEL_EN, GPIO_TypeDef* _GPIO_PORT_LS_OPEN, uint16_t _PIN_LS_OPEN,
		GPIO_TypeDef* _GPIO_PORT_LS_CLOSE, uint16_t _PIN_LS_CLOSE){
 8000970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000974:	4680      	mov	r8, r0
 8000976:	460f      	mov	r7, r1
 8000978:	4616      	mov	r6, r2
 800097a:	461d      	mov	r5, r3
	 //allocate space for struct
	Motor* M = malloc(sizeof(Motor));
 800097c:	2028      	movs	r0, #40	; 0x28
 800097e:	f004 fab3 	bl	8004ee8 <malloc>
	 //fill struct
	M->GPIO_PORT_IN1 = _GPIO_PORT_IN1;
 8000982:	f8c0 8000 	str.w	r8, [r0]
	M->PIN_IN1 = _PIN_IN1;
 8000986:	8087      	strh	r7, [r0, #4]
	M->GPIO_PORT_IN2 = _GPIO_PORT_IN2;
 8000988:	6086      	str	r6, [r0, #8]
	M->PIN_IN2 = _PIN_IN2;
 800098a:	8185      	strh	r5, [r0, #12]
	M->TIM_NR_EN = _TIM_NR_EN;
 800098c:	9b06      	ldr	r3, [sp, #24]
 800098e:	6103      	str	r3, [r0, #16]
	M->TIM_CHANNEL_EN = _TIM_CHANNEL_EN;
 8000990:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8000994:	8283      	strh	r3, [r0, #20]
	M->GPIO_PORT_LS_OPEN = _GPIO_PORT_LS_OPEN;
 8000996:	9b08      	ldr	r3, [sp, #32]
 8000998:	6183      	str	r3, [r0, #24]
	M->PIN_LS_OPEN = _PIN_LS_OPEN;
 800099a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800099e:	8383      	strh	r3, [r0, #28]
	M->GPIO_PORT_LS_CLOSE = _GPIO_PORT_LS_CLOSE;
 80009a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80009a2:	6203      	str	r3, [r0, #32]
	M->PIN_LS_CLOSE = _PIN_LS_CLOSE;
 80009a4:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 80009a8:	8483      	strh	r3, [r0, #36]	; 0x24
	return M;
};
 80009aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080009b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80009b4:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b6:	2400      	movs	r4, #0
 80009b8:	9404      	str	r4, [sp, #16]
 80009ba:	9405      	str	r4, [sp, #20]
 80009bc:	9406      	str	r4, [sp, #24]
 80009be:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009c0:	4b3c      	ldr	r3, [pc, #240]	; (8000ab4 <MX_GPIO_Init+0x104>)
 80009c2:	699a      	ldr	r2, [r3, #24]
 80009c4:	f042 0210 	orr.w	r2, r2, #16
 80009c8:	619a      	str	r2, [r3, #24]
 80009ca:	699a      	ldr	r2, [r3, #24]
 80009cc:	f002 0210 	and.w	r2, r2, #16
 80009d0:	9200      	str	r2, [sp, #0]
 80009d2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009d4:	699a      	ldr	r2, [r3, #24]
 80009d6:	f042 0220 	orr.w	r2, r2, #32
 80009da:	619a      	str	r2, [r3, #24]
 80009dc:	699a      	ldr	r2, [r3, #24]
 80009de:	f002 0220 	and.w	r2, r2, #32
 80009e2:	9201      	str	r2, [sp, #4]
 80009e4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e6:	699a      	ldr	r2, [r3, #24]
 80009e8:	f042 0204 	orr.w	r2, r2, #4
 80009ec:	619a      	str	r2, [r3, #24]
 80009ee:	699a      	ldr	r2, [r3, #24]
 80009f0:	f002 0204 	and.w	r2, r2, #4
 80009f4:	9202      	str	r2, [sp, #8]
 80009f6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f8:	699a      	ldr	r2, [r3, #24]
 80009fa:	f042 0208 	orr.w	r2, r2, #8
 80009fe:	619a      	str	r2, [r3, #24]
 8000a00:	699b      	ldr	r3, [r3, #24]
 8000a02:	f003 0308 	and.w	r3, r3, #8
 8000a06:	9303      	str	r3, [sp, #12]
 8000a08:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUILD_IN_LED_GPIO_Port, BUILD_IN_LED_Pin, GPIO_PIN_RESET);
 8000a0a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8000abc <MX_GPIO_Init+0x10c>
 8000a0e:	4622      	mov	r2, r4
 8000a10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a14:	4648      	mov	r0, r9
 8000a16:	f000 fdab 	bl	8001570 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PQD_D1_Pin|PQD_D2_Pin|IGN_FIRE_Pin, GPIO_PIN_RESET);
 8000a1a:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8000ac0 <MX_GPIO_Init+0x110>
 8000a1e:	4622      	mov	r2, r4
 8000a20:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
 8000a24:	4640      	mov	r0, r8
 8000a26:	f000 fda3 	bl	8001570 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HX1_SCL_Pin|QD_D2_Pin|QD_D1_Pin|DEPR_CLOSE_Pin
 8000a2a:	4d23      	ldr	r5, [pc, #140]	; (8000ab8 <MX_GPIO_Init+0x108>)
 8000a2c:	4622      	mov	r2, r4
 8000a2e:	f24e 21d0 	movw	r1, #58064	; 0xe2d0
 8000a32:	4628      	mov	r0, r5
 8000a34:	f000 fd9c 	bl	8001570 <HAL_GPIO_WritePin>
                          |DEPR_OPEN_Pin|FILL_CLOSE_Pin|FILL_OPEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUILD_IN_LED_Pin;
 8000a38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a3c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3e:	2701      	movs	r7, #1
 8000a40:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a44:	2602      	movs	r6, #2
 8000a46:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(BUILD_IN_LED_GPIO_Port, &GPIO_InitStruct);
 8000a48:	a904      	add	r1, sp, #16
 8000a4a:	4648      	mov	r0, r9
 8000a4c:	f000 fc7a 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IGN_TEST_CON_Pin;
 8000a50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a54:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a56:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(IGN_TEST_CON_GPIO_Port, &GPIO_InitStruct);
 8000a5a:	a904      	add	r1, sp, #16
 8000a5c:	4648      	mov	r0, r9
 8000a5e:	f000 fc71 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = HX2_SDA_Pin|HX2_SCL_Pin|DEPR_C_LIMIT_SW_Pin|DEPR_O_LIMIT_SW_Pin
 8000a62:	f248 3330 	movw	r3, #33584	; 0x8330
 8000a66:	9304      	str	r3, [sp, #16]
                          |FILL_C_LIMIT_SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a68:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6c:	a904      	add	r1, sp, #16
 8000a6e:	4640      	mov	r0, r8
 8000a70:	f000 fc68 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = PQD_D1_Pin|PQD_D2_Pin|IGN_FIRE_Pin;
 8000a74:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000a78:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7a:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7e:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a80:	a904      	add	r1, sp, #16
 8000a82:	4640      	mov	r0, r8
 8000a84:	f000 fc5e 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = HX1_SDA_Pin|FILL_O_LIMIT_SW_Pin;
 8000a88:	f241 0308 	movw	r3, #4104	; 0x1008
 8000a8c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a8e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a92:	a904      	add	r1, sp, #16
 8000a94:	4628      	mov	r0, r5
 8000a96:	f000 fc55 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = HX1_SCL_Pin|QD_D2_Pin|QD_D1_Pin|DEPR_CLOSE_Pin
 8000a9a:	f24e 23d0 	movw	r3, #58064	; 0xe2d0
 8000a9e:	9304      	str	r3, [sp, #16]
                          |DEPR_OPEN_Pin|FILL_CLOSE_Pin|FILL_OPEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa0:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa4:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa6:	a904      	add	r1, sp, #16
 8000aa8:	4628      	mov	r0, r5
 8000aaa:	f000 fc4b 	bl	8001344 <HAL_GPIO_Init>

}
 8000aae:	b009      	add	sp, #36	; 0x24
 8000ab0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	40010c00 	.word	0x40010c00
 8000abc:	40011000 	.word	0x40011000
 8000ac0:	40010800 	.word	0x40010800

08000ac4 <HX711_Read_Value>:
#include "hx711.h"

int32_t HX711_Read_Value(GPIO_TypeDef *Dt_gpio, uint16_t Dt_pin, GPIO_TypeDef *Sck_gpio, uint16_t Sck_pin){
 8000ac4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ac8:	4680      	mov	r8, r0
 8000aca:	4689      	mov	r9, r1
 8000acc:	4616      	mov	r6, r2
 8000ace:	461f      	mov	r7, r3
    int32_t buffer=0;

    HAL_GPIO_WritePin(Sck_gpio, Sck_pin, GPIO_PIN_RESET);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4630      	mov	r0, r6
 8000ad6:	f000 fd4b 	bl	8001570 <HAL_GPIO_WritePin>

    for(uint8_t i = 0; i < 1000; ++i){
    	if(HAL_GPIO_ReadPin(Dt_gpio, Dt_pin) == 1 && i > 990)
 8000ada:	4649      	mov	r1, r9
 8000adc:	4640      	mov	r0, r8
 8000ade:	f000 fd41 	bl	8001564 <HAL_GPIO_ReadPin>
    		return -200000000;
    	else if(HAL_GPIO_ReadPin(Dt_gpio, Dt_pin) == 1)
 8000ae2:	4649      	mov	r1, r9
 8000ae4:	4640      	mov	r0, r8
 8000ae6:	f000 fd3d 	bl	8001564 <HAL_GPIO_ReadPin>
 8000aea:	2801      	cmp	r0, #1
 8000aec:	d0f5      	beq.n	8000ada <HX711_Read_Value+0x16>
 8000aee:	2419      	movs	r4, #25
    int32_t buffer=0;
 8000af0:	2500      	movs	r5, #0
    	else
    		break;
    }

    for (uint8_t i = 0; i < 25; ++i){
    	HAL_GPIO_WritePin(Sck_gpio, Sck_pin, GPIO_PIN_SET);
 8000af2:	f04f 0b01 	mov.w	fp, #1
        buffer = buffer << 1 ;
        buffer+=HAL_GPIO_ReadPin(Dt_gpio, Dt_pin);
        HAL_GPIO_WritePin(Sck_gpio, Sck_pin, GPIO_PIN_RESET);
 8000af6:	46aa      	mov	sl, r5
    	HAL_GPIO_WritePin(Sck_gpio, Sck_pin, GPIO_PIN_SET);
 8000af8:	465a      	mov	r2, fp
 8000afa:	4639      	mov	r1, r7
 8000afc:	4630      	mov	r0, r6
 8000afe:	f000 fd37 	bl	8001570 <HAL_GPIO_WritePin>
        buffer = buffer << 1 ;
 8000b02:	006d      	lsls	r5, r5, #1
        buffer+=HAL_GPIO_ReadPin(Dt_gpio, Dt_pin);
 8000b04:	4649      	mov	r1, r9
 8000b06:	4640      	mov	r0, r8
 8000b08:	f000 fd2c 	bl	8001564 <HAL_GPIO_ReadPin>
 8000b0c:	4405      	add	r5, r0
        HAL_GPIO_WritePin(Sck_gpio, Sck_pin, GPIO_PIN_RESET);
 8000b0e:	4652      	mov	r2, sl
 8000b10:	4639      	mov	r1, r7
 8000b12:	4630      	mov	r0, r6
 8000b14:	f000 fd2c 	bl	8001570 <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < 25; ++i){
 8000b18:	3c01      	subs	r4, #1
 8000b1a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8000b1e:	d1eb      	bne.n	8000af8 <HX711_Read_Value+0x34>
//    	HAL_GPIO_WritePin(Sck_gpio, Sck_pin, GPIO_PIN_SET);
//    	HAL_GPIO_WritePin(Sck_gpio, Sck_pin, GPIO_PIN_RESET);
//    }

    for(uint8_t i = 0; i < 1000; ++i){
    	if(HAL_GPIO_ReadPin(Dt_gpio, Dt_pin) == 0)
 8000b20:	4649      	mov	r1, r9
 8000b22:	4640      	mov	r0, r8
 8000b24:	f000 fd1e 	bl	8001564 <HAL_GPIO_ReadPin>
 8000b28:	2800      	cmp	r0, #0
 8000b2a:	d0f9      	beq.n	8000b20 <HX711_Read_Value+0x5c>
       		continue;
       	else
       		break;
   }

    return (buffer<<7)/128;
 8000b2c:	01e8      	lsls	r0, r5, #7
 8000b2e:	bf48      	it	mi
 8000b30:	307f      	addmi	r0, #127	; 0x7f
}
 8000b32:	11c0      	asrs	r0, r0, #7
 8000b34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000b38 <HX711_Average_Value>:

int32_t HX711_Average_Value(GPIO_TypeDef *Dt_gpio, uint16_t Dt_pin, GPIO_TypeDef *Sck_gpio, uint16_t Sck_pin, uint8_t times){
 8000b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b3c:	b083      	sub	sp, #12
 8000b3e:	9001      	str	r0, [sp, #4]
 8000b40:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
 8000b44:	2500      	movs	r5, #0
	int32_t sum = 0;
	uint8_t succesfulReads;
    for (uint8_t i = 0; i < times; ++i){
 8000b46:	f1b9 0f00 	cmp.w	r9, #0
 8000b4a:	d017      	beq.n	8000b7c <HX711_Average_Value+0x44>
 8000b4c:	460e      	mov	r6, r1
 8000b4e:	4617      	mov	r7, r2
 8000b50:	4698      	mov	r8, r3
 8000b52:	462c      	mov	r4, r5
	int32_t sum = 0;
 8000b54:	46aa      	mov	sl, r5
    	int32_t read = HX711_Read_Value(Dt_gpio, Dt_pin, Sck_gpio, Sck_pin);
    	if(read > -200000000){
 8000b56:	f8df b034 	ldr.w	fp, [pc, #52]	; 8000b8c <HX711_Average_Value+0x54>
 8000b5a:	e003      	b.n	8000b64 <HX711_Average_Value+0x2c>
    for (uint8_t i = 0; i < times; ++i){
 8000b5c:	3401      	adds	r4, #1
 8000b5e:	b2e4      	uxtb	r4, r4
 8000b60:	45a1      	cmp	r9, r4
 8000b62:	d00d      	beq.n	8000b80 <HX711_Average_Value+0x48>
    	int32_t read = HX711_Read_Value(Dt_gpio, Dt_pin, Sck_gpio, Sck_pin);
 8000b64:	4643      	mov	r3, r8
 8000b66:	463a      	mov	r2, r7
 8000b68:	4631      	mov	r1, r6
 8000b6a:	9801      	ldr	r0, [sp, #4]
 8000b6c:	f7ff ffaa 	bl	8000ac4 <HX711_Read_Value>
    	if(read > -200000000){
 8000b70:	4558      	cmp	r0, fp
 8000b72:	dbf3      	blt.n	8000b5c <HX711_Average_Value+0x24>
    		sum += read;
 8000b74:	4482      	add	sl, r0
    		++succesfulReads;
 8000b76:	3501      	adds	r5, #1
 8000b78:	b2ed      	uxtb	r5, r5
 8000b7a:	e7ef      	b.n	8000b5c <HX711_Average_Value+0x24>
	int32_t sum = 0;
 8000b7c:	f04f 0a00 	mov.w	sl, #0
    	}
    }
    return sum / succesfulReads;
}
 8000b80:	fb9a f0f5 	sdiv	r0, sl, r5
 8000b84:	b003      	add	sp, #12
 8000b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b8a:	bf00      	nop
 8000b8c:	f4143e01 	.word	0xf4143e01

08000b90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b90:	b500      	push	{lr}
 8000b92:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b94:	2300      	movs	r3, #0
 8000b96:	930d      	str	r3, [sp, #52]	; 0x34
 8000b98:	930f      	str	r3, [sp, #60]	; 0x3c
 8000b9a:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b9c:	9305      	str	r3, [sp, #20]
 8000b9e:	9306      	str	r3, [sp, #24]
 8000ba0:	9307      	str	r3, [sp, #28]
 8000ba2:	9308      	str	r3, [sp, #32]
 8000ba4:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ba6:	9301      	str	r3, [sp, #4]
 8000ba8:	9302      	str	r3, [sp, #8]
 8000baa:	9303      	str	r3, [sp, #12]
 8000bac:	9304      	str	r3, [sp, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bae:	2101      	movs	r1, #1
 8000bb0:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bb2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000bb6:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000bb8:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bba:	910e      	str	r1, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bc0:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000bc2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000bc6:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc8:	a80a      	add	r0, sp, #40	; 0x28
 8000bca:	f001 fc4b 	bl	8002464 <HAL_RCC_OscConfig>
 8000bce:	b9d0      	cbnz	r0, 8000c06 <SystemClock_Config+0x76>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bd0:	230f      	movs	r3, #15
 8000bd2:	9305      	str	r3, [sp, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000be0:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000be2:	9309      	str	r3, [sp, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000be4:	2101      	movs	r1, #1
 8000be6:	a805      	add	r0, sp, #20
 8000be8:	f001 fe88 	bl	80028fc <HAL_RCC_ClockConfig>
 8000bec:	b968      	cbnz	r0, 8000c0a <SystemClock_Config+0x7a>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000bee:	2310      	movs	r3, #16
 8000bf0:	9301      	str	r3, [sp, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000bf2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bf6:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bf8:	a801      	add	r0, sp, #4
 8000bfa:	f001 ff57 	bl	8002aac <HAL_RCCEx_PeriphCLKConfig>
 8000bfe:	b930      	cbnz	r0, 8000c0e <SystemClock_Config+0x7e>
  {
    Error_Handler();
  }
}
 8000c00:	b015      	add	sp, #84	; 0x54
 8000c02:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c06:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <SystemClock_Config+0x78>
 8000c0a:	b672      	cpsid	i
 8000c0c:	e7fe      	b.n	8000c0c <SystemClock_Config+0x7c>
 8000c0e:	b672      	cpsid	i
 8000c10:	e7fe      	b.n	8000c10 <SystemClock_Config+0x80>
 8000c12:	0000      	movs	r0, r0
 8000c14:	0000      	movs	r0, r0
	...

08000c18 <main>:
{
 8000c18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c1c:	b087      	sub	sp, #28
  HAL_Init();
 8000c1e:	f000 faf1 	bl	8001204 <HAL_Init>
  SystemClock_Config();
 8000c22:	f7ff ffb5 	bl	8000b90 <SystemClock_Config>
  MX_GPIO_Init();
 8000c26:	f7ff fec3 	bl	80009b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c2a:	f000 f9ff 	bl	800102c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000c2e:	f000 f963 	bl	8000ef8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000c32:	f000 f9bb 	bl	8000fac <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8000c36:	f000 fa13 	bl	8001060 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8000c3a:	f003 ff37 	bl	8004aac <MX_USB_DEVICE_Init>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000c3e:	4c4c      	ldr	r4, [pc, #304]	; (8000d70 <main+0x158>)
 8000c40:	2104      	movs	r1, #4
 8000c42:	4620      	mov	r0, r4
 8000c44:	f002 f958 	bl	8002ef8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000c48:	2108      	movs	r1, #8
 8000c4a:	4620      	mov	r0, r4
 8000c4c:	f002 f954 	bl	8002ef8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000c50:	210c      	movs	r1, #12
 8000c52:	4620      	mov	r0, r4
 8000c54:	f002 f950 	bl	8002ef8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000c58:	2108      	movs	r1, #8
 8000c5a:	4846      	ldr	r0, [pc, #280]	; (8000d74 <main+0x15c>)
 8000c5c:	f002 f94c 	bl	8002ef8 <HAL_TIM_PWM_Start>
  HAL_Delay(1000);
 8000c60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c64:	f000 faf2 	bl	800124c <HAL_Delay>
  memset(buff ,0,sizeof(buff));
 8000c68:	2600      	movs	r6, #0
 8000c6a:	6036      	str	r6, [r6, #0]
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 8000c6c:	4b42      	ldr	r3, [pc, #264]	; (8000d78 <main+0x160>)
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	68d3      	ldr	r3, [r2, #12]
 8000c72:	f043 0320 	orr.w	r3, r3, #32
 8000c76:	60d3      	str	r3, [r2, #12]
  Igniter* Ignit = igniter_init(IGN_FIRE_GPIO_Port, IGN_FIRE_Pin, IGN_TEST_CON_GPIO_Port, IGN_TEST_CON_Pin);
 8000c78:	4f40      	ldr	r7, [pc, #256]	; (8000d7c <main+0x164>)
 8000c7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c7e:	4a40      	ldr	r2, [pc, #256]	; (8000d80 <main+0x168>)
 8000c80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c84:	4638      	mov	r0, r7
 8000c86:	f7ff fe59 	bl	800093c <igniter_init>
 8000c8a:	4605      	mov	r5, r0
  Motor* Fill = motor_init(FILL_OPEN_GPIO_Port, FILL_OPEN_Pin, FILL_CLOSE_GPIO_Port , FILL_CLOSE_Pin, &htim3 , TIM_CHANNEL_3, FILL_O_LIMIT_SW_GPIO_Port, FILL_O_LIMIT_SW_Pin, FILL_C_LIMIT_SW_GPIO_Port, FILL_C_LIMIT_SW_Pin);
 8000c8c:	483d      	ldr	r0, [pc, #244]	; (8000d84 <main+0x16c>)
 8000c8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c92:	9305      	str	r3, [sp, #20]
 8000c94:	9704      	str	r7, [sp, #16]
 8000c96:	2308      	movs	r3, #8
 8000c98:	9303      	str	r3, [sp, #12]
 8000c9a:	9002      	str	r0, [sp, #8]
 8000c9c:	9301      	str	r3, [sp, #4]
 8000c9e:	9400      	str	r4, [sp, #0]
 8000ca0:	2380      	movs	r3, #128	; 0x80
 8000ca2:	4602      	mov	r2, r0
 8000ca4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ca8:	f7ff fe62 	bl	8000970 <motor_init>
  state = 0; //touch only for tests
 8000cac:	4b36      	ldr	r3, [pc, #216]	; (8000d88 <main+0x170>)
 8000cae:	701e      	strb	r6, [r3, #0]
	  switch(state){
 8000cb0:	461c      	mov	r4, r3
			  weight=(weight)/215.0;  //convert to grams;
 8000cb2:	a72d      	add	r7, pc, #180	; (adr r7, 8000d68 <main+0x150>)
 8000cb4:	e9d7 6700 	ldrd	r6, r7, [r7]
				  HAL_GPIO_TogglePin(BUILD_IN_LED_GPIO_Port, BUILD_IN_LED_Pin);
 8000cb8:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8000d80 <main+0x168>
 8000cbc:	e026      	b.n	8000d0c <main+0xf4>
			  weight = HX711_Average_Value(HX1_SDA_GPIO_Port, HX1_SDA_Pin ,HX1_SCL_GPIO_Port, HX1_SCL_Pin, 10);
 8000cbe:	4831      	ldr	r0, [pc, #196]	; (8000d84 <main+0x16c>)
 8000cc0:	230a      	movs	r3, #10
 8000cc2:	9300      	str	r3, [sp, #0]
 8000cc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cc8:	4602      	mov	r2, r0
 8000cca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cce:	f7ff ff33 	bl	8000b38 <HX711_Average_Value>
			  weight=(weight)/215.0;  //convert to grams;
 8000cd2:	f7ff fb8f 	bl	80003f4 <__aeabi_i2d>
 8000cd6:	4632      	mov	r2, r6
 8000cd8:	463b      	mov	r3, r7
 8000cda:	f7ff fd1f 	bl	800071c <__aeabi_ddiv>
 8000cde:	f7ff fe05 	bl	80008ec <__aeabi_d2iz>
 8000ce2:	4602      	mov	r2, r0
			  len = sprintf((char*)data, "%ld g \n", weight);
 8000ce4:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8000d98 <main+0x180>
 8000ce8:	4928      	ldr	r1, [pc, #160]	; (8000d8c <main+0x174>)
 8000cea:	4648      	mov	r0, r9
 8000cec:	f004 f9ba 	bl	8005064 <siprintf>
 8000cf0:	b2c1      	uxtb	r1, r0
 8000cf2:	4b27      	ldr	r3, [pc, #156]	; (8000d90 <main+0x178>)
 8000cf4:	7019      	strb	r1, [r3, #0]
			  CDC_Transmit_FS(data, len);
 8000cf6:	4648      	mov	r0, r9
 8000cf8:	f003 ff28 	bl	8004b4c <CDC_Transmit_FS>
			  if(igniter_is_connected(Ignit)){
 8000cfc:	4628      	mov	r0, r5
 8000cfe:	f7ff fe2d 	bl	800095c <igniter_is_connected>
 8000d02:	b9b8      	cbnz	r0, 8000d34 <main+0x11c>
			  HAL_Delay(1000);
 8000d04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d08:	f000 faa0 	bl	800124c <HAL_Delay>
	  switch(state){
 8000d0c:	7823      	ldrb	r3, [r4, #0]
 8000d0e:	2b06      	cmp	r3, #6
 8000d10:	d8fd      	bhi.n	8000d0e <main+0xf6>
 8000d12:	a201      	add	r2, pc, #4	; (adr r2, 8000d18 <main+0x100>)
 8000d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d18:	08000cbf 	.word	0x08000cbf
 8000d1c:	08000d0f 	.word	0x08000d0f
 8000d20:	08000d41 	.word	0x08000d41
 8000d24:	08000d0f 	.word	0x08000d0f
 8000d28:	08000d49 	.word	0x08000d49
 8000d2c:	08000d4f 	.word	0x08000d4f
 8000d30:	08000d5f 	.word	0x08000d5f
				  HAL_GPIO_TogglePin(BUILD_IN_LED_GPIO_Port, BUILD_IN_LED_Pin);
 8000d34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d38:	4640      	mov	r0, r8
 8000d3a:	f000 fc1f 	bl	800157c <HAL_GPIO_TogglePin>
 8000d3e:	e7e1      	b.n	8000d04 <main+0xec>
			  if(igniter_is_connected(Ignit) && signal == 'h'){
 8000d40:	4628      	mov	r0, r5
 8000d42:	f7ff fe0b 	bl	800095c <igniter_is_connected>
 8000d46:	e7e1      	b.n	8000d0c <main+0xf4>
			  state = 2;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	7023      	strb	r3, [r4, #0]
			  break;
 8000d4c:	e7de      	b.n	8000d0c <main+0xf4>
			  if( ! igniter_is_connected(Ignit)){
 8000d4e:	4628      	mov	r0, r5
 8000d50:	f7ff fe04 	bl	800095c <igniter_is_connected>
 8000d54:	2800      	cmp	r0, #0
 8000d56:	d1d9      	bne.n	8000d0c <main+0xf4>
				  state = 6;
 8000d58:	2306      	movs	r3, #6
 8000d5a:	7023      	strb	r3, [r4, #0]
 8000d5c:	e7d6      	b.n	8000d0c <main+0xf4>
			  HAL_Delay(1000000);
 8000d5e:	480d      	ldr	r0, [pc, #52]	; (8000d94 <main+0x17c>)
 8000d60:	f000 fa74 	bl	800124c <HAL_Delay>
			  break;
 8000d64:	e7d2      	b.n	8000d0c <main+0xf4>
 8000d66:	bf00      	nop
 8000d68:	00000000 	.word	0x00000000
 8000d6c:	406ae000 	.word	0x406ae000
 8000d70:	200004a0 	.word	0x200004a0
 8000d74:	20000458 	.word	0x20000458
 8000d78:	20000528 	.word	0x20000528
 8000d7c:	40010800 	.word	0x40010800
 8000d80:	40011000 	.word	0x40011000
 8000d84:	40010c00 	.word	0x40010c00
 8000d88:	200001fc 	.word	0x200001fc
 8000d8c:	080057a0 	.word	0x080057a0
 8000d90:	20000454 	.word	0x20000454
 8000d94:	000f4240 	.word	0x000f4240
 8000d98:	2000042c 	.word	0x2000042c

08000d9c <Error_Handler>:
 8000d9c:	b672      	cpsid	i
  while (1)
 8000d9e:	e7fe      	b.n	8000d9e <Error_Handler+0x2>

08000da0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da0:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000da2:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <HAL_MspInit+0x3c>)
 8000da4:	699a      	ldr	r2, [r3, #24]
 8000da6:	f042 0201 	orr.w	r2, r2, #1
 8000daa:	619a      	str	r2, [r3, #24]
 8000dac:	699a      	ldr	r2, [r3, #24]
 8000dae:	f002 0201 	and.w	r2, r2, #1
 8000db2:	9200      	str	r2, [sp, #0]
 8000db4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db6:	69da      	ldr	r2, [r3, #28]
 8000db8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000dbc:	61da      	str	r2, [r3, #28]
 8000dbe:	69db      	ldr	r3, [r3, #28]
 8000dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc4:	9301      	str	r3, [sp, #4]
 8000dc6:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000dc8:	4a05      	ldr	r2, [pc, #20]	; (8000de0 <HAL_MspInit+0x40>)
 8000dca:	6853      	ldr	r3, [r2, #4]
 8000dcc:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000dd0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000dd4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd6:	b002      	add	sp, #8
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	40010000 	.word	0x40010000

08000de4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000de4:	e7fe      	b.n	8000de4 <NMI_Handler>

08000de6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de6:	e7fe      	b.n	8000de6 <HardFault_Handler>

08000de8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <MemManage_Handler>

08000dea <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dea:	e7fe      	b.n	8000dea <BusFault_Handler>

08000dec <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dec:	e7fe      	b.n	8000dec <UsageFault_Handler>

08000dee <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dee:	4770      	bx	lr

08000df0 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df0:	4770      	bx	lr

08000df2 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000df2:	4770      	bx	lr

08000df4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000df6:	f000 fa17 	bl	8001228 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dfa:	bd08      	pop	{r3, pc}

08000dfc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000dfc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000dfe:	4802      	ldr	r0, [pc, #8]	; (8000e08 <USB_LP_CAN1_RX0_IRQHandler+0xc>)
 8000e00:	f000 fc73 	bl	80016ea <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000e04:	bd08      	pop	{r3, pc}
 8000e06:	bf00      	nop
 8000e08:	20001200 	.word	0x20001200

08000e0c <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e0c:	4770      	bx	lr
	...

08000e10 <HAL_TIM_PWM_MspInit>:
  HAL_TIM_MspPostInit(&htim4);

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000e10:	b082      	sub	sp, #8

  if(tim_pwmHandle->Instance==TIM3)
 8000e12:	6803      	ldr	r3, [r0, #0]
 8000e14:	4a0e      	ldr	r2, [pc, #56]	; (8000e50 <HAL_TIM_PWM_MspInit+0x40>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d004      	beq.n	8000e24 <HAL_TIM_PWM_MspInit+0x14>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(tim_pwmHandle->Instance==TIM4)
 8000e1a:	4a0e      	ldr	r2, [pc, #56]	; (8000e54 <HAL_TIM_PWM_MspInit+0x44>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d00c      	beq.n	8000e3a <HAL_TIM_PWM_MspInit+0x2a>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000e20:	b002      	add	sp, #8
 8000e22:	4770      	bx	lr
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e24:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <HAL_TIM_PWM_MspInit+0x48>)
 8000e26:	69da      	ldr	r2, [r3, #28]
 8000e28:	f042 0202 	orr.w	r2, r2, #2
 8000e2c:	61da      	str	r2, [r3, #28]
 8000e2e:	69db      	ldr	r3, [r3, #28]
 8000e30:	f003 0302 	and.w	r3, r3, #2
 8000e34:	9300      	str	r3, [sp, #0]
 8000e36:	9b00      	ldr	r3, [sp, #0]
 8000e38:	e7f2      	b.n	8000e20 <HAL_TIM_PWM_MspInit+0x10>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e3a:	4b07      	ldr	r3, [pc, #28]	; (8000e58 <HAL_TIM_PWM_MspInit+0x48>)
 8000e3c:	69da      	ldr	r2, [r3, #28]
 8000e3e:	f042 0204 	orr.w	r2, r2, #4
 8000e42:	61da      	str	r2, [r3, #28]
 8000e44:	69db      	ldr	r3, [r3, #28]
 8000e46:	f003 0304 	and.w	r3, r3, #4
 8000e4a:	9301      	str	r3, [sp, #4]
 8000e4c:	9b01      	ldr	r3, [sp, #4]
}
 8000e4e:	e7e7      	b.n	8000e20 <HAL_TIM_PWM_MspInit+0x10>
 8000e50:	40000400 	.word	0x40000400
 8000e54:	40000800 	.word	0x40000800
 8000e58:	40021000 	.word	0x40021000

08000e5c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000e5c:	b500      	push	{lr}
 8000e5e:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e60:	2300      	movs	r3, #0
 8000e62:	9302      	str	r3, [sp, #8]
 8000e64:	9303      	str	r3, [sp, #12]
 8000e66:	9304      	str	r3, [sp, #16]
 8000e68:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM3)
 8000e6a:	6803      	ldr	r3, [r0, #0]
 8000e6c:	4a1d      	ldr	r2, [pc, #116]	; (8000ee4 <HAL_TIM_MspPostInit+0x88>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d005      	beq.n	8000e7e <HAL_TIM_MspPostInit+0x22>

  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM4)
 8000e72:	4a1d      	ldr	r2, [pc, #116]	; (8000ee8 <HAL_TIM_MspPostInit+0x8c>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d01f      	beq.n	8000eb8 <HAL_TIM_MspPostInit+0x5c>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000e78:	b007      	add	sp, #28
 8000e7a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7e:	4b1b      	ldr	r3, [pc, #108]	; (8000eec <HAL_TIM_MspPostInit+0x90>)
 8000e80:	699a      	ldr	r2, [r3, #24]
 8000e82:	f042 0208 	orr.w	r2, r2, #8
 8000e86:	619a      	str	r2, [r3, #24]
 8000e88:	699b      	ldr	r3, [r3, #24]
 8000e8a:	f003 0308 	and.w	r3, r3, #8
 8000e8e:	9300      	str	r3, [sp, #0]
 8000e90:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = QD_EN_Pin|PQD_EN_Pin|DEPR_EN_Pin;
 8000e92:	2323      	movs	r3, #35	; 0x23
 8000e94:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e96:	2302      	movs	r3, #2
 8000e98:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9c:	a902      	add	r1, sp, #8
 8000e9e:	4814      	ldr	r0, [pc, #80]	; (8000ef0 <HAL_TIM_MspPostInit+0x94>)
 8000ea0:	f000 fa50 	bl	8001344 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8000ea4:	4a13      	ldr	r2, [pc, #76]	; (8000ef4 <HAL_TIM_MspPostInit+0x98>)
 8000ea6:	6853      	ldr	r3, [r2, #4]
 8000ea8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000eac:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000eb0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000eb4:	6053      	str	r3, [r2, #4]
 8000eb6:	e7df      	b.n	8000e78 <HAL_TIM_MspPostInit+0x1c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb8:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <HAL_TIM_MspPostInit+0x90>)
 8000eba:	699a      	ldr	r2, [r3, #24]
 8000ebc:	f042 0208 	orr.w	r2, r2, #8
 8000ec0:	619a      	str	r2, [r3, #24]
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	f003 0308 	and.w	r3, r3, #8
 8000ec8:	9301      	str	r3, [sp, #4]
 8000eca:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = FILL_EN_Pin;
 8000ecc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ed0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(FILL_EN_GPIO_Port, &GPIO_InitStruct);
 8000ed8:	a902      	add	r1, sp, #8
 8000eda:	4805      	ldr	r0, [pc, #20]	; (8000ef0 <HAL_TIM_MspPostInit+0x94>)
 8000edc:	f000 fa32 	bl	8001344 <HAL_GPIO_Init>
}
 8000ee0:	e7ca      	b.n	8000e78 <HAL_TIM_MspPostInit+0x1c>
 8000ee2:	bf00      	nop
 8000ee4:	40000400 	.word	0x40000400
 8000ee8:	40000800 	.word	0x40000800
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	40010c00 	.word	0x40010c00
 8000ef4:	40010000 	.word	0x40010000

08000ef8 <MX_TIM3_Init>:
{
 8000ef8:	b500      	push	{lr}
 8000efa:	b08b      	sub	sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000efc:	2300      	movs	r3, #0
 8000efe:	9308      	str	r3, [sp, #32]
 8000f00:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f02:	9301      	str	r3, [sp, #4]
 8000f04:	9302      	str	r3, [sp, #8]
 8000f06:	9303      	str	r3, [sp, #12]
 8000f08:	9304      	str	r3, [sp, #16]
 8000f0a:	9305      	str	r3, [sp, #20]
 8000f0c:	9306      	str	r3, [sp, #24]
 8000f0e:	9307      	str	r3, [sp, #28]
  htim3.Instance = TIM3;
 8000f10:	4824      	ldr	r0, [pc, #144]	; (8000fa4 <MX_TIM3_Init+0xac>)
 8000f12:	4a25      	ldr	r2, [pc, #148]	; (8000fa8 <MX_TIM3_Init+0xb0>)
 8000f14:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 7;
 8000f16:	2207      	movs	r2, #7
 8000f18:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f1a:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 999;
 8000f1c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f20:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f22:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f24:	2380      	movs	r3, #128	; 0x80
 8000f26:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f28:	f001 ff14 	bl	8002d54 <HAL_TIM_PWM_Init>
 8000f2c:	bb50      	cbnz	r0, 8000f84 <MX_TIM3_Init+0x8c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f32:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f34:	a908      	add	r1, sp, #32
 8000f36:	481b      	ldr	r0, [pc, #108]	; (8000fa4 <MX_TIM3_Init+0xac>)
 8000f38:	f002 f842 	bl	8002fc0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f3c:	bb28      	cbnz	r0, 8000f8a <MX_TIM3_Init+0x92>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f3e:	2360      	movs	r3, #96	; 0x60
 8000f40:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 500;
 8000f42:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000f46:	9302      	str	r3, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	9303      	str	r3, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f4c:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f4e:	2204      	movs	r2, #4
 8000f50:	eb0d 0102 	add.w	r1, sp, r2
 8000f54:	4813      	ldr	r0, [pc, #76]	; (8000fa4 <MX_TIM3_Init+0xac>)
 8000f56:	f001 ff57 	bl	8002e08 <HAL_TIM_PWM_ConfigChannel>
 8000f5a:	b9c8      	cbnz	r0, 8000f90 <MX_TIM3_Init+0x98>
  sConfigOC.Pulse = 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f60:	2208      	movs	r2, #8
 8000f62:	a901      	add	r1, sp, #4
 8000f64:	480f      	ldr	r0, [pc, #60]	; (8000fa4 <MX_TIM3_Init+0xac>)
 8000f66:	f001 ff4f 	bl	8002e08 <HAL_TIM_PWM_ConfigChannel>
 8000f6a:	b9a0      	cbnz	r0, 8000f96 <MX_TIM3_Init+0x9e>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f6c:	220c      	movs	r2, #12
 8000f6e:	a901      	add	r1, sp, #4
 8000f70:	480c      	ldr	r0, [pc, #48]	; (8000fa4 <MX_TIM3_Init+0xac>)
 8000f72:	f001 ff49 	bl	8002e08 <HAL_TIM_PWM_ConfigChannel>
 8000f76:	b988      	cbnz	r0, 8000f9c <MX_TIM3_Init+0xa4>
  HAL_TIM_MspPostInit(&htim3);
 8000f78:	480a      	ldr	r0, [pc, #40]	; (8000fa4 <MX_TIM3_Init+0xac>)
 8000f7a:	f7ff ff6f 	bl	8000e5c <HAL_TIM_MspPostInit>
}
 8000f7e:	b00b      	add	sp, #44	; 0x2c
 8000f80:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000f84:	f7ff ff0a 	bl	8000d9c <Error_Handler>
 8000f88:	e7d1      	b.n	8000f2e <MX_TIM3_Init+0x36>
    Error_Handler();
 8000f8a:	f7ff ff07 	bl	8000d9c <Error_Handler>
 8000f8e:	e7d6      	b.n	8000f3e <MX_TIM3_Init+0x46>
    Error_Handler();
 8000f90:	f7ff ff04 	bl	8000d9c <Error_Handler>
 8000f94:	e7e2      	b.n	8000f5c <MX_TIM3_Init+0x64>
    Error_Handler();
 8000f96:	f7ff ff01 	bl	8000d9c <Error_Handler>
 8000f9a:	e7e7      	b.n	8000f6c <MX_TIM3_Init+0x74>
    Error_Handler();
 8000f9c:	f7ff fefe 	bl	8000d9c <Error_Handler>
 8000fa0:	e7ea      	b.n	8000f78 <MX_TIM3_Init+0x80>
 8000fa2:	bf00      	nop
 8000fa4:	200004a0 	.word	0x200004a0
 8000fa8:	40000400 	.word	0x40000400

08000fac <MX_TIM4_Init>:
{
 8000fac:	b500      	push	{lr}
 8000fae:	b08b      	sub	sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	9308      	str	r3, [sp, #32]
 8000fb4:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fb6:	9301      	str	r3, [sp, #4]
 8000fb8:	9302      	str	r3, [sp, #8]
 8000fba:	9303      	str	r3, [sp, #12]
 8000fbc:	9304      	str	r3, [sp, #16]
 8000fbe:	9305      	str	r3, [sp, #20]
 8000fc0:	9306      	str	r3, [sp, #24]
 8000fc2:	9307      	str	r3, [sp, #28]
  htim4.Instance = TIM4;
 8000fc4:	4817      	ldr	r0, [pc, #92]	; (8001024 <MX_TIM4_Init+0x78>)
 8000fc6:	4a18      	ldr	r2, [pc, #96]	; (8001028 <MX_TIM4_Init+0x7c>)
 8000fc8:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 0;
 8000fca:	6043      	str	r3, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fcc:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 65535;
 8000fce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fd2:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fd4:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fd6:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000fd8:	f001 febc 	bl	8002d54 <HAL_TIM_PWM_Init>
 8000fdc:	b9c8      	cbnz	r0, 8001012 <MX_TIM4_Init+0x66>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe2:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000fe4:	a908      	add	r1, sp, #32
 8000fe6:	480f      	ldr	r0, [pc, #60]	; (8001024 <MX_TIM4_Init+0x78>)
 8000fe8:	f001 ffea 	bl	8002fc0 <HAL_TIMEx_MasterConfigSynchronization>
 8000fec:	b9a0      	cbnz	r0, 8001018 <MX_TIM4_Init+0x6c>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fee:	2360      	movs	r3, #96	; 0x60
 8000ff0:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	9302      	str	r3, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ff6:	9303      	str	r3, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ff8:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ffa:	2208      	movs	r2, #8
 8000ffc:	a901      	add	r1, sp, #4
 8000ffe:	4809      	ldr	r0, [pc, #36]	; (8001024 <MX_TIM4_Init+0x78>)
 8001000:	f001 ff02 	bl	8002e08 <HAL_TIM_PWM_ConfigChannel>
 8001004:	b958      	cbnz	r0, 800101e <MX_TIM4_Init+0x72>
  HAL_TIM_MspPostInit(&htim4);
 8001006:	4807      	ldr	r0, [pc, #28]	; (8001024 <MX_TIM4_Init+0x78>)
 8001008:	f7ff ff28 	bl	8000e5c <HAL_TIM_MspPostInit>
}
 800100c:	b00b      	add	sp, #44	; 0x2c
 800100e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001012:	f7ff fec3 	bl	8000d9c <Error_Handler>
 8001016:	e7e2      	b.n	8000fde <MX_TIM4_Init+0x32>
    Error_Handler();
 8001018:	f7ff fec0 	bl	8000d9c <Error_Handler>
 800101c:	e7e7      	b.n	8000fee <MX_TIM4_Init+0x42>
    Error_Handler();
 800101e:	f7ff febd 	bl	8000d9c <Error_Handler>
 8001022:	e7f0      	b.n	8001006 <MX_TIM4_Init+0x5a>
 8001024:	20000458 	.word	0x20000458
 8001028:	40000800 	.word	0x40000800

0800102c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800102c:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 800102e:	480a      	ldr	r0, [pc, #40]	; (8001058 <MX_USART2_UART_Init+0x2c>)
 8001030:	4b0a      	ldr	r3, [pc, #40]	; (800105c <MX_USART2_UART_Init+0x30>)
 8001032:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8001034:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001038:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800103a:	2300      	movs	r3, #0
 800103c:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800103e:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001040:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001042:	220c      	movs	r2, #12
 8001044:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001046:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001048:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800104a:	f002 f831 	bl	80030b0 <HAL_UART_Init>
 800104e:	b900      	cbnz	r0, 8001052 <MX_USART2_UART_Init+0x26>
  {
    Error_Handler();
  }

}
 8001050:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001052:	f7ff fea3 	bl	8000d9c <Error_Handler>
}
 8001056:	e7fb      	b.n	8001050 <MX_USART2_UART_Init+0x24>
 8001058:	20000528 	.word	0x20000528
 800105c:	40004400 	.word	0x40004400

08001060 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001060:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
 8001062:	480a      	ldr	r0, [pc, #40]	; (800108c <MX_USART3_UART_Init+0x2c>)
 8001064:	4b0a      	ldr	r3, [pc, #40]	; (8001090 <MX_USART3_UART_Init+0x30>)
 8001066:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 8001068:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800106c:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800106e:	2300      	movs	r3, #0
 8001070:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001072:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001074:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001076:	220c      	movs	r2, #12
 8001078:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800107a:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800107c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800107e:	f002 f817 	bl	80030b0 <HAL_UART_Init>
 8001082:	b900      	cbnz	r0, 8001086 <MX_USART3_UART_Init+0x26>
  {
    Error_Handler();
  }

}
 8001084:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001086:	f7ff fe89 	bl	8000d9c <Error_Handler>
}
 800108a:	e7fb      	b.n	8001084 <MX_USART3_UART_Init+0x24>
 800108c:	200004e8 	.word	0x200004e8
 8001090:	40004800 	.word	0x40004800

08001094 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001094:	b510      	push	{r4, lr}
 8001096:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	2300      	movs	r3, #0
 800109a:	9304      	str	r3, [sp, #16]
 800109c:	9305      	str	r3, [sp, #20]
 800109e:	9306      	str	r3, [sp, #24]
 80010a0:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART2)
 80010a2:	6803      	ldr	r3, [r0, #0]
 80010a4:	4a2c      	ldr	r2, [pc, #176]	; (8001158 <HAL_UART_MspInit+0xc4>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d004      	beq.n	80010b4 <HAL_UART_MspInit+0x20>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 80010aa:	4a2c      	ldr	r2, [pc, #176]	; (800115c <HAL_UART_MspInit+0xc8>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d029      	beq.n	8001104 <HAL_UART_MspInit+0x70>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80010b0:	b008      	add	sp, #32
 80010b2:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 80010b4:	4b2a      	ldr	r3, [pc, #168]	; (8001160 <HAL_UART_MspInit+0xcc>)
 80010b6:	69da      	ldr	r2, [r3, #28]
 80010b8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80010bc:	61da      	str	r2, [r3, #28]
 80010be:	69da      	ldr	r2, [r3, #28]
 80010c0:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80010c4:	9200      	str	r2, [sp, #0]
 80010c6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c8:	699a      	ldr	r2, [r3, #24]
 80010ca:	f042 0204 	orr.w	r2, r2, #4
 80010ce:	619a      	str	r2, [r3, #24]
 80010d0:	699b      	ldr	r3, [r3, #24]
 80010d2:	f003 0304 	and.w	r3, r3, #4
 80010d6:	9301      	str	r3, [sp, #4]
 80010d8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010da:	2304      	movs	r3, #4
 80010dc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010de:	2302      	movs	r3, #2
 80010e0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010e2:	2303      	movs	r3, #3
 80010e4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e6:	4c1f      	ldr	r4, [pc, #124]	; (8001164 <HAL_UART_MspInit+0xd0>)
 80010e8:	a904      	add	r1, sp, #16
 80010ea:	4620      	mov	r0, r4
 80010ec:	f000 f92a 	bl	8001344 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80010f0:	2308      	movs	r3, #8
 80010f2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010f4:	2300      	movs	r3, #0
 80010f6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fa:	a904      	add	r1, sp, #16
 80010fc:	4620      	mov	r0, r4
 80010fe:	f000 f921 	bl	8001344 <HAL_GPIO_Init>
 8001102:	e7d5      	b.n	80010b0 <HAL_UART_MspInit+0x1c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001104:	4b16      	ldr	r3, [pc, #88]	; (8001160 <HAL_UART_MspInit+0xcc>)
 8001106:	69da      	ldr	r2, [r3, #28]
 8001108:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800110c:	61da      	str	r2, [r3, #28]
 800110e:	69da      	ldr	r2, [r3, #28]
 8001110:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8001114:	9202      	str	r2, [sp, #8]
 8001116:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001118:	699a      	ldr	r2, [r3, #24]
 800111a:	f042 0208 	orr.w	r2, r2, #8
 800111e:	619a      	str	r2, [r3, #24]
 8001120:	699b      	ldr	r3, [r3, #24]
 8001122:	f003 0308 	and.w	r3, r3, #8
 8001126:	9303      	str	r3, [sp, #12]
 8001128:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800112a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800112e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001130:	2302      	movs	r3, #2
 8001132:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001134:	2303      	movs	r3, #3
 8001136:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001138:	4c0b      	ldr	r4, [pc, #44]	; (8001168 <HAL_UART_MspInit+0xd4>)
 800113a:	a904      	add	r1, sp, #16
 800113c:	4620      	mov	r0, r4
 800113e:	f000 f901 	bl	8001344 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001142:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001146:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001148:	2300      	movs	r3, #0
 800114a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114e:	a904      	add	r1, sp, #16
 8001150:	4620      	mov	r0, r4
 8001152:	f000 f8f7 	bl	8001344 <HAL_GPIO_Init>
}
 8001156:	e7ab      	b.n	80010b0 <HAL_UART_MspInit+0x1c>
 8001158:	40004400 	.word	0x40004400
 800115c:	40004800 	.word	0x40004800
 8001160:	40021000 	.word	0x40021000
 8001164:	40010800 	.word	0x40010800
 8001168:	40010c00 	.word	0x40010c00

0800116c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800116c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800116e:	e003      	b.n	8001178 <LoopCopyDataInit>

08001170 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001170:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001172:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001174:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001176:	3104      	adds	r1, #4

08001178 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001178:	480a      	ldr	r0, [pc, #40]	; (80011a4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800117a:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800117c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800117e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001180:	d3f6      	bcc.n	8001170 <CopyDataInit>
  ldr r2, =_sbss
 8001182:	4a0a      	ldr	r2, [pc, #40]	; (80011ac <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001184:	e002      	b.n	800118c <LoopFillZerobss>

08001186 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001186:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001188:	f842 3b04 	str.w	r3, [r2], #4

0800118c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800118c:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800118e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001190:	d3f9      	bcc.n	8001186 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001192:	f7ff fe3b 	bl	8000e0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001196:	f003 fe83 	bl	8004ea0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800119a:	f7ff fd3d 	bl	8000c18 <main>
  bx lr
 800119e:	4770      	bx	lr
  ldr r3, =_sidata
 80011a0:	08005858 	.word	0x08005858
  ldr r0, =_sdata
 80011a4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80011a8:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 80011ac:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 80011b0:	200014fc 	.word	0x200014fc

080011b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011b4:	e7fe      	b.n	80011b4 <ADC1_2_IRQHandler>
	...

080011b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b8:	b510      	push	{r4, lr}
 80011ba:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011bc:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <HAL_InitTick+0x40>)
 80011be:	7818      	ldrb	r0, [r3, #0]
 80011c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011c4:	fbb3 f3f0 	udiv	r3, r3, r0
 80011c8:	4a0c      	ldr	r2, [pc, #48]	; (80011fc <HAL_InitTick+0x44>)
 80011ca:	6810      	ldr	r0, [r2, #0]
 80011cc:	fbb0 f0f3 	udiv	r0, r0, r3
 80011d0:	f000 f8a2 	bl	8001318 <HAL_SYSTICK_Config>
 80011d4:	b968      	cbnz	r0, 80011f2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011d6:	2c0f      	cmp	r4, #15
 80011d8:	d901      	bls.n	80011de <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80011da:	2001      	movs	r0, #1
 80011dc:	e00a      	b.n	80011f4 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011de:	2200      	movs	r2, #0
 80011e0:	4621      	mov	r1, r4
 80011e2:	f04f 30ff 	mov.w	r0, #4294967295
 80011e6:	f000 f857 	bl	8001298 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011ea:	4b05      	ldr	r3, [pc, #20]	; (8001200 <HAL_InitTick+0x48>)
 80011ec:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80011ee:	2000      	movs	r0, #0
 80011f0:	e000      	b.n	80011f4 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80011f2:	2001      	movs	r0, #1
}
 80011f4:	bd10      	pop	{r4, pc}
 80011f6:	bf00      	nop
 80011f8:	20000004 	.word	0x20000004
 80011fc:	20000000 	.word	0x20000000
 8001200:	20000008 	.word	0x20000008

08001204 <HAL_Init>:
{
 8001204:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001206:	4a07      	ldr	r2, [pc, #28]	; (8001224 <HAL_Init+0x20>)
 8001208:	6813      	ldr	r3, [r2, #0]
 800120a:	f043 0310 	orr.w	r3, r3, #16
 800120e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001210:	2003      	movs	r0, #3
 8001212:	f000 f82f 	bl	8001274 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001216:	2000      	movs	r0, #0
 8001218:	f7ff ffce 	bl	80011b8 <HAL_InitTick>
  HAL_MspInit();
 800121c:	f7ff fdc0 	bl	8000da0 <HAL_MspInit>
}
 8001220:	2000      	movs	r0, #0
 8001222:	bd08      	pop	{r3, pc}
 8001224:	40022000 	.word	0x40022000

08001228 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001228:	4a03      	ldr	r2, [pc, #12]	; (8001238 <HAL_IncTick+0x10>)
 800122a:	6811      	ldr	r1, [r2, #0]
 800122c:	4b03      	ldr	r3, [pc, #12]	; (800123c <HAL_IncTick+0x14>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	440b      	add	r3, r1
 8001232:	6013      	str	r3, [r2, #0]
}
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	20000568 	.word	0x20000568
 800123c:	20000004 	.word	0x20000004

08001240 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001240:	4b01      	ldr	r3, [pc, #4]	; (8001248 <HAL_GetTick+0x8>)
 8001242:	6818      	ldr	r0, [r3, #0]
}
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	20000568 	.word	0x20000568

0800124c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800124c:	b538      	push	{r3, r4, r5, lr}
 800124e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001250:	f7ff fff6 	bl	8001240 <HAL_GetTick>
 8001254:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001256:	f1b4 3fff 	cmp.w	r4, #4294967295
 800125a:	d002      	beq.n	8001262 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 800125c:	4b04      	ldr	r3, [pc, #16]	; (8001270 <HAL_Delay+0x24>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001262:	f7ff ffed 	bl	8001240 <HAL_GetTick>
 8001266:	1b40      	subs	r0, r0, r5
 8001268:	42a0      	cmp	r0, r4
 800126a:	d3fa      	bcc.n	8001262 <HAL_Delay+0x16>
  {
  }
}
 800126c:	bd38      	pop	{r3, r4, r5, pc}
 800126e:	bf00      	nop
 8001270:	20000004 	.word	0x20000004

08001274 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001274:	4907      	ldr	r1, [pc, #28]	; (8001294 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001276:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001278:	0203      	lsls	r3, r0, #8
 800127a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800127e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001282:	0412      	lsls	r2, r2, #16
 8001284:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001286:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001288:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800128c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001290:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001292:	4770      	bx	lr
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001298:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800129a:	4b16      	ldr	r3, [pc, #88]	; (80012f4 <HAL_NVIC_SetPriority+0x5c>)
 800129c:	68db      	ldr	r3, [r3, #12]
 800129e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012a2:	f1c3 0407 	rsb	r4, r3, #7
 80012a6:	2c04      	cmp	r4, #4
 80012a8:	bf28      	it	cs
 80012aa:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ac:	1d1d      	adds	r5, r3, #4
 80012ae:	2d06      	cmp	r5, #6
 80012b0:	bf8c      	ite	hi
 80012b2:	3b03      	subhi	r3, #3
 80012b4:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b6:	f04f 35ff 	mov.w	r5, #4294967295
 80012ba:	fa05 f404 	lsl.w	r4, r5, r4
 80012be:	ea21 0104 	bic.w	r1, r1, r4
 80012c2:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c4:	fa05 f303 	lsl.w	r3, r5, r3
 80012c8:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012cc:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 80012ce:	2800      	cmp	r0, #0
 80012d0:	db09      	blt.n	80012e6 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d2:	0109      	lsls	r1, r1, #4
 80012d4:	b2c9      	uxtb	r1, r1
 80012d6:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80012da:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80012de:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80012e2:	bc30      	pop	{r4, r5}
 80012e4:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e6:	f000 000f 	and.w	r0, r0, #15
 80012ea:	0109      	lsls	r1, r1, #4
 80012ec:	b2c9      	uxtb	r1, r1
 80012ee:	4b02      	ldr	r3, [pc, #8]	; (80012f8 <HAL_NVIC_SetPriority+0x60>)
 80012f0:	5419      	strb	r1, [r3, r0]
 80012f2:	e7f6      	b.n	80012e2 <HAL_NVIC_SetPriority+0x4a>
 80012f4:	e000ed00 	.word	0xe000ed00
 80012f8:	e000ed14 	.word	0xe000ed14

080012fc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80012fc:	2800      	cmp	r0, #0
 80012fe:	db08      	blt.n	8001312 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001300:	0942      	lsrs	r2, r0, #5
 8001302:	f000 001f 	and.w	r0, r0, #31
 8001306:	2301      	movs	r3, #1
 8001308:	fa03 f000 	lsl.w	r0, r3, r0
 800130c:	4b01      	ldr	r3, [pc, #4]	; (8001314 <HAL_NVIC_EnableIRQ+0x18>)
 800130e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001312:	4770      	bx	lr
 8001314:	e000e100 	.word	0xe000e100

08001318 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001318:	3801      	subs	r0, #1
 800131a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800131e:	d20a      	bcs.n	8001336 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001320:	4b06      	ldr	r3, [pc, #24]	; (800133c <HAL_SYSTICK_Config+0x24>)
 8001322:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001324:	4a06      	ldr	r2, [pc, #24]	; (8001340 <HAL_SYSTICK_Config+0x28>)
 8001326:	21f0      	movs	r1, #240	; 0xf0
 8001328:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800132c:	2000      	movs	r0, #0
 800132e:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001330:	2207      	movs	r2, #7
 8001332:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001334:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001336:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	e000e010 	.word	0xe000e010
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001348:	b083      	sub	sp, #12
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800134a:	680f      	ldr	r7, [r1, #0]
 800134c:	2f00      	cmp	r7, #0
 800134e:	f000 80f8 	beq.w	8001542 <HAL_GPIO_Init+0x1fe>
  uint32_t config = 0x00u;
 8001352:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8001354:	4613      	mov	r3, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001356:	f8df c200 	ldr.w	ip, [pc, #512]	; 8001558 <HAL_GPIO_Init+0x214>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800135a:	4d7b      	ldr	r5, [pc, #492]	; (8001548 <HAL_GPIO_Init+0x204>)
      switch (GPIO_Init->Mode)
 800135c:	4e7b      	ldr	r6, [pc, #492]	; (800154c <HAL_GPIO_Init+0x208>)
 800135e:	f8df e1fc 	ldr.w	lr, [pc, #508]	; 800155c <HAL_GPIO_Init+0x218>
 8001362:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 8001560 <HAL_GPIO_Init+0x21c>
 8001366:	e09a      	b.n	800149e <HAL_GPIO_Init+0x15a>
 8001368:	2200      	movs	r2, #0
 800136a:	e01e      	b.n	80013aa <HAL_GPIO_Init+0x66>
 800136c:	42b4      	cmp	r4, r6
 800136e:	d00c      	beq.n	800138a <HAL_GPIO_Init+0x46>
 8001370:	d904      	bls.n	800137c <HAL_GPIO_Init+0x38>
 8001372:	4574      	cmp	r4, lr
 8001374:	d009      	beq.n	800138a <HAL_GPIO_Init+0x46>
 8001376:	4544      	cmp	r4, r8
 8001378:	d007      	beq.n	800138a <HAL_GPIO_Init+0x46>
 800137a:	e016      	b.n	80013aa <HAL_GPIO_Init+0x66>
 800137c:	4f74      	ldr	r7, [pc, #464]	; (8001550 <HAL_GPIO_Init+0x20c>)
 800137e:	42bc      	cmp	r4, r7
 8001380:	d003      	beq.n	800138a <HAL_GPIO_Init+0x46>
 8001382:	f507 2770 	add.w	r7, r7, #983040	; 0xf0000
 8001386:	42bc      	cmp	r4, r7
 8001388:	d10b      	bne.n	80013a2 <HAL_GPIO_Init+0x5e>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800138a:	688a      	ldr	r2, [r1, #8]
 800138c:	2a00      	cmp	r2, #0
 800138e:	f000 80ca 	beq.w	8001526 <HAL_GPIO_Init+0x1e2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001392:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8001394:	bf0c      	ite	eq
 8001396:	f8c0 9010 	streq.w	r9, [r0, #16]
            GPIOx->BRR = ioposition;
 800139a:	f8c0 9014 	strne.w	r9, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800139e:	2208      	movs	r2, #8
 80013a0:	e003      	b.n	80013aa <HAL_GPIO_Init+0x66>
      switch (GPIO_Init->Mode)
 80013a2:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 80013a6:	42bc      	cmp	r4, r7
 80013a8:	d0ef      	beq.n	800138a <HAL_GPIO_Init+0x46>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013aa:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80013ae:	f200 80bc 	bhi.w	800152a <HAL_GPIO_Init+0x1e6>
 80013b2:	4607      	mov	r7, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013b4:	ea4f 0983 	mov.w	r9, r3, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013b8:	683c      	ldr	r4, [r7, #0]
 80013ba:	f04f 0b0f 	mov.w	fp, #15
 80013be:	fa0b fb09 	lsl.w	fp, fp, r9
 80013c2:	ea24 040b 	bic.w	r4, r4, fp
 80013c6:	fa02 f909 	lsl.w	r9, r2, r9
 80013ca:	ea44 0409 	orr.w	r4, r4, r9
 80013ce:	603c      	str	r4, [r7, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013d0:	684c      	ldr	r4, [r1, #4]
 80013d2:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 80013d6:	d05d      	beq.n	8001494 <HAL_GPIO_Init+0x150>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013d8:	f8dc 4018 	ldr.w	r4, [ip, #24]
 80013dc:	f044 0401 	orr.w	r4, r4, #1
 80013e0:	f8cc 4018 	str.w	r4, [ip, #24]
 80013e4:	f8dc 4018 	ldr.w	r4, [ip, #24]
 80013e8:	f004 0401 	and.w	r4, r4, #1
 80013ec:	9401      	str	r4, [sp, #4]
 80013ee:	9c01      	ldr	r4, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 80013f0:	f023 0403 	bic.w	r4, r3, #3
 80013f4:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80013f8:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 80013fc:	f8d4 9008 	ldr.w	r9, [r4, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001400:	f003 0703 	and.w	r7, r3, #3
 8001404:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 8001408:	270f      	movs	r7, #15
 800140a:	fa07 f70b 	lsl.w	r7, r7, fp
 800140e:	ea29 0907 	bic.w	r9, r9, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001412:	4f50      	ldr	r7, [pc, #320]	; (8001554 <HAL_GPIO_Init+0x210>)
 8001414:	42b8      	cmp	r0, r7
 8001416:	f000 808e 	beq.w	8001536 <HAL_GPIO_Init+0x1f2>
 800141a:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800141e:	42b8      	cmp	r0, r7
 8001420:	f000 808b 	beq.w	800153a <HAL_GPIO_Init+0x1f6>
 8001424:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001428:	42b8      	cmp	r0, r7
 800142a:	f000 8088 	beq.w	800153e <HAL_GPIO_Init+0x1fa>
 800142e:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001432:	42b8      	cmp	r0, r7
 8001434:	bf0c      	ite	eq
 8001436:	2703      	moveq	r7, #3
 8001438:	2704      	movne	r7, #4
 800143a:	fa07 f70b 	lsl.w	r7, r7, fp
 800143e:	ea47 0709 	orr.w	r7, r7, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8001442:	60a7      	str	r7, [r4, #8]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001444:	684c      	ldr	r4, [r1, #4]
 8001446:	f414 3f80 	tst.w	r4, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800144a:	682c      	ldr	r4, [r5, #0]
 800144c:	bf14      	ite	ne
 800144e:	ea44 040a 	orrne.w	r4, r4, sl
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001452:	ea24 040a 	biceq.w	r4, r4, sl
 8001456:	602c      	str	r4, [r5, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001458:	684c      	ldr	r4, [r1, #4]
 800145a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800145e:	686c      	ldr	r4, [r5, #4]
 8001460:	bf14      	ite	ne
 8001462:	ea44 040a 	orrne.w	r4, r4, sl
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001466:	ea24 040a 	biceq.w	r4, r4, sl
 800146a:	606c      	str	r4, [r5, #4]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800146c:	684c      	ldr	r4, [r1, #4]
 800146e:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001472:	68ac      	ldr	r4, [r5, #8]
 8001474:	bf14      	ite	ne
 8001476:	ea44 040a 	orrne.w	r4, r4, sl
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800147a:	ea24 040a 	biceq.w	r4, r4, sl
 800147e:	60ac      	str	r4, [r5, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001480:	684c      	ldr	r4, [r1, #4]
 8001482:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001486:	68ec      	ldr	r4, [r5, #12]
 8001488:	bf14      	ite	ne
 800148a:	ea44 040a 	orrne.w	r4, r4, sl
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800148e:	ea24 040a 	biceq.w	r4, r4, sl
 8001492:	60ec      	str	r4, [r5, #12]
        }
      }
    }

	position++;
 8001494:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001496:	680f      	ldr	r7, [r1, #0]
 8001498:	fa37 f403 	lsrs.w	r4, r7, r3
 800149c:	d051      	beq.n	8001542 <HAL_GPIO_Init+0x1fe>
    ioposition = (0x01uL << position);
 800149e:	f04f 0901 	mov.w	r9, #1
 80014a2:	fa09 f903 	lsl.w	r9, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014a6:	ea09 0a07 	and.w	sl, r9, r7
    if (iocurrent == ioposition)
 80014aa:	ea39 0407 	bics.w	r4, r9, r7
 80014ae:	d1f1      	bne.n	8001494 <HAL_GPIO_Init+0x150>
      switch (GPIO_Init->Mode)
 80014b0:	684c      	ldr	r4, [r1, #4]
 80014b2:	2c12      	cmp	r4, #18
 80014b4:	f63f af5a 	bhi.w	800136c <HAL_GPIO_Init+0x28>
 80014b8:	2c12      	cmp	r4, #18
 80014ba:	f63f af76 	bhi.w	80013aa <HAL_GPIO_Init+0x66>
 80014be:	a701      	add	r7, pc, #4	; (adr r7, 80014c4 <HAL_GPIO_Init+0x180>)
 80014c0:	f857 f024 	ldr.w	pc, [r7, r4, lsl #2]
 80014c4:	0800138b 	.word	0x0800138b
 80014c8:	08001511 	.word	0x08001511
 80014cc:	0800151b 	.word	0x0800151b
 80014d0:	08001369 	.word	0x08001369
 80014d4:	080013ab 	.word	0x080013ab
 80014d8:	080013ab 	.word	0x080013ab
 80014dc:	080013ab 	.word	0x080013ab
 80014e0:	080013ab 	.word	0x080013ab
 80014e4:	080013ab 	.word	0x080013ab
 80014e8:	080013ab 	.word	0x080013ab
 80014ec:	080013ab 	.word	0x080013ab
 80014f0:	080013ab 	.word	0x080013ab
 80014f4:	080013ab 	.word	0x080013ab
 80014f8:	080013ab 	.word	0x080013ab
 80014fc:	080013ab 	.word	0x080013ab
 8001500:	080013ab 	.word	0x080013ab
 8001504:	080013ab 	.word	0x080013ab
 8001508:	08001515 	.word	0x08001515
 800150c:	08001521 	.word	0x08001521
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001510:	68ca      	ldr	r2, [r1, #12]
          break;
 8001512:	e74a      	b.n	80013aa <HAL_GPIO_Init+0x66>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001514:	68ca      	ldr	r2, [r1, #12]
 8001516:	3204      	adds	r2, #4
          break;
 8001518:	e747      	b.n	80013aa <HAL_GPIO_Init+0x66>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800151a:	68ca      	ldr	r2, [r1, #12]
 800151c:	3208      	adds	r2, #8
          break;
 800151e:	e744      	b.n	80013aa <HAL_GPIO_Init+0x66>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001520:	68ca      	ldr	r2, [r1, #12]
 8001522:	320c      	adds	r2, #12
          break;
 8001524:	e741      	b.n	80013aa <HAL_GPIO_Init+0x66>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001526:	2204      	movs	r2, #4
 8001528:	e73f      	b.n	80013aa <HAL_GPIO_Init+0x66>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800152a:	1d07      	adds	r7, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800152c:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8001530:	f1a9 0920 	sub.w	r9, r9, #32
 8001534:	e740      	b.n	80013b8 <HAL_GPIO_Init+0x74>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001536:	2700      	movs	r7, #0
 8001538:	e77f      	b.n	800143a <HAL_GPIO_Init+0xf6>
 800153a:	2701      	movs	r7, #1
 800153c:	e77d      	b.n	800143a <HAL_GPIO_Init+0xf6>
 800153e:	2702      	movs	r7, #2
 8001540:	e77b      	b.n	800143a <HAL_GPIO_Init+0xf6>
  }
}
 8001542:	b003      	add	sp, #12
 8001544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001548:	40010400 	.word	0x40010400
 800154c:	10220000 	.word	0x10220000
 8001550:	10120000 	.word	0x10120000
 8001554:	40010800 	.word	0x40010800
 8001558:	40021000 	.word	0x40021000
 800155c:	10310000 	.word	0x10310000
 8001560:	10320000 	.word	0x10320000

08001564 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001564:	6883      	ldr	r3, [r0, #8]
 8001566:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001568:	bf14      	ite	ne
 800156a:	2001      	movne	r0, #1
 800156c:	2000      	moveq	r0, #0
 800156e:	4770      	bx	lr

08001570 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001570:	b10a      	cbz	r2, 8001576 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001572:	6101      	str	r1, [r0, #16]
 8001574:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001576:	0409      	lsls	r1, r1, #16
 8001578:	6101      	str	r1, [r0, #16]
  }
}
 800157a:	4770      	bx	lr

0800157c <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800157c:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800157e:	ea01 0203 	and.w	r2, r1, r3
 8001582:	ea21 0103 	bic.w	r1, r1, r3
 8001586:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800158a:	6101      	str	r1, [r0, #16]
}
 800158c:	4770      	bx	lr

0800158e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800158e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001590:	b087      	sub	sp, #28
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001592:	2800      	cmp	r0, #0
 8001594:	d07a      	beq.n	800168c <HAL_PCD_Init+0xfe>
 8001596:	4605      	mov	r5, r0

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001598:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 800159c:	b1db      	cbz	r3, 80015d6 <HAL_PCD_Init+0x48>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800159e:	2303      	movs	r3, #3
 80015a0:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80015a4:	6828      	ldr	r0, [r5, #0]
 80015a6:	f001 fdc2 	bl	800312e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015aa:	462c      	mov	r4, r5
 80015ac:	f854 7b10 	ldr.w	r7, [r4], #16
 80015b0:	466e      	mov	r6, sp
 80015b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015b4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80015b6:	6823      	ldr	r3, [r4, #0]
 80015b8:	6033      	str	r3, [r6, #0]
 80015ba:	1d2b      	adds	r3, r5, #4
 80015bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015be:	4638      	mov	r0, r7
 80015c0:	f001 fda5 	bl	800310e <USB_CoreInit>
 80015c4:	4604      	mov	r4, r0
 80015c6:	b158      	cbz	r0, 80015e0 <HAL_PCD_Init+0x52>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015c8:	2302      	movs	r3, #2
 80015ca:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
    return HAL_ERROR;
 80015ce:	2401      	movs	r4, #1
  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 80015d0:	4620      	mov	r0, r4
 80015d2:	b007      	add	sp, #28
 80015d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 80015d6:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 80015da:	f003 fb4b 	bl	8004c74 <HAL_PCD_MspInit>
 80015de:	e7de      	b.n	800159e <HAL_PCD_Init+0x10>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80015e0:	2100      	movs	r1, #0
 80015e2:	6828      	ldr	r0, [r5, #0]
 80015e4:	f001 fdad 	bl	8003142 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015e8:	6868      	ldr	r0, [r5, #4]
 80015ea:	b388      	cbz	r0, 8001650 <HAL_PCD_Init+0xc2>
 80015ec:	4623      	mov	r3, r4
    hpcd->IN_ep[i].is_in = 1U;
 80015ee:	2601      	movs	r6, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80015f0:	2100      	movs	r1, #0
    hpcd->IN_ep[i].is_in = 1U;
 80015f2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80015f6:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80015fa:	f882 6029 	strb.w	r6, [r2, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 80015fe:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001602:	86d3      	strh	r3, [r2, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001604:	f882 102b 	strb.w	r1, [r2, #43]	; 0x2b
    hpcd->IN_ep[i].maxpacket = 0U;
 8001608:	6391      	str	r1, [r2, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 800160a:	63d1      	str	r1, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 800160c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8001610:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8001614:	6411      	str	r1, [r2, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001616:	3301      	adds	r3, #1
 8001618:	b2db      	uxtb	r3, r3
 800161a:	4283      	cmp	r3, r0
 800161c:	d3e9      	bcc.n	80015f2 <HAL_PCD_Init+0x64>
    hpcd->OUT_ep[i].is_in = 0U;
 800161e:	2200      	movs	r2, #0
 8001620:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8001624:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8001628:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 800162c:	f883 4168 	strb.w	r4, [r3, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001630:	f883 216b 	strb.w	r2, [r3, #363]	; 0x16b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001634:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001638:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    hpcd->OUT_ep[i].xfer_len = 0U;
 800163c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8001640:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8001644:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001648:	3401      	adds	r4, #1
 800164a:	b2e4      	uxtb	r4, r4
 800164c:	4284      	cmp	r4, r0
 800164e:	d3e7      	bcc.n	8001620 <HAL_PCD_Init+0x92>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001650:	462c      	mov	r4, r5
 8001652:	f854 7b10 	ldr.w	r7, [r4], #16
 8001656:	466e      	mov	r6, sp
 8001658:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800165a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800165c:	6823      	ldr	r3, [r4, #0]
 800165e:	6033      	str	r3, [r6, #0]
 8001660:	1d2b      	adds	r3, r5, #4
 8001662:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001664:	4638      	mov	r0, r7
 8001666:	f001 fd6e 	bl	8003146 <USB_DevInit>
 800166a:	4604      	mov	r4, r0
 800166c:	b120      	cbz	r0, 8001678 <HAL_PCD_Init+0xea>
    hpcd->State = HAL_PCD_STATE_ERROR;
 800166e:	2302      	movs	r3, #2
 8001670:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
    return HAL_ERROR;
 8001674:	2401      	movs	r4, #1
 8001676:	e7ab      	b.n	80015d0 <HAL_PCD_Init+0x42>
  hpcd->USB_Address = 0U;
 8001678:	2300      	movs	r3, #0
 800167a:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800167e:	2301      	movs	r3, #1
 8001680:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001684:	6828      	ldr	r0, [r5, #0]
 8001686:	f002 f856 	bl	8003736 <USB_DevDisconnect>
  return HAL_OK;
 800168a:	e7a1      	b.n	80015d0 <HAL_PCD_Init+0x42>
    return HAL_ERROR;
 800168c:	2401      	movs	r4, #1
 800168e:	e79f      	b.n	80015d0 <HAL_PCD_Init+0x42>

08001690 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001690:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 8001692:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 8001696:	2b01      	cmp	r3, #1
 8001698:	d011      	beq.n	80016be <HAL_PCD_Start+0x2e>
 800169a:	4604      	mov	r4, r0
 800169c:	2501      	movs	r5, #1
 800169e:	f880 52a8 	strb.w	r5, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80016a2:	6800      	ldr	r0, [r0, #0]
 80016a4:	f001 fd3a 	bl	800311c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80016a8:	4629      	mov	r1, r5
 80016aa:	4620      	mov	r0, r4
 80016ac:	f003 fbf7 	bl	8004e9e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80016b0:	6820      	ldr	r0, [r4, #0]
 80016b2:	f002 f83e 	bl	8003732 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80016b6:	2000      	movs	r0, #0
 80016b8:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 80016bc:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80016be:	2002      	movs	r0, #2
 80016c0:	e7fc      	b.n	80016bc <HAL_PCD_Start+0x2c>

080016c2 <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 80016c2:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d00d      	beq.n	80016e6 <HAL_PCD_SetAddress+0x24>
{
 80016ca:	b510      	push	{r4, lr}
 80016cc:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80016ce:	2301      	movs	r3, #1
 80016d0:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80016d4:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80016d8:	6800      	ldr	r0, [r0, #0]
 80016da:	f002 f824 	bl	8003726 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80016de:	2000      	movs	r0, #0
 80016e0:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 80016e4:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80016e6:	2002      	movs	r0, #2
}
 80016e8:	4770      	bx	lr

080016ea <HAL_PCD_IRQHandler>:
{
 80016ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80016f2:	6800      	ldr	r0, [r0, #0]
 80016f4:	f002 f821 	bl	800373a <USB_ReadInterrupts>
 80016f8:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 80016fc:	f040 809a 	bne.w	8001834 <HAL_PCD_IRQHandler+0x14a>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001700:	6820      	ldr	r0, [r4, #0]
 8001702:	f002 f81a 	bl	800373a <USB_ReadInterrupts>
 8001706:	f410 6f80 	tst.w	r0, #1024	; 0x400
 800170a:	f040 842a 	bne.w	8001f62 <HAL_PCD_IRQHandler+0x878>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800170e:	6820      	ldr	r0, [r4, #0]
 8001710:	f002 f813 	bl	800373a <USB_ReadInterrupts>
 8001714:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8001718:	d008      	beq.n	800172c <HAL_PCD_IRQHandler+0x42>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800171a:	6822      	ldr	r2, [r4, #0]
 800171c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001720:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001724:	041b      	lsls	r3, r3, #16
 8001726:	0c1b      	lsrs	r3, r3, #16
 8001728:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800172c:	6820      	ldr	r0, [r4, #0]
 800172e:	f002 f804 	bl	800373a <USB_ReadInterrupts>
 8001732:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8001736:	d008      	beq.n	800174a <HAL_PCD_IRQHandler+0x60>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001738:	6822      	ldr	r2, [r4, #0]
 800173a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800173e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001742:	041b      	lsls	r3, r3, #16
 8001744:	0c1b      	lsrs	r3, r3, #16
 8001746:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800174a:	6820      	ldr	r0, [r4, #0]
 800174c:	f001 fff5 	bl	800373a <USB_ReadInterrupts>
 8001750:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8001754:	f040 8417 	bne.w	8001f86 <HAL_PCD_IRQHandler+0x89c>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001758:	6820      	ldr	r0, [r4, #0]
 800175a:	f001 ffee 	bl	800373a <USB_ReadInterrupts>
 800175e:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8001762:	d04e      	beq.n	8001802 <HAL_PCD_IRQHandler+0x118>
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001764:	6826      	ldr	r6, [r4, #0]
 8001766:	4631      	mov	r1, r6
 8001768:	f1ad 0202 	sub.w	r2, sp, #2
 800176c:	f10d 050e 	add.w	r5, sp, #14
 8001770:	4613      	mov	r3, r2
 8001772:	f831 0b04 	ldrh.w	r0, [r1], #4
 8001776:	f823 0f02 	strh.w	r0, [r3, #2]!
    for (i = 0U; i < 8U; i++)
 800177a:	429d      	cmp	r5, r3
 800177c:	d1f9      	bne.n	8001772 <HAL_PCD_IRQHandler+0x88>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800177e:	f8b6 3040 	ldrh.w	r3, [r6, #64]	; 0x40
 8001782:	b29b      	uxth	r3, r3
 8001784:	f043 0301 	orr.w	r3, r3, #1
 8001788:	f8a6 3040 	strh.w	r3, [r6, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800178c:	6821      	ldr	r1, [r4, #0]
 800178e:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 8001792:	f023 0301 	bic.w	r3, r3, #1
 8001796:	041b      	lsls	r3, r3, #16
 8001798:	0c1b      	lsrs	r3, r3, #16
 800179a:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800179e:	6821      	ldr	r1, [r4, #0]
 80017a0:	f8b1 3044 	ldrh.w	r3, [r1, #68]	; 0x44
 80017a4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80017a8:	d0fa      	beq.n	80017a0 <HAL_PCD_IRQHandler+0xb6>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80017aa:	f8b1 3044 	ldrh.w	r3, [r1, #68]	; 0x44
 80017ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80017b2:	041b      	lsls	r3, r3, #16
 80017b4:	0c1b      	lsrs	r3, r3, #16
 80017b6:	f8a1 3044 	strh.w	r3, [r1, #68]	; 0x44
 80017ba:	2300      	movs	r3, #0
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80017bc:	6821      	ldr	r1, [r4, #0]
 80017be:	f832 0f02 	ldrh.w	r0, [r2, #2]!
 80017c2:	52c8      	strh	r0, [r1, r3]
    for (i = 0U; i < 8U; i++)
 80017c4:	3304      	adds	r3, #4
 80017c6:	2b20      	cmp	r3, #32
 80017c8:	d1f8      	bne.n	80017bc <HAL_PCD_IRQHandler+0xd2>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80017ca:	6822      	ldr	r2, [r4, #0]
 80017cc:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	f043 0308 	orr.w	r3, r3, #8
 80017d6:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80017da:	6822      	ldr	r2, [r4, #0]
 80017dc:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80017e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80017e4:	041b      	lsls	r3, r3, #16
 80017e6:	0c1b      	lsrs	r3, r3, #16
 80017e8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80017ec:	6822      	ldr	r2, [r4, #0]
 80017ee:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	f043 0304 	orr.w	r3, r3, #4
 80017f8:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 80017fc:	4620      	mov	r0, r4
 80017fe:	f003 fa91 	bl	8004d24 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001802:	6820      	ldr	r0, [r4, #0]
 8001804:	f001 ff99 	bl	800373a <USB_ReadInterrupts>
 8001808:	f410 7f00 	tst.w	r0, #512	; 0x200
 800180c:	f040 83db 	bne.w	8001fc6 <HAL_PCD_IRQHandler+0x8dc>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001810:	6820      	ldr	r0, [r4, #0]
 8001812:	f001 ff92 	bl	800373a <USB_ReadInterrupts>
 8001816:	f410 7f80 	tst.w	r0, #256	; 0x100
 800181a:	d008      	beq.n	800182e <HAL_PCD_IRQHandler+0x144>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800181c:	6822      	ldr	r2, [r4, #0]
 800181e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001822:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001826:	041b      	lsls	r3, r3, #16
 8001828:	0c1b      	lsrs	r3, r3, #16
 800182a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 800182e:	b004      	add	sp, #16
 8001830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001834:	6820      	ldr	r0, [r4, #0]
 8001836:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800183a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800183e:	f43f af5f 	beq.w	8001700 <HAL_PCD_IRQHandler+0x16>
 8001842:	2600      	movs	r6, #0
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8001844:	f248 0780 	movw	r7, #32896	; 0x8080
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001848:	f24c 0880 	movw	r8, #49280	; 0xc080
 800184c:	e3d9      	b.n	8002002 <HAL_PCD_IRQHandler+0x918>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800184e:	8803      	ldrh	r3, [r0, #0]
 8001850:	b29b      	uxth	r3, r3
 8001852:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800185a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800185e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001862:	b29b      	uxth	r3, r3
 8001864:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001866:	6822      	ldr	r2, [r4, #0]
 8001868:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800186c:	b29b      	uxth	r3, r3
 800186e:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8001872:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8001876:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800187a:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 800187e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001882:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8001884:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001886:	4413      	add	r3, r2
 8001888:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800188a:	4631      	mov	r1, r6
 800188c:	4620      	mov	r0, r4
 800188e:	f003 fa25 	bl	8004cdc <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001892:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001896:	2b00      	cmp	r3, #0
 8001898:	f000 83ac 	beq.w	8001ff4 <HAL_PCD_IRQHandler+0x90a>
 800189c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800189e:	2b00      	cmp	r3, #0
 80018a0:	f040 83a8 	bne.w	8001ff4 <HAL_PCD_IRQHandler+0x90a>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80018a4:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80018a8:	6822      	ldr	r2, [r4, #0]
 80018aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018ae:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80018b2:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
 80018b6:	e39d      	b.n	8001ff4 <HAL_PCD_IRQHandler+0x90a>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80018b8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80018bc:	b29b      	uxth	r3, r3
 80018be:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 80018c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80018c6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80018ca:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 80018ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018d2:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80018d6:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 80018da:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 80018de:	f002 fa90 	bl	8003e02 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80018e2:	6822      	ldr	r2, [r4, #0]
 80018e4:	8813      	ldrh	r3, [r2, #0]
 80018e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018ea:	051b      	lsls	r3, r3, #20
 80018ec:	0d1b      	lsrs	r3, r3, #20
 80018ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018f2:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80018f4:	4620      	mov	r0, r4
 80018f6:	f003 f9dd 	bl	8004cb4 <HAL_PCD_SetupStageCallback>
 80018fa:	e37b      	b.n	8001ff4 <HAL_PCD_IRQHandler+0x90a>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80018fc:	2a3e      	cmp	r2, #62	; 0x3e
 80018fe:	d808      	bhi.n	8001912 <HAL_PCD_IRQHandler+0x228>
 8001900:	0850      	lsrs	r0, r2, #1
 8001902:	f012 0f01 	tst.w	r2, #1
 8001906:	bf18      	it	ne
 8001908:	3001      	addne	r0, #1
 800190a:	0282      	lsls	r2, r0, #10
 800190c:	b292      	uxth	r2, r2
 800190e:	525a      	strh	r2, [r3, r1]
 8001910:	e3ce      	b.n	80020b0 <HAL_PCD_IRQHandler+0x9c6>
 8001912:	0950      	lsrs	r0, r2, #5
 8001914:	f012 0f1f 	tst.w	r2, #31
 8001918:	bf08      	it	eq
 800191a:	f100 30ff 	addeq.w	r0, r0, #4294967295
 800191e:	ea6f 62c0 	mvn.w	r2, r0, lsl #27
 8001922:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8001926:	b292      	uxth	r2, r2
 8001928:	525a      	strh	r2, [r3, r1]
 800192a:	e3c1      	b.n	80020b0 <HAL_PCD_IRQHandler+0x9c6>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800192c:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 8001930:	fa1f f983 	uxth.w	r9, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001934:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8001938:	d14d      	bne.n	80019d6 <HAL_PCD_IRQHandler+0x2ec>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800193a:	f019 0f80 	tst.w	r9, #128	; 0x80
 800193e:	f000 8359 	beq.w	8001ff4 <HAL_PCD_IRQHandler+0x90a>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001942:	6822      	ldr	r2, [r4, #0]
 8001944:	f832 3025 	ldrh.w	r3, [r2, r5, lsl #2]
 8001948:	b29b      	uxth	r3, r3
 800194a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800194e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001952:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001956:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800195a:	b29b      	uxth	r3, r3
 800195c:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]
        if ((ep->type != EP_TYPE_BULK) ||
 8001960:	eb05 0a85 	add.w	sl, r5, r5, lsl #2
 8001964:	eb04 0aca 	add.w	sl, r4, sl, lsl #3
 8001968:	f89a 302b 	ldrb.w	r3, [sl, #43]	; 0x2b
 800196c:	2b02      	cmp	r3, #2
 800196e:	f000 8188 	beq.w	8001c82 <HAL_PCD_IRQHandler+0x598>
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001972:	6820      	ldr	r0, [r4, #0]
 8001974:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001978:	b29b      	uxth	r3, r3
          if (ep->xfer_len > TxByteNbre)
 800197a:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 800197e:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8001982:	6c12      	ldr	r2, [r2, #64]	; 0x40
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001984:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8001988:	3302      	adds	r3, #2
 800198a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800198e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001992:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
          if (ep->xfer_len > TxByteNbre)
 8001996:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800199a:	429a      	cmp	r2, r3
 800199c:	f240 8320 	bls.w	8001fe0 <HAL_PCD_IRQHandler+0x8f6>
            ep->xfer_len -= TxByteNbre;
 80019a0:	1ad2      	subs	r2, r2, r3
 80019a2:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 80019a6:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 80019aa:	640a      	str	r2, [r1, #64]	; 0x40
          if (ep->xfer_len == 0U)
 80019ac:	2a00      	cmp	r2, #0
 80019ae:	f000 831c 	beq.w	8001fea <HAL_PCD_IRQHandler+0x900>
            ep->xfer_buff += TxByteNbre;
 80019b2:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 80019b6:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80019ba:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80019bc:	4419      	add	r1, r3
 80019be:	63d1      	str	r1, [r2, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 80019c0:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80019c2:	440b      	add	r3, r1
 80019c4:	6453      	str	r3, [r2, #68]	; 0x44
        ep = &hpcd->IN_ep[epindex];
 80019c6:	3501      	adds	r5, #1
 80019c8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80019cc:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80019d0:	f001 fed2 	bl	8003778 <USB_EPStartXfer>
 80019d4:	e30e      	b.n	8001ff4 <HAL_PCD_IRQHandler+0x90a>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80019d6:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 80019da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019de:	051b      	lsls	r3, r3, #20
 80019e0:	0d1b      	lsrs	r3, r3, #20
 80019e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019e6:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 80019ea:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80019ee:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80019f2:	f893 3174 	ldrb.w	r3, [r3, #372]	; 0x174
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d145      	bne.n	8001a86 <HAL_PCD_IRQHandler+0x39c>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80019fa:	6820      	ldr	r0, [r4, #0]
 80019fc:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8001a06:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8001a0a:	f892 2168 	ldrb.w	r2, [r2, #360]	; 0x168
 8001a0e:	3306      	adds	r3, #6
 8001a10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001a14:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001a18:	f8b3 a400 	ldrh.w	sl, [r3, #1024]	; 0x400
 8001a1c:	f3ca 0a09 	ubfx	sl, sl, #0, #10
          if (count != 0U)
 8001a20:	f1ba 0f00 	cmp.w	sl, #0
 8001a24:	d123      	bne.n	8001a6e <HAL_PCD_IRQHandler+0x384>
        ep->xfer_count += count;
 8001a26:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8001a2a:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001a2e:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8001a32:	4452      	add	r2, sl
 8001a34:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 8001a38:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8001a3c:	4452      	add	r2, sl
 8001a3e:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001a42:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8001a46:	b143      	cbz	r3, 8001a5a <HAL_PCD_IRQHandler+0x370>
 8001a48:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8001a4c:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001a50:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8001a54:	459a      	cmp	sl, r3
 8001a56:	f080 810a 	bcs.w	8001c6e <HAL_PCD_IRQHandler+0x584>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001a5a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8001a5e:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001a62:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8001a66:	4620      	mov	r0, r4
 8001a68:	f003 f92c 	bl	8004cc4 <HAL_PCD_DataOutStageCallback>
 8001a6c:	e765      	b.n	800193a <HAL_PCD_IRQHandler+0x250>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001a6e:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 8001a72:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8001a76:	4653      	mov	r3, sl
 8001a78:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 8001a7c:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8001a80:	f002 f9bf 	bl	8003e02 <USB_ReadPMA>
 8001a84:	e7cf      	b.n	8001a26 <HAL_PCD_IRQHandler+0x33c>
          if (ep->type == EP_TYPE_BULK)
 8001a86:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8001a8a:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001a8e:	f893 316b 	ldrb.w	r3, [r3, #363]	; 0x16b
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d037      	beq.n	8001b06 <HAL_PCD_IRQHandler+0x41c>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001a96:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8001a9a:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8001a9e:	f892 0168 	ldrb.w	r0, [r2, #360]	; 0x168
 8001aa2:	6821      	ldr	r1, [r4, #0]
 8001aa4:	f831 3020 	ldrh.w	r3, [r1, r0, lsl #2]
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ab2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ab6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001aba:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001abe:	6820      	ldr	r0, [r4, #0]
 8001ac0:	f892 2168 	ldrb.w	r2, [r2, #360]	; 0x168
 8001ac4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001ac8:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8001acc:	f000 80b3 	beq.w	8001c36 <HAL_PCD_IRQHandler+0x54c>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001ad0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	3302      	adds	r3, #2
 8001ad8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001adc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001ae0:	f8b3 a400 	ldrh.w	sl, [r3, #1024]	; 0x400
 8001ae4:	f3ca 0a09 	ubfx	sl, sl, #0, #10
              if (count != 0U)
 8001ae8:	f1ba 0f00 	cmp.w	sl, #0
 8001aec:	d09b      	beq.n	8001a26 <HAL_PCD_IRQHandler+0x33c>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001aee:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 8001af2:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8001af6:	4653      	mov	r3, sl
 8001af8:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8001afc:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8001b00:	f002 f97f 	bl	8003e02 <USB_ReadPMA>
 8001b04:	e78f      	b.n	8001a26 <HAL_PCD_IRQHandler+0x33c>
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001b06:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 8001b0a:	d04a      	beq.n	8001ba2 <HAL_PCD_IRQHandler+0x4b8>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001b0c:	6822      	ldr	r2, [r4, #0]
 8001b0e:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 8001b18:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8001b1c:	f890 1168 	ldrb.w	r1, [r0, #360]	; 0x168
 8001b20:	3302      	adds	r3, #2
 8001b22:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8001b26:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8001b2a:	f8b3 a400 	ldrh.w	sl, [r3, #1024]	; 0x400
 8001b2e:	f3ca 0a09 	ubfx	sl, sl, #0, #10
    if (ep->xfer_len >= count)
 8001b32:	f8d0 3180 	ldr.w	r3, [r0, #384]	; 0x180
 8001b36:	4553      	cmp	r3, sl
 8001b38:	f0c0 832d 	bcc.w	8002196 <HAL_PCD_IRQHandler+0xaac>
      ep->xfer_len -= count;
 8001b3c:	eba3 030a 	sub.w	r3, r3, sl
 8001b40:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 8001b44:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8001b48:	f8c0 3180 	str.w	r3, [r0, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	f000 8328 	beq.w	80021a2 <HAL_PCD_IRQHandler+0xab8>
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001b52:	f019 0f40 	tst.w	r9, #64	; 0x40
 8001b56:	d013      	beq.n	8001b80 <HAL_PCD_IRQHandler+0x496>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001b58:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8001b5c:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001b60:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8001b64:	6822      	ldr	r2, [r4, #0]
 8001b66:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b78:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001b7c:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
    if (count != 0U)
 8001b80:	f1ba 0f00 	cmp.w	sl, #0
 8001b84:	f43f af4f 	beq.w	8001a26 <HAL_PCD_IRQHandler+0x33c>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001b88:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 8001b8c:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8001b90:	4653      	mov	r3, sl
 8001b92:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8001b96:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8001b9a:	6820      	ldr	r0, [r4, #0]
 8001b9c:	f002 f931 	bl	8003e02 <USB_ReadPMA>
 8001ba0:	e741      	b.n	8001a26 <HAL_PCD_IRQHandler+0x33c>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001ba2:	6822      	ldr	r2, [r4, #0]
 8001ba4:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 8001bae:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8001bb2:	f890 1168 	ldrb.w	r1, [r0, #360]	; 0x168
 8001bb6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8001bba:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8001bbe:	f8b3 a40c 	ldrh.w	sl, [r3, #1036]	; 0x40c
 8001bc2:	f3ca 0a09 	ubfx	sl, sl, #0, #10
    if (ep->xfer_len >= count)
 8001bc6:	f8d0 3180 	ldr.w	r3, [r0, #384]	; 0x180
 8001bca:	4553      	cmp	r3, sl
 8001bcc:	f0c0 82f6 	bcc.w	80021bc <HAL_PCD_IRQHandler+0xad2>
      ep->xfer_len -= count;
 8001bd0:	eba3 030a 	sub.w	r3, r3, sl
 8001bd4:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 8001bd8:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8001bdc:	f8c0 3180 	str.w	r3, [r0, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f000 82f1 	beq.w	80021c8 <HAL_PCD_IRQHandler+0xade>
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001be6:	f019 0f40 	tst.w	r9, #64	; 0x40
 8001bea:	d113      	bne.n	8001c14 <HAL_PCD_IRQHandler+0x52a>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001bec:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8001bf0:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001bf4:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8001bf8:	6822      	ldr	r2, [r4, #0]
 8001bfa:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c0c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001c10:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
    if (count != 0U)
 8001c14:	f1ba 0f00 	cmp.w	sl, #0
 8001c18:	f43f af05 	beq.w	8001a26 <HAL_PCD_IRQHandler+0x33c>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001c1c:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 8001c20:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8001c24:	4653      	mov	r3, sl
 8001c26:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8001c2a:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8001c2e:	6820      	ldr	r0, [r4, #0]
 8001c30:	f002 f8e7 	bl	8003e02 <USB_ReadPMA>
 8001c34:	e6f7      	b.n	8001a26 <HAL_PCD_IRQHandler+0x33c>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001c36:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	3306      	adds	r3, #6
 8001c3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001c42:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001c46:	f8b3 a400 	ldrh.w	sl, [r3, #1024]	; 0x400
 8001c4a:	f3ca 0a09 	ubfx	sl, sl, #0, #10
              if (count != 0U)
 8001c4e:	f1ba 0f00 	cmp.w	sl, #0
 8001c52:	f43f aee8 	beq.w	8001a26 <HAL_PCD_IRQHandler+0x33c>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001c56:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 8001c5a:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8001c5e:	4653      	mov	r3, sl
 8001c60:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8001c64:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8001c68:	f002 f8cb 	bl	8003e02 <USB_ReadPMA>
 8001c6c:	e6db      	b.n	8001a26 <HAL_PCD_IRQHandler+0x33c>
        ep = &hpcd->OUT_ep[epindex];
 8001c6e:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 8001c72:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001c76:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8001c7a:	6820      	ldr	r0, [r4, #0]
 8001c7c:	f001 fd7c 	bl	8003778 <USB_EPStartXfer>
 8001c80:	e65b      	b.n	800193a <HAL_PCD_IRQHandler+0x250>
        if ((ep->type != EP_TYPE_BULK) ||
 8001c82:	f419 7f80 	tst.w	r9, #256	; 0x100
 8001c86:	f43f ae74 	beq.w	8001972 <HAL_PCD_IRQHandler+0x288>
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001c8a:	f019 0f40 	tst.w	r9, #64	; 0x40
 8001c8e:	f000 80b8 	beq.w	8001e02 <HAL_PCD_IRQHandler+0x718>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001c92:	6821      	ldr	r1, [r4, #0]
 8001c94:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	f89a c028 	ldrb.w	ip, [sl, #40]	; 0x28
    if (ep->xfer_len > TxByteNbre)
 8001c9e:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8001ca2:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8001ca6:	6c10      	ldr	r0, [r2, #64]	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001ca8:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8001cac:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8001cb0:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
    if (ep->xfer_len > TxByteNbre)
 8001cb4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001cb8:	4290      	cmp	r0, r2
 8001cba:	f240 821d 	bls.w	80020f8 <HAL_PCD_IRQHandler+0xa0e>
      ep->xfer_len -= TxByteNbre;
 8001cbe:	1a80      	subs	r0, r0, r2
 8001cc0:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8001cc4:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001cc8:	6418      	str	r0, [r3, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8001cca:	2800      	cmp	r0, #0
 8001ccc:	f000 8219 	beq.w	8002102 <HAL_PCD_IRQHandler+0xa18>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001cd0:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 8001cd4:	d00a      	beq.n	8001cec <HAL_PCD_IRQHandler+0x602>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001cd6:	f831 302c 	ldrh.w	r3, [r1, ip, lsl #2]
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ce0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ce4:	ea48 0303 	orr.w	r3, r8, r3
 8001ce8:	f821 302c 	strh.w	r3, [r1, ip, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8001cec:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8001cf0:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001cf4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d00f      	beq.n	8001d1c <HAL_PCD_IRQHandler+0x632>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8001cfc:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8001d00:	6822      	ldr	r2, [r4, #0]
 8001d02:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d10:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8001d14:	433b      	orrs	r3, r7
 8001d16:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8001d1a:	e16b      	b.n	8001ff4 <HAL_PCD_IRQHandler+0x90a>
        ep->xfer_buff += TxByteNbre;
 8001d1c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8001d20:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001d24:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001d26:	4411      	add	r1, r2
 8001d28:	63d9      	str	r1, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 8001d2a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001d2c:	4411      	add	r1, r2
 8001d2e:	6459      	str	r1, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8001d30:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8001d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d34:	4299      	cmp	r1, r3
 8001d36:	d326      	bcc.n	8001d86 <HAL_PCD_IRQHandler+0x69c>
          ep->xfer_len_db -= len;
 8001d38:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8001d3c:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8001d40:	1ac9      	subs	r1, r1, r3
 8001d42:	6491      	str	r1, [r2, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001d44:	f89a 2029 	ldrb.w	r2, [sl, #41]	; 0x29
 8001d48:	bb9a      	cbnz	r2, 8001db2 <HAL_PCD_IRQHandler+0x6c8>
 8001d4a:	6821      	ldr	r1, [r4, #0]
 8001d4c:	f8b1 c050 	ldrh.w	ip, [r1, #80]	; 0x50
 8001d50:	fa1f fc8c 	uxth.w	ip, ip
 8001d54:	f89a 2028 	ldrb.w	r2, [sl, #40]	; 0x28
 8001d58:	0110      	lsls	r0, r2, #4
 8001d5a:	f201 4104 	addw	r1, r1, #1028	; 0x404
 8001d5e:	4461      	add	r1, ip
 8001d60:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f040 81bb 	bne.w	80020e0 <HAL_PCD_IRQHandler+0x9f6>
 8001d6a:	5a42      	ldrh	r2, [r0, r1]
 8001d6c:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8001d70:	0412      	lsls	r2, r2, #16
 8001d72:	0c12      	lsrs	r2, r2, #16
 8001d74:	5242      	strh	r2, [r0, r1]
 8001d76:	5a42      	ldrh	r2, [r0, r1]
 8001d78:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8001d7c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8001d80:	b292      	uxth	r2, r2
 8001d82:	5242      	strh	r2, [r0, r1]
 8001d84:	e017      	b.n	8001db6 <HAL_PCD_IRQHandler+0x6cc>
        else if (ep->xfer_len_db == 0U)
 8001d86:	b939      	cbnz	r1, 8001d98 <HAL_PCD_IRQHandler+0x6ae>
          ep->xfer_fill_db = 0U;
 8001d88:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8001d8c:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001d90:	f883 604c 	strb.w	r6, [r3, #76]	; 0x4c
          len = TxByteNbre;
 8001d94:	4613      	mov	r3, r2
 8001d96:	e7d5      	b.n	8001d44 <HAL_PCD_IRQHandler+0x65a>
          ep->xfer_fill_db = 0U;
 8001d98:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8001d9c:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001da0:	f883 604c 	strb.w	r6, [r3, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 8001da4:	649e      	str	r6, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001da6:	f89a 2029 	ldrb.w	r2, [sl, #41]	; 0x29
 8001daa:	2a00      	cmp	r2, #0
 8001dac:	f000 818c 	beq.w	80020c8 <HAL_PCD_IRQHandler+0x9de>
          len = ep->xfer_len_db;
 8001db0:	460b      	mov	r3, r1
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001db2:	2a01      	cmp	r2, #1
 8001db4:	d018      	beq.n	8001de8 <HAL_PCD_IRQHandler+0x6fe>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001db6:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8001dba:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8001dbe:	4611      	mov	r1, r2
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 8001dc4:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8001dc6:	6820      	ldr	r0, [r4, #0]
 8001dc8:	f001 fcbd 	bl	8003746 <USB_WritePMA>
 8001dcc:	e796      	b.n	8001cfc <HAL_PCD_IRQHandler+0x612>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001dce:	0959      	lsrs	r1, r3, #5
 8001dd0:	f013 0f1f 	tst.w	r3, #31
 8001dd4:	bf08      	it	eq
 8001dd6:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8001dda:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8001dde:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8001de2:	b289      	uxth	r1, r1
 8001de4:	8011      	strh	r1, [r2, #0]
 8001de6:	e7e6      	b.n	8001db6 <HAL_PCD_IRQHandler+0x6cc>
 8001de8:	6822      	ldr	r2, [r4, #0]
 8001dea:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 8001dee:	b280      	uxth	r0, r0
 8001df0:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8001df4:	0109      	lsls	r1, r1, #4
 8001df6:	f202 4204 	addw	r2, r2, #1028	; 0x404
 8001dfa:	4402      	add	r2, r0
 8001dfc:	b298      	uxth	r0, r3
 8001dfe:	5288      	strh	r0, [r1, r2]
 8001e00:	e7d9      	b.n	8001db6 <HAL_PCD_IRQHandler+0x6cc>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001e02:	6820      	ldr	r0, [r4, #0]
 8001e04:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
    if (ep->xfer_len >= TxByteNbre)
 8001e0e:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8001e12:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8001e16:	6c12      	ldr	r2, [r2, #64]	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001e18:	3306      	adds	r3, #6
 8001e1a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8001e1e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001e22:	f8b3 c400 	ldrh.w	ip, [r3, #1024]	; 0x400
    if (ep->xfer_len >= TxByteNbre)
 8001e26:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8001e2a:	4562      	cmp	r2, ip
 8001e2c:	f0c0 8198 	bcc.w	8002160 <HAL_PCD_IRQHandler+0xa76>
      ep->xfer_len -= TxByteNbre;
 8001e30:	eba2 020c 	sub.w	r2, r2, ip
 8001e34:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8001e38:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001e3c:	641a      	str	r2, [r3, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8001e3e:	2a00      	cmp	r2, #0
 8001e40:	f000 8193 	beq.w	800216a <HAL_PCD_IRQHandler+0xa80>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001e44:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 8001e48:	d10a      	bne.n	8001e60 <HAL_PCD_IRQHandler+0x776>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001e4a:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e58:	ea48 0303 	orr.w	r3, r8, r3
 8001e5c:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8001e60:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8001e64:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001e68:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	f47f af45 	bne.w	8001cfc <HAL_PCD_IRQHandler+0x612>
        ep->xfer_buff += TxByteNbre;
 8001e72:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8001e76:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001e7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e7c:	4462      	add	r2, ip
 8001e7e:	63da      	str	r2, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 8001e80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e82:	4462      	add	r2, ip
 8001e84:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8001e86:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e8a:	4298      	cmp	r0, r3
 8001e8c:	d328      	bcc.n	8001ee0 <HAL_PCD_IRQHandler+0x7f6>
          ep->xfer_len_db -= len;
 8001e8e:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8001e92:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8001e96:	1ac0      	subs	r0, r0, r3
 8001e98:	6490      	str	r0, [r2, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001e9a:	6822      	ldr	r2, [r4, #0]
 8001e9c:	4611      	mov	r1, r2
 8001e9e:	f89a c029 	ldrb.w	ip, [sl, #41]	; 0x29
 8001ea2:	f1bc 0f00 	cmp.w	ip, #0
 8001ea6:	d134      	bne.n	8001f12 <HAL_PCD_IRQHandler+0x828>
 8001ea8:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8001eac:	b289      	uxth	r1, r1
 8001eae:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 8001eb2:	440a      	add	r2, r1
 8001eb4:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8001eb8:	0108      	lsls	r0, r1, #4
 8001eba:	eb02 1101 	add.w	r1, r2, r1, lsl #4
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f040 8142 	bne.w	8002148 <HAL_PCD_IRQHandler+0xa5e>
 8001ec4:	5a11      	ldrh	r1, [r2, r0]
 8001ec6:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8001eca:	0409      	lsls	r1, r1, #16
 8001ecc:	0c09      	lsrs	r1, r1, #16
 8001ece:	5211      	strh	r1, [r2, r0]
 8001ed0:	5a11      	ldrh	r1, [r2, r0]
 8001ed2:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8001ed6:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8001eda:	b289      	uxth	r1, r1
 8001edc:	5211      	strh	r1, [r2, r0]
 8001ede:	e01b      	b.n	8001f18 <HAL_PCD_IRQHandler+0x82e>
        else if (ep->xfer_len_db == 0U)
 8001ee0:	b938      	cbnz	r0, 8001ef2 <HAL_PCD_IRQHandler+0x808>
          ep->xfer_fill_db = 0U;
 8001ee2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8001ee6:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001eea:	f883 604c 	strb.w	r6, [r3, #76]	; 0x4c
          len = TxByteNbre;
 8001eee:	4663      	mov	r3, ip
 8001ef0:	e7d3      	b.n	8001e9a <HAL_PCD_IRQHandler+0x7b0>
          ep->xfer_len_db = 0U;
 8001ef2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8001ef6:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001efa:	649e      	str	r6, [r3, #72]	; 0x48
          ep->xfer_fill_db = 0;
 8001efc:	f883 604c 	strb.w	r6, [r3, #76]	; 0x4c
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001f00:	6822      	ldr	r2, [r4, #0]
 8001f02:	4611      	mov	r1, r2
 8001f04:	f89a c029 	ldrb.w	ip, [sl, #41]	; 0x29
 8001f08:	f1bc 0f00 	cmp.w	ip, #0
 8001f0c:	f000 8110 	beq.w	8002130 <HAL_PCD_IRQHandler+0xa46>
          len = ep->xfer_len_db;
 8001f10:	4603      	mov	r3, r0
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001f12:	f1bc 0f01 	cmp.w	ip, #1
 8001f16:	d018      	beq.n	8001f4a <HAL_PCD_IRQHandler+0x860>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8001f18:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8001f1c:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8001f20:	4611      	mov	r1, r2
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8001f26:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8001f28:	6820      	ldr	r0, [r4, #0]
 8001f2a:	f001 fc0c 	bl	8003746 <USB_WritePMA>
 8001f2e:	e6e5      	b.n	8001cfc <HAL_PCD_IRQHandler+0x612>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001f30:	095a      	lsrs	r2, r3, #5
 8001f32:	f013 0f1f 	tst.w	r3, #31
 8001f36:	bf08      	it	eq
 8001f38:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8001f3c:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8001f40:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8001f44:	b292      	uxth	r2, r2
 8001f46:	800a      	strh	r2, [r1, #0]
 8001f48:	e7e6      	b.n	8001f18 <HAL_PCD_IRQHandler+0x82e>
 8001f4a:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 8001f4e:	b280      	uxth	r0, r0
 8001f50:	f89a 2028 	ldrb.w	r2, [sl, #40]	; 0x28
 8001f54:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 8001f58:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 8001f5c:	b299      	uxth	r1, r3
 8001f5e:	5211      	strh	r1, [r2, r0]
 8001f60:	e7da      	b.n	8001f18 <HAL_PCD_IRQHandler+0x82e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001f62:	6822      	ldr	r2, [r4, #0]
 8001f64:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001f68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f6c:	041b      	lsls	r3, r3, #16
 8001f6e:	0c1b      	lsrs	r3, r3, #16
 8001f70:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8001f74:	4620      	mov	r0, r4
 8001f76:	f002 fec2 	bl	8004cfe <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	4620      	mov	r0, r4
 8001f7e:	f7ff fba0 	bl	80016c2 <HAL_PCD_SetAddress>
 8001f82:	f7ff bbc4 	b.w	800170e <HAL_PCD_IRQHandler+0x24>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001f86:	6822      	ldr	r2, [r4, #0]
 8001f88:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001f8c:	f023 0304 	bic.w	r3, r3, #4
 8001f90:	041b      	lsls	r3, r3, #16
 8001f92:	0c1b      	lsrs	r3, r3, #16
 8001f94:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001f98:	6822      	ldr	r2, [r4, #0]
 8001f9a:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001f9e:	f023 0308 	bic.w	r3, r3, #8
 8001fa2:	041b      	lsls	r3, r3, #16
 8001fa4:	0c1b      	lsrs	r3, r3, #16
 8001fa6:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8001faa:	4620      	mov	r0, r4
 8001fac:	f002 feca 	bl	8004d44 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001fb0:	6822      	ldr	r2, [r4, #0]
 8001fb2:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001fb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001fba:	041b      	lsls	r3, r3, #16
 8001fbc:	0c1b      	lsrs	r3, r3, #16
 8001fbe:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 8001fc2:	f7ff bbc9 	b.w	8001758 <HAL_PCD_IRQHandler+0x6e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001fc6:	6822      	ldr	r2, [r4, #0]
 8001fc8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001fcc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001fd0:	041b      	lsls	r3, r3, #16
 8001fd2:	0c1b      	lsrs	r3, r3, #16
 8001fd4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8001fd8:	4620      	mov	r0, r4
 8001fda:	f002 fe8a 	bl	8004cf2 <HAL_PCD_SOFCallback>
 8001fde:	e417      	b.n	8001810 <HAL_PCD_IRQHandler+0x126>
 8001fe0:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8001fe4:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8001fe8:	642e      	str	r6, [r5, #64]	; 0x40
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001fea:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8001fee:	4620      	mov	r0, r4
 8001ff0:	f002 fe74 	bl	8004cdc <HAL_PCD_DataInStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001ff4:	6820      	ldr	r0, [r4, #0]
 8001ff6:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8001ffa:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8001ffe:	f43f ab7f 	beq.w	8001700 <HAL_PCD_IRQHandler+0x16>
    wIstr = hpcd->Instance->ISTR;
 8002002:	f8b0 5044 	ldrh.w	r5, [r0, #68]	; 0x44
 8002006:	b2ab      	uxth	r3, r5
    if (epindex == 0U)
 8002008:	f015 050f 	ands.w	r5, r5, #15
 800200c:	f47f ac8e 	bne.w	800192c <HAL_PCD_IRQHandler+0x242>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002010:	f013 0f10 	tst.w	r3, #16
 8002014:	f43f ac1b 	beq.w	800184e <HAL_PCD_IRQHandler+0x164>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002018:	8803      	ldrh	r3, [r0, #0]
 800201a:	b29a      	uxth	r2, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 800201c:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002020:	f47f ac4a 	bne.w	80018b8 <HAL_PCD_IRQHandler+0x1ce>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002024:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8002028:	d0e4      	beq.n	8001ff4 <HAL_PCD_IRQHandler+0x90a>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800202a:	8803      	ldrh	r3, [r0, #0]
 800202c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002030:	051b      	lsls	r3, r3, #20
 8002032:	0d1b      	lsrs	r3, r3, #20
 8002034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002038:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800203a:	6820      	ldr	r0, [r4, #0]
 800203c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002040:	b29b      	uxth	r3, r3
 8002042:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8002046:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800204a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800204e:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8002052:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002056:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800205a:	b18b      	cbz	r3, 8002080 <HAL_PCD_IRQHandler+0x996>
 800205c:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 8002060:	b171      	cbz	r1, 8002080 <HAL_PCD_IRQHandler+0x996>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002062:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8002066:	f001 fecc 	bl	8003e02 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 800206a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800206e:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
 8002072:	4413      	add	r3, r2
 8002074:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002078:	4631      	mov	r1, r6
 800207a:	4620      	mov	r0, r4
 800207c:	f002 fe22 	bl	8004cc4 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002080:	6823      	ldr	r3, [r4, #0]
 8002082:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8002086:	b289      	uxth	r1, r1
 8002088:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800208c:	f8d4 2178 	ldr.w	r2, [r4, #376]	; 0x178
 8002090:	2a00      	cmp	r2, #0
 8002092:	f47f ac33 	bne.w	80018fc <HAL_PCD_IRQHandler+0x212>
 8002096:	5a5a      	ldrh	r2, [r3, r1]
 8002098:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800209c:	0412      	lsls	r2, r2, #16
 800209e:	0c12      	lsrs	r2, r2, #16
 80020a0:	525a      	strh	r2, [r3, r1]
 80020a2:	5a5a      	ldrh	r2, [r3, r1]
 80020a4:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80020a8:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80020ac:	b292      	uxth	r2, r2
 80020ae:	525a      	strh	r2, [r3, r1]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80020b0:	6822      	ldr	r2, [r4, #0]
 80020b2:	8813      	ldrh	r3, [r2, #0]
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020be:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80020c2:	433b      	orrs	r3, r7
 80020c4:	8013      	strh	r3, [r2, #0]
 80020c6:	e795      	b.n	8001ff4 <HAL_PCD_IRQHandler+0x90a>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80020c8:	6823      	ldr	r3, [r4, #0]
 80020ca:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80020ce:	b290      	uxth	r0, r2
 80020d0:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80020d4:	4402      	add	r2, r0
 80020d6:	f89a 3028 	ldrb.w	r3, [sl, #40]	; 0x28
 80020da:	eb02 1203 	add.w	r2, r2, r3, lsl #4
          len = ep->xfer_len_db;
 80020de:	460b      	mov	r3, r1
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80020e0:	2b3e      	cmp	r3, #62	; 0x3e
 80020e2:	f63f ae74 	bhi.w	8001dce <HAL_PCD_IRQHandler+0x6e4>
 80020e6:	0859      	lsrs	r1, r3, #1
 80020e8:	f013 0f01 	tst.w	r3, #1
 80020ec:	bf18      	it	ne
 80020ee:	3101      	addne	r1, #1
 80020f0:	0289      	lsls	r1, r1, #10
 80020f2:	b289      	uxth	r1, r1
 80020f4:	8011      	strh	r1, [r2, #0]
 80020f6:	e65e      	b.n	8001db6 <HAL_PCD_IRQHandler+0x6cc>
 80020f8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80020fc:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8002100:	641e      	str	r6, [r3, #64]	; 0x40
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002102:	4661      	mov	r1, ip
 8002104:	4620      	mov	r0, r4
 8002106:	f002 fde9 	bl	8004cdc <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800210a:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 800210e:	f43f adf5 	beq.w	8001cfc <HAL_PCD_IRQHandler+0x612>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002112:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8002116:	6822      	ldr	r2, [r4, #0]
 8002118:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800211c:	b29b      	uxth	r3, r3
 800211e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002126:	ea48 0303 	orr.w	r3, r8, r3
 800212a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 800212e:	e5e5      	b.n	8001cfc <HAL_PCD_IRQHandler+0x612>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002130:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8002134:	fa1f fc83 	uxth.w	ip, r3
 8002138:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 800213c:	f202 430c 	addw	r3, r2, #1036	; 0x40c
 8002140:	4463      	add	r3, ip
 8002142:	eb03 1101 	add.w	r1, r3, r1, lsl #4
          len = ep->xfer_len_db;
 8002146:	4603      	mov	r3, r0
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002148:	2b3e      	cmp	r3, #62	; 0x3e
 800214a:	f63f aef1 	bhi.w	8001f30 <HAL_PCD_IRQHandler+0x846>
 800214e:	085a      	lsrs	r2, r3, #1
 8002150:	f013 0f01 	tst.w	r3, #1
 8002154:	bf18      	it	ne
 8002156:	3201      	addne	r2, #1
 8002158:	0292      	lsls	r2, r2, #10
 800215a:	b292      	uxth	r2, r2
 800215c:	800a      	strh	r2, [r1, #0]
 800215e:	e6db      	b.n	8001f18 <HAL_PCD_IRQHandler+0x82e>
 8002160:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8002164:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8002168:	641e      	str	r6, [r3, #64]	; 0x40
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800216a:	4620      	mov	r0, r4
 800216c:	f002 fdb6 	bl	8004cdc <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002170:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 8002174:	f47f adc2 	bne.w	8001cfc <HAL_PCD_IRQHandler+0x612>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002178:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 800217c:	6822      	ldr	r2, [r4, #0]
 800217e:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002182:	b29b      	uxth	r3, r3
 8002184:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002188:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800218c:	ea48 0303 	orr.w	r3, r8, r3
 8002190:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8002194:	e5b2      	b.n	8001cfc <HAL_PCD_IRQHandler+0x612>
 8002196:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 800219a:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800219e:	f8c3 6180 	str.w	r6, [r3, #384]	; 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80021a2:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80021b4:	433b      	orrs	r3, r7
 80021b6:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80021ba:	e4ca      	b.n	8001b52 <HAL_PCD_IRQHandler+0x468>
 80021bc:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80021c0:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80021c4:	f8c3 6180 	str.w	r6, [r3, #384]	; 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80021c8:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021d6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80021da:	433b      	orrs	r3, r7
 80021dc:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80021e0:	e501      	b.n	8001be6 <HAL_PCD_IRQHandler+0x4fc>

080021e2 <HAL_PCD_EP_Open>:
{
 80021e2:	b570      	push	{r4, r5, r6, lr}
 80021e4:	4605      	mov	r5, r0
 80021e6:	460c      	mov	r4, r1
  if ((ep_addr & 0x80U) == 0x80U)
 80021e8:	f011 0f80 	tst.w	r1, #128	; 0x80
 80021ec:	d125      	bne.n	800223a <HAL_PCD_EP_Open+0x58>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021ee:	f001 0007 	and.w	r0, r1, #7
 80021f2:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 80021f6:	eb05 06c1 	add.w	r6, r5, r1, lsl #3
 80021fa:	f506 71b4 	add.w	r1, r6, #360	; 0x168
    ep->is_in = 0U;
 80021fe:	4630      	mov	r0, r6
 8002200:	2600      	movs	r6, #0
 8002202:	f880 6169 	strb.w	r6, [r0, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8002206:	f004 0407 	and.w	r4, r4, #7
 800220a:	700c      	strb	r4, [r1, #0]
  ep->maxpacket = ep_mps;
 800220c:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 800220e:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8002210:	784a      	ldrb	r2, [r1, #1]
 8002212:	b102      	cbz	r2, 8002216 <HAL_PCD_EP_Open+0x34>
    ep->tx_fifo_num = ep->num;
 8002214:	81cc      	strh	r4, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 8002216:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8002218:	bf04      	itt	eq
 800221a:	2300      	moveq	r3, #0
 800221c:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 800221e:	f895 32a8 	ldrb.w	r3, [r5, #680]	; 0x2a8
 8002222:	2b01      	cmp	r3, #1
 8002224:	d013      	beq.n	800224e <HAL_PCD_EP_Open+0x6c>
 8002226:	2301      	movs	r3, #1
 8002228:	f885 32a8 	strb.w	r3, [r5, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800222c:	6828      	ldr	r0, [r5, #0]
 800222e:	f000 ff9d 	bl	800316c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002232:	2000      	movs	r0, #0
 8002234:	f885 02a8 	strb.w	r0, [r5, #680]	; 0x2a8
}
 8002238:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800223a:	f001 0007 	and.w	r0, r1, #7
 800223e:	3001      	adds	r0, #1
 8002240:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 8002244:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
    ep->is_in = 1U;
 8002248:	2601      	movs	r6, #1
 800224a:	704e      	strb	r6, [r1, #1]
 800224c:	e7db      	b.n	8002206 <HAL_PCD_EP_Open+0x24>
  __HAL_LOCK(hpcd);
 800224e:	2002      	movs	r0, #2
 8002250:	e7f2      	b.n	8002238 <HAL_PCD_EP_Open+0x56>

08002252 <HAL_PCD_EP_Close>:
{
 8002252:	b510      	push	{r4, lr}
 8002254:	4604      	mov	r4, r0
 8002256:	460b      	mov	r3, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8002258:	f011 0f80 	tst.w	r1, #128	; 0x80
 800225c:	d11f      	bne.n	800229e <HAL_PCD_EP_Close+0x4c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800225e:	f001 0207 	and.w	r2, r1, #7
 8002262:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8002266:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800226a:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 800226e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002272:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8002276:	2000      	movs	r0, #0
 8002278:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->num   = ep_addr & EP_ADDR_MSK;
 800227c:	f003 0307 	and.w	r3, r3, #7
 8002280:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8002282:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8002286:	2b01      	cmp	r3, #1
 8002288:	d013      	beq.n	80022b2 <HAL_PCD_EP_Close+0x60>
 800228a:	2301      	movs	r3, #1
 800228c:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002290:	6820      	ldr	r0, [r4, #0]
 8002292:	f001 f8e8 	bl	8003466 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002296:	2000      	movs	r0, #0
 8002298:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800229c:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800229e:	f001 0207 	and.w	r2, r1, #7
 80022a2:	3201      	adds	r2, #1
 80022a4:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80022a8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 80022ac:	2001      	movs	r0, #1
 80022ae:	7048      	strb	r0, [r1, #1]
 80022b0:	e7e4      	b.n	800227c <HAL_PCD_EP_Close+0x2a>
  __HAL_LOCK(hpcd);
 80022b2:	2002      	movs	r0, #2
 80022b4:	e7f2      	b.n	800229c <HAL_PCD_EP_Close+0x4a>

080022b6 <HAL_PCD_EP_Receive>:
{
 80022b6:	b538      	push	{r3, r4, r5, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022b8:	f001 0407 	and.w	r4, r1, #7
 80022bc:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 80022c0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80022c4:	f501 71b4 	add.w	r1, r1, #360	; 0x168
  ep->xfer_buff = pBuf;
 80022c8:	eb04 0584 	add.w	r5, r4, r4, lsl #2
 80022cc:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 80022d0:	f8c5 217c 	str.w	r2, [r5, #380]	; 0x17c
  ep->xfer_len = len;
 80022d4:	f8c5 3180 	str.w	r3, [r5, #384]	; 0x180
  ep->xfer_count = 0U;
 80022d8:	2300      	movs	r3, #0
 80022da:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
  ep->is_in = 0U;
 80022de:	f885 3169 	strb.w	r3, [r5, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 80022e2:	f885 4168 	strb.w	r4, [r5, #360]	; 0x168
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80022e6:	6800      	ldr	r0, [r0, #0]
 80022e8:	f001 fa46 	bl	8003778 <USB_EPStartXfer>
}
 80022ec:	2000      	movs	r0, #0
 80022ee:	bd38      	pop	{r3, r4, r5, pc}

080022f0 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80022f0:	f001 0107 	and.w	r1, r1, #7
 80022f4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80022f8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 80022fc:	f8d1 0184 	ldr.w	r0, [r1, #388]	; 0x184
 8002300:	4770      	bx	lr

08002302 <HAL_PCD_EP_Transmit>:
{
 8002302:	b538      	push	{r3, r4, r5, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002304:	f001 0407 	and.w	r4, r1, #7
 8002308:	1c61      	adds	r1, r4, #1
 800230a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800230e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  ep->xfer_buff = pBuf;
 8002312:	eb04 0584 	add.w	r5, r4, r4, lsl #2
 8002316:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 800231a:	63ea      	str	r2, [r5, #60]	; 0x3c
  ep->xfer_len = len;
 800231c:	642b      	str	r3, [r5, #64]	; 0x40
  ep->xfer_fill_db = 1U;
 800231e:	2201      	movs	r2, #1
 8002320:	f885 204c 	strb.w	r2, [r5, #76]	; 0x4c
  ep->xfer_len_db = len;
 8002324:	64ab      	str	r3, [r5, #72]	; 0x48
  ep->xfer_count = 0U;
 8002326:	2300      	movs	r3, #0
 8002328:	646b      	str	r3, [r5, #68]	; 0x44
  ep->is_in = 1U;
 800232a:	f885 2029 	strb.w	r2, [r5, #41]	; 0x29
  ep->num = ep_addr & EP_ADDR_MSK;
 800232e:	f885 4028 	strb.w	r4, [r5, #40]	; 0x28
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002332:	6800      	ldr	r0, [r0, #0]
 8002334:	f001 fa20 	bl	8003778 <USB_EPStartXfer>
}
 8002338:	2000      	movs	r0, #0
 800233a:	bd38      	pop	{r3, r4, r5, pc}

0800233c <HAL_PCD_EP_SetStall>:
{
 800233c:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800233e:	f001 0507 	and.w	r5, r1, #7
 8002342:	6842      	ldr	r2, [r0, #4]
 8002344:	4295      	cmp	r5, r2
 8002346:	d831      	bhi.n	80023ac <HAL_PCD_EP_SetStall+0x70>
 8002348:	4604      	mov	r4, r0
 800234a:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 800234c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002350:	d11e      	bne.n	8002390 <HAL_PCD_EP_SetStall+0x54>
    ep = &hpcd->OUT_ep[ep_addr];
 8002352:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002356:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800235a:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 800235e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002362:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8002366:	2200      	movs	r2, #0
 8002368:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
  ep->is_stall = 1U;
 800236c:	2301      	movs	r3, #1
 800236e:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002370:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8002372:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8002376:	2b01      	cmp	r3, #1
 8002378:	d01a      	beq.n	80023b0 <HAL_PCD_EP_SetStall+0x74>
 800237a:	2301      	movs	r3, #1
 800237c:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002380:	6820      	ldr	r0, [r4, #0]
 8002382:	f001 f95a 	bl	800363a <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002386:	b15d      	cbz	r5, 80023a0 <HAL_PCD_EP_SetStall+0x64>
  __HAL_UNLOCK(hpcd);
 8002388:	2000      	movs	r0, #0
 800238a:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800238e:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002390:	1c6b      	adds	r3, r5, #1
 8002392:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8002396:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 800239a:	2201      	movs	r2, #1
 800239c:	704a      	strb	r2, [r1, #1]
 800239e:	e7e5      	b.n	800236c <HAL_PCD_EP_SetStall+0x30>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80023a0:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 80023a4:	6820      	ldr	r0, [r4, #0]
 80023a6:	f001 f9cc 	bl	8003742 <USB_EP0_OutStart>
 80023aa:	e7ed      	b.n	8002388 <HAL_PCD_EP_SetStall+0x4c>
    return HAL_ERROR;
 80023ac:	2001      	movs	r0, #1
 80023ae:	e7ee      	b.n	800238e <HAL_PCD_EP_SetStall+0x52>
  __HAL_LOCK(hpcd);
 80023b0:	2002      	movs	r0, #2
 80023b2:	e7ec      	b.n	800238e <HAL_PCD_EP_SetStall+0x52>

080023b4 <HAL_PCD_EP_ClrStall>:
{
 80023b4:	460b      	mov	r3, r1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80023b6:	f001 010f 	and.w	r1, r1, #15
 80023ba:	6842      	ldr	r2, [r0, #4]
 80023bc:	4291      	cmp	r1, r2
 80023be:	d830      	bhi.n	8002422 <HAL_PCD_EP_ClrStall+0x6e>
{
 80023c0:	b510      	push	{r4, lr}
 80023c2:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 80023c4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80023c8:	d121      	bne.n	800240e <HAL_PCD_EP_ClrStall+0x5a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023ca:	f003 0207 	and.w	r2, r3, #7
 80023ce:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80023d2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80023d6:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 80023da:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80023de:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 80023e2:	2000      	movs	r0, #0
 80023e4:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->is_stall = 0U;
 80023e8:	2200      	movs	r2, #0
 80023ea:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023ec:	f003 0307 	and.w	r3, r3, #7
 80023f0:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 80023f2:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d015      	beq.n	8002426 <HAL_PCD_EP_ClrStall+0x72>
 80023fa:	2301      	movs	r3, #1
 80023fc:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002400:	6820      	ldr	r0, [r4, #0]
 8002402:	f001 f93f 	bl	8003684 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002406:	2000      	movs	r0, #0
 8002408:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800240c:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800240e:	f003 0207 	and.w	r2, r3, #7
 8002412:	3201      	adds	r2, #1
 8002414:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8002418:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 800241c:	2001      	movs	r0, #1
 800241e:	7048      	strb	r0, [r1, #1]
 8002420:	e7e2      	b.n	80023e8 <HAL_PCD_EP_ClrStall+0x34>
    return HAL_ERROR;
 8002422:	2001      	movs	r0, #1
}
 8002424:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8002426:	2002      	movs	r0, #2
 8002428:	e7f0      	b.n	800240c <HAL_PCD_EP_ClrStall+0x58>

0800242a <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800242a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800242e:	d00b      	beq.n	8002448 <HAL_PCDEx_PMAConfig+0x1e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002430:	f001 0107 	and.w	r1, r1, #7
 8002434:	3101      	adds	r1, #1
 8002436:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800243a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800243e:	b952      	cbnz	r2, 8002456 <HAL_PCDEx_PMAConfig+0x2c>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002440:	730a      	strb	r2, [r1, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002442:	80cb      	strh	r3, [r1, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 8002444:	2000      	movs	r0, #0
 8002446:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 8002448:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800244c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8002450:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8002454:	e7f3      	b.n	800243e <HAL_PCDEx_PMAConfig+0x14>
    ep->doublebuffer = 1U;
 8002456:	2201      	movs	r2, #1
 8002458:	730a      	strb	r2, [r1, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800245a:	810b      	strh	r3, [r1, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800245c:	0c1b      	lsrs	r3, r3, #16
 800245e:	814b      	strh	r3, [r1, #10]
 8002460:	e7f0      	b.n	8002444 <HAL_PCDEx_PMAConfig+0x1a>
	...

08002464 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002464:	2800      	cmp	r0, #0
 8002466:	f000 8201 	beq.w	800286c <HAL_RCC_OscConfig+0x408>
{
 800246a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002472:	6803      	ldr	r3, [r0, #0]
 8002474:	f013 0f01 	tst.w	r3, #1
 8002478:	d02c      	beq.n	80024d4 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800247a:	4baa      	ldr	r3, [pc, #680]	; (8002724 <HAL_RCC_OscConfig+0x2c0>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f003 030c 	and.w	r3, r3, #12
 8002482:	2b04      	cmp	r3, #4
 8002484:	d01d      	beq.n	80024c2 <HAL_RCC_OscConfig+0x5e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002486:	4ba7      	ldr	r3, [pc, #668]	; (8002724 <HAL_RCC_OscConfig+0x2c0>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f003 030c 	and.w	r3, r3, #12
 800248e:	2b08      	cmp	r3, #8
 8002490:	d012      	beq.n	80024b8 <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002492:	6863      	ldr	r3, [r4, #4]
 8002494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002498:	d041      	beq.n	800251e <HAL_RCC_OscConfig+0xba>
 800249a:	2b00      	cmp	r3, #0
 800249c:	d155      	bne.n	800254a <HAL_RCC_OscConfig+0xe6>
 800249e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80024a2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80024ac:	601a      	str	r2, [r3, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	e037      	b.n	8002528 <HAL_RCC_OscConfig+0xc4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024b8:	4b9a      	ldr	r3, [pc, #616]	; (8002724 <HAL_RCC_OscConfig+0x2c0>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80024c0:	d0e7      	beq.n	8002492 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c2:	4b98      	ldr	r3, [pc, #608]	; (8002724 <HAL_RCC_OscConfig+0x2c0>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80024ca:	d003      	beq.n	80024d4 <HAL_RCC_OscConfig+0x70>
 80024cc:	6863      	ldr	r3, [r4, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f000 81ce 	beq.w	8002870 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024d4:	6823      	ldr	r3, [r4, #0]
 80024d6:	f013 0f02 	tst.w	r3, #2
 80024da:	d075      	beq.n	80025c8 <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024dc:	4b91      	ldr	r3, [pc, #580]	; (8002724 <HAL_RCC_OscConfig+0x2c0>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f013 0f0c 	tst.w	r3, #12
 80024e4:	d05f      	beq.n	80025a6 <HAL_RCC_OscConfig+0x142>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80024e6:	4b8f      	ldr	r3, [pc, #572]	; (8002724 <HAL_RCC_OscConfig+0x2c0>)
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f003 030c 	and.w	r3, r3, #12
 80024ee:	2b08      	cmp	r3, #8
 80024f0:	d054      	beq.n	800259c <HAL_RCC_OscConfig+0x138>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024f2:	6923      	ldr	r3, [r4, #16]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	f000 8089 	beq.w	800260c <HAL_RCC_OscConfig+0x1a8>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024fa:	4b8b      	ldr	r3, [pc, #556]	; (8002728 <HAL_RCC_OscConfig+0x2c4>)
 80024fc:	2201      	movs	r2, #1
 80024fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002500:	f7fe fe9e 	bl	8001240 <HAL_GetTick>
 8002504:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002506:	4e87      	ldr	r6, [pc, #540]	; (8002724 <HAL_RCC_OscConfig+0x2c0>)
 8002508:	6833      	ldr	r3, [r6, #0]
 800250a:	f013 0f02 	tst.w	r3, #2
 800250e:	d174      	bne.n	80025fa <HAL_RCC_OscConfig+0x196>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002510:	f7fe fe96 	bl	8001240 <HAL_GetTick>
 8002514:	1b40      	subs	r0, r0, r5
 8002516:	2802      	cmp	r0, #2
 8002518:	d9f6      	bls.n	8002508 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_TIMEOUT;
 800251a:	2003      	movs	r0, #3
 800251c:	e1ad      	b.n	800287a <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800251e:	4a81      	ldr	r2, [pc, #516]	; (8002724 <HAL_RCC_OscConfig+0x2c0>)
 8002520:	6813      	ldr	r3, [r2, #0]
 8002522:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002526:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002528:	6863      	ldr	r3, [r4, #4]
 800252a:	b343      	cbz	r3, 800257e <HAL_RCC_OscConfig+0x11a>
        tickstart = HAL_GetTick();
 800252c:	f7fe fe88 	bl	8001240 <HAL_GetTick>
 8002530:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002532:	4e7c      	ldr	r6, [pc, #496]	; (8002724 <HAL_RCC_OscConfig+0x2c0>)
 8002534:	6833      	ldr	r3, [r6, #0]
 8002536:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800253a:	d1cb      	bne.n	80024d4 <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800253c:	f7fe fe80 	bl	8001240 <HAL_GetTick>
 8002540:	1b40      	subs	r0, r0, r5
 8002542:	2864      	cmp	r0, #100	; 0x64
 8002544:	d9f6      	bls.n	8002534 <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 8002546:	2003      	movs	r0, #3
 8002548:	e197      	b.n	800287a <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800254a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800254e:	d009      	beq.n	8002564 <HAL_RCC_OscConfig+0x100>
 8002550:	4b74      	ldr	r3, [pc, #464]	; (8002724 <HAL_RCC_OscConfig+0x2c0>)
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	e7e1      	b.n	8002528 <HAL_RCC_OscConfig+0xc4>
 8002564:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002568:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	e7d4      	b.n	8002528 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 800257e:	f7fe fe5f 	bl	8001240 <HAL_GetTick>
 8002582:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002584:	4e67      	ldr	r6, [pc, #412]	; (8002724 <HAL_RCC_OscConfig+0x2c0>)
 8002586:	6833      	ldr	r3, [r6, #0]
 8002588:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800258c:	d0a2      	beq.n	80024d4 <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800258e:	f7fe fe57 	bl	8001240 <HAL_GetTick>
 8002592:	1b40      	subs	r0, r0, r5
 8002594:	2864      	cmp	r0, #100	; 0x64
 8002596:	d9f6      	bls.n	8002586 <HAL_RCC_OscConfig+0x122>
            return HAL_TIMEOUT;
 8002598:	2003      	movs	r0, #3
 800259a:	e16e      	b.n	800287a <HAL_RCC_OscConfig+0x416>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800259c:	4b61      	ldr	r3, [pc, #388]	; (8002724 <HAL_RCC_OscConfig+0x2c0>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80025a4:	d1a5      	bne.n	80024f2 <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025a6:	4b5f      	ldr	r3, [pc, #380]	; (8002724 <HAL_RCC_OscConfig+0x2c0>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f013 0f02 	tst.w	r3, #2
 80025ae:	d003      	beq.n	80025b8 <HAL_RCC_OscConfig+0x154>
 80025b0:	6923      	ldr	r3, [r4, #16]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	f040 815e 	bne.w	8002874 <HAL_RCC_OscConfig+0x410>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b8:	4a5a      	ldr	r2, [pc, #360]	; (8002724 <HAL_RCC_OscConfig+0x2c0>)
 80025ba:	6813      	ldr	r3, [r2, #0]
 80025bc:	6961      	ldr	r1, [r4, #20]
 80025be:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80025c2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80025c6:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025c8:	6823      	ldr	r3, [r4, #0]
 80025ca:	f013 0f08 	tst.w	r3, #8
 80025ce:	d03c      	beq.n	800264a <HAL_RCC_OscConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025d0:	69a3      	ldr	r3, [r4, #24]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d04f      	beq.n	8002676 <HAL_RCC_OscConfig+0x212>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025d6:	4b55      	ldr	r3, [pc, #340]	; (800272c <HAL_RCC_OscConfig+0x2c8>)
 80025d8:	2201      	movs	r2, #1
 80025da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025dc:	f7fe fe30 	bl	8001240 <HAL_GetTick>
 80025e0:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025e2:	4e50      	ldr	r6, [pc, #320]	; (8002724 <HAL_RCC_OscConfig+0x2c0>)
 80025e4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80025e6:	f013 0f02 	tst.w	r3, #2
 80025ea:	d121      	bne.n	8002630 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025ec:	f7fe fe28 	bl	8001240 <HAL_GetTick>
 80025f0:	1b40      	subs	r0, r0, r5
 80025f2:	2802      	cmp	r0, #2
 80025f4:	d9f6      	bls.n	80025e4 <HAL_RCC_OscConfig+0x180>
        {
          return HAL_TIMEOUT;
 80025f6:	2003      	movs	r0, #3
 80025f8:	e13f      	b.n	800287a <HAL_RCC_OscConfig+0x416>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025fa:	4a4a      	ldr	r2, [pc, #296]	; (8002724 <HAL_RCC_OscConfig+0x2c0>)
 80025fc:	6813      	ldr	r3, [r2, #0]
 80025fe:	6961      	ldr	r1, [r4, #20]
 8002600:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002604:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002608:	6013      	str	r3, [r2, #0]
 800260a:	e7dd      	b.n	80025c8 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 800260c:	4b46      	ldr	r3, [pc, #280]	; (8002728 <HAL_RCC_OscConfig+0x2c4>)
 800260e:	2200      	movs	r2, #0
 8002610:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002612:	f7fe fe15 	bl	8001240 <HAL_GetTick>
 8002616:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002618:	4e42      	ldr	r6, [pc, #264]	; (8002724 <HAL_RCC_OscConfig+0x2c0>)
 800261a:	6833      	ldr	r3, [r6, #0]
 800261c:	f013 0f02 	tst.w	r3, #2
 8002620:	d0d2      	beq.n	80025c8 <HAL_RCC_OscConfig+0x164>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002622:	f7fe fe0d 	bl	8001240 <HAL_GetTick>
 8002626:	1b40      	subs	r0, r0, r5
 8002628:	2802      	cmp	r0, #2
 800262a:	d9f6      	bls.n	800261a <HAL_RCC_OscConfig+0x1b6>
            return HAL_TIMEOUT;
 800262c:	2003      	movs	r0, #3
 800262e:	e124      	b.n	800287a <HAL_RCC_OscConfig+0x416>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002630:	4b3f      	ldr	r3, [pc, #252]	; (8002730 <HAL_RCC_OscConfig+0x2cc>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a3f      	ldr	r2, [pc, #252]	; (8002734 <HAL_RCC_OscConfig+0x2d0>)
 8002636:	fba2 2303 	umull	r2, r3, r2, r3
 800263a:	0a5b      	lsrs	r3, r3, #9
 800263c:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800263e:	bf00      	nop
  }
  while (Delay --);
 8002640:	9b01      	ldr	r3, [sp, #4]
 8002642:	1e5a      	subs	r2, r3, #1
 8002644:	9201      	str	r2, [sp, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1f9      	bne.n	800263e <HAL_RCC_OscConfig+0x1da>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800264a:	6823      	ldr	r3, [r4, #0]
 800264c:	f013 0f04 	tst.w	r3, #4
 8002650:	f000 809c 	beq.w	800278c <HAL_RCC_OscConfig+0x328>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002654:	4b33      	ldr	r3, [pc, #204]	; (8002724 <HAL_RCC_OscConfig+0x2c0>)
 8002656:	69db      	ldr	r3, [r3, #28]
 8002658:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800265c:	d11d      	bne.n	800269a <HAL_RCC_OscConfig+0x236>
      __HAL_RCC_PWR_CLK_ENABLE();
 800265e:	4b31      	ldr	r3, [pc, #196]	; (8002724 <HAL_RCC_OscConfig+0x2c0>)
 8002660:	69da      	ldr	r2, [r3, #28]
 8002662:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002666:	61da      	str	r2, [r3, #28]
 8002668:	69db      	ldr	r3, [r3, #28]
 800266a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800266e:	9300      	str	r3, [sp, #0]
 8002670:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 8002672:	2501      	movs	r5, #1
 8002674:	e012      	b.n	800269c <HAL_RCC_OscConfig+0x238>
      __HAL_RCC_LSI_DISABLE();
 8002676:	4b2d      	ldr	r3, [pc, #180]	; (800272c <HAL_RCC_OscConfig+0x2c8>)
 8002678:	2200      	movs	r2, #0
 800267a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800267c:	f7fe fde0 	bl	8001240 <HAL_GetTick>
 8002680:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002682:	4e28      	ldr	r6, [pc, #160]	; (8002724 <HAL_RCC_OscConfig+0x2c0>)
 8002684:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8002686:	f013 0f02 	tst.w	r3, #2
 800268a:	d0de      	beq.n	800264a <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800268c:	f7fe fdd8 	bl	8001240 <HAL_GetTick>
 8002690:	1b40      	subs	r0, r0, r5
 8002692:	2802      	cmp	r0, #2
 8002694:	d9f6      	bls.n	8002684 <HAL_RCC_OscConfig+0x220>
          return HAL_TIMEOUT;
 8002696:	2003      	movs	r0, #3
 8002698:	e0ef      	b.n	800287a <HAL_RCC_OscConfig+0x416>
    FlagStatus       pwrclkchanged = RESET;
 800269a:	2500      	movs	r5, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800269c:	4b26      	ldr	r3, [pc, #152]	; (8002738 <HAL_RCC_OscConfig+0x2d4>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80026a4:	d011      	beq.n	80026ca <HAL_RCC_OscConfig+0x266>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026a6:	68e3      	ldr	r3, [r4, #12]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d022      	beq.n	80026f2 <HAL_RCC_OscConfig+0x28e>
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d145      	bne.n	800273c <HAL_RCC_OscConfig+0x2d8>
 80026b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80026b4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80026b8:	6a1a      	ldr	r2, [r3, #32]
 80026ba:	f022 0201 	bic.w	r2, r2, #1
 80026be:	621a      	str	r2, [r3, #32]
 80026c0:	6a1a      	ldr	r2, [r3, #32]
 80026c2:	f022 0204 	bic.w	r2, r2, #4
 80026c6:	621a      	str	r2, [r3, #32]
 80026c8:	e018      	b.n	80026fc <HAL_RCC_OscConfig+0x298>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ca:	4a1b      	ldr	r2, [pc, #108]	; (8002738 <HAL_RCC_OscConfig+0x2d4>)
 80026cc:	6813      	ldr	r3, [r2, #0]
 80026ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026d2:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80026d4:	f7fe fdb4 	bl	8001240 <HAL_GetTick>
 80026d8:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026da:	4f17      	ldr	r7, [pc, #92]	; (8002738 <HAL_RCC_OscConfig+0x2d4>)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	f413 7f80 	tst.w	r3, #256	; 0x100
 80026e2:	d1e0      	bne.n	80026a6 <HAL_RCC_OscConfig+0x242>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026e4:	f7fe fdac 	bl	8001240 <HAL_GetTick>
 80026e8:	1b80      	subs	r0, r0, r6
 80026ea:	2864      	cmp	r0, #100	; 0x64
 80026ec:	d9f6      	bls.n	80026dc <HAL_RCC_OscConfig+0x278>
          return HAL_TIMEOUT;
 80026ee:	2003      	movs	r0, #3
 80026f0:	e0c3      	b.n	800287a <HAL_RCC_OscConfig+0x416>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026f2:	4a0c      	ldr	r2, [pc, #48]	; (8002724 <HAL_RCC_OscConfig+0x2c0>)
 80026f4:	6a13      	ldr	r3, [r2, #32]
 80026f6:	f043 0301 	orr.w	r3, r3, #1
 80026fa:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026fc:	68e3      	ldr	r3, [r4, #12]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d032      	beq.n	8002768 <HAL_RCC_OscConfig+0x304>
      tickstart = HAL_GetTick();
 8002702:	f7fe fd9d 	bl	8001240 <HAL_GetTick>
 8002706:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002708:	4f06      	ldr	r7, [pc, #24]	; (8002724 <HAL_RCC_OscConfig+0x2c0>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800270a:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800270e:	6a3b      	ldr	r3, [r7, #32]
 8002710:	f013 0f02 	tst.w	r3, #2
 8002714:	d139      	bne.n	800278a <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002716:	f7fe fd93 	bl	8001240 <HAL_GetTick>
 800271a:	1b80      	subs	r0, r0, r6
 800271c:	4540      	cmp	r0, r8
 800271e:	d9f6      	bls.n	800270e <HAL_RCC_OscConfig+0x2aa>
          return HAL_TIMEOUT;
 8002720:	2003      	movs	r0, #3
 8002722:	e0aa      	b.n	800287a <HAL_RCC_OscConfig+0x416>
 8002724:	40021000 	.word	0x40021000
 8002728:	42420000 	.word	0x42420000
 800272c:	42420480 	.word	0x42420480
 8002730:	20000000 	.word	0x20000000
 8002734:	10624dd3 	.word	0x10624dd3
 8002738:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800273c:	2b05      	cmp	r3, #5
 800273e:	d009      	beq.n	8002754 <HAL_RCC_OscConfig+0x2f0>
 8002740:	4b51      	ldr	r3, [pc, #324]	; (8002888 <HAL_RCC_OscConfig+0x424>)
 8002742:	6a1a      	ldr	r2, [r3, #32]
 8002744:	f022 0201 	bic.w	r2, r2, #1
 8002748:	621a      	str	r2, [r3, #32]
 800274a:	6a1a      	ldr	r2, [r3, #32]
 800274c:	f022 0204 	bic.w	r2, r2, #4
 8002750:	621a      	str	r2, [r3, #32]
 8002752:	e7d3      	b.n	80026fc <HAL_RCC_OscConfig+0x298>
 8002754:	4b4c      	ldr	r3, [pc, #304]	; (8002888 <HAL_RCC_OscConfig+0x424>)
 8002756:	6a1a      	ldr	r2, [r3, #32]
 8002758:	f042 0204 	orr.w	r2, r2, #4
 800275c:	621a      	str	r2, [r3, #32]
 800275e:	6a1a      	ldr	r2, [r3, #32]
 8002760:	f042 0201 	orr.w	r2, r2, #1
 8002764:	621a      	str	r2, [r3, #32]
 8002766:	e7c9      	b.n	80026fc <HAL_RCC_OscConfig+0x298>
      tickstart = HAL_GetTick();
 8002768:	f7fe fd6a 	bl	8001240 <HAL_GetTick>
 800276c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800276e:	4f46      	ldr	r7, [pc, #280]	; (8002888 <HAL_RCC_OscConfig+0x424>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002770:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002774:	6a3b      	ldr	r3, [r7, #32]
 8002776:	f013 0f02 	tst.w	r3, #2
 800277a:	d006      	beq.n	800278a <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800277c:	f7fe fd60 	bl	8001240 <HAL_GetTick>
 8002780:	1b80      	subs	r0, r0, r6
 8002782:	4540      	cmp	r0, r8
 8002784:	d9f6      	bls.n	8002774 <HAL_RCC_OscConfig+0x310>
          return HAL_TIMEOUT;
 8002786:	2003      	movs	r0, #3
 8002788:	e077      	b.n	800287a <HAL_RCC_OscConfig+0x416>
    if (pwrclkchanged == SET)
 800278a:	b9e5      	cbnz	r5, 80027c6 <HAL_RCC_OscConfig+0x362>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800278c:	69e3      	ldr	r3, [r4, #28]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d072      	beq.n	8002878 <HAL_RCC_OscConfig+0x414>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002792:	4a3d      	ldr	r2, [pc, #244]	; (8002888 <HAL_RCC_OscConfig+0x424>)
 8002794:	6852      	ldr	r2, [r2, #4]
 8002796:	f002 020c 	and.w	r2, r2, #12
 800279a:	2a08      	cmp	r2, #8
 800279c:	d056      	beq.n	800284c <HAL_RCC_OscConfig+0x3e8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d017      	beq.n	80027d2 <HAL_RCC_OscConfig+0x36e>
        __HAL_RCC_PLL_DISABLE();
 80027a2:	4b3a      	ldr	r3, [pc, #232]	; (800288c <HAL_RCC_OscConfig+0x428>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80027a8:	f7fe fd4a 	bl	8001240 <HAL_GetTick>
 80027ac:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027ae:	4d36      	ldr	r5, [pc, #216]	; (8002888 <HAL_RCC_OscConfig+0x424>)
 80027b0:	682b      	ldr	r3, [r5, #0]
 80027b2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80027b6:	d047      	beq.n	8002848 <HAL_RCC_OscConfig+0x3e4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027b8:	f7fe fd42 	bl	8001240 <HAL_GetTick>
 80027bc:	1b00      	subs	r0, r0, r4
 80027be:	2802      	cmp	r0, #2
 80027c0:	d9f6      	bls.n	80027b0 <HAL_RCC_OscConfig+0x34c>
            return HAL_TIMEOUT;
 80027c2:	2003      	movs	r0, #3
 80027c4:	e059      	b.n	800287a <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_PWR_CLK_DISABLE();
 80027c6:	4a30      	ldr	r2, [pc, #192]	; (8002888 <HAL_RCC_OscConfig+0x424>)
 80027c8:	69d3      	ldr	r3, [r2, #28]
 80027ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027ce:	61d3      	str	r3, [r2, #28]
 80027d0:	e7dc      	b.n	800278c <HAL_RCC_OscConfig+0x328>
        __HAL_RCC_PLL_DISABLE();
 80027d2:	4b2e      	ldr	r3, [pc, #184]	; (800288c <HAL_RCC_OscConfig+0x428>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80027d8:	f7fe fd32 	bl	8001240 <HAL_GetTick>
 80027dc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027de:	4e2a      	ldr	r6, [pc, #168]	; (8002888 <HAL_RCC_OscConfig+0x424>)
 80027e0:	6833      	ldr	r3, [r6, #0]
 80027e2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80027e6:	d006      	beq.n	80027f6 <HAL_RCC_OscConfig+0x392>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e8:	f7fe fd2a 	bl	8001240 <HAL_GetTick>
 80027ec:	1b40      	subs	r0, r0, r5
 80027ee:	2802      	cmp	r0, #2
 80027f0:	d9f6      	bls.n	80027e0 <HAL_RCC_OscConfig+0x37c>
            return HAL_TIMEOUT;
 80027f2:	2003      	movs	r0, #3
 80027f4:	e041      	b.n	800287a <HAL_RCC_OscConfig+0x416>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80027f6:	6a23      	ldr	r3, [r4, #32]
 80027f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027fc:	d01a      	beq.n	8002834 <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027fe:	4922      	ldr	r1, [pc, #136]	; (8002888 <HAL_RCC_OscConfig+0x424>)
 8002800:	684a      	ldr	r2, [r1, #4]
 8002802:	6a23      	ldr	r3, [r4, #32]
 8002804:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002806:	4303      	orrs	r3, r0
 8002808:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800280c:	4313      	orrs	r3, r2
 800280e:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8002810:	4b1e      	ldr	r3, [pc, #120]	; (800288c <HAL_RCC_OscConfig+0x428>)
 8002812:	2201      	movs	r2, #1
 8002814:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002816:	f7fe fd13 	bl	8001240 <HAL_GetTick>
 800281a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800281c:	4d1a      	ldr	r5, [pc, #104]	; (8002888 <HAL_RCC_OscConfig+0x424>)
 800281e:	682b      	ldr	r3, [r5, #0]
 8002820:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002824:	d10e      	bne.n	8002844 <HAL_RCC_OscConfig+0x3e0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002826:	f7fe fd0b 	bl	8001240 <HAL_GetTick>
 800282a:	1b00      	subs	r0, r0, r4
 800282c:	2802      	cmp	r0, #2
 800282e:	d9f6      	bls.n	800281e <HAL_RCC_OscConfig+0x3ba>
            return HAL_TIMEOUT;
 8002830:	2003      	movs	r0, #3
 8002832:	e022      	b.n	800287a <HAL_RCC_OscConfig+0x416>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002834:	4a14      	ldr	r2, [pc, #80]	; (8002888 <HAL_RCC_OscConfig+0x424>)
 8002836:	6853      	ldr	r3, [r2, #4]
 8002838:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800283c:	68a1      	ldr	r1, [r4, #8]
 800283e:	430b      	orrs	r3, r1
 8002840:	6053      	str	r3, [r2, #4]
 8002842:	e7dc      	b.n	80027fe <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 8002844:	2000      	movs	r0, #0
 8002846:	e018      	b.n	800287a <HAL_RCC_OscConfig+0x416>
 8002848:	2000      	movs	r0, #0
 800284a:	e016      	b.n	800287a <HAL_RCC_OscConfig+0x416>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800284c:	2b01      	cmp	r3, #1
 800284e:	d017      	beq.n	8002880 <HAL_RCC_OscConfig+0x41c>
        pll_config = RCC->CFGR;
 8002850:	4b0d      	ldr	r3, [pc, #52]	; (8002888 <HAL_RCC_OscConfig+0x424>)
 8002852:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002854:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8002858:	6a22      	ldr	r2, [r4, #32]
 800285a:	4291      	cmp	r1, r2
 800285c:	d112      	bne.n	8002884 <HAL_RCC_OscConfig+0x420>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800285e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002862:	6a60      	ldr	r0, [r4, #36]	; 0x24
        return HAL_ERROR;
 8002864:	1a18      	subs	r0, r3, r0
 8002866:	bf18      	it	ne
 8002868:	2001      	movne	r0, #1
 800286a:	e006      	b.n	800287a <HAL_RCC_OscConfig+0x416>
    return HAL_ERROR;
 800286c:	2001      	movs	r0, #1
}
 800286e:	4770      	bx	lr
        return HAL_ERROR;
 8002870:	2001      	movs	r0, #1
 8002872:	e002      	b.n	800287a <HAL_RCC_OscConfig+0x416>
        return HAL_ERROR;
 8002874:	2001      	movs	r0, #1
 8002876:	e000      	b.n	800287a <HAL_RCC_OscConfig+0x416>
  return HAL_OK;
 8002878:	2000      	movs	r0, #0
}
 800287a:	b002      	add	sp, #8
 800287c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 8002880:	2001      	movs	r0, #1
 8002882:	e7fa      	b.n	800287a <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
 8002884:	2001      	movs	r0, #1
 8002886:	e7f8      	b.n	800287a <HAL_RCC_OscConfig+0x416>
 8002888:	40021000 	.word	0x40021000
 800288c:	42420060 	.word	0x42420060

08002890 <HAL_RCC_GetSysClockFreq>:
{
 8002890:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002892:	4b16      	ldr	r3, [pc, #88]	; (80028ec <HAL_RCC_GetSysClockFreq+0x5c>)
 8002894:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002896:	f10d 0c18 	add.w	ip, sp, #24
 800289a:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800289e:	f240 2301 	movw	r3, #513	; 0x201
 80028a2:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 80028a6:	4b12      	ldr	r3, [pc, #72]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x60>)
 80028a8:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80028aa:	f003 020c 	and.w	r2, r3, #12
 80028ae:	2a08      	cmp	r2, #8
 80028b0:	d002      	beq.n	80028b8 <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 80028b2:	4810      	ldr	r0, [pc, #64]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x64>)
}
 80028b4:	b006      	add	sp, #24
 80028b6:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028b8:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80028bc:	4462      	add	r2, ip
 80028be:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028c2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80028c6:	d00c      	beq.n	80028e2 <HAL_RCC_GetSysClockFreq+0x52>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028c8:	4b09      	ldr	r3, [pc, #36]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x60>)
 80028ca:	685b      	ldr	r3, [r3, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028cc:	4809      	ldr	r0, [pc, #36]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x64>)
 80028ce:	fb00 f002 	mul.w	r0, r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028d2:	f3c3 4340 	ubfx	r3, r3, #17, #1
 80028d6:	4463      	add	r3, ip
 80028d8:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028dc:	fbb0 f0f3 	udiv	r0, r0, r3
 80028e0:	e7e8      	b.n	80028b4 <HAL_RCC_GetSysClockFreq+0x24>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028e2:	4805      	ldr	r0, [pc, #20]	; (80028f8 <HAL_RCC_GetSysClockFreq+0x68>)
 80028e4:	fb00 f002 	mul.w	r0, r0, r2
 80028e8:	e7e4      	b.n	80028b4 <HAL_RCC_GetSysClockFreq+0x24>
 80028ea:	bf00      	nop
 80028ec:	080057c0 	.word	0x080057c0
 80028f0:	40021000 	.word	0x40021000
 80028f4:	007a1200 	.word	0x007a1200
 80028f8:	003d0900 	.word	0x003d0900

080028fc <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80028fc:	2800      	cmp	r0, #0
 80028fe:	f000 80a2 	beq.w	8002a46 <HAL_RCC_ClockConfig+0x14a>
{
 8002902:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002906:	460d      	mov	r5, r1
 8002908:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800290a:	4b53      	ldr	r3, [pc, #332]	; (8002a58 <HAL_RCC_ClockConfig+0x15c>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0307 	and.w	r3, r3, #7
 8002912:	428b      	cmp	r3, r1
 8002914:	d20b      	bcs.n	800292e <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002916:	4a50      	ldr	r2, [pc, #320]	; (8002a58 <HAL_RCC_ClockConfig+0x15c>)
 8002918:	6813      	ldr	r3, [r2, #0]
 800291a:	f023 0307 	bic.w	r3, r3, #7
 800291e:	430b      	orrs	r3, r1
 8002920:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002922:	6813      	ldr	r3, [r2, #0]
 8002924:	f003 0307 	and.w	r3, r3, #7
 8002928:	428b      	cmp	r3, r1
 800292a:	f040 808e 	bne.w	8002a4a <HAL_RCC_ClockConfig+0x14e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800292e:	6823      	ldr	r3, [r4, #0]
 8002930:	f013 0f02 	tst.w	r3, #2
 8002934:	d017      	beq.n	8002966 <HAL_RCC_ClockConfig+0x6a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002936:	f013 0f04 	tst.w	r3, #4
 800293a:	d004      	beq.n	8002946 <HAL_RCC_ClockConfig+0x4a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800293c:	4a47      	ldr	r2, [pc, #284]	; (8002a5c <HAL_RCC_ClockConfig+0x160>)
 800293e:	6853      	ldr	r3, [r2, #4]
 8002940:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002944:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002946:	6823      	ldr	r3, [r4, #0]
 8002948:	f013 0f08 	tst.w	r3, #8
 800294c:	d004      	beq.n	8002958 <HAL_RCC_ClockConfig+0x5c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800294e:	4a43      	ldr	r2, [pc, #268]	; (8002a5c <HAL_RCC_ClockConfig+0x160>)
 8002950:	6853      	ldr	r3, [r2, #4]
 8002952:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002956:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002958:	4a40      	ldr	r2, [pc, #256]	; (8002a5c <HAL_RCC_ClockConfig+0x160>)
 800295a:	6853      	ldr	r3, [r2, #4]
 800295c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002960:	68a1      	ldr	r1, [r4, #8]
 8002962:	430b      	orrs	r3, r1
 8002964:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002966:	6823      	ldr	r3, [r4, #0]
 8002968:	f013 0f01 	tst.w	r3, #1
 800296c:	d031      	beq.n	80029d2 <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800296e:	6862      	ldr	r2, [r4, #4]
 8002970:	2a01      	cmp	r2, #1
 8002972:	d020      	beq.n	80029b6 <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002974:	2a02      	cmp	r2, #2
 8002976:	d025      	beq.n	80029c4 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002978:	4b38      	ldr	r3, [pc, #224]	; (8002a5c <HAL_RCC_ClockConfig+0x160>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f013 0f02 	tst.w	r3, #2
 8002980:	d065      	beq.n	8002a4e <HAL_RCC_ClockConfig+0x152>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002982:	4936      	ldr	r1, [pc, #216]	; (8002a5c <HAL_RCC_ClockConfig+0x160>)
 8002984:	684b      	ldr	r3, [r1, #4]
 8002986:	f023 0303 	bic.w	r3, r3, #3
 800298a:	4313      	orrs	r3, r2
 800298c:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 800298e:	f7fe fc57 	bl	8001240 <HAL_GetTick>
 8002992:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002994:	4f31      	ldr	r7, [pc, #196]	; (8002a5c <HAL_RCC_ClockConfig+0x160>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002996:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f003 030c 	and.w	r3, r3, #12
 80029a0:	6862      	ldr	r2, [r4, #4]
 80029a2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80029a6:	d014      	beq.n	80029d2 <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029a8:	f7fe fc4a 	bl	8001240 <HAL_GetTick>
 80029ac:	1b80      	subs	r0, r0, r6
 80029ae:	4540      	cmp	r0, r8
 80029b0:	d9f3      	bls.n	800299a <HAL_RCC_ClockConfig+0x9e>
        return HAL_TIMEOUT;
 80029b2:	2003      	movs	r0, #3
 80029b4:	e045      	b.n	8002a42 <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029b6:	4b29      	ldr	r3, [pc, #164]	; (8002a5c <HAL_RCC_ClockConfig+0x160>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80029be:	d1e0      	bne.n	8002982 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80029c0:	2001      	movs	r0, #1
 80029c2:	e03e      	b.n	8002a42 <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029c4:	4b25      	ldr	r3, [pc, #148]	; (8002a5c <HAL_RCC_ClockConfig+0x160>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80029cc:	d1d9      	bne.n	8002982 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80029ce:	2001      	movs	r0, #1
 80029d0:	e037      	b.n	8002a42 <HAL_RCC_ClockConfig+0x146>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029d2:	4b21      	ldr	r3, [pc, #132]	; (8002a58 <HAL_RCC_ClockConfig+0x15c>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0307 	and.w	r3, r3, #7
 80029da:	42ab      	cmp	r3, r5
 80029dc:	d90a      	bls.n	80029f4 <HAL_RCC_ClockConfig+0xf8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029de:	4a1e      	ldr	r2, [pc, #120]	; (8002a58 <HAL_RCC_ClockConfig+0x15c>)
 80029e0:	6813      	ldr	r3, [r2, #0]
 80029e2:	f023 0307 	bic.w	r3, r3, #7
 80029e6:	432b      	orrs	r3, r5
 80029e8:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ea:	6813      	ldr	r3, [r2, #0]
 80029ec:	f003 0307 	and.w	r3, r3, #7
 80029f0:	42ab      	cmp	r3, r5
 80029f2:	d12e      	bne.n	8002a52 <HAL_RCC_ClockConfig+0x156>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029f4:	6823      	ldr	r3, [r4, #0]
 80029f6:	f013 0f04 	tst.w	r3, #4
 80029fa:	d006      	beq.n	8002a0a <HAL_RCC_ClockConfig+0x10e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029fc:	4a17      	ldr	r2, [pc, #92]	; (8002a5c <HAL_RCC_ClockConfig+0x160>)
 80029fe:	6853      	ldr	r3, [r2, #4]
 8002a00:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002a04:	68e1      	ldr	r1, [r4, #12]
 8002a06:	430b      	orrs	r3, r1
 8002a08:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a0a:	6823      	ldr	r3, [r4, #0]
 8002a0c:	f013 0f08 	tst.w	r3, #8
 8002a10:	d007      	beq.n	8002a22 <HAL_RCC_ClockConfig+0x126>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a12:	4a12      	ldr	r2, [pc, #72]	; (8002a5c <HAL_RCC_ClockConfig+0x160>)
 8002a14:	6853      	ldr	r3, [r2, #4]
 8002a16:	6921      	ldr	r1, [r4, #16]
 8002a18:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002a1c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002a20:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a22:	f7ff ff35 	bl	8002890 <HAL_RCC_GetSysClockFreq>
 8002a26:	4b0d      	ldr	r3, [pc, #52]	; (8002a5c <HAL_RCC_ClockConfig+0x160>)
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002a2e:	4a0c      	ldr	r2, [pc, #48]	; (8002a60 <HAL_RCC_ClockConfig+0x164>)
 8002a30:	5cd3      	ldrb	r3, [r2, r3]
 8002a32:	40d8      	lsrs	r0, r3
 8002a34:	4b0b      	ldr	r3, [pc, #44]	; (8002a64 <HAL_RCC_ClockConfig+0x168>)
 8002a36:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8002a38:	4b0b      	ldr	r3, [pc, #44]	; (8002a68 <HAL_RCC_ClockConfig+0x16c>)
 8002a3a:	6818      	ldr	r0, [r3, #0]
 8002a3c:	f7fe fbbc 	bl	80011b8 <HAL_InitTick>
  return HAL_OK;
 8002a40:	2000      	movs	r0, #0
}
 8002a42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8002a46:	2001      	movs	r0, #1
}
 8002a48:	4770      	bx	lr
    return HAL_ERROR;
 8002a4a:	2001      	movs	r0, #1
 8002a4c:	e7f9      	b.n	8002a42 <HAL_RCC_ClockConfig+0x146>
        return HAL_ERROR;
 8002a4e:	2001      	movs	r0, #1
 8002a50:	e7f7      	b.n	8002a42 <HAL_RCC_ClockConfig+0x146>
    return HAL_ERROR;
 8002a52:	2001      	movs	r0, #1
 8002a54:	e7f5      	b.n	8002a42 <HAL_RCC_ClockConfig+0x146>
 8002a56:	bf00      	nop
 8002a58:	40022000 	.word	0x40022000
 8002a5c:	40021000 	.word	0x40021000
 8002a60:	080057a8 	.word	0x080057a8
 8002a64:	20000000 	.word	0x20000000
 8002a68:	20000008 	.word	0x20000008

08002a6c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a6c:	4b04      	ldr	r3, [pc, #16]	; (8002a80 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002a74:	4a03      	ldr	r2, [pc, #12]	; (8002a84 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002a76:	5cd3      	ldrb	r3, [r2, r3]
 8002a78:	4a03      	ldr	r2, [pc, #12]	; (8002a88 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002a7a:	6810      	ldr	r0, [r2, #0]
}
 8002a7c:	40d8      	lsrs	r0, r3
 8002a7e:	4770      	bx	lr
 8002a80:	40021000 	.word	0x40021000
 8002a84:	080057b8 	.word	0x080057b8
 8002a88:	20000000 	.word	0x20000000

08002a8c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a8c:	4b04      	ldr	r3, [pc, #16]	; (8002aa0 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002a94:	4a03      	ldr	r2, [pc, #12]	; (8002aa4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002a96:	5cd3      	ldrb	r3, [r2, r3]
 8002a98:	4a03      	ldr	r2, [pc, #12]	; (8002aa8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002a9a:	6810      	ldr	r0, [r2, #0]
}
 8002a9c:	40d8      	lsrs	r0, r3
 8002a9e:	4770      	bx	lr
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	080057b8 	.word	0x080057b8
 8002aa8:	20000000 	.word	0x20000000

08002aac <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ab0:	b082      	sub	sp, #8
 8002ab2:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002ab4:	6803      	ldr	r3, [r0, #0]
 8002ab6:	f013 0f01 	tst.w	r3, #1
 8002aba:	d034      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002abc:	4b3e      	ldr	r3, [pc, #248]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8002abe:	69db      	ldr	r3, [r3, #28]
 8002ac0:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002ac4:	d147      	bne.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0xaa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ac6:	4b3c      	ldr	r3, [pc, #240]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8002ac8:	69da      	ldr	r2, [r3, #28]
 8002aca:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002ace:	61da      	str	r2, [r3, #28]
 8002ad0:	69db      	ldr	r3, [r3, #28]
 8002ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad6:	9301      	str	r3, [sp, #4]
 8002ad8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002ada:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002adc:	4b37      	ldr	r3, [pc, #220]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002ae4:	d039      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ae6:	4b34      	ldr	r3, [pc, #208]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002aea:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002aee:	d011      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8002af0:	6862      	ldr	r2, [r4, #4]
 8002af2:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d00c      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x68>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002afa:	4a2f      	ldr	r2, [pc, #188]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8002afc:	6a13      	ldr	r3, [r2, #32]
 8002afe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b02:	492f      	ldr	r1, [pc, #188]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8002b04:	2601      	movs	r6, #1
 8002b06:	600e      	str	r6, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b08:	2600      	movs	r6, #0
 8002b0a:	600e      	str	r6, [r1, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b0c:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b0e:	f013 0f01 	tst.w	r3, #1
 8002b12:	d136      	bne.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0xd6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b14:	4a28      	ldr	r2, [pc, #160]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8002b16:	6a13      	ldr	r3, [r2, #32]
 8002b18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b1c:	6861      	ldr	r1, [r4, #4]
 8002b1e:	430b      	orrs	r3, r1
 8002b20:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b22:	2d00      	cmp	r5, #0
 8002b24:	d13e      	bne.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b26:	6823      	ldr	r3, [r4, #0]
 8002b28:	f013 0f02 	tst.w	r3, #2
 8002b2c:	d006      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b2e:	4a22      	ldr	r2, [pc, #136]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8002b30:	6853      	ldr	r3, [r2, #4]
 8002b32:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002b36:	68a1      	ldr	r1, [r4, #8]
 8002b38:	430b      	orrs	r3, r1
 8002b3a:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002b3c:	6823      	ldr	r3, [r4, #0]
 8002b3e:	f013 0f10 	tst.w	r3, #16
 8002b42:	d034      	beq.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b44:	4a1c      	ldr	r2, [pc, #112]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8002b46:	6853      	ldr	r3, [r2, #4]
 8002b48:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002b4c:	68e1      	ldr	r1, [r4, #12]
 8002b4e:	430b      	orrs	r3, r1
 8002b50:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002b52:	2000      	movs	r0, #0
 8002b54:	e02c      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x104>
    FlagStatus       pwrclkchanged = RESET;
 8002b56:	2500      	movs	r5, #0
 8002b58:	e7c0      	b.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x30>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b5a:	4a18      	ldr	r2, [pc, #96]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8002b5c:	6813      	ldr	r3, [r2, #0]
 8002b5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b62:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002b64:	f7fe fb6c 	bl	8001240 <HAL_GetTick>
 8002b68:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b6a:	4f14      	ldr	r7, [pc, #80]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002b72:	d1b8      	bne.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b74:	f7fe fb64 	bl	8001240 <HAL_GetTick>
 8002b78:	1b80      	subs	r0, r0, r6
 8002b7a:	2864      	cmp	r0, #100	; 0x64
 8002b7c:	d9f6      	bls.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 8002b7e:	2003      	movs	r0, #3
 8002b80:	e016      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x104>
        tickstart = HAL_GetTick();
 8002b82:	f7fe fb5d 	bl	8001240 <HAL_GetTick>
 8002b86:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b88:	4f0b      	ldr	r7, [pc, #44]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b8a:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b8e:	6a3b      	ldr	r3, [r7, #32]
 8002b90:	f013 0f02 	tst.w	r3, #2
 8002b94:	d1be      	bne.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x68>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b96:	f7fe fb53 	bl	8001240 <HAL_GetTick>
 8002b9a:	1b80      	subs	r0, r0, r6
 8002b9c:	4540      	cmp	r0, r8
 8002b9e:	d9f6      	bls.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0xe2>
            return HAL_TIMEOUT;
 8002ba0:	2003      	movs	r0, #3
 8002ba2:	e005      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x104>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ba4:	69d3      	ldr	r3, [r2, #28]
 8002ba6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002baa:	61d3      	str	r3, [r2, #28]
 8002bac:	e7bb      	b.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
  return HAL_OK;
 8002bae:	2000      	movs	r0, #0
}
 8002bb0:	b002      	add	sp, #8
 8002bb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002bb6:	bf00      	nop
 8002bb8:	40021000 	.word	0x40021000
 8002bbc:	40007000 	.word	0x40007000
 8002bc0:	42420440 	.word	0x42420440

08002bc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bc4:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bc6:	6a03      	ldr	r3, [r0, #32]
 8002bc8:	f023 0301 	bic.w	r3, r3, #1
 8002bcc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bce:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bd0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bd2:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002bd4:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bd8:	680d      	ldr	r5, [r1, #0]
 8002bda:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002bdc:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002be0:	688d      	ldr	r5, [r1, #8]
 8002be2:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002be4:	4d0b      	ldr	r5, [pc, #44]	; (8002c14 <TIM_OC1_SetConfig+0x50>)
 8002be6:	42a8      	cmp	r0, r5
 8002be8:	d006      	beq.n	8002bf8 <TIM_OC1_SetConfig+0x34>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bea:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002bec:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002bee:	684a      	ldr	r2, [r1, #4]
 8002bf0:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bf2:	6203      	str	r3, [r0, #32]
}
 8002bf4:	bc70      	pop	{r4, r5, r6}
 8002bf6:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8002bf8:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8002bfc:	68cd      	ldr	r5, [r1, #12]
 8002bfe:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c00:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c04:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c08:	694d      	ldr	r5, [r1, #20]
 8002c0a:	698e      	ldr	r6, [r1, #24]
 8002c0c:	4335      	orrs	r5, r6
 8002c0e:	432c      	orrs	r4, r5
 8002c10:	e7eb      	b.n	8002bea <TIM_OC1_SetConfig+0x26>
 8002c12:	bf00      	nop
 8002c14:	40012c00 	.word	0x40012c00

08002c18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c18:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c1a:	6a03      	ldr	r3, [r0, #32]
 8002c1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c20:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c22:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c24:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c26:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c28:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c2c:	680d      	ldr	r5, [r1, #0]
 8002c2e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002c30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c34:	688d      	ldr	r5, [r1, #8]
 8002c36:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c3a:	4d0c      	ldr	r5, [pc, #48]	; (8002c6c <TIM_OC3_SetConfig+0x54>)
 8002c3c:	42a8      	cmp	r0, r5
 8002c3e:	d006      	beq.n	8002c4e <TIM_OC3_SetConfig+0x36>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c40:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c42:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c44:	684a      	ldr	r2, [r1, #4]
 8002c46:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c48:	6203      	str	r3, [r0, #32]
}
 8002c4a:	bc70      	pop	{r4, r5, r6}
 8002c4c:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c52:	68cd      	ldr	r5, [r1, #12]
 8002c54:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c5c:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c60:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c62:	698e      	ldr	r6, [r1, #24]
 8002c64:	4335      	orrs	r5, r6
 8002c66:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 8002c6a:	e7e9      	b.n	8002c40 <TIM_OC3_SetConfig+0x28>
 8002c6c:	40012c00 	.word	0x40012c00

08002c70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c70:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c72:	6a03      	ldr	r3, [r0, #32]
 8002c74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c78:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c7a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c7c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c7e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c80:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c84:	680d      	ldr	r5, [r1, #0]
 8002c86:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c8e:	688d      	ldr	r5, [r1, #8]
 8002c90:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c94:	4d07      	ldr	r5, [pc, #28]	; (8002cb4 <TIM_OC4_SetConfig+0x44>)
 8002c96:	42a8      	cmp	r0, r5
 8002c98:	d006      	beq.n	8002ca8 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c9a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c9c:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c9e:	684a      	ldr	r2, [r1, #4]
 8002ca0:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ca2:	6203      	str	r3, [r0, #32]
}
 8002ca4:	bc30      	pop	{r4, r5}
 8002ca6:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ca8:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002cac:	694d      	ldr	r5, [r1, #20]
 8002cae:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8002cb2:	e7f2      	b.n	8002c9a <TIM_OC4_SetConfig+0x2a>
 8002cb4:	40012c00 	.word	0x40012c00

08002cb8 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8002cb8:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cba:	4a25      	ldr	r2, [pc, #148]	; (8002d50 <TIM_Base_SetConfig+0x98>)
 8002cbc:	4290      	cmp	r0, r2
 8002cbe:	d014      	beq.n	8002cea <TIM_Base_SetConfig+0x32>
 8002cc0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002cc4:	d02b      	beq.n	8002d1e <TIM_Base_SetConfig+0x66>
 8002cc6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002cca:	4290      	cmp	r0, r2
 8002ccc:	d022      	beq.n	8002d14 <TIM_Base_SetConfig+0x5c>
 8002cce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002cd2:	4290      	cmp	r0, r2
 8002cd4:	d037      	beq.n	8002d46 <TIM_Base_SetConfig+0x8e>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cda:	694a      	ldr	r2, [r1, #20]
 8002cdc:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002cde:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ce0:	688b      	ldr	r3, [r1, #8]
 8002ce2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002ce4:	680b      	ldr	r3, [r1, #0]
 8002ce6:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ce8:	e02a      	b.n	8002d40 <TIM_Base_SetConfig+0x88>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002cee:	684a      	ldr	r2, [r1, #4]
 8002cf0:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cf6:	68ca      	ldr	r2, [r1, #12]
 8002cf8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cfe:	694a      	ldr	r2, [r1, #20]
 8002d00:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002d02:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d04:	688b      	ldr	r3, [r1, #8]
 8002d06:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002d08:	680b      	ldr	r3, [r1, #0]
 8002d0a:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8002d0c:	690a      	ldr	r2, [r1, #16]
 8002d0e:	4b10      	ldr	r3, [pc, #64]	; (8002d50 <TIM_Base_SetConfig+0x98>)
 8002d10:	631a      	str	r2, [r3, #48]	; 0x30
 8002d12:	e015      	b.n	8002d40 <TIM_Base_SetConfig+0x88>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002d18:	684a      	ldr	r2, [r1, #4]
 8002d1a:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d1c:	e003      	b.n	8002d26 <TIM_Base_SetConfig+0x6e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002d22:	684a      	ldr	r2, [r1, #4]
 8002d24:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d2a:	68ca      	ldr	r2, [r1, #12]
 8002d2c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d32:	694a      	ldr	r2, [r1, #20]
 8002d34:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002d36:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d38:	688b      	ldr	r3, [r1, #8]
 8002d3a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002d3c:	680b      	ldr	r3, [r1, #0]
 8002d3e:	6283      	str	r3, [r0, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8002d40:	2301      	movs	r3, #1
 8002d42:	6143      	str	r3, [r0, #20]
}
 8002d44:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002d4a:	684a      	ldr	r2, [r1, #4]
 8002d4c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d4e:	e7ea      	b.n	8002d26 <TIM_Base_SetConfig+0x6e>
 8002d50:	40012c00 	.word	0x40012c00

08002d54 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8002d54:	b340      	cbz	r0, 8002da8 <HAL_TIM_PWM_Init+0x54>
{
 8002d56:	b510      	push	{r4, lr}
 8002d58:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002d5a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002d5e:	b1f3      	cbz	r3, 8002d9e <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8002d60:	2302      	movs	r3, #2
 8002d62:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d66:	4621      	mov	r1, r4
 8002d68:	f851 0b04 	ldr.w	r0, [r1], #4
 8002d6c:	f7ff ffa4 	bl	8002cb8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d70:	2301      	movs	r3, #1
 8002d72:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d76:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002d7a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002d7e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002d82:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d86:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d8e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002d92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002d96:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002d9a:	2000      	movs	r0, #0
}
 8002d9c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002d9e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002da2:	f7fe f835 	bl	8000e10 <HAL_TIM_PWM_MspInit>
 8002da6:	e7db      	b.n	8002d60 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8002da8:	2001      	movs	r0, #1
}
 8002daa:	4770      	bx	lr

08002dac <TIM_OC2_SetConfig>:
{
 8002dac:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dae:	6a03      	ldr	r3, [r0, #32]
 8002db0:	f023 0310 	bic.w	r3, r3, #16
 8002db4:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002db6:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002db8:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002dba:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002dbc:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002dc0:	680d      	ldr	r5, [r1, #0]
 8002dc2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8002dc6:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002dca:	688d      	ldr	r5, [r1, #8]
 8002dcc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002dd0:	4d0c      	ldr	r5, [pc, #48]	; (8002e04 <TIM_OC2_SetConfig+0x58>)
 8002dd2:	42a8      	cmp	r0, r5
 8002dd4:	d006      	beq.n	8002de4 <TIM_OC2_SetConfig+0x38>
  TIMx->CR2 = tmpcr2;
 8002dd6:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002dd8:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002dda:	684a      	ldr	r2, [r1, #4]
 8002ddc:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002dde:	6203      	str	r3, [r0, #32]
}
 8002de0:	bc70      	pop	{r4, r5, r6}
 8002de2:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8002de4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002de8:	68cd      	ldr	r5, [r1, #12]
 8002dea:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8002dee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002df2:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002df6:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002df8:	698e      	ldr	r6, [r1, #24]
 8002dfa:	4335      	orrs	r5, r6
 8002dfc:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8002e00:	e7e9      	b.n	8002dd6 <TIM_OC2_SetConfig+0x2a>
 8002e02:	bf00      	nop
 8002e04:	40012c00 	.word	0x40012c00

08002e08 <HAL_TIM_PWM_ConfigChannel>:
{
 8002e08:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002e0a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d060      	beq.n	8002ed4 <HAL_TIM_PWM_ConfigChannel+0xcc>
 8002e12:	4604      	mov	r4, r0
 8002e14:	460d      	mov	r5, r1
 8002e16:	2301      	movs	r3, #1
 8002e18:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8002e1c:	2a0c      	cmp	r2, #12
 8002e1e:	d81a      	bhi.n	8002e56 <HAL_TIM_PWM_ConfigChannel+0x4e>
 8002e20:	e8df f002 	tbb	[pc, r2]
 8002e24:	19191907 	.word	0x19191907
 8002e28:	1919191d 	.word	0x1919191d
 8002e2c:	19191931 	.word	0x19191931
 8002e30:	44          	.byte	0x44
 8002e31:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e32:	6800      	ldr	r0, [r0, #0]
 8002e34:	f7ff fec6 	bl	8002bc4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e38:	6822      	ldr	r2, [r4, #0]
 8002e3a:	6993      	ldr	r3, [r2, #24]
 8002e3c:	f043 0308 	orr.w	r3, r3, #8
 8002e40:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e42:	6822      	ldr	r2, [r4, #0]
 8002e44:	6993      	ldr	r3, [r2, #24]
 8002e46:	f023 0304 	bic.w	r3, r3, #4
 8002e4a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e4c:	6822      	ldr	r2, [r4, #0]
 8002e4e:	6993      	ldr	r3, [r2, #24]
 8002e50:	6929      	ldr	r1, [r5, #16]
 8002e52:	430b      	orrs	r3, r1
 8002e54:	6193      	str	r3, [r2, #24]
  __HAL_UNLOCK(htim);
 8002e56:	2000      	movs	r0, #0
 8002e58:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002e5c:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e5e:	6800      	ldr	r0, [r0, #0]
 8002e60:	f7ff ffa4 	bl	8002dac <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e64:	6822      	ldr	r2, [r4, #0]
 8002e66:	6993      	ldr	r3, [r2, #24]
 8002e68:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e6c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e6e:	6822      	ldr	r2, [r4, #0]
 8002e70:	6993      	ldr	r3, [r2, #24]
 8002e72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e76:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e78:	6822      	ldr	r2, [r4, #0]
 8002e7a:	6993      	ldr	r3, [r2, #24]
 8002e7c:	6929      	ldr	r1, [r5, #16]
 8002e7e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002e82:	6193      	str	r3, [r2, #24]
      break;
 8002e84:	e7e7      	b.n	8002e56 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e86:	6800      	ldr	r0, [r0, #0]
 8002e88:	f7ff fec6 	bl	8002c18 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e8c:	6822      	ldr	r2, [r4, #0]
 8002e8e:	69d3      	ldr	r3, [r2, #28]
 8002e90:	f043 0308 	orr.w	r3, r3, #8
 8002e94:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e96:	6822      	ldr	r2, [r4, #0]
 8002e98:	69d3      	ldr	r3, [r2, #28]
 8002e9a:	f023 0304 	bic.w	r3, r3, #4
 8002e9e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002ea0:	6822      	ldr	r2, [r4, #0]
 8002ea2:	69d3      	ldr	r3, [r2, #28]
 8002ea4:	6929      	ldr	r1, [r5, #16]
 8002ea6:	430b      	orrs	r3, r1
 8002ea8:	61d3      	str	r3, [r2, #28]
      break;
 8002eaa:	e7d4      	b.n	8002e56 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002eac:	6800      	ldr	r0, [r0, #0]
 8002eae:	f7ff fedf 	bl	8002c70 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002eb2:	6822      	ldr	r2, [r4, #0]
 8002eb4:	69d3      	ldr	r3, [r2, #28]
 8002eb6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002eba:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ebc:	6822      	ldr	r2, [r4, #0]
 8002ebe:	69d3      	ldr	r3, [r2, #28]
 8002ec0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ec4:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ec6:	6822      	ldr	r2, [r4, #0]
 8002ec8:	69d3      	ldr	r3, [r2, #28]
 8002eca:	6929      	ldr	r1, [r5, #16]
 8002ecc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002ed0:	61d3      	str	r3, [r2, #28]
      break;
 8002ed2:	e7c0      	b.n	8002e56 <HAL_TIM_PWM_ConfigChannel+0x4e>
  __HAL_LOCK(htim);
 8002ed4:	2002      	movs	r0, #2
 8002ed6:	e7c1      	b.n	8002e5c <HAL_TIM_PWM_ConfigChannel+0x54>

08002ed8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002ed8:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002eda:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002ede:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002ee0:	2401      	movs	r4, #1
 8002ee2:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8002ee4:	ea23 0304 	bic.w	r3, r3, r4
 8002ee8:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002eea:	6a03      	ldr	r3, [r0, #32]
 8002eec:	408a      	lsls	r2, r1
 8002eee:	431a      	orrs	r2, r3
 8002ef0:	6202      	str	r2, [r0, #32]
}
 8002ef2:	bc10      	pop	{r4}
 8002ef4:	4770      	bx	lr
	...

08002ef8 <HAL_TIM_PWM_Start>:
{
 8002ef8:	b510      	push	{r4, lr}
 8002efa:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002efc:	460b      	mov	r3, r1
 8002efe:	bb01      	cbnz	r1, 8002f42 <HAL_TIM_PWM_Start+0x4a>
 8002f00:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8002f04:	b2d2      	uxtb	r2, r2
 8002f06:	2a01      	cmp	r2, #1
 8002f08:	d14c      	bne.n	8002fa4 <HAL_TIM_PWM_Start+0xac>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f10:	2201      	movs	r2, #1
 8002f12:	4619      	mov	r1, r3
 8002f14:	6820      	ldr	r0, [r4, #0]
 8002f16:	f7ff ffdf 	bl	8002ed8 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f1a:	6823      	ldr	r3, [r4, #0]
 8002f1c:	4a26      	ldr	r2, [pc, #152]	; (8002fb8 <HAL_TIM_PWM_Start+0xc0>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d02e      	beq.n	8002f80 <HAL_TIM_PWM_Start+0x88>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f26:	d032      	beq.n	8002f8e <HAL_TIM_PWM_Start+0x96>
 8002f28:	4a24      	ldr	r2, [pc, #144]	; (8002fbc <HAL_TIM_PWM_Start+0xc4>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d02f      	beq.n	8002f8e <HAL_TIM_PWM_Start+0x96>
 8002f2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d02b      	beq.n	8002f8e <HAL_TIM_PWM_Start+0x96>
    __HAL_TIM_ENABLE(htim);
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	f042 0201 	orr.w	r2, r2, #1
 8002f3c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002f3e:	2000      	movs	r0, #0
 8002f40:	e02f      	b.n	8002fa2 <HAL_TIM_PWM_Start+0xaa>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002f42:	2904      	cmp	r1, #4
 8002f44:	d00a      	beq.n	8002f5c <HAL_TIM_PWM_Start+0x64>
 8002f46:	2908      	cmp	r1, #8
 8002f48:	d011      	beq.n	8002f6e <HAL_TIM_PWM_Start+0x76>
 8002f4a:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002f4e:	b2d2      	uxtb	r2, r2
 8002f50:	2a01      	cmp	r2, #1
 8002f52:	d12d      	bne.n	8002fb0 <HAL_TIM_PWM_Start+0xb8>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f54:	2202      	movs	r2, #2
 8002f56:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
 8002f5a:	e7d9      	b.n	8002f10 <HAL_TIM_PWM_Start+0x18>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002f5c:	f890 203f 	ldrb.w	r2, [r0, #63]	; 0x3f
 8002f60:	b2d2      	uxtb	r2, r2
 8002f62:	2a01      	cmp	r2, #1
 8002f64:	d120      	bne.n	8002fa8 <HAL_TIM_PWM_Start+0xb0>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f66:	2202      	movs	r2, #2
 8002f68:	f880 203f 	strb.w	r2, [r0, #63]	; 0x3f
 8002f6c:	e7d0      	b.n	8002f10 <HAL_TIM_PWM_Start+0x18>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002f6e:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8002f72:	b2d2      	uxtb	r2, r2
 8002f74:	2a01      	cmp	r2, #1
 8002f76:	d119      	bne.n	8002fac <HAL_TIM_PWM_Start+0xb4>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f78:	2202      	movs	r2, #2
 8002f7a:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
 8002f7e:	e7c7      	b.n	8002f10 <HAL_TIM_PWM_Start+0x18>
    __HAL_TIM_MOE_ENABLE(htim);
 8002f80:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8002f82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f86:	6453      	str	r3, [r2, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f88:	6823      	ldr	r3, [r4, #0]
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d1c9      	bne.n	8002f22 <HAL_TIM_PWM_Start+0x2a>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f8e:	689a      	ldr	r2, [r3, #8]
 8002f90:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f94:	2a06      	cmp	r2, #6
 8002f96:	d00d      	beq.n	8002fb4 <HAL_TIM_PWM_Start+0xbc>
      __HAL_TIM_ENABLE(htim);
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	f042 0201 	orr.w	r2, r2, #1
 8002f9e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002fa0:	2000      	movs	r0, #0
}
 8002fa2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002fa4:	2001      	movs	r0, #1
 8002fa6:	e7fc      	b.n	8002fa2 <HAL_TIM_PWM_Start+0xaa>
 8002fa8:	2001      	movs	r0, #1
 8002faa:	e7fa      	b.n	8002fa2 <HAL_TIM_PWM_Start+0xaa>
 8002fac:	2001      	movs	r0, #1
 8002fae:	e7f8      	b.n	8002fa2 <HAL_TIM_PWM_Start+0xaa>
 8002fb0:	2001      	movs	r0, #1
 8002fb2:	e7f6      	b.n	8002fa2 <HAL_TIM_PWM_Start+0xaa>
  return HAL_OK;
 8002fb4:	2000      	movs	r0, #0
 8002fb6:	e7f4      	b.n	8002fa2 <HAL_TIM_PWM_Start+0xaa>
 8002fb8:	40012c00 	.word	0x40012c00
 8002fbc:	40000400 	.word	0x40000400

08002fc0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fc0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d02b      	beq.n	8003020 <HAL_TIMEx_MasterConfigSynchronization+0x60>
{
 8002fc8:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8002fca:	2301      	movs	r3, #1
 8002fcc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fd6:	6804      	ldr	r4, [r0, #0]
 8002fd8:	6863      	ldr	r3, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fda:	68a2      	ldr	r2, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fe0:	680d      	ldr	r5, [r1, #0]
 8002fe2:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fe4:	6063      	str	r3, [r4, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fe6:	6803      	ldr	r3, [r0, #0]
 8002fe8:	4c0e      	ldr	r4, [pc, #56]	; (8003024 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8002fea:	42a3      	cmp	r3, r4
 8002fec:	d00a      	beq.n	8003004 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8002fee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ff2:	d007      	beq.n	8003004 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8002ff4:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8002ff8:	42a3      	cmp	r3, r4
 8002ffa:	d003      	beq.n	8003004 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8002ffc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003000:	42a3      	cmp	r3, r4
 8003002:	d104      	bne.n	800300e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003004:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003008:	6849      	ldr	r1, [r1, #4]
 800300a:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800300c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800300e:	2301      	movs	r3, #1
 8003010:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003014:	2300      	movs	r3, #0
 8003016:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 800301a:	4618      	mov	r0, r3
}
 800301c:	bc30      	pop	{r4, r5}
 800301e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003020:	2002      	movs	r0, #2
}
 8003022:	4770      	bx	lr
 8003024:	40012c00 	.word	0x40012c00

08003028 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003028:	b510      	push	{r4, lr}
 800302a:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800302c:	6802      	ldr	r2, [r0, #0]
 800302e:	6913      	ldr	r3, [r2, #16]
 8003030:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003034:	68c1      	ldr	r1, [r0, #12]
 8003036:	430b      	orrs	r3, r1
 8003038:	6113      	str	r3, [r2, #16]
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
  MODIFY_REG(huart->Instance->CR1,
 800303a:	6801      	ldr	r1, [r0, #0]
 800303c:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800303e:	6883      	ldr	r3, [r0, #8]
 8003040:	6900      	ldr	r0, [r0, #16]
 8003042:	4303      	orrs	r3, r0
 8003044:	6960      	ldr	r0, [r4, #20]
 8003046:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8003048:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 800304c:	f022 020c 	bic.w	r2, r2, #12
 8003050:	4313      	orrs	r3, r2
 8003052:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003054:	6822      	ldr	r2, [r4, #0]
 8003056:	6953      	ldr	r3, [r2, #20]
 8003058:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800305c:	69a1      	ldr	r1, [r4, #24]
 800305e:	430b      	orrs	r3, r1
 8003060:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 8003062:	6822      	ldr	r2, [r4, #0]
 8003064:	4b10      	ldr	r3, [pc, #64]	; (80030a8 <UART_SetConfig+0x80>)
 8003066:	429a      	cmp	r2, r3
 8003068:	d01a      	beq.n	80030a0 <UART_SetConfig+0x78>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800306a:	f7ff fcff 	bl	8002a6c <HAL_RCC_GetPCLK1Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800306e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003072:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003076:	6863      	ldr	r3, [r4, #4]
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	fbb0 f3f3 	udiv	r3, r0, r3
 800307e:	6824      	ldr	r4, [r4, #0]
 8003080:	480a      	ldr	r0, [pc, #40]	; (80030ac <UART_SetConfig+0x84>)
 8003082:	fba0 2103 	umull	r2, r1, r0, r3
 8003086:	0949      	lsrs	r1, r1, #5
 8003088:	2264      	movs	r2, #100	; 0x64
 800308a:	fb02 3311 	mls	r3, r2, r1, r3
 800308e:	011b      	lsls	r3, r3, #4
 8003090:	3332      	adds	r3, #50	; 0x32
 8003092:	fba0 2303 	umull	r2, r3, r0, r3
 8003096:	0109      	lsls	r1, r1, #4
 8003098:	eb01 1353 	add.w	r3, r1, r3, lsr #5
 800309c:	60a3      	str	r3, [r4, #8]
#endif /* USART_CR1_OVER8 */
}
 800309e:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 80030a0:	f7ff fcf4 	bl	8002a8c <HAL_RCC_GetPCLK2Freq>
 80030a4:	e7e3      	b.n	800306e <UART_SetConfig+0x46>
 80030a6:	bf00      	nop
 80030a8:	40013800 	.word	0x40013800
 80030ac:	51eb851f 	.word	0x51eb851f

080030b0 <HAL_UART_Init>:
  if (huart == NULL)
 80030b0:	b358      	cbz	r0, 800310a <HAL_UART_Init+0x5a>
{
 80030b2:	b510      	push	{r4, lr}
 80030b4:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80030b6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80030ba:	b30b      	cbz	r3, 8003100 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80030bc:	2324      	movs	r3, #36	; 0x24
 80030be:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80030c2:	6822      	ldr	r2, [r4, #0]
 80030c4:	68d3      	ldr	r3, [r2, #12]
 80030c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80030ca:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80030cc:	4620      	mov	r0, r4
 80030ce:	f7ff ffab 	bl	8003028 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030d2:	6822      	ldr	r2, [r4, #0]
 80030d4:	6913      	ldr	r3, [r2, #16]
 80030d6:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80030da:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030dc:	6822      	ldr	r2, [r4, #0]
 80030de:	6953      	ldr	r3, [r2, #20]
 80030e0:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80030e4:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80030e6:	6822      	ldr	r2, [r4, #0]
 80030e8:	68d3      	ldr	r3, [r2, #12]
 80030ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80030ee:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030f0:	2000      	movs	r0, #0
 80030f2:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80030f4:	2320      	movs	r3, #32
 80030f6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80030fa:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 80030fe:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8003100:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8003104:	f7fd ffc6 	bl	8001094 <HAL_UART_MspInit>
 8003108:	e7d8      	b.n	80030bc <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800310a:	2001      	movs	r0, #1
}
 800310c:	4770      	bx	lr

0800310e <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800310e:	b084      	sub	sp, #16
 8003110:	a801      	add	r0, sp, #4
 8003112:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8003116:	2000      	movs	r0, #0
 8003118:	b004      	add	sp, #16
 800311a:	4770      	bx	lr

0800311c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800311c:	4603      	mov	r3, r0
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800311e:	2000      	movs	r0, #0
 8003120:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003124:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
 8003128:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 800312c:	4770      	bx	lr

0800312e <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800312e:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8003132:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003136:	045b      	lsls	r3, r3, #17
 8003138:	0c5b      	lsrs	r3, r3, #17
 800313a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 800313e:	2000      	movs	r0, #0
 8003140:	4770      	bx	lr

08003142 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8003142:	2000      	movs	r0, #0
 8003144:	4770      	bx	lr

08003146 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003146:	b084      	sub	sp, #16
 8003148:	b410      	push	{r4}
 800314a:	4604      	mov	r4, r0
 800314c:	a802      	add	r0, sp, #8
 800314e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003152:	2301      	movs	r3, #1
 8003154:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003158:	2000      	movs	r0, #0
 800315a:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800315e:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003162:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50

  return HAL_OK;
}
 8003166:	bc10      	pop	{r4}
 8003168:	b004      	add	sp, #16
 800316a:	4770      	bx	lr

0800316c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800316c:	b470      	push	{r4, r5, r6}
 800316e:	4603      	mov	r3, r0
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003170:	780d      	ldrb	r5, [r1, #0]
 8003172:	f830 2025 	ldrh.w	r2, [r0, r5, lsl #2]
 8003176:	b292      	uxth	r2, r2
 8003178:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 800317c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003180:	b292      	uxth	r2, r2

  /* initialize Endpoint */
  switch (ep->type)
 8003182:	78c8      	ldrb	r0, [r1, #3]
 8003184:	2803      	cmp	r0, #3
 8003186:	d85b      	bhi.n	8003240 <USB_ActivateEndpoint+0xd4>
 8003188:	e8df f000 	tbb	[pc, r0]
 800318c:	5202564f 	.word	0x5202564f
 8003190:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003192:	f248 0480 	movw	r4, #32896	; 0x8080
 8003196:	4322      	orrs	r2, r4
 8003198:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800319c:	780d      	ldrb	r5, [r1, #0]
 800319e:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 80031a2:	b292      	uxth	r2, r2
 80031a4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80031a8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80031ac:	432a      	orrs	r2, r5
 80031ae:	4322      	orrs	r2, r4
 80031b0:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

  if (ep->doublebuffer == 0U)
 80031b4:	7b0a      	ldrb	r2, [r1, #12]
 80031b6:	2a00      	cmp	r2, #0
 80031b8:	f040 80a3 	bne.w	8003302 <USB_ActivateEndpoint+0x196>
  {
    if (ep->is_in != 0U)
 80031bc:	784a      	ldrb	r2, [r1, #1]
 80031be:	2a00      	cmp	r2, #0
 80031c0:	d040      	beq.n	8003244 <USB_ActivateEndpoint+0xd8>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80031c2:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 80031c6:	b2ad      	uxth	r5, r5
 80031c8:	780a      	ldrb	r2, [r1, #0]
 80031ca:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80031ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80031d2:	88cc      	ldrh	r4, [r1, #6]
 80031d4:	0864      	lsrs	r4, r4, #1
 80031d6:	0064      	lsls	r4, r4, #1
 80031d8:	5354      	strh	r4, [r2, r5]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80031da:	780c      	ldrb	r4, [r1, #0]
 80031dc:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80031e0:	f012 0f40 	tst.w	r2, #64	; 0x40
 80031e4:	d00c      	beq.n	8003200 <USB_ActivateEndpoint+0x94>
 80031e6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80031ea:	b292      	uxth	r2, r2
 80031ec:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80031f0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80031f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031f8:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80031fc:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8003200:	78ca      	ldrb	r2, [r1, #3]
 8003202:	2a01      	cmp	r2, #1
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003204:	7809      	ldrb	r1, [r1, #0]
 8003206:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800320a:	b292      	uxth	r2, r2
 800320c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003210:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003214:	bf18      	it	ne
 8003216:	f082 0220 	eorne.w	r2, r2, #32
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800321a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800321e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003222:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 8003226:	bc70      	pop	{r4, r5, r6}
 8003228:	4770      	bx	lr
      wEpRegVal |= USB_EP_CONTROL;
 800322a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      break;
 800322e:	e7b0      	b.n	8003192 <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_INTERRUPT;
 8003230:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 8003234:	2000      	movs	r0, #0
      break;
 8003236:	e7ac      	b.n	8003192 <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003238:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  HAL_StatusTypeDef ret = HAL_OK;
 800323c:	2000      	movs	r0, #0
      break;
 800323e:	e7a8      	b.n	8003192 <USB_ActivateEndpoint+0x26>
      ret = HAL_ERROR;
 8003240:	2001      	movs	r0, #1
 8003242:	e7a6      	b.n	8003192 <USB_ActivateEndpoint+0x26>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003244:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8003248:	b2ad      	uxth	r5, r5
 800324a:	780a      	ldrb	r2, [r1, #0]
 800324c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8003250:	f502 6281 	add.w	r2, r2, #1032	; 0x408
 8003254:	88cc      	ldrh	r4, [r1, #6]
 8003256:	0864      	lsrs	r4, r4, #1
 8003258:	0064      	lsls	r4, r4, #1
 800325a:	5354      	strh	r4, [r2, r5]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800325c:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8003260:	b2ad      	uxth	r5, r5
 8003262:	780a      	ldrb	r2, [r1, #0]
 8003264:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8003268:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 800326c:	690c      	ldr	r4, [r1, #16]
 800326e:	bb84      	cbnz	r4, 80032d2 <USB_ActivateEndpoint+0x166>
 8003270:	5b54      	ldrh	r4, [r2, r5]
 8003272:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 8003276:	0424      	lsls	r4, r4, #16
 8003278:	0c24      	lsrs	r4, r4, #16
 800327a:	5354      	strh	r4, [r2, r5]
 800327c:	5b54      	ldrh	r4, [r2, r5]
 800327e:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 8003282:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8003286:	b2a4      	uxth	r4, r4
 8003288:	5354      	strh	r4, [r2, r5]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800328a:	780c      	ldrb	r4, [r1, #0]
 800328c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003290:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8003294:	d00c      	beq.n	80032b0 <USB_ActivateEndpoint+0x144>
 8003296:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800329a:	b292      	uxth	r2, r2
 800329c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80032a0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80032a4:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80032a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80032ac:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80032b0:	7809      	ldrb	r1, [r1, #0]
 80032b2:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80032b6:	b292      	uxth	r2, r2
 80032b8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80032bc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80032c0:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 80032c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80032cc:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 80032d0:	e7a9      	b.n	8003226 <USB_ActivateEndpoint+0xba>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80032d2:	2c3e      	cmp	r4, #62	; 0x3e
 80032d4:	d808      	bhi.n	80032e8 <USB_ActivateEndpoint+0x17c>
 80032d6:	0866      	lsrs	r6, r4, #1
 80032d8:	f014 0f01 	tst.w	r4, #1
 80032dc:	bf18      	it	ne
 80032de:	3601      	addne	r6, #1
 80032e0:	02b6      	lsls	r6, r6, #10
 80032e2:	b2b6      	uxth	r6, r6
 80032e4:	5356      	strh	r6, [r2, r5]
 80032e6:	e7d0      	b.n	800328a <USB_ActivateEndpoint+0x11e>
 80032e8:	0966      	lsrs	r6, r4, #5
 80032ea:	f014 0f1f 	tst.w	r4, #31
 80032ee:	bf08      	it	eq
 80032f0:	f106 36ff 	addeq.w	r6, r6, #4294967295
 80032f4:	ea6f 64c6 	mvn.w	r4, r6, lsl #27
 80032f8:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 80032fc:	b2a4      	uxth	r4, r4
 80032fe:	5354      	strh	r4, [r2, r5]
 8003300:	e7c3      	b.n	800328a <USB_ActivateEndpoint+0x11e>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003302:	780c      	ldrb	r4, [r1, #0]
 8003304:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003308:	b292      	uxth	r2, r2
 800330a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800330e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003312:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8003316:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800331a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800331e:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8003322:	b2ad      	uxth	r5, r5
 8003324:	780a      	ldrb	r2, [r1, #0]
 8003326:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800332a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800332e:	890c      	ldrh	r4, [r1, #8]
 8003330:	0864      	lsrs	r4, r4, #1
 8003332:	0064      	lsls	r4, r4, #1
 8003334:	5354      	strh	r4, [r2, r5]
 8003336:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 800333a:	b2ad      	uxth	r5, r5
 800333c:	780a      	ldrb	r2, [r1, #0]
 800333e:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8003342:	f502 6281 	add.w	r2, r2, #1032	; 0x408
 8003346:	894c      	ldrh	r4, [r1, #10]
 8003348:	0864      	lsrs	r4, r4, #1
 800334a:	0064      	lsls	r4, r4, #1
 800334c:	5354      	strh	r4, [r2, r5]
    if (ep->is_in == 0U)
 800334e:	784a      	ldrb	r2, [r1, #1]
 8003350:	2a00      	cmp	r2, #0
 8003352:	d140      	bne.n	80033d6 <USB_ActivateEndpoint+0x26a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003354:	780c      	ldrb	r4, [r1, #0]
 8003356:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800335a:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 800335e:	d00c      	beq.n	800337a <USB_ActivateEndpoint+0x20e>
 8003360:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003364:	b292      	uxth	r2, r2
 8003366:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800336a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800336e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003372:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003376:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800337a:	780c      	ldrb	r4, [r1, #0]
 800337c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003380:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003384:	d00c      	beq.n	80033a0 <USB_ActivateEndpoint+0x234>
 8003386:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800338a:	b292      	uxth	r2, r2
 800338c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003390:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003394:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003398:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800339c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80033a0:	780d      	ldrb	r5, [r1, #0]
 80033a2:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 80033a6:	b292      	uxth	r2, r2
 80033a8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80033ac:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80033b0:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 80033b4:	f248 0480 	movw	r4, #32896	; 0x8080
 80033b8:	4322      	orrs	r2, r4
 80033ba:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80033be:	7809      	ldrb	r1, [r1, #0]
 80033c0:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80033c4:	b292      	uxth	r2, r2
 80033c6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80033ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033ce:	4322      	orrs	r2, r4
 80033d0:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 80033d4:	e727      	b.n	8003226 <USB_ActivateEndpoint+0xba>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80033d6:	780c      	ldrb	r4, [r1, #0]
 80033d8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80033dc:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80033e0:	d00c      	beq.n	80033fc <USB_ActivateEndpoint+0x290>
 80033e2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80033e6:	b292      	uxth	r2, r2
 80033e8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80033ec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80033f0:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80033f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80033f8:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80033fc:	780c      	ldrb	r4, [r1, #0]
 80033fe:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003402:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003406:	d00c      	beq.n	8003422 <USB_ActivateEndpoint+0x2b6>
 8003408:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800340c:	b292      	uxth	r2, r2
 800340e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003412:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003416:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800341a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800341e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8003422:	78ca      	ldrb	r2, [r1, #3]
 8003424:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003426:	780c      	ldrb	r4, [r1, #0]
 8003428:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800342c:	b292      	uxth	r2, r2
 800342e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003432:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003436:	bf18      	it	ne
 8003438:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800343c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003440:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003444:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003448:	7809      	ldrb	r1, [r1, #0]
 800344a:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800344e:	b292      	uxth	r2, r2
 8003450:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003454:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003458:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800345c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003460:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8003464:	e6df      	b.n	8003226 <USB_ActivateEndpoint+0xba>

08003466 <USB_DeactivateEndpoint>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8003466:	7b0b      	ldrb	r3, [r1, #12]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d146      	bne.n	80034fa <USB_DeactivateEndpoint+0x94>
  {
    if (ep->is_in != 0U)
 800346c:	784b      	ldrb	r3, [r1, #1]
 800346e:	b313      	cbz	r3, 80034b6 <USB_DeactivateEndpoint+0x50>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003470:	780a      	ldrb	r2, [r1, #0]
 8003472:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003476:	f013 0f40 	tst.w	r3, #64	; 0x40
 800347a:	d00c      	beq.n	8003496 <USB_DeactivateEndpoint+0x30>
 800347c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003480:	b29b      	uxth	r3, r3
 8003482:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800348a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800348e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003492:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003496:	780a      	ldrb	r2, [r1, #0]
 8003498:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800349c:	b29b      	uxth	r3, r3
 800349e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034ae:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 80034b2:	2000      	movs	r0, #0
 80034b4:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80034b6:	780a      	ldrb	r2, [r1, #0]
 80034b8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80034bc:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80034c0:	d00c      	beq.n	80034dc <USB_DeactivateEndpoint+0x76>
 80034c2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034d8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80034dc:	780a      	ldrb	r2, [r1, #0]
 80034de:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034f4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80034f8:	e7db      	b.n	80034b2 <USB_DeactivateEndpoint+0x4c>
{
 80034fa:	b410      	push	{r4}
    if (ep->is_in == 0U)
 80034fc:	784b      	ldrb	r3, [r1, #1]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d14e      	bne.n	80035a0 <USB_DeactivateEndpoint+0x13a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003502:	780a      	ldrb	r2, [r1, #0]
 8003504:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003508:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800350c:	d00c      	beq.n	8003528 <USB_DeactivateEndpoint+0xc2>
 800350e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003512:	b29b      	uxth	r3, r3
 8003514:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003518:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800351c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003524:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003528:	780a      	ldrb	r2, [r1, #0]
 800352a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800352e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003532:	d00c      	beq.n	800354e <USB_DeactivateEndpoint+0xe8>
 8003534:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003538:	b29b      	uxth	r3, r3
 800353a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800353e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003542:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003546:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800354a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 800354e:	780a      	ldrb	r2, [r1, #0]
 8003550:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003554:	b29b      	uxth	r3, r3
 8003556:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800355a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800355e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003562:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003566:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800356a:	780c      	ldrb	r4, [r1, #0]
 800356c:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8003570:	b29b      	uxth	r3, r3
 8003572:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800357a:	f248 0280 	movw	r2, #32896	; 0x8080
 800357e:	4313      	orrs	r3, r2
 8003580:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003584:	7809      	ldrb	r1, [r1, #0]
 8003586:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 800358a:	b29b      	uxth	r3, r3
 800358c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003590:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003594:	4313      	orrs	r3, r2
 8003596:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
}
 800359a:	2000      	movs	r0, #0
 800359c:	bc10      	pop	{r4}
 800359e:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80035a0:	780a      	ldrb	r2, [r1, #0]
 80035a2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80035a6:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80035aa:	d00c      	beq.n	80035c6 <USB_DeactivateEndpoint+0x160>
 80035ac:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035c2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80035c6:	780a      	ldrb	r2, [r1, #0]
 80035c8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80035cc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80035d0:	d00c      	beq.n	80035ec <USB_DeactivateEndpoint+0x186>
 80035d2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80035e8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 80035ec:	780a      	ldrb	r2, [r1, #0]
 80035ee:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003604:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003608:	780c      	ldrb	r4, [r1, #0]
 800360a:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800360e:	b29b      	uxth	r3, r3
 8003610:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003614:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003618:	f248 0280 	movw	r2, #32896	; 0x8080
 800361c:	4313      	orrs	r3, r2
 800361e:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003622:	7809      	ldrb	r1, [r1, #0]
 8003624:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8003628:	b29b      	uxth	r3, r3
 800362a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800362e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003632:	4313      	orrs	r3, r2
 8003634:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 8003638:	e7af      	b.n	800359a <USB_DeactivateEndpoint+0x134>

0800363a <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 800363a:	784b      	ldrb	r3, [r1, #1]
 800363c:	b18b      	cbz	r3, 8003662 <USB_EPSetStall+0x28>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800363e:	780a      	ldrb	r2, [r1, #0]
 8003640:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003644:	b29b      	uxth	r3, r3
 8003646:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800364a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800364e:	f083 0310 	eor.w	r3, r3, #16
 8003652:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003656:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800365a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
  }

  return HAL_OK;
}
 800365e:	2000      	movs	r0, #0
 8003660:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8003662:	780a      	ldrb	r2, [r1, #0]
 8003664:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003668:	b29b      	uxth	r3, r3
 800366a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800366e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003672:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003676:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800367a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800367e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8003682:	e7ec      	b.n	800365e <USB_EPSetStall+0x24>

08003684 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8003684:	7b0b      	ldrb	r3, [r1, #12]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d14b      	bne.n	8003722 <USB_EPClearStall+0x9e>
  {
    if (ep->is_in != 0U)
 800368a:	784b      	ldrb	r3, [r1, #1]
 800368c:	b333      	cbz	r3, 80036dc <USB_EPClearStall+0x58>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800368e:	780a      	ldrb	r2, [r1, #0]
 8003690:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003694:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003698:	d00c      	beq.n	80036b4 <USB_EPClearStall+0x30>
 800369a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800369e:	b29b      	uxth	r3, r3
 80036a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80036b0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 80036b4:	78cb      	ldrb	r3, [r1, #3]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d033      	beq.n	8003722 <USB_EPClearStall+0x9e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80036ba:	780a      	ldrb	r2, [r1, #0]
 80036bc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036ca:	f083 0320 	eor.w	r3, r3, #32
 80036ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036d6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80036da:	e022      	b.n	8003722 <USB_EPClearStall+0x9e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80036dc:	780a      	ldrb	r2, [r1, #0]
 80036de:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80036e2:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80036e6:	d00c      	beq.n	8003702 <USB_EPClearStall+0x7e>
 80036e8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036fe:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003702:	780a      	ldrb	r2, [r1, #0]
 8003704:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003708:	b29b      	uxth	r3, r3
 800370a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800370e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003712:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8003716:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800371a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800371e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8003722:	2000      	movs	r0, #0
 8003724:	4770      	bx	lr

08003726 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8003726:	b911      	cbnz	r1, 800372e <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8003728:	2380      	movs	r3, #128	; 0x80
 800372a:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 800372e:	2000      	movs	r0, #0
 8003730:	4770      	bx	lr

08003732 <USB_DevConnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8003732:	2000      	movs	r0, #0
 8003734:	4770      	bx	lr

08003736 <USB_DevDisconnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8003736:	2000      	movs	r0, #0
 8003738:	4770      	bx	lr

0800373a <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800373a:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 800373e:	b280      	uxth	r0, r0
 8003740:	4770      	bx	lr

08003742 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8003742:	2000      	movs	r0, #0
 8003744:	4770      	bx	lr

08003746 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003746:	b410      	push	{r4}
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003748:	3301      	adds	r3, #1
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800374a:	eb00 0442 	add.w	r4, r0, r2, lsl #1

  for (i = n; i != 0U; i--)
 800374e:	085b      	lsrs	r3, r3, #1
 8003750:	d010      	beq.n	8003774 <USB_WritePMA+0x2e>
 8003752:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003756:	4622      	mov	r2, r4
 8003758:	3102      	adds	r1, #2
 800375a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
  {
    temp1 = *pBuf;
    pBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800375e:	f811 0c01 	ldrb.w	r0, [r1, #-1]
    temp1 = *pBuf;
 8003762:	f811 3c02 	ldrb.w	r3, [r1, #-2]
    *pdwVal = (uint16_t)temp2;
 8003766:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800376a:	f822 3b04 	strh.w	r3, [r2], #4
  for (i = n; i != 0U; i--)
 800376e:	3102      	adds	r1, #2
 8003770:	4294      	cmp	r4, r2
 8003772:	d1f4      	bne.n	800375e <USB_WritePMA+0x18>
    pdwVal++;
#endif

    pBuf++;
  }
}
 8003774:	bc10      	pop	{r4}
 8003776:	4770      	bx	lr

08003778 <USB_EPStartXfer>:
{
 8003778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800377a:	4605      	mov	r5, r0
 800377c:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 800377e:	784b      	ldrb	r3, [r1, #1]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d035      	beq.n	80037f0 <USB_EPStartXfer+0x78>
    if (ep->doublebuffer == 0U)
 8003784:	7b0a      	ldrb	r2, [r1, #12]
 8003786:	2a00      	cmp	r2, #0
 8003788:	f040 821b 	bne.w	8003bc2 <USB_EPStartXfer+0x44a>
      if (ep->xfer_len > ep->maxpacket)
 800378c:	698a      	ldr	r2, [r1, #24]
 800378e:	690b      	ldr	r3, [r1, #16]
 8003790:	429a      	cmp	r2, r3
        ep->xfer_len -= len;
 8003792:	bf86      	itte	hi
 8003794:	1ad1      	subhi	r1, r2, r3
        len = ep->maxpacket;
 8003796:	461a      	movhi	r2, r3
        ep->xfer_len = 0U;
 8003798:	2100      	movls	r1, #0
 800379a:	61a1      	str	r1, [r4, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800379c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 80037a6:	4418      	add	r0, r3
 80037a8:	7823      	ldrb	r3, [r4, #0]
 80037aa:	011b      	lsls	r3, r3, #4
 80037ac:	2a00      	cmp	r2, #0
 80037ae:	f040 81f0 	bne.w	8003b92 <USB_EPStartXfer+0x41a>
 80037b2:	5ac2      	ldrh	r2, [r0, r3]
 80037b4:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80037b8:	0412      	lsls	r2, r2, #16
 80037ba:	0c12      	lsrs	r2, r2, #16
 80037bc:	52c2      	strh	r2, [r0, r3]
 80037be:	5ac2      	ldrh	r2, [r0, r3]
 80037c0:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80037c4:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80037c8:	b292      	uxth	r2, r2
 80037ca:	52c2      	strh	r2, [r0, r3]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80037cc:	7822      	ldrb	r2, [r4, #0]
 80037ce:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037dc:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80037e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037e8:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 80037ec:	2000      	movs	r0, #0
}
 80037ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (ep->xfer_len > ep->maxpacket)
 80037f0:	690a      	ldr	r2, [r1, #16]
 80037f2:	698e      	ldr	r6, [r1, #24]
 80037f4:	4296      	cmp	r6, r2
 80037f6:	bf28      	it	cs
 80037f8:	4616      	movcs	r6, r2
    if (ep->doublebuffer == 0U)
 80037fa:	7b0b      	ldrb	r3, [r1, #12]
 80037fc:	b35b      	cbz	r3, 8003856 <USB_EPStartXfer+0xde>
      if (ep->type == EP_TYPE_BULK)
 80037fe:	78cb      	ldrb	r3, [r1, #3]
 8003800:	2b02      	cmp	r3, #2
 8003802:	d049      	beq.n	8003898 <USB_EPStartXfer+0x120>
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003804:	780b      	ldrb	r3, [r1, #0]
 8003806:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800380a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800380e:	f000 81a3 	beq.w	8003b58 <USB_EPStartXfer+0x3e0>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003812:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003816:	b291      	uxth	r1, r2
 8003818:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 800381c:	440a      	add	r2, r1
 800381e:	011b      	lsls	r3, r3, #4
 8003820:	b2b1      	uxth	r1, r6
 8003822:	52d1      	strh	r1, [r2, r3]
          pmabuffer = ep->pmaaddr1;
 8003824:	8962      	ldrh	r2, [r4, #10]
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003826:	b2b3      	uxth	r3, r6
 8003828:	6961      	ldr	r1, [r4, #20]
 800382a:	4628      	mov	r0, r5
 800382c:	f7ff ff8b 	bl	8003746 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8003830:	7863      	ldrb	r3, [r4, #1]
 8003832:	2b00      	cmp	r3, #0
 8003834:	f040 819b 	bne.w	8003b6e <USB_EPStartXfer+0x3f6>
 8003838:	7822      	ldrb	r2, [r4, #0]
 800383a:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800383e:	b29b      	uxth	r3, r3
 8003840:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003844:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003848:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800384c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003850:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8003854:	e00e      	b.n	8003874 <USB_EPStartXfer+0xfc>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003856:	b2b6      	uxth	r6, r6
 8003858:	4633      	mov	r3, r6
 800385a:	88ca      	ldrh	r2, [r1, #6]
 800385c:	6949      	ldr	r1, [r1, #20]
 800385e:	f7ff ff72 	bl	8003746 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003862:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8003866:	b299      	uxth	r1, r3
 8003868:	7822      	ldrb	r2, [r4, #0]
 800386a:	0112      	lsls	r2, r2, #4
 800386c:	f205 4304 	addw	r3, r5, #1028	; 0x404
 8003870:	440b      	add	r3, r1
 8003872:	52d6      	strh	r6, [r2, r3]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8003874:	7822      	ldrb	r2, [r4, #0]
 8003876:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800387a:	b29b      	uxth	r3, r3
 800387c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003880:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003884:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8003888:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800388c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003890:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 8003894:	2000      	movs	r0, #0
 8003896:	e7aa      	b.n	80037ee <USB_EPStartXfer+0x76>
        if (ep->xfer_len_db > ep->maxpacket)
 8003898:	6a0b      	ldr	r3, [r1, #32]
 800389a:	429a      	cmp	r2, r3
 800389c:	f080 813e 	bcs.w	8003b1c <USB_EPStartXfer+0x3a4>
          PCD_SET_EP_DBUF(USBx, ep->num);
 80038a0:	780a      	ldrb	r2, [r1, #0]
 80038a2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038b0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80038b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038b8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
          ep->xfer_len_db -= len;
 80038bc:	6a0b      	ldr	r3, [r1, #32]
 80038be:	1b9b      	subs	r3, r3, r6
 80038c0:	620b      	str	r3, [r1, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80038c2:	780b      	ldrb	r3, [r1, #0]
 80038c4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80038c8:	f012 0f40 	tst.w	r2, #64	; 0x40
 80038cc:	f000 8093 	beq.w	80039f6 <USB_EPStartXfer+0x27e>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80038d0:	784a      	ldrb	r2, [r1, #1]
 80038d2:	bb6a      	cbnz	r2, 8003930 <USB_EPStartXfer+0x1b8>
 80038d4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80038d8:	b292      	uxth	r2, r2
 80038da:	f200 410c 	addw	r1, r0, #1036	; 0x40c
 80038de:	4411      	add	r1, r2
 80038e0:	011b      	lsls	r3, r3, #4
 80038e2:	b96e      	cbnz	r6, 8003900 <USB_EPStartXfer+0x188>
 80038e4:	5aca      	ldrh	r2, [r1, r3]
 80038e6:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80038ea:	0412      	lsls	r2, r2, #16
 80038ec:	0c12      	lsrs	r2, r2, #16
 80038ee:	52ca      	strh	r2, [r1, r3]
 80038f0:	5aca      	ldrh	r2, [r1, r3]
 80038f2:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80038f6:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80038fa:	b292      	uxth	r2, r2
 80038fc:	52ca      	strh	r2, [r1, r3]
 80038fe:	e019      	b.n	8003934 <USB_EPStartXfer+0x1bc>
 8003900:	2e3e      	cmp	r6, #62	; 0x3e
 8003902:	d808      	bhi.n	8003916 <USB_EPStartXfer+0x19e>
 8003904:	0872      	lsrs	r2, r6, #1
 8003906:	f016 0f01 	tst.w	r6, #1
 800390a:	bf18      	it	ne
 800390c:	3201      	addne	r2, #1
 800390e:	0292      	lsls	r2, r2, #10
 8003910:	b292      	uxth	r2, r2
 8003912:	52ca      	strh	r2, [r1, r3]
 8003914:	e00e      	b.n	8003934 <USB_EPStartXfer+0x1bc>
 8003916:	0972      	lsrs	r2, r6, #5
 8003918:	f016 0f1f 	tst.w	r6, #31
 800391c:	bf08      	it	eq
 800391e:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8003922:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8003926:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800392a:	b292      	uxth	r2, r2
 800392c:	52ca      	strh	r2, [r1, r3]
 800392e:	e001      	b.n	8003934 <USB_EPStartXfer+0x1bc>
 8003930:	2a01      	cmp	r2, #1
 8003932:	d02a      	beq.n	800398a <USB_EPStartXfer+0x212>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003934:	b2b3      	uxth	r3, r6
 8003936:	8962      	ldrh	r2, [r4, #10]
 8003938:	6961      	ldr	r1, [r4, #20]
 800393a:	4628      	mov	r0, r5
 800393c:	f7ff ff03 	bl	8003746 <USB_WritePMA>
            ep->xfer_buff += len;
 8003940:	6963      	ldr	r3, [r4, #20]
 8003942:	4433      	add	r3, r6
 8003944:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8003946:	6a23      	ldr	r3, [r4, #32]
 8003948:	6922      	ldr	r2, [r4, #16]
 800394a:	4293      	cmp	r3, r2
              ep->xfer_len_db -= len;
 800394c:	bf86      	itte	hi
 800394e:	1b9a      	subhi	r2, r3, r6
 8003950:	4633      	movhi	r3, r6
              ep->xfer_len_db = 0U;
 8003952:	2200      	movls	r2, #0
 8003954:	6222      	str	r2, [r4, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003956:	7862      	ldrb	r2, [r4, #1]
 8003958:	2a00      	cmp	r2, #0
 800395a:	d138      	bne.n	80039ce <USB_EPStartXfer+0x256>
 800395c:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8003960:	b292      	uxth	r2, r2
 8003962:	7820      	ldrb	r0, [r4, #0]
 8003964:	0100      	lsls	r0, r0, #4
 8003966:	f205 4104 	addw	r1, r5, #1028	; 0x404
 800396a:	440a      	add	r2, r1
 800396c:	b9bb      	cbnz	r3, 800399e <USB_EPStartXfer+0x226>
 800396e:	5a81      	ldrh	r1, [r0, r2]
 8003970:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8003974:	0409      	lsls	r1, r1, #16
 8003976:	0c09      	lsrs	r1, r1, #16
 8003978:	5281      	strh	r1, [r0, r2]
 800397a:	5a81      	ldrh	r1, [r0, r2]
 800397c:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8003980:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8003984:	b289      	uxth	r1, r1
 8003986:	5281      	strh	r1, [r0, r2]
 8003988:	e023      	b.n	80039d2 <USB_EPStartXfer+0x25a>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800398a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800398e:	b291      	uxth	r1, r2
 8003990:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 8003994:	440a      	add	r2, r1
 8003996:	011b      	lsls	r3, r3, #4
 8003998:	b2b1      	uxth	r1, r6
 800399a:	52d1      	strh	r1, [r2, r3]
 800399c:	e7ca      	b.n	8003934 <USB_EPStartXfer+0x1bc>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800399e:	2b3e      	cmp	r3, #62	; 0x3e
 80039a0:	d808      	bhi.n	80039b4 <USB_EPStartXfer+0x23c>
 80039a2:	0859      	lsrs	r1, r3, #1
 80039a4:	f013 0f01 	tst.w	r3, #1
 80039a8:	bf18      	it	ne
 80039aa:	3101      	addne	r1, #1
 80039ac:	0289      	lsls	r1, r1, #10
 80039ae:	b289      	uxth	r1, r1
 80039b0:	5281      	strh	r1, [r0, r2]
 80039b2:	e00e      	b.n	80039d2 <USB_EPStartXfer+0x25a>
 80039b4:	0959      	lsrs	r1, r3, #5
 80039b6:	f013 0f1f 	tst.w	r3, #31
 80039ba:	bf08      	it	eq
 80039bc:	f101 31ff 	addeq.w	r1, r1, #4294967295
 80039c0:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 80039c4:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80039c8:	b289      	uxth	r1, r1
 80039ca:	5281      	strh	r1, [r0, r2]
 80039cc:	e001      	b.n	80039d2 <USB_EPStartXfer+0x25a>
 80039ce:	2a01      	cmp	r2, #1
 80039d0:	d006      	beq.n	80039e0 <USB_EPStartXfer+0x268>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	8922      	ldrh	r2, [r4, #8]
 80039d6:	6961      	ldr	r1, [r4, #20]
 80039d8:	4628      	mov	r0, r5
 80039da:	f7ff feb4 	bl	8003746 <USB_WritePMA>
 80039de:	e749      	b.n	8003874 <USB_EPStartXfer+0xfc>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80039e0:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80039e4:	b290      	uxth	r0, r2
 80039e6:	7821      	ldrb	r1, [r4, #0]
 80039e8:	0109      	lsls	r1, r1, #4
 80039ea:	f205 4204 	addw	r2, r5, #1028	; 0x404
 80039ee:	4402      	add	r2, r0
 80039f0:	b298      	uxth	r0, r3
 80039f2:	5288      	strh	r0, [r1, r2]
 80039f4:	e7ed      	b.n	80039d2 <USB_EPStartXfer+0x25a>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80039f6:	784a      	ldrb	r2, [r1, #1]
 80039f8:	bb6a      	cbnz	r2, 8003a56 <USB_EPStartXfer+0x2de>
 80039fa:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80039fe:	b292      	uxth	r2, r2
 8003a00:	f200 4104 	addw	r1, r0, #1028	; 0x404
 8003a04:	4411      	add	r1, r2
 8003a06:	011b      	lsls	r3, r3, #4
 8003a08:	b96e      	cbnz	r6, 8003a26 <USB_EPStartXfer+0x2ae>
 8003a0a:	5aca      	ldrh	r2, [r1, r3]
 8003a0c:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8003a10:	0412      	lsls	r2, r2, #16
 8003a12:	0c12      	lsrs	r2, r2, #16
 8003a14:	52ca      	strh	r2, [r1, r3]
 8003a16:	5aca      	ldrh	r2, [r1, r3]
 8003a18:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8003a1c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003a20:	b292      	uxth	r2, r2
 8003a22:	52ca      	strh	r2, [r1, r3]
 8003a24:	e019      	b.n	8003a5a <USB_EPStartXfer+0x2e2>
 8003a26:	2e3e      	cmp	r6, #62	; 0x3e
 8003a28:	d808      	bhi.n	8003a3c <USB_EPStartXfer+0x2c4>
 8003a2a:	0872      	lsrs	r2, r6, #1
 8003a2c:	f016 0f01 	tst.w	r6, #1
 8003a30:	bf18      	it	ne
 8003a32:	3201      	addne	r2, #1
 8003a34:	0292      	lsls	r2, r2, #10
 8003a36:	b292      	uxth	r2, r2
 8003a38:	52ca      	strh	r2, [r1, r3]
 8003a3a:	e00e      	b.n	8003a5a <USB_EPStartXfer+0x2e2>
 8003a3c:	0972      	lsrs	r2, r6, #5
 8003a3e:	f016 0f1f 	tst.w	r6, #31
 8003a42:	bf08      	it	eq
 8003a44:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8003a48:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8003a4c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003a50:	b292      	uxth	r2, r2
 8003a52:	52ca      	strh	r2, [r1, r3]
 8003a54:	e001      	b.n	8003a5a <USB_EPStartXfer+0x2e2>
 8003a56:	2a01      	cmp	r2, #1
 8003a58:	d02a      	beq.n	8003ab0 <USB_EPStartXfer+0x338>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003a5a:	b2b3      	uxth	r3, r6
 8003a5c:	8922      	ldrh	r2, [r4, #8]
 8003a5e:	6961      	ldr	r1, [r4, #20]
 8003a60:	4628      	mov	r0, r5
 8003a62:	f7ff fe70 	bl	8003746 <USB_WritePMA>
            ep->xfer_buff += len;
 8003a66:	6963      	ldr	r3, [r4, #20]
 8003a68:	4433      	add	r3, r6
 8003a6a:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8003a6c:	6a23      	ldr	r3, [r4, #32]
 8003a6e:	6922      	ldr	r2, [r4, #16]
 8003a70:	4293      	cmp	r3, r2
              ep->xfer_len_db -= len;
 8003a72:	bf86      	itte	hi
 8003a74:	1b9a      	subhi	r2, r3, r6
 8003a76:	4633      	movhi	r3, r6
              ep->xfer_len_db = 0U;
 8003a78:	2200      	movls	r2, #0
 8003a7a:	6222      	str	r2, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003a7c:	7862      	ldrb	r2, [r4, #1]
 8003a7e:	2a00      	cmp	r2, #0
 8003a80:	d138      	bne.n	8003af4 <USB_EPStartXfer+0x37c>
 8003a82:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8003a86:	b292      	uxth	r2, r2
 8003a88:	7820      	ldrb	r0, [r4, #0]
 8003a8a:	0100      	lsls	r0, r0, #4
 8003a8c:	f205 410c 	addw	r1, r5, #1036	; 0x40c
 8003a90:	440a      	add	r2, r1
 8003a92:	b9bb      	cbnz	r3, 8003ac4 <USB_EPStartXfer+0x34c>
 8003a94:	5a81      	ldrh	r1, [r0, r2]
 8003a96:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8003a9a:	0409      	lsls	r1, r1, #16
 8003a9c:	0c09      	lsrs	r1, r1, #16
 8003a9e:	5281      	strh	r1, [r0, r2]
 8003aa0:	5a81      	ldrh	r1, [r0, r2]
 8003aa2:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8003aa6:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8003aaa:	b289      	uxth	r1, r1
 8003aac:	5281      	strh	r1, [r0, r2]
 8003aae:	e023      	b.n	8003af8 <USB_EPStartXfer+0x380>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003ab0:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003ab4:	b291      	uxth	r1, r2
 8003ab6:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8003aba:	440a      	add	r2, r1
 8003abc:	011b      	lsls	r3, r3, #4
 8003abe:	b2b1      	uxth	r1, r6
 8003ac0:	52d1      	strh	r1, [r2, r3]
 8003ac2:	e7ca      	b.n	8003a5a <USB_EPStartXfer+0x2e2>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003ac4:	2b3e      	cmp	r3, #62	; 0x3e
 8003ac6:	d808      	bhi.n	8003ada <USB_EPStartXfer+0x362>
 8003ac8:	0859      	lsrs	r1, r3, #1
 8003aca:	f013 0f01 	tst.w	r3, #1
 8003ace:	bf18      	it	ne
 8003ad0:	3101      	addne	r1, #1
 8003ad2:	0289      	lsls	r1, r1, #10
 8003ad4:	b289      	uxth	r1, r1
 8003ad6:	5281      	strh	r1, [r0, r2]
 8003ad8:	e00e      	b.n	8003af8 <USB_EPStartXfer+0x380>
 8003ada:	0959      	lsrs	r1, r3, #5
 8003adc:	f013 0f1f 	tst.w	r3, #31
 8003ae0:	bf08      	it	eq
 8003ae2:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8003ae6:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8003aea:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8003aee:	b289      	uxth	r1, r1
 8003af0:	5281      	strh	r1, [r0, r2]
 8003af2:	e001      	b.n	8003af8 <USB_EPStartXfer+0x380>
 8003af4:	2a01      	cmp	r2, #1
 8003af6:	d006      	beq.n	8003b06 <USB_EPStartXfer+0x38e>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	8962      	ldrh	r2, [r4, #10]
 8003afc:	6961      	ldr	r1, [r4, #20]
 8003afe:	4628      	mov	r0, r5
 8003b00:	f7ff fe21 	bl	8003746 <USB_WritePMA>
 8003b04:	e6b6      	b.n	8003874 <USB_EPStartXfer+0xfc>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003b06:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8003b0a:	b290      	uxth	r0, r2
 8003b0c:	7821      	ldrb	r1, [r4, #0]
 8003b0e:	0109      	lsls	r1, r1, #4
 8003b10:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 8003b14:	4402      	add	r2, r0
 8003b16:	b298      	uxth	r0, r3
 8003b18:	5288      	strh	r0, [r1, r2]
 8003b1a:	e7ed      	b.n	8003af8 <USB_EPStartXfer+0x380>
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8003b1c:	7809      	ldrb	r1, [r1, #0]
 8003b1e:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 8003b22:	b292      	uxth	r2, r2
 8003b24:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 8003b28:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003b2c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b30:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b34:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003b38:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003b3c:	b290      	uxth	r0, r2
 8003b3e:	7821      	ldrb	r1, [r4, #0]
 8003b40:	0109      	lsls	r1, r1, #4
 8003b42:	f205 4204 	addw	r2, r5, #1028	; 0x404
 8003b46:	4402      	add	r2, r0
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	528b      	strh	r3, [r1, r2]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003b4c:	8922      	ldrh	r2, [r4, #8]
 8003b4e:	6961      	ldr	r1, [r4, #20]
 8003b50:	4628      	mov	r0, r5
 8003b52:	f7ff fdf8 	bl	8003746 <USB_WritePMA>
 8003b56:	e68d      	b.n	8003874 <USB_EPStartXfer+0xfc>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003b58:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003b5c:	b291      	uxth	r1, r2
 8003b5e:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8003b62:	440a      	add	r2, r1
 8003b64:	011b      	lsls	r3, r3, #4
 8003b66:	b2b1      	uxth	r1, r6
 8003b68:	52d1      	strh	r1, [r2, r3]
          pmabuffer = ep->pmaaddr0;
 8003b6a:	8922      	ldrh	r2, [r4, #8]
 8003b6c:	e65b      	b.n	8003826 <USB_EPStartXfer+0xae>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	f47f ae80 	bne.w	8003874 <USB_EPStartXfer+0xfc>
 8003b74:	7822      	ldrb	r2, [r4, #0]
 8003b76:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b8c:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8003b90:	e670      	b.n	8003874 <USB_EPStartXfer+0xfc>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003b92:	2a3e      	cmp	r2, #62	; 0x3e
 8003b94:	d808      	bhi.n	8003ba8 <USB_EPStartXfer+0x430>
 8003b96:	0851      	lsrs	r1, r2, #1
 8003b98:	f012 0f01 	tst.w	r2, #1
 8003b9c:	bf18      	it	ne
 8003b9e:	3101      	addne	r1, #1
 8003ba0:	0289      	lsls	r1, r1, #10
 8003ba2:	b289      	uxth	r1, r1
 8003ba4:	52c1      	strh	r1, [r0, r3]
 8003ba6:	e611      	b.n	80037cc <USB_EPStartXfer+0x54>
 8003ba8:	0951      	lsrs	r1, r2, #5
 8003baa:	f012 0f1f 	tst.w	r2, #31
 8003bae:	bf08      	it	eq
 8003bb0:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8003bb4:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8003bb8:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8003bbc:	b289      	uxth	r1, r1
 8003bbe:	52c1      	strh	r1, [r0, r3]
 8003bc0:	e604      	b.n	80037cc <USB_EPStartXfer+0x54>
      if (ep->type == EP_TYPE_BULK)
 8003bc2:	78ca      	ldrb	r2, [r1, #3]
 8003bc4:	2a02      	cmp	r2, #2
 8003bc6:	d03f      	beq.n	8003c48 <USB_EPStartXfer+0x4d0>
      else if (ep->type == EP_TYPE_ISOC)
 8003bc8:	2a01      	cmp	r2, #1
 8003bca:	f040 8118 	bne.w	8003dfe <USB_EPStartXfer+0x686>
        if (ep->xfer_len > ep->maxpacket)
 8003bce:	698a      	ldr	r2, [r1, #24]
 8003bd0:	6909      	ldr	r1, [r1, #16]
 8003bd2:	428a      	cmp	r2, r1
          ep->xfer_len -= len;
 8003bd4:	bf86      	itte	hi
 8003bd6:	1a50      	subhi	r0, r2, r1
          len = ep->maxpacket;
 8003bd8:	460a      	movhi	r2, r1
          ep->xfer_len = 0U;
 8003bda:	2000      	movls	r0, #0
 8003bdc:	61a0      	str	r0, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	f47f adf4 	bne.w	80037cc <USB_EPStartXfer+0x54>
 8003be4:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	7826      	ldrb	r6, [r4, #0]
 8003bec:	0136      	lsls	r6, r6, #4
 8003bee:	f205 4004 	addw	r0, r5, #1028	; 0x404
 8003bf2:	4418      	add	r0, r3
 8003bf4:	2a00      	cmp	r2, #0
 8003bf6:	f040 80b7 	bne.w	8003d68 <USB_EPStartXfer+0x5f0>
 8003bfa:	5a33      	ldrh	r3, [r6, r0]
 8003bfc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c00:	041b      	lsls	r3, r3, #16
 8003c02:	0c1b      	lsrs	r3, r3, #16
 8003c04:	5233      	strh	r3, [r6, r0]
 8003c06:	5a33      	ldrh	r3, [r6, r0]
 8003c08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	5233      	strh	r3, [r6, r0]
 8003c14:	7863      	ldrb	r3, [r4, #1]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	f040 80e3 	bne.w	8003de2 <USB_EPStartXfer+0x66a>
 8003c1c:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8003c20:	b293      	uxth	r3, r2
 8003c22:	7821      	ldrb	r1, [r4, #0]
 8003c24:	0109      	lsls	r1, r1, #4
 8003c26:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 8003c2a:	441a      	add	r2, r3
 8003c2c:	5a8b      	ldrh	r3, [r1, r2]
 8003c2e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c32:	041b      	lsls	r3, r3, #16
 8003c34:	0c1b      	lsrs	r3, r3, #16
 8003c36:	528b      	strh	r3, [r1, r2]
 8003c38:	5a8b      	ldrh	r3, [r1, r2]
 8003c3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	528b      	strh	r3, [r1, r2]
 8003c46:	e5c1      	b.n	80037cc <USB_EPStartXfer+0x54>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d132      	bne.n	8003cb2 <USB_EPStartXfer+0x53a>
 8003c4c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	780a      	ldrb	r2, [r1, #0]
 8003c54:	0112      	lsls	r2, r2, #4
 8003c56:	f200 4104 	addw	r1, r0, #1028	; 0x404
 8003c5a:	440b      	add	r3, r1
 8003c5c:	6921      	ldr	r1, [r4, #16]
 8003c5e:	2900      	cmp	r1, #0
 8003c60:	d145      	bne.n	8003cee <USB_EPStartXfer+0x576>
 8003c62:	5ad1      	ldrh	r1, [r2, r3]
 8003c64:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8003c68:	0409      	lsls	r1, r1, #16
 8003c6a:	0c09      	lsrs	r1, r1, #16
 8003c6c:	52d1      	strh	r1, [r2, r3]
 8003c6e:	5ad1      	ldrh	r1, [r2, r3]
 8003c70:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8003c74:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8003c78:	b289      	uxth	r1, r1
 8003c7a:	52d1      	strh	r1, [r2, r3]
 8003c7c:	7863      	ldrb	r3, [r4, #1]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d165      	bne.n	8003d4e <USB_EPStartXfer+0x5d6>
 8003c82:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	7822      	ldrb	r2, [r4, #0]
 8003c8a:	0112      	lsls	r2, r2, #4
 8003c8c:	f205 410c 	addw	r1, r5, #1036	; 0x40c
 8003c90:	440b      	add	r3, r1
 8003c92:	6921      	ldr	r1, [r4, #16]
 8003c94:	2900      	cmp	r1, #0
 8003c96:	d142      	bne.n	8003d1e <USB_EPStartXfer+0x5a6>
 8003c98:	5ad1      	ldrh	r1, [r2, r3]
 8003c9a:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8003c9e:	0409      	lsls	r1, r1, #16
 8003ca0:	0c09      	lsrs	r1, r1, #16
 8003ca2:	52d1      	strh	r1, [r2, r3]
 8003ca4:	5ad1      	ldrh	r1, [r2, r3]
 8003ca6:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8003caa:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8003cae:	b289      	uxth	r1, r1
 8003cb0:	52d1      	strh	r1, [r2, r3]
        if (ep->xfer_count != 0U)
 8003cb2:	69e3      	ldr	r3, [r4, #28]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	f43f ad89 	beq.w	80037cc <USB_EPStartXfer+0x54>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8003cba:	7822      	ldrb	r2, [r4, #0]
 8003cbc:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8003cc0:	f244 0340 	movw	r3, #16448	; 0x4040
 8003cc4:	ea03 0001 	and.w	r0, r3, r1
 8003cc8:	438b      	bics	r3, r1
 8003cca:	d002      	beq.n	8003cd2 <USB_EPStartXfer+0x55a>
 8003ccc:	2800      	cmp	r0, #0
 8003cce:	f47f ad7d 	bne.w	80037cc <USB_EPStartXfer+0x54>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8003cd2:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ce0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ce4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ce8:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8003cec:	e56e      	b.n	80037cc <USB_EPStartXfer+0x54>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8003cee:	293e      	cmp	r1, #62	; 0x3e
 8003cf0:	d808      	bhi.n	8003d04 <USB_EPStartXfer+0x58c>
 8003cf2:	0848      	lsrs	r0, r1, #1
 8003cf4:	f011 0f01 	tst.w	r1, #1
 8003cf8:	bf18      	it	ne
 8003cfa:	3001      	addne	r0, #1
 8003cfc:	0281      	lsls	r1, r0, #10
 8003cfe:	b289      	uxth	r1, r1
 8003d00:	52d1      	strh	r1, [r2, r3]
 8003d02:	e7bb      	b.n	8003c7c <USB_EPStartXfer+0x504>
 8003d04:	0948      	lsrs	r0, r1, #5
 8003d06:	f011 0f1f 	tst.w	r1, #31
 8003d0a:	bf08      	it	eq
 8003d0c:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8003d10:	ea6f 61c0 	mvn.w	r1, r0, lsl #27
 8003d14:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8003d18:	b289      	uxth	r1, r1
 8003d1a:	52d1      	strh	r1, [r2, r3]
 8003d1c:	e7ae      	b.n	8003c7c <USB_EPStartXfer+0x504>
 8003d1e:	293e      	cmp	r1, #62	; 0x3e
 8003d20:	d808      	bhi.n	8003d34 <USB_EPStartXfer+0x5bc>
 8003d22:	0848      	lsrs	r0, r1, #1
 8003d24:	f011 0f01 	tst.w	r1, #1
 8003d28:	bf18      	it	ne
 8003d2a:	3001      	addne	r0, #1
 8003d2c:	0281      	lsls	r1, r0, #10
 8003d2e:	b289      	uxth	r1, r1
 8003d30:	52d1      	strh	r1, [r2, r3]
 8003d32:	e7be      	b.n	8003cb2 <USB_EPStartXfer+0x53a>
 8003d34:	0948      	lsrs	r0, r1, #5
 8003d36:	f011 0f1f 	tst.w	r1, #31
 8003d3a:	bf08      	it	eq
 8003d3c:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8003d40:	ea6f 61c0 	mvn.w	r1, r0, lsl #27
 8003d44:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8003d48:	b289      	uxth	r1, r1
 8003d4a:	52d1      	strh	r1, [r2, r3]
 8003d4c:	e7b1      	b.n	8003cb2 <USB_EPStartXfer+0x53a>
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d1af      	bne.n	8003cb2 <USB_EPStartXfer+0x53a>
 8003d52:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8003d56:	b299      	uxth	r1, r3
 8003d58:	7822      	ldrb	r2, [r4, #0]
 8003d5a:	0112      	lsls	r2, r2, #4
 8003d5c:	f205 430c 	addw	r3, r5, #1036	; 0x40c
 8003d60:	440b      	add	r3, r1
 8003d62:	8a21      	ldrh	r1, [r4, #16]
 8003d64:	52d1      	strh	r1, [r2, r3]
 8003d66:	e7a4      	b.n	8003cb2 <USB_EPStartXfer+0x53a>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003d68:	2a3e      	cmp	r2, #62	; 0x3e
 8003d6a:	d817      	bhi.n	8003d9c <USB_EPStartXfer+0x624>
 8003d6c:	0851      	lsrs	r1, r2, #1
 8003d6e:	f012 0701 	ands.w	r7, r2, #1
 8003d72:	bf14      	ite	ne
 8003d74:	1c4b      	addne	r3, r1, #1
 8003d76:	460b      	moveq	r3, r1
 8003d78:	029b      	lsls	r3, r3, #10
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	5233      	strh	r3, [r6, r0]
 8003d7e:	7863      	ldrb	r3, [r4, #1]
 8003d80:	bb7b      	cbnz	r3, 8003de2 <USB_EPStartXfer+0x66a>
 8003d82:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8003d86:	b29a      	uxth	r2, r3
 8003d88:	f205 430c 	addw	r3, r5, #1036	; 0x40c
 8003d8c:	4413      	add	r3, r2
 8003d8e:	7822      	ldrb	r2, [r4, #0]
 8003d90:	0112      	lsls	r2, r2, #4
 8003d92:	bb17      	cbnz	r7, 8003dda <USB_EPStartXfer+0x662>
 8003d94:	0289      	lsls	r1, r1, #10
 8003d96:	b289      	uxth	r1, r1
 8003d98:	5299      	strh	r1, [r3, r2]
 8003d9a:	e517      	b.n	80037cc <USB_EPStartXfer+0x54>
 8003d9c:	0951      	lsrs	r1, r2, #5
 8003d9e:	f012 071f 	ands.w	r7, r2, #31
 8003da2:	bf0c      	ite	eq
 8003da4:	f101 33ff 	addeq.w	r3, r1, #4294967295
 8003da8:	460b      	movne	r3, r1
 8003daa:	ea6f 63c3 	mvn.w	r3, r3, lsl #27
 8003dae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	5233      	strh	r3, [r6, r0]
 8003db6:	7863      	ldrb	r3, [r4, #1]
 8003db8:	b99b      	cbnz	r3, 8003de2 <USB_EPStartXfer+0x66a>
 8003dba:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 8003dc4:	441a      	add	r2, r3
 8003dc6:	7820      	ldrb	r0, [r4, #0]
 8003dc8:	0100      	lsls	r0, r0, #4
 8003dca:	b147      	cbz	r7, 8003dde <USB_EPStartXfer+0x666>
 8003dcc:	ea6f 63c1 	mvn.w	r3, r1, lsl #27
 8003dd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	5213      	strh	r3, [r2, r0]
 8003dd8:	e4f8      	b.n	80037cc <USB_EPStartXfer+0x54>
 8003dda:	3101      	adds	r1, #1
 8003ddc:	e7da      	b.n	8003d94 <USB_EPStartXfer+0x61c>
 8003dde:	3901      	subs	r1, #1
 8003de0:	e7f4      	b.n	8003dcc <USB_EPStartXfer+0x654>
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	f47f acf2 	bne.w	80037cc <USB_EPStartXfer+0x54>
 8003de8:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	7821      	ldrb	r1, [r4, #0]
 8003df0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003df4:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8003df8:	b292      	uxth	r2, r2
 8003dfa:	52ea      	strh	r2, [r5, r3]
 8003dfc:	e4e6      	b.n	80037cc <USB_EPStartXfer+0x54>
        return HAL_ERROR;
 8003dfe:	2001      	movs	r0, #1
 8003e00:	e4f5      	b.n	80037ee <USB_EPStartXfer+0x76>

08003e02 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003e02:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003e04:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8003e08:	f500 6680 	add.w	r6, r0, #1024	; 0x400

  for (i = n; i != 0U; i--)
 8003e0c:	085f      	lsrs	r7, r3, #1
 8003e0e:	d011      	beq.n	8003e34 <USB_ReadPMA+0x32>
 8003e10:	1c88      	adds	r0, r1, #2
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003e12:	4635      	mov	r5, r6
  for (i = n; i != 0U; i--)
 8003e14:	463c      	mov	r4, r7
  {
    temp = *(__IO uint16_t *)pdwVal;
 8003e16:	f835 2b04 	ldrh.w	r2, [r5], #4
 8003e1a:	b292      	uxth	r2, r2
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003e1c:	f800 2c02 	strb.w	r2, [r0, #-2]
    pBuf++;
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8003e20:	0a12      	lsrs	r2, r2, #8
 8003e22:	f800 2c01 	strb.w	r2, [r0, #-1]
  for (i = n; i != 0U; i--)
 8003e26:	3002      	adds	r0, #2
 8003e28:	3c01      	subs	r4, #1
 8003e2a:	d1f4      	bne.n	8003e16 <USB_ReadPMA+0x14>
 8003e2c:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 8003e30:	eb06 0687 	add.w	r6, r6, r7, lsl #2
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8003e34:	f013 0f01 	tst.w	r3, #1
  {
    temp = *pdwVal;
 8003e38:	bf1c      	itt	ne
 8003e3a:	8833      	ldrhne	r3, [r6, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003e3c:	700b      	strbne	r3, [r1, #0]
  }
}
 8003e3e:	bcf0      	pop	{r4, r5, r6, r7}
 8003e40:	4770      	bx	lr

08003e42 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003e42:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8003e46:	b183      	cbz	r3, 8003e6a <USBD_CDC_EP0_RxReady+0x28>
{
 8003e48:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003e4a:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003e4e:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8003e52:	28ff      	cmp	r0, #255	; 0xff
 8003e54:	d007      	beq.n	8003e66 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8003e5c:	4621      	mov	r1, r4
 8003e5e:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8003e60:	23ff      	movs	r3, #255	; 0xff
 8003e62:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8003e66:	2000      	movs	r0, #0
 8003e68:	bd10      	pop	{r4, pc}
 8003e6a:	2000      	movs	r0, #0
 8003e6c:	4770      	bx	lr
	...

08003e70 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8003e70:	2343      	movs	r3, #67	; 0x43
 8003e72:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8003e74:	4800      	ldr	r0, [pc, #0]	; (8003e78 <USBD_CDC_GetFSCfgDesc+0x8>)
 8003e76:	4770      	bx	lr
 8003e78:	20000044 	.word	0x20000044

08003e7c <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8003e7c:	2343      	movs	r3, #67	; 0x43
 8003e7e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8003e80:	4800      	ldr	r0, [pc, #0]	; (8003e84 <USBD_CDC_GetHSCfgDesc+0x8>)
 8003e82:	4770      	bx	lr
 8003e84:	20000088 	.word	0x20000088

08003e88 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8003e88:	2343      	movs	r3, #67	; 0x43
 8003e8a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8003e8c:	4800      	ldr	r0, [pc, #0]	; (8003e90 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8003e8e:	4770      	bx	lr
 8003e90:	200000d8 	.word	0x200000d8

08003e94 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8003e94:	230a      	movs	r3, #10
 8003e96:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8003e98:	4800      	ldr	r0, [pc, #0]	; (8003e9c <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8003e9a:	4770      	bx	lr
 8003e9c:	200000cc 	.word	0x200000cc

08003ea0 <USBD_CDC_DataOut>:
{
 8003ea0:	b538      	push	{r3, r4, r5, lr}
 8003ea2:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003ea4:	f8d0 52b8 	ldr.w	r5, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8003ea8:	f000 ffee 	bl	8004e88 <USBD_LL_GetRxDataSize>
 8003eac:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 8003eb0:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8003eb4:	b14b      	cbz	r3, 8003eca <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8003eb6:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8003ec0:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8003ec4:	4798      	blx	r3
    return USBD_OK;
 8003ec6:	2000      	movs	r0, #0
}
 8003ec8:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8003eca:	2002      	movs	r0, #2
 8003ecc:	e7fc      	b.n	8003ec8 <USBD_CDC_DataOut+0x28>

08003ece <USBD_CDC_DataIn>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8003ece:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
  if (pdev->pClassData != NULL)
 8003ed2:	b312      	cbz	r2, 8003f1a <USBD_CDC_DataIn+0x4c>
{
 8003ed4:	b538      	push	{r3, r4, r5, lr}
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8003ed6:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8003eda:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8003ede:	69db      	ldr	r3, [r3, #28]
 8003ee0:	b15b      	cbz	r3, 8003efa <USBD_CDC_DataIn+0x2c>
 8003ee2:	f8d0 42c0 	ldr.w	r4, [r0, #704]	; 0x2c0
 8003ee6:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 8003eea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8003eee:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8003ef0:	fbb3 f4f5 	udiv	r4, r3, r5
 8003ef4:	fb05 3314 	mls	r3, r5, r4, r3
 8003ef8:	b11b      	cbz	r3, 8003f02 <USBD_CDC_DataIn+0x34>
      hcdc->TxState = 0U;
 8003efa:	2000      	movs	r0, #0
 8003efc:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
}
 8003f00:	bd38      	pop	{r3, r4, r5, pc}
      pdev->ep_in[epnum].total_length = 0U;
 8003f02:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8003f06:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8003f0a:	2400      	movs	r4, #0
 8003f0c:	61dc      	str	r4, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8003f0e:	4623      	mov	r3, r4
 8003f10:	4622      	mov	r2, r4
 8003f12:	f000 ffa9 	bl	8004e68 <USBD_LL_Transmit>
    return USBD_OK;
 8003f16:	4620      	mov	r0, r4
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8003f18:	e7f2      	b.n	8003f00 <USBD_CDC_DataIn+0x32>
    return USBD_FAIL;
 8003f1a:	2002      	movs	r0, #2
}
 8003f1c:	4770      	bx	lr

08003f1e <USBD_CDC_Setup>:
{
 8003f1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f20:	b083      	sub	sp, #12
 8003f22:	4606      	mov	r6, r0
 8003f24:	460c      	mov	r4, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003f26:	f8d0 72b8 	ldr.w	r7, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 8003f30:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003f34:	780b      	ldrb	r3, [r1, #0]
 8003f36:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 8003f3a:	d027      	beq.n	8003f8c <USBD_CDC_Setup+0x6e>
 8003f3c:	2d20      	cmp	r5, #32
 8003f3e:	d153      	bne.n	8003fe8 <USBD_CDC_Setup+0xca>
      if (req->wLength)
 8003f40:	88ca      	ldrh	r2, [r1, #6]
 8003f42:	b1da      	cbz	r2, 8003f7c <USBD_CDC_Setup+0x5e>
        if (req->bmRequest & 0x80U)
 8003f44:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003f48:	d00c      	beq.n	8003f64 <USBD_CDC_Setup+0x46>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003f4a:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	4639      	mov	r1, r7
 8003f52:	7860      	ldrb	r0, [r4, #1]
 8003f54:	4798      	blx	r3
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003f56:	88e2      	ldrh	r2, [r4, #6]
 8003f58:	4639      	mov	r1, r7
 8003f5a:	4630      	mov	r0, r6
 8003f5c:	f000 fd63 	bl	8004a26 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8003f60:	2500      	movs	r5, #0
 8003f62:	e044      	b.n	8003fee <USBD_CDC_Setup+0xd0>
          hcdc->CmdOpCode = req->bRequest;
 8003f64:	784b      	ldrb	r3, [r1, #1]
 8003f66:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8003f6a:	88cb      	ldrh	r3, [r1, #6]
 8003f6c:	f887 3201 	strb.w	r3, [r7, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003f70:	88ca      	ldrh	r2, [r1, #6]
 8003f72:	4639      	mov	r1, r7
 8003f74:	f000 fd6c 	bl	8004a50 <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 8003f78:	2500      	movs	r5, #0
 8003f7a:	e038      	b.n	8003fee <USBD_CDC_Setup+0xd0>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003f7c:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	2200      	movs	r2, #0
 8003f84:	7848      	ldrb	r0, [r1, #1]
 8003f86:	4798      	blx	r3
  uint8_t ret = USBD_OK;
 8003f88:	2500      	movs	r5, #0
 8003f8a:	e030      	b.n	8003fee <USBD_CDC_Setup+0xd0>
      switch (req->bRequest)
 8003f8c:	784f      	ldrb	r7, [r1, #1]
 8003f8e:	2f0a      	cmp	r7, #10
 8003f90:	d014      	beq.n	8003fbc <USBD_CDC_Setup+0x9e>
 8003f92:	2f0b      	cmp	r7, #11
 8003f94:	d020      	beq.n	8003fd8 <USBD_CDC_Setup+0xba>
 8003f96:	b11f      	cbz	r7, 8003fa0 <USBD_CDC_Setup+0x82>
          USBD_CtlError(pdev, req);
 8003f98:	f000 fa58 	bl	800444c <USBD_CtlError>
          ret = USBD_FAIL;
 8003f9c:	2502      	movs	r5, #2
          break;
 8003f9e:	e026      	b.n	8003fee <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003fa0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003fa4:	2b03      	cmp	r3, #3
 8003fa6:	d003      	beq.n	8003fb0 <USBD_CDC_Setup+0x92>
            USBD_CtlError(pdev, req);
 8003fa8:	f000 fa50 	bl	800444c <USBD_CtlError>
            ret = USBD_FAIL;
 8003fac:	2502      	movs	r5, #2
 8003fae:	e01e      	b.n	8003fee <USBD_CDC_Setup+0xd0>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8003fb0:	2202      	movs	r2, #2
 8003fb2:	a901      	add	r1, sp, #4
 8003fb4:	f000 fd37 	bl	8004a26 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8003fb8:	463d      	mov	r5, r7
 8003fba:	e018      	b.n	8003fee <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003fbc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003fc0:	2b03      	cmp	r3, #3
 8003fc2:	d003      	beq.n	8003fcc <USBD_CDC_Setup+0xae>
            USBD_CtlError(pdev, req);
 8003fc4:	f000 fa42 	bl	800444c <USBD_CtlError>
            ret = USBD_FAIL;
 8003fc8:	2502      	movs	r5, #2
 8003fca:	e010      	b.n	8003fee <USBD_CDC_Setup+0xd0>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f10d 0107 	add.w	r1, sp, #7
 8003fd2:	f000 fd28 	bl	8004a26 <USBD_CtlSendData>
 8003fd6:	e00a      	b.n	8003fee <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8003fd8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003fdc:	2b03      	cmp	r3, #3
 8003fde:	d006      	beq.n	8003fee <USBD_CDC_Setup+0xd0>
            USBD_CtlError(pdev, req);
 8003fe0:	f000 fa34 	bl	800444c <USBD_CtlError>
            ret = USBD_FAIL;
 8003fe4:	2502      	movs	r5, #2
 8003fe6:	e002      	b.n	8003fee <USBD_CDC_Setup+0xd0>
      USBD_CtlError(pdev, req);
 8003fe8:	f000 fa30 	bl	800444c <USBD_CtlError>
      ret = USBD_FAIL;
 8003fec:	2502      	movs	r5, #2
}
 8003fee:	4628      	mov	r0, r5
 8003ff0:	b003      	add	sp, #12
 8003ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ff4 <USBD_CDC_DeInit>:
{
 8003ff4:	b538      	push	{r3, r4, r5, lr}
 8003ff6:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8003ff8:	2181      	movs	r1, #129	; 0x81
 8003ffa:	f000 fefe 	bl	8004dfa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8003ffe:	2500      	movs	r5, #0
 8004000:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004002:	2101      	movs	r1, #1
 8004004:	4620      	mov	r0, r4
 8004006:	f000 fef8 	bl	8004dfa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800400a:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800400e:	2182      	movs	r1, #130	; 0x82
 8004010:	4620      	mov	r0, r4
 8004012:	f000 fef2 	bl	8004dfa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004016:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 8004018:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800401c:	b14b      	cbz	r3, 8004032 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800401e:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004026:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 800402a:	f000 ff37 	bl	8004e9c <USBD_static_free>
    pdev->pClassData = NULL;
 800402e:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 8004032:	2000      	movs	r0, #0
 8004034:	bd38      	pop	{r3, r4, r5, pc}

08004036 <USBD_CDC_Init>:
{
 8004036:	b570      	push	{r4, r5, r6, lr}
 8004038:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800403a:	7c03      	ldrb	r3, [r0, #16]
 800403c:	bbab      	cbnz	r3, 80040aa <USBD_CDC_Init+0x74>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800403e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004042:	2202      	movs	r2, #2
 8004044:	2181      	movs	r1, #129	; 0x81
 8004046:	f000 fecd 	bl	8004de4 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800404a:	2501      	movs	r5, #1
 800404c:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800404e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004052:	2202      	movs	r2, #2
 8004054:	4629      	mov	r1, r5
 8004056:	4620      	mov	r0, r4
 8004058:	f000 fec4 	bl	8004de4 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800405c:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004060:	2308      	movs	r3, #8
 8004062:	2203      	movs	r2, #3
 8004064:	2182      	movs	r1, #130	; 0x82
 8004066:	4620      	mov	r0, r4
 8004068:	f000 febc 	bl	8004de4 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800406c:	2301      	movs	r3, #1
 800406e:	6423      	str	r3, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004070:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004074:	f000 ff0e 	bl	8004e94 <USBD_static_malloc>
 8004078:	4605      	mov	r5, r0
 800407a:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 800407e:	b368      	cbz	r0, 80040dc <USBD_CDC_Init+0xa6>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004080:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4798      	blx	r3
    hcdc->TxState = 0U;
 8004088:	2300      	movs	r3, #0
 800408a:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
    hcdc->RxState = 0U;
 800408e:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004092:	7c26      	ldrb	r6, [r4, #16]
 8004094:	b9ce      	cbnz	r6, 80040ca <USBD_CDC_Init+0x94>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004096:	f44f 7300 	mov.w	r3, #512	; 0x200
 800409a:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800409e:	2101      	movs	r1, #1
 80040a0:	4620      	mov	r0, r4
 80040a2:	f000 fee9 	bl	8004e78 <USBD_LL_PrepareReceive>
}
 80040a6:	4630      	mov	r0, r6
 80040a8:	bd70      	pop	{r4, r5, r6, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80040aa:	2340      	movs	r3, #64	; 0x40
 80040ac:	2202      	movs	r2, #2
 80040ae:	2181      	movs	r1, #129	; 0x81
 80040b0:	f000 fe98 	bl	8004de4 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80040b4:	2501      	movs	r5, #1
 80040b6:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80040b8:	2340      	movs	r3, #64	; 0x40
 80040ba:	2202      	movs	r2, #2
 80040bc:	4629      	mov	r1, r5
 80040be:	4620      	mov	r0, r4
 80040c0:	f000 fe90 	bl	8004de4 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80040c4:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
 80040c8:	e7ca      	b.n	8004060 <USBD_CDC_Init+0x2a>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80040ca:	2340      	movs	r3, #64	; 0x40
 80040cc:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 80040d0:	2101      	movs	r1, #1
 80040d2:	4620      	mov	r0, r4
 80040d4:	f000 fed0 	bl	8004e78 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 80040d8:	2600      	movs	r6, #0
 80040da:	e7e4      	b.n	80040a6 <USBD_CDC_Init+0x70>
    ret = 1U;
 80040dc:	2601      	movs	r6, #1
 80040de:	e7e2      	b.n	80040a6 <USBD_CDC_Init+0x70>

080040e0 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 80040e0:	b119      	cbz	r1, 80040ea <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 80040e2:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 80040e6:	2000      	movs	r0, #0
 80040e8:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 80040ea:	2002      	movs	r0, #2
  }

  return ret;
}
 80040ec:	4770      	bx	lr

080040ee <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80040ee:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
 80040f2:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80040f6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
}
 80040fa:	2000      	movs	r0, #0
 80040fc:	4770      	bx	lr

080040fe <USBD_CDC_SetRxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80040fe:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->RxBuffer = pbuff;
 8004102:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return USBD_OK;
}
 8004106:	2000      	movs	r0, #0
 8004108:	4770      	bx	lr

0800410a <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800410a:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8

  if (pdev->pClassData != NULL)
 800410e:	b1a2      	cbz	r2, 800413a <USBD_CDC_TransmitPacket+0x30>
{
 8004110:	b508      	push	{r3, lr}
  {
    if (hcdc->TxState == 0U)
 8004112:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 8004116:	b10b      	cbz	r3, 800411c <USBD_CDC_TransmitPacket+0x12>

      return USBD_OK;
    }
    else
    {
      return USBD_BUSY;
 8004118:	2001      	movs	r0, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 800411a:	bd08      	pop	{r3, pc}
      hcdc->TxState = 1U;
 800411c:	2301      	movs	r3, #1
 800411e:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8004122:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 8004126:	6303      	str	r3, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8004128:	f8b2 3210 	ldrh.w	r3, [r2, #528]	; 0x210
 800412c:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8004130:	2181      	movs	r1, #129	; 0x81
 8004132:	f000 fe99 	bl	8004e68 <USBD_LL_Transmit>
      return USBD_OK;
 8004136:	2000      	movs	r0, #0
 8004138:	e7ef      	b.n	800411a <USBD_CDC_TransmitPacket+0x10>
    return USBD_FAIL;
 800413a:	2002      	movs	r0, #2
}
 800413c:	4770      	bx	lr

0800413e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800413e:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004140:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8004144:	b192      	cbz	r2, 800416c <USBD_CDC_ReceivePacket+0x2e>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004146:	7c04      	ldrb	r4, [r0, #16]
 8004148:	b944      	cbnz	r4, 800415c <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800414a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800414e:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8004152:	2101      	movs	r1, #1
 8004154:	f000 fe90 	bl	8004e78 <USBD_LL_PrepareReceive>
  }
  else
  {
    return USBD_FAIL;
  }
}
 8004158:	4620      	mov	r0, r4
 800415a:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 800415c:	2340      	movs	r3, #64	; 0x40
 800415e:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8004162:	2101      	movs	r1, #1
 8004164:	f000 fe88 	bl	8004e78 <USBD_LL_PrepareReceive>
    return USBD_OK;
 8004168:	2400      	movs	r4, #0
 800416a:	e7f5      	b.n	8004158 <USBD_CDC_ReceivePacket+0x1a>
    return USBD_FAIL;
 800416c:	2402      	movs	r4, #2
 800416e:	e7f3      	b.n	8004158 <USBD_CDC_ReceivePacket+0x1a>

08004170 <USBD_Init>:
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004170:	b198      	cbz	r0, 800419a <USBD_Init+0x2a>
{
 8004172:	b508      	push	{r3, lr}
 8004174:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8004176:	f8d0 02b4 	ldr.w	r0, [r0, #692]	; 0x2b4
 800417a:	b110      	cbz	r0, 8004182 <USBD_Init+0x12>
  {
    pdev->pClass = NULL;
 800417c:	2000      	movs	r0, #0
 800417e:	f8c3 02b4 	str.w	r0, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004182:	b109      	cbz	r1, 8004188 <USBD_Init+0x18>
  {
    pdev->pDesc = pdesc;
 8004184:	f8c3 12b0 	str.w	r1, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004188:	2101      	movs	r1, #1
 800418a:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->id = id;
 800418e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004190:	4618      	mov	r0, r3
 8004192:	f000 fddd 	bl	8004d50 <USBD_LL_Init>

  return USBD_OK;
 8004196:	2000      	movs	r0, #0
}
 8004198:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800419a:	2002      	movs	r0, #2
}
 800419c:	4770      	bx	lr

0800419e <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 800419e:	b119      	cbz	r1, 80041a8 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80041a0:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 80041a4:	2000      	movs	r0, #0
 80041a6:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80041a8:	2002      	movs	r0, #2
  }

  return status;
}
 80041aa:	4770      	bx	lr

080041ac <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80041ac:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80041ae:	f000 fe11 	bl	8004dd4 <USBD_LL_Start>

  return USBD_OK;
}
 80041b2:	2000      	movs	r0, #0
 80041b4:	bd08      	pop	{r3, pc}

080041b6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80041b6:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 80041b8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80041bc:	b12b      	cbz	r3, 80041ca <USBD_SetClassConfig+0x14>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_FAIL;
 80041c2:	2800      	cmp	r0, #0
 80041c4:	bf18      	it	ne
 80041c6:	2002      	movne	r0, #2
      ret = USBD_OK;
    }
  }

  return ret;
}
 80041c8:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 80041ca:	2002      	movs	r0, #2
 80041cc:	e7fc      	b.n	80041c8 <USBD_SetClassConfig+0x12>

080041ce <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80041ce:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80041d0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	4798      	blx	r3

  return USBD_OK;
}
 80041d8:	2000      	movs	r0, #0
 80041da:	bd08      	pop	{r3, pc}

080041dc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80041dc:	b538      	push	{r3, r4, r5, lr}
 80041de:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80041e0:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
 80041e4:	4628      	mov	r0, r5
 80041e6:	f000 f91d 	bl	8004424 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80041ea:	2301      	movs	r3, #1
 80041ec:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80041f0:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 80041f4:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80041f8:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
 80041fc:	f001 031f 	and.w	r3, r1, #31
 8004200:	2b01      	cmp	r3, #1
 8004202:	d00e      	beq.n	8004222 <USBD_LL_SetupStage+0x46>
 8004204:	2b02      	cmp	r3, #2
 8004206:	d011      	beq.n	800422c <USBD_LL_SetupStage+0x50>
 8004208:	b12b      	cbz	r3, 8004216 <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800420a:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800420e:	4620      	mov	r0, r4
 8004210:	f000 fdfb 	bl	8004e0a <USBD_LL_StallEP>
      break;
 8004214:	e003      	b.n	800421e <USBD_LL_SetupStage+0x42>
      USBD_StdDevReq(pdev, &pdev->request);
 8004216:	4629      	mov	r1, r5
 8004218:	4620      	mov	r0, r4
 800421a:	f000 f921 	bl	8004460 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 800421e:	2000      	movs	r0, #0
 8004220:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8004222:	4629      	mov	r1, r5
 8004224:	4620      	mov	r0, r4
 8004226:	f000 fad5 	bl	80047d4 <USBD_StdItfReq>
      break;
 800422a:	e7f8      	b.n	800421e <USBD_LL_SetupStage+0x42>
      USBD_StdEPReq(pdev, &pdev->request);
 800422c:	4629      	mov	r1, r5
 800422e:	4620      	mov	r0, r4
 8004230:	f000 fb00 	bl	8004834 <USBD_StdEPReq>
      break;
 8004234:	e7f3      	b.n	800421e <USBD_LL_SetupStage+0x42>

08004236 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004236:	b538      	push	{r3, r4, r5, lr}
 8004238:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800423a:	460d      	mov	r5, r1
 800423c:	bb81      	cbnz	r1, 80042a0 <USBD_LL_DataOutStage+0x6a>
 800423e:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004240:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8004244:	2a03      	cmp	r2, #3
 8004246:	d003      	beq.n	8004250 <USBD_LL_DataOutStage+0x1a>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8004248:	2a05      	cmp	r2, #5
 800424a:	d022      	beq.n	8004292 <USBD_LL_DataOutStage+0x5c>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800424c:	4608      	mov	r0, r1
 800424e:	e031      	b.n	80042b4 <USBD_LL_DataOutStage+0x7e>
      if (pep->rem_length > pep->maxpacket)
 8004250:	f8d0 1160 	ldr.w	r1, [r0, #352]	; 0x160
 8004254:	f8d0 2164 	ldr.w	r2, [r0, #356]	; 0x164
 8004258:	4291      	cmp	r1, r2
 800425a:	d90b      	bls.n	8004274 <USBD_LL_DataOutStage+0x3e>
        pep->rem_length -= pep->maxpacket;
 800425c:	1a89      	subs	r1, r1, r2
 800425e:	f8c0 1160 	str.w	r1, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8004262:	428a      	cmp	r2, r1
 8004264:	bf8c      	ite	hi
 8004266:	b28a      	uxthhi	r2, r1
 8004268:	b292      	uxthls	r2, r2
 800426a:	4619      	mov	r1, r3
 800426c:	f000 fbff 	bl	8004a6e <USBD_CtlContinueRx>
  return USBD_OK;
 8004270:	4628      	mov	r0, r5
 8004272:	e01f      	b.n	80042b4 <USBD_LL_DataOutStage+0x7e>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004274:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	b11b      	cbz	r3, 8004284 <USBD_LL_DataOutStage+0x4e>
 800427c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004280:	2a03      	cmp	r2, #3
 8004282:	d004      	beq.n	800428e <USBD_LL_DataOutStage+0x58>
        USBD_CtlSendStatus(pdev);
 8004284:	4620      	mov	r0, r4
 8004286:	f000 fbfa 	bl	8004a7e <USBD_CtlSendStatus>
  return USBD_OK;
 800428a:	4628      	mov	r0, r5
 800428c:	e012      	b.n	80042b4 <USBD_LL_DataOutStage+0x7e>
          pdev->pClass->EP0_RxReady(pdev);
 800428e:	4798      	blx	r3
 8004290:	e7f8      	b.n	8004284 <USBD_LL_DataOutStage+0x4e>
        pdev->ep0_state = USBD_EP0_IDLE;
 8004292:	2100      	movs	r1, #0
 8004294:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8004298:	f000 fdb7 	bl	8004e0a <USBD_LL_StallEP>
  return USBD_OK;
 800429c:	4628      	mov	r0, r5
 800429e:	e009      	b.n	80042b4 <USBD_LL_DataOutStage+0x7e>
  else if ((pdev->pClass->DataOut != NULL) &&
 80042a0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80042a4:	699b      	ldr	r3, [r3, #24]
 80042a6:	b133      	cbz	r3, 80042b6 <USBD_LL_DataOutStage+0x80>
 80042a8:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80042ac:	2a03      	cmp	r2, #3
 80042ae:	d104      	bne.n	80042ba <USBD_LL_DataOutStage+0x84>
    pdev->pClass->DataOut(pdev, epnum);
 80042b0:	4798      	blx	r3
  return USBD_OK;
 80042b2:	2000      	movs	r0, #0
}
 80042b4:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 80042b6:	2002      	movs	r0, #2
 80042b8:	e7fc      	b.n	80042b4 <USBD_LL_DataOutStage+0x7e>
 80042ba:	2002      	movs	r0, #2
 80042bc:	e7fa      	b.n	80042b4 <USBD_LL_DataOutStage+0x7e>

080042be <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80042be:	b538      	push	{r3, r4, r5, lr}
 80042c0:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80042c2:	460d      	mov	r5, r1
 80042c4:	2900      	cmp	r1, #0
 80042c6:	d152      	bne.n	800436e <USBD_LL_DataInStage+0xb0>
 80042c8:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80042ca:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 80042ce:	2a02      	cmp	r2, #2
 80042d0:	d00b      	beq.n	80042ea <USBD_LL_DataInStage+0x2c>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80042d2:	f032 0304 	bics.w	r3, r2, #4
 80042d6:	d102      	bne.n	80042de <USBD_LL_DataInStage+0x20>
          (pdev->ep0_state == USBD_EP0_IDLE))
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80042d8:	2180      	movs	r1, #128	; 0x80
 80042da:	f000 fd96 	bl	8004e0a <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80042de:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d03e      	beq.n	8004364 <USBD_LL_DataInStage+0xa6>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80042e6:	4628      	mov	r0, r5
}
 80042e8:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 80042ea:	6a01      	ldr	r1, [r0, #32]
 80042ec:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80042ee:	4291      	cmp	r1, r2
 80042f0:	d81b      	bhi.n	800432a <USBD_LL_DataInStage+0x6c>
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80042f2:	69c1      	ldr	r1, [r0, #28]
 80042f4:	fbb1 f3f2 	udiv	r3, r1, r2
 80042f8:	fb02 1313 	mls	r3, r2, r3, r1
 80042fc:	b92b      	cbnz	r3, 800430a <USBD_LL_DataInStage+0x4c>
 80042fe:	428a      	cmp	r2, r1
 8004300:	d803      	bhi.n	800430a <USBD_LL_DataInStage+0x4c>
            (pep->total_length >= pep->maxpacket) &&
 8004302:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 8004306:	4299      	cmp	r1, r3
 8004308:	d31c      	bcc.n	8004344 <USBD_LL_DataInStage+0x86>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800430a:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	b11b      	cbz	r3, 800431a <USBD_LL_DataInStage+0x5c>
 8004312:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 8004316:	2a03      	cmp	r2, #3
 8004318:	d021      	beq.n	800435e <USBD_LL_DataInStage+0xa0>
          USBD_LL_StallEP(pdev, 0x80U);
 800431a:	2180      	movs	r1, #128	; 0x80
 800431c:	4620      	mov	r0, r4
 800431e:	f000 fd74 	bl	8004e0a <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8004322:	4620      	mov	r0, r4
 8004324:	f000 fbb6 	bl	8004a94 <USBD_CtlReceiveStatus>
 8004328:	e7d9      	b.n	80042de <USBD_LL_DataInStage+0x20>
        pep->rem_length -= pep->maxpacket;
 800432a:	1a8a      	subs	r2, r1, r2
 800432c:	6202      	str	r2, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800432e:	b292      	uxth	r2, r2
 8004330:	4619      	mov	r1, r3
 8004332:	f000 fb85 	bl	8004a40 <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004336:	2300      	movs	r3, #0
 8004338:	461a      	mov	r2, r3
 800433a:	4619      	mov	r1, r3
 800433c:	4620      	mov	r0, r4
 800433e:	f000 fd9b 	bl	8004e78 <USBD_LL_PrepareReceive>
 8004342:	e7cc      	b.n	80042de <USBD_LL_DataInStage+0x20>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004344:	2200      	movs	r2, #0
 8004346:	4611      	mov	r1, r2
 8004348:	f000 fb7a 	bl	8004a40 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800434c:	2100      	movs	r1, #0
 800434e:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004352:	460b      	mov	r3, r1
 8004354:	460a      	mov	r2, r1
 8004356:	4620      	mov	r0, r4
 8004358:	f000 fd8e 	bl	8004e78 <USBD_LL_PrepareReceive>
 800435c:	e7bf      	b.n	80042de <USBD_LL_DataInStage+0x20>
            pdev->pClass->EP0_TxSent(pdev);
 800435e:	4620      	mov	r0, r4
 8004360:	4798      	blx	r3
 8004362:	e7da      	b.n	800431a <USBD_LL_DataInStage+0x5c>
      pdev->dev_test_mode = 0U;
 8004364:	2300      	movs	r3, #0
 8004366:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
  return USBD_OK;
 800436a:	4628      	mov	r0, r5
 800436c:	e7bc      	b.n	80042e8 <USBD_LL_DataInStage+0x2a>
  else if ((pdev->pClass->DataIn != NULL) &&
 800436e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004372:	695b      	ldr	r3, [r3, #20]
 8004374:	b133      	cbz	r3, 8004384 <USBD_LL_DataInStage+0xc6>
 8004376:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800437a:	2a03      	cmp	r2, #3
 800437c:	d104      	bne.n	8004388 <USBD_LL_DataInStage+0xca>
    pdev->pClass->DataIn(pdev, epnum);
 800437e:	4798      	blx	r3
  return USBD_OK;
 8004380:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 8004382:	e7b1      	b.n	80042e8 <USBD_LL_DataInStage+0x2a>
    return USBD_FAIL;
 8004384:	2002      	movs	r0, #2
 8004386:	e7af      	b.n	80042e8 <USBD_LL_DataInStage+0x2a>
 8004388:	2002      	movs	r0, #2
 800438a:	e7ad      	b.n	80042e8 <USBD_LL_DataInStage+0x2a>

0800438c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800438c:	b570      	push	{r4, r5, r6, lr}
 800438e:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004390:	2340      	movs	r3, #64	; 0x40
 8004392:	2200      	movs	r2, #0
 8004394:	4611      	mov	r1, r2
 8004396:	f000 fd25 	bl	8004de4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800439a:	2501      	movs	r5, #1
 800439c:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80043a0:	2640      	movs	r6, #64	; 0x40
 80043a2:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80043a6:	4633      	mov	r3, r6
 80043a8:	2200      	movs	r2, #0
 80043aa:	2180      	movs	r1, #128	; 0x80
 80043ac:	4620      	mov	r0, r4
 80043ae:	f000 fd19 	bl	8004de4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80043b2:	61a5      	str	r5, [r4, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80043b4:	6266      	str	r6, [r4, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80043b6:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80043ba:	2300      	movs	r3, #0
 80043bc:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 80043c0:	6063      	str	r3, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 80043c2:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4

  if (pdev->pClassData)
 80043c6:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 80043ca:	b12b      	cbz	r3, 80043d8 <USBD_LL_Reset+0x4c>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80043cc:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	2100      	movs	r1, #0
 80043d4:	4620      	mov	r0, r4
 80043d6:	4798      	blx	r3
  }

  return USBD_OK;
}
 80043d8:	2000      	movs	r0, #0
 80043da:	bd70      	pop	{r4, r5, r6, pc}

080043dc <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80043dc:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 80043de:	2000      	movs	r0, #0
 80043e0:	4770      	bx	lr

080043e2 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 80043e2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80043e6:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80043ea:	2304      	movs	r3, #4
 80043ec:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 80043f0:	2000      	movs	r0, #0
 80043f2:	4770      	bx	lr

080043f4 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80043f4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80043f8:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 80043fa:	bf04      	itt	eq
 80043fc:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 8004400:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8004404:	2000      	movs	r0, #0
 8004406:	4770      	bx	lr

08004408 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004408:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800440a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800440e:	2b03      	cmp	r3, #3
 8004410:	d001      	beq.n	8004416 <USBD_LL_SOF+0xe>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 8004412:	2000      	movs	r0, #0
 8004414:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 8004416:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800441a:	69db      	ldr	r3, [r3, #28]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d0f8      	beq.n	8004412 <USBD_LL_SOF+0xa>
      pdev->pClass->SOF(pdev);
 8004420:	4798      	blx	r3
 8004422:	e7f6      	b.n	8004412 <USBD_LL_SOF+0xa>

08004424 <USBD_ParseSetupRequest>:
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
  req->bmRequest = *(uint8_t *)(pdata);
 8004424:	780b      	ldrb	r3, [r1, #0]
 8004426:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8004428:	784b      	ldrb	r3, [r1, #1]
 800442a:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800442c:	78ca      	ldrb	r2, [r1, #3]
 800442e:	788b      	ldrb	r3, [r1, #2]
 8004430:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004434:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8004436:	794a      	ldrb	r2, [r1, #5]
 8004438:	790b      	ldrb	r3, [r1, #4]
 800443a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800443e:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8004440:	79ca      	ldrb	r2, [r1, #7]
 8004442:	798b      	ldrb	r3, [r1, #6]
 8004444:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004448:	80c3      	strh	r3, [r0, #6]

}
 800444a:	4770      	bx	lr

0800444c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800444c:	b510      	push	{r4, lr}
 800444e:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8004450:	2180      	movs	r1, #128	; 0x80
 8004452:	f000 fcda 	bl	8004e0a <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8004456:	2100      	movs	r1, #0
 8004458:	4620      	mov	r0, r4
 800445a:	f000 fcd6 	bl	8004e0a <USBD_LL_StallEP>
}
 800445e:	bd10      	pop	{r4, pc}

08004460 <USBD_StdDevReq>:
{
 8004460:	b530      	push	{r4, r5, lr}
 8004462:	b083      	sub	sp, #12
 8004464:	4605      	mov	r5, r0
 8004466:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004468:	780b      	ldrb	r3, [r1, #0]
 800446a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800446e:	2b20      	cmp	r3, #32
 8004470:	d005      	beq.n	800447e <USBD_StdDevReq+0x1e>
 8004472:	2b40      	cmp	r3, #64	; 0x40
 8004474:	d003      	beq.n	800447e <USBD_StdDevReq+0x1e>
 8004476:	b15b      	cbz	r3, 8004490 <USBD_StdDevReq+0x30>
      USBD_CtlError(pdev, req);
 8004478:	f7ff ffe8 	bl	800444c <USBD_CtlError>
      break;
 800447c:	e005      	b.n	800448a <USBD_StdDevReq+0x2a>
      pdev->pClass->Setup(pdev, req);
 800447e:	f8d5 32b4 	ldr.w	r3, [r5, #692]	; 0x2b4
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	4621      	mov	r1, r4
 8004486:	4628      	mov	r0, r5
 8004488:	4798      	blx	r3
}
 800448a:	2000      	movs	r0, #0
 800448c:	b003      	add	sp, #12
 800448e:	bd30      	pop	{r4, r5, pc}
      switch (req->bRequest)
 8004490:	784b      	ldrb	r3, [r1, #1]
 8004492:	2b09      	cmp	r3, #9
 8004494:	f200 8198 	bhi.w	80047c8 <USBD_StdDevReq+0x368>
 8004498:	e8df f013 	tbh	[pc, r3, lsl #1]
 800449c:	0184015f 	.word	0x0184015f
 80044a0:	017b0196 	.word	0x017b0196
 80044a4:	00c90196 	.word	0x00c90196
 80044a8:	0196000a 	.word	0x0196000a
 80044ac:	00ee0140 	.word	0x00ee0140
  uint16_t len = 0U;
 80044b0:	2300      	movs	r3, #0
 80044b2:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 80044b6:	884a      	ldrh	r2, [r1, #2]
 80044b8:	0a13      	lsrs	r3, r2, #8
 80044ba:	3b01      	subs	r3, #1
 80044bc:	2b06      	cmp	r3, #6
 80044be:	f200 80a4 	bhi.w	800460a <USBD_StdDevReq+0x1aa>
 80044c2:	e8df f003 	tbb	[pc, r3]
 80044c6:	1804      	.short	0x1804
 80044c8:	86a2a22c 	.word	0x86a2a22c
 80044cc:	93          	.byte	0x93
 80044cd:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80044ce:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f10d 0106 	add.w	r1, sp, #6
 80044d8:	7c00      	ldrb	r0, [r0, #16]
 80044da:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 80044dc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80044e0:	2a00      	cmp	r2, #0
 80044e2:	f000 809f 	beq.w	8004624 <USBD_StdDevReq+0x1c4>
 80044e6:	88e3      	ldrh	r3, [r4, #6]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	f040 8092 	bne.w	8004612 <USBD_StdDevReq+0x1b2>
      (void)USBD_CtlSendStatus(pdev);
 80044ee:	4628      	mov	r0, r5
 80044f0:	f000 fac5 	bl	8004a7e <USBD_CtlSendStatus>
 80044f4:	e7c9      	b.n	800448a <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80044f6:	7c03      	ldrb	r3, [r0, #16]
 80044f8:	b943      	cbnz	r3, 800450c <USBD_StdDevReq+0xac>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80044fa:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80044fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004500:	f10d 0006 	add.w	r0, sp, #6
 8004504:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004506:	2302      	movs	r3, #2
 8004508:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800450a:	e7e7      	b.n	80044dc <USBD_StdDevReq+0x7c>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800450c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004512:	f10d 0006 	add.w	r0, sp, #6
 8004516:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004518:	2302      	movs	r3, #2
 800451a:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800451c:	e7de      	b.n	80044dc <USBD_StdDevReq+0x7c>
      switch ((uint8_t)(req->wValue))
 800451e:	b2d2      	uxtb	r2, r2
 8004520:	2a05      	cmp	r2, #5
 8004522:	d852      	bhi.n	80045ca <USBD_StdDevReq+0x16a>
 8004524:	e8df f002 	tbb	[pc, r2]
 8004528:	2a1d1003 	.word	0x2a1d1003
 800452c:	4437      	.short	0x4437
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800452e:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	b123      	cbz	r3, 8004540 <USBD_StdDevReq+0xe0>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8004536:	f10d 0106 	add.w	r1, sp, #6
 800453a:	7c00      	ldrb	r0, [r0, #16]
 800453c:	4798      	blx	r3
  if (err != 0U)
 800453e:	e7cd      	b.n	80044dc <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 8004540:	4621      	mov	r1, r4
 8004542:	f7ff ff83 	bl	800444c <USBD_CtlError>
  if (err != 0U)
 8004546:	e7a0      	b.n	800448a <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8004548:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	b123      	cbz	r3, 800455a <USBD_StdDevReq+0xfa>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004550:	f10d 0106 	add.w	r1, sp, #6
 8004554:	7c00      	ldrb	r0, [r0, #16]
 8004556:	4798      	blx	r3
  if (err != 0U)
 8004558:	e7c0      	b.n	80044dc <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 800455a:	4621      	mov	r1, r4
 800455c:	f7ff ff76 	bl	800444c <USBD_CtlError>
  if (err != 0U)
 8004560:	e793      	b.n	800448a <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8004562:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	b123      	cbz	r3, 8004574 <USBD_StdDevReq+0x114>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800456a:	f10d 0106 	add.w	r1, sp, #6
 800456e:	7c00      	ldrb	r0, [r0, #16]
 8004570:	4798      	blx	r3
  if (err != 0U)
 8004572:	e7b3      	b.n	80044dc <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 8004574:	4621      	mov	r1, r4
 8004576:	f7ff ff69 	bl	800444c <USBD_CtlError>
  if (err != 0U)
 800457a:	e786      	b.n	800448a <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800457c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	b123      	cbz	r3, 800458e <USBD_StdDevReq+0x12e>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004584:	f10d 0106 	add.w	r1, sp, #6
 8004588:	7c00      	ldrb	r0, [r0, #16]
 800458a:	4798      	blx	r3
  if (err != 0U)
 800458c:	e7a6      	b.n	80044dc <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 800458e:	4621      	mov	r1, r4
 8004590:	f7ff ff5c 	bl	800444c <USBD_CtlError>
  if (err != 0U)
 8004594:	e779      	b.n	800448a <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8004596:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800459a:	695b      	ldr	r3, [r3, #20]
 800459c:	b123      	cbz	r3, 80045a8 <USBD_StdDevReq+0x148>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800459e:	f10d 0106 	add.w	r1, sp, #6
 80045a2:	7c00      	ldrb	r0, [r0, #16]
 80045a4:	4798      	blx	r3
  if (err != 0U)
 80045a6:	e799      	b.n	80044dc <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 80045a8:	4621      	mov	r1, r4
 80045aa:	f7ff ff4f 	bl	800444c <USBD_CtlError>
  if (err != 0U)
 80045ae:	e76c      	b.n	800448a <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80045b0:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80045b4:	699b      	ldr	r3, [r3, #24]
 80045b6:	b123      	cbz	r3, 80045c2 <USBD_StdDevReq+0x162>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80045b8:	f10d 0106 	add.w	r1, sp, #6
 80045bc:	7c00      	ldrb	r0, [r0, #16]
 80045be:	4798      	blx	r3
  if (err != 0U)
 80045c0:	e78c      	b.n	80044dc <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 80045c2:	4621      	mov	r1, r4
 80045c4:	f7ff ff42 	bl	800444c <USBD_CtlError>
  if (err != 0U)
 80045c8:	e75f      	b.n	800448a <USBD_StdDevReq+0x2a>
          USBD_CtlError(pdev, req);
 80045ca:	4621      	mov	r1, r4
 80045cc:	f7ff ff3e 	bl	800444c <USBD_CtlError>
  if (err != 0U)
 80045d0:	e75b      	b.n	800448a <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80045d2:	7c03      	ldrb	r3, [r0, #16]
 80045d4:	b933      	cbnz	r3, 80045e4 <USBD_StdDevReq+0x184>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80045d6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80045da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045dc:	f10d 0006 	add.w	r0, sp, #6
 80045e0:	4798      	blx	r3
  if (err != 0U)
 80045e2:	e77b      	b.n	80044dc <USBD_StdDevReq+0x7c>
        USBD_CtlError(pdev, req);
 80045e4:	4621      	mov	r1, r4
 80045e6:	f7ff ff31 	bl	800444c <USBD_CtlError>
  if (err != 0U)
 80045ea:	e74e      	b.n	800448a <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80045ec:	7c03      	ldrb	r3, [r0, #16]
 80045ee:	b943      	cbnz	r3, 8004602 <USBD_StdDevReq+0x1a2>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80045f0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80045f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f6:	f10d 0006 	add.w	r0, sp, #6
 80045fa:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80045fc:	2307      	movs	r3, #7
 80045fe:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8004600:	e76c      	b.n	80044dc <USBD_StdDevReq+0x7c>
        USBD_CtlError(pdev, req);
 8004602:	4621      	mov	r1, r4
 8004604:	f7ff ff22 	bl	800444c <USBD_CtlError>
  if (err != 0U)
 8004608:	e73f      	b.n	800448a <USBD_StdDevReq+0x2a>
      USBD_CtlError(pdev, req);
 800460a:	4621      	mov	r1, r4
 800460c:	f7ff ff1e 	bl	800444c <USBD_CtlError>
    return;
 8004610:	e73b      	b.n	800448a <USBD_StdDevReq+0x2a>
      len = MIN(len, req->wLength);
 8004612:	429a      	cmp	r2, r3
 8004614:	bf28      	it	cs
 8004616:	461a      	movcs	r2, r3
 8004618:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800461c:	4601      	mov	r1, r0
 800461e:	4628      	mov	r0, r5
 8004620:	f000 fa01 	bl	8004a26 <USBD_CtlSendData>
    if (req->wLength == 0U)
 8004624:	88e3      	ldrh	r3, [r4, #6]
 8004626:	2b00      	cmp	r3, #0
 8004628:	f47f af2f 	bne.w	800448a <USBD_StdDevReq+0x2a>
 800462c:	e75f      	b.n	80044ee <USBD_StdDevReq+0x8e>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800462e:	888b      	ldrh	r3, [r1, #4]
 8004630:	b9eb      	cbnz	r3, 800466e <USBD_StdDevReq+0x20e>
 8004632:	88cb      	ldrh	r3, [r1, #6]
 8004634:	b9db      	cbnz	r3, 800466e <USBD_StdDevReq+0x20e>
 8004636:	884b      	ldrh	r3, [r1, #2]
 8004638:	2b7f      	cmp	r3, #127	; 0x7f
 800463a:	d818      	bhi.n	800466e <USBD_StdDevReq+0x20e>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800463c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004640:	2a03      	cmp	r2, #3
 8004642:	d00d      	beq.n	8004660 <USBD_StdDevReq+0x200>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8004644:	b2dc      	uxtb	r4, r3
      pdev->dev_address = dev_addr;
 8004646:	f880 429e 	strb.w	r4, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800464a:	4621      	mov	r1, r4
 800464c:	f000 fc04 	bl	8004e58 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8004650:	4628      	mov	r0, r5
 8004652:	f000 fa14 	bl	8004a7e <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8004656:	b134      	cbz	r4, 8004666 <USBD_StdDevReq+0x206>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004658:	2302      	movs	r3, #2
 800465a:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 800465e:	e714      	b.n	800448a <USBD_StdDevReq+0x2a>
      USBD_CtlError(pdev, req);
 8004660:	f7ff fef4 	bl	800444c <USBD_CtlError>
 8004664:	e711      	b.n	800448a <USBD_StdDevReq+0x2a>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8004666:	2301      	movs	r3, #1
 8004668:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 800466c:	e70d      	b.n	800448a <USBD_StdDevReq+0x2a>
    USBD_CtlError(pdev, req);
 800466e:	4621      	mov	r1, r4
 8004670:	4628      	mov	r0, r5
 8004672:	f7ff feeb 	bl	800444c <USBD_CtlError>
 8004676:	e708      	b.n	800448a <USBD_StdDevReq+0x2a>
  cfgidx = (uint8_t)(req->wValue);
 8004678:	788b      	ldrb	r3, [r1, #2]
 800467a:	4a55      	ldr	r2, [pc, #340]	; (80047d0 <USBD_StdDevReq+0x370>)
 800467c:	7013      	strb	r3, [r2, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800467e:	2b01      	cmp	r3, #1
 8004680:	d80d      	bhi.n	800469e <USBD_StdDevReq+0x23e>
    switch (pdev->dev_state)
 8004682:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004686:	2a02      	cmp	r2, #2
 8004688:	d00c      	beq.n	80046a4 <USBD_StdDevReq+0x244>
 800468a:	2a03      	cmp	r2, #3
 800468c:	d020      	beq.n	80046d0 <USBD_StdDevReq+0x270>
        USBD_CtlError(pdev, req);
 800468e:	f7ff fedd 	bl	800444c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8004692:	4b4f      	ldr	r3, [pc, #316]	; (80047d0 <USBD_StdDevReq+0x370>)
 8004694:	7819      	ldrb	r1, [r3, #0]
 8004696:	4628      	mov	r0, r5
 8004698:	f7ff fd99 	bl	80041ce <USBD_ClrClassConfig>
        break;
 800469c:	e6f5      	b.n	800448a <USBD_StdDevReq+0x2a>
    USBD_CtlError(pdev, req);
 800469e:	f7ff fed5 	bl	800444c <USBD_CtlError>
 80046a2:	e6f2      	b.n	800448a <USBD_StdDevReq+0x2a>
        if (cfgidx)
 80046a4:	b18b      	cbz	r3, 80046ca <USBD_StdDevReq+0x26a>
          pdev->dev_config = cfgidx;
 80046a6:	2101      	movs	r1, #1
 80046a8:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80046aa:	2303      	movs	r3, #3
 80046ac:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80046b0:	f7ff fd81 	bl	80041b6 <USBD_SetClassConfig>
 80046b4:	2802      	cmp	r0, #2
 80046b6:	d003      	beq.n	80046c0 <USBD_StdDevReq+0x260>
          USBD_CtlSendStatus(pdev);
 80046b8:	4628      	mov	r0, r5
 80046ba:	f000 f9e0 	bl	8004a7e <USBD_CtlSendStatus>
 80046be:	e6e4      	b.n	800448a <USBD_StdDevReq+0x2a>
            USBD_CtlError(pdev, req);
 80046c0:	4621      	mov	r1, r4
 80046c2:	4628      	mov	r0, r5
 80046c4:	f7ff fec2 	bl	800444c <USBD_CtlError>
            return;
 80046c8:	e6df      	b.n	800448a <USBD_StdDevReq+0x2a>
          USBD_CtlSendStatus(pdev);
 80046ca:	f000 f9d8 	bl	8004a7e <USBD_CtlSendStatus>
 80046ce:	e6dc      	b.n	800448a <USBD_StdDevReq+0x2a>
        if (cfgidx == 0U)
 80046d0:	b18b      	cbz	r3, 80046f6 <USBD_StdDevReq+0x296>
        else if (cfgidx != pdev->dev_config)
 80046d2:	6841      	ldr	r1, [r0, #4]
 80046d4:	2901      	cmp	r1, #1
 80046d6:	d01e      	beq.n	8004716 <USBD_StdDevReq+0x2b6>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80046d8:	b2c9      	uxtb	r1, r1
 80046da:	f7ff fd78 	bl	80041ce <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80046de:	4b3c      	ldr	r3, [pc, #240]	; (80047d0 <USBD_StdDevReq+0x370>)
 80046e0:	7819      	ldrb	r1, [r3, #0]
 80046e2:	6069      	str	r1, [r5, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80046e4:	4628      	mov	r0, r5
 80046e6:	f7ff fd66 	bl	80041b6 <USBD_SetClassConfig>
 80046ea:	2802      	cmp	r0, #2
 80046ec:	d00e      	beq.n	800470c <USBD_StdDevReq+0x2ac>
          USBD_CtlSendStatus(pdev);
 80046ee:	4628      	mov	r0, r5
 80046f0:	f000 f9c5 	bl	8004a7e <USBD_CtlSendStatus>
 80046f4:	e6c9      	b.n	800448a <USBD_StdDevReq+0x2a>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80046f6:	2302      	movs	r3, #2
 80046f8:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80046fc:	2100      	movs	r1, #0
 80046fe:	6041      	str	r1, [r0, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8004700:	f7ff fd65 	bl	80041ce <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8004704:	4628      	mov	r0, r5
 8004706:	f000 f9ba 	bl	8004a7e <USBD_CtlSendStatus>
 800470a:	e6be      	b.n	800448a <USBD_StdDevReq+0x2a>
            USBD_CtlError(pdev, req);
 800470c:	4621      	mov	r1, r4
 800470e:	4628      	mov	r0, r5
 8004710:	f7ff fe9c 	bl	800444c <USBD_CtlError>
            return;
 8004714:	e6b9      	b.n	800448a <USBD_StdDevReq+0x2a>
          USBD_CtlSendStatus(pdev);
 8004716:	f000 f9b2 	bl	8004a7e <USBD_CtlSendStatus>
 800471a:	e6b6      	b.n	800448a <USBD_StdDevReq+0x2a>
  if (req->wLength != 1U)
 800471c:	88cb      	ldrh	r3, [r1, #6]
 800471e:	2b01      	cmp	r3, #1
 8004720:	d109      	bne.n	8004736 <USBD_StdDevReq+0x2d6>
    switch (pdev->dev_state)
 8004722:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004726:	2b02      	cmp	r3, #2
 8004728:	d808      	bhi.n	800473c <USBD_StdDevReq+0x2dc>
 800472a:	b973      	cbnz	r3, 800474a <USBD_StdDevReq+0x2ea>
        USBD_CtlError(pdev, req);
 800472c:	4621      	mov	r1, r4
 800472e:	4628      	mov	r0, r5
 8004730:	f7ff fe8c 	bl	800444c <USBD_CtlError>
        break;
 8004734:	e6a9      	b.n	800448a <USBD_StdDevReq+0x2a>
    USBD_CtlError(pdev, req);
 8004736:	f7ff fe89 	bl	800444c <USBD_CtlError>
 800473a:	e6a6      	b.n	800448a <USBD_StdDevReq+0x2a>
    switch (pdev->dev_state)
 800473c:	2b03      	cmp	r3, #3
 800473e:	d1f5      	bne.n	800472c <USBD_StdDevReq+0x2cc>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8004740:	2201      	movs	r2, #1
 8004742:	1d01      	adds	r1, r0, #4
 8004744:	f000 f96f 	bl	8004a26 <USBD_CtlSendData>
        break;
 8004748:	e69f      	b.n	800448a <USBD_StdDevReq+0x2a>
        pdev->dev_default_config = 0U;
 800474a:	4601      	mov	r1, r0
 800474c:	2300      	movs	r3, #0
 800474e:	f841 3f08 	str.w	r3, [r1, #8]!
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8004752:	2201      	movs	r2, #1
 8004754:	f000 f967 	bl	8004a26 <USBD_CtlSendData>
        break;
 8004758:	e697      	b.n	800448a <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 800475a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800475e:	3b01      	subs	r3, #1
 8004760:	2b02      	cmp	r3, #2
 8004762:	d813      	bhi.n	800478c <USBD_StdDevReq+0x32c>
      if (req->wLength != 0x2U)
 8004764:	88cb      	ldrh	r3, [r1, #6]
 8004766:	2b02      	cmp	r3, #2
 8004768:	d10d      	bne.n	8004786 <USBD_StdDevReq+0x326>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800476a:	2301      	movs	r3, #1
 800476c:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 800476e:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8004772:	b10b      	cbz	r3, 8004778 <USBD_StdDevReq+0x318>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8004774:	2303      	movs	r3, #3
 8004776:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8004778:	2202      	movs	r2, #2
 800477a:	f105 010c 	add.w	r1, r5, #12
 800477e:	4628      	mov	r0, r5
 8004780:	f000 f951 	bl	8004a26 <USBD_CtlSendData>
      break;
 8004784:	e681      	b.n	800448a <USBD_StdDevReq+0x2a>
        USBD_CtlError(pdev, req);
 8004786:	f7ff fe61 	bl	800444c <USBD_CtlError>
        break;
 800478a:	e67e      	b.n	800448a <USBD_StdDevReq+0x2a>
      USBD_CtlError(pdev, req);
 800478c:	f7ff fe5e 	bl	800444c <USBD_CtlError>
      break;
 8004790:	e67b      	b.n	800448a <USBD_StdDevReq+0x2a>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004792:	884b      	ldrh	r3, [r1, #2]
 8004794:	2b01      	cmp	r3, #1
 8004796:	f47f ae78 	bne.w	800448a <USBD_StdDevReq+0x2a>
    pdev->dev_remote_wakeup = 1U;
 800479a:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800479e:	f000 f96e 	bl	8004a7e <USBD_CtlSendStatus>
 80047a2:	e672      	b.n	800448a <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 80047a4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80047a8:	3b01      	subs	r3, #1
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d809      	bhi.n	80047c2 <USBD_StdDevReq+0x362>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80047ae:	884b      	ldrh	r3, [r1, #2]
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	f47f ae6a 	bne.w	800448a <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 80047b6:	2300      	movs	r3, #0
 80047b8:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80047bc:	f000 f95f 	bl	8004a7e <USBD_CtlSendStatus>
 80047c0:	e663      	b.n	800448a <USBD_StdDevReq+0x2a>
      USBD_CtlError(pdev, req);
 80047c2:	f7ff fe43 	bl	800444c <USBD_CtlError>
      break;
 80047c6:	e660      	b.n	800448a <USBD_StdDevReq+0x2a>
          USBD_CtlError(pdev, req);
 80047c8:	f7ff fe40 	bl	800444c <USBD_CtlError>
          break;
 80047cc:	e65d      	b.n	800448a <USBD_StdDevReq+0x2a>
 80047ce:	bf00      	nop
 80047d0:	200001fd 	.word	0x200001fd

080047d4 <USBD_StdItfReq>:
{
 80047d4:	b538      	push	{r3, r4, r5, lr}
 80047d6:	4605      	mov	r5, r0
 80047d8:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80047da:	780b      	ldrb	r3, [r1, #0]
 80047dc:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80047e0:	2a40      	cmp	r2, #64	; 0x40
 80047e2:	d006      	beq.n	80047f2 <USBD_StdItfReq+0x1e>
 80047e4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80047e8:	d003      	beq.n	80047f2 <USBD_StdItfReq+0x1e>
      USBD_CtlError(pdev, req);
 80047ea:	f7ff fe2f 	bl	800444c <USBD_CtlError>
}
 80047ee:	2000      	movs	r0, #0
 80047f0:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 80047f2:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 80047f6:	3b01      	subs	r3, #1
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d816      	bhi.n	800482a <USBD_StdItfReq+0x56>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80047fc:	7923      	ldrb	r3, [r4, #4]
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d80e      	bhi.n	8004820 <USBD_StdItfReq+0x4c>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004802:	f8d5 32b4 	ldr.w	r3, [r5, #692]	; 0x2b4
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	4621      	mov	r1, r4
 800480a:	4628      	mov	r0, r5
 800480c:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800480e:	88e3      	ldrh	r3, [r4, #6]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d1ec      	bne.n	80047ee <USBD_StdItfReq+0x1a>
 8004814:	2800      	cmp	r0, #0
 8004816:	d1ea      	bne.n	80047ee <USBD_StdItfReq+0x1a>
              USBD_CtlSendStatus(pdev);
 8004818:	4628      	mov	r0, r5
 800481a:	f000 f930 	bl	8004a7e <USBD_CtlSendStatus>
 800481e:	e7e6      	b.n	80047ee <USBD_StdItfReq+0x1a>
            USBD_CtlError(pdev, req);
 8004820:	4621      	mov	r1, r4
 8004822:	4628      	mov	r0, r5
 8004824:	f7ff fe12 	bl	800444c <USBD_CtlError>
 8004828:	e7e1      	b.n	80047ee <USBD_StdItfReq+0x1a>
          USBD_CtlError(pdev, req);
 800482a:	4621      	mov	r1, r4
 800482c:	4628      	mov	r0, r5
 800482e:	f7ff fe0d 	bl	800444c <USBD_CtlError>
          break;
 8004832:	e7dc      	b.n	80047ee <USBD_StdItfReq+0x1a>

08004834 <USBD_StdEPReq>:
{
 8004834:	b538      	push	{r3, r4, r5, lr}
 8004836:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004838:	780b      	ldrb	r3, [r1, #0]
 800483a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800483e:	2b20      	cmp	r3, #32
 8004840:	d005      	beq.n	800484e <USBD_StdEPReq+0x1a>
 8004842:	2b40      	cmp	r3, #64	; 0x40
 8004844:	d003      	beq.n	800484e <USBD_StdEPReq+0x1a>
 8004846:	b14b      	cbz	r3, 800485c <USBD_StdEPReq+0x28>
      USBD_CtlError(pdev, req);
 8004848:	f7ff fe00 	bl	800444c <USBD_CtlError>
      break;
 800484c:	e004      	b.n	8004858 <USBD_StdEPReq+0x24>
      pdev->pClass->Setup(pdev, req);
 800484e:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	4620      	mov	r0, r4
 8004856:	4798      	blx	r3
}
 8004858:	2000      	movs	r0, #0
 800485a:	bd38      	pop	{r3, r4, r5, pc}
  ep_addr  = LOBYTE(req->wIndex);
 800485c:	888a      	ldrh	r2, [r1, #4]
 800485e:	b2d0      	uxtb	r0, r2
      switch (req->bRequest)
 8004860:	784b      	ldrb	r3, [r1, #1]
 8004862:	2b01      	cmp	r3, #1
 8004864:	d031      	beq.n	80048ca <USBD_StdEPReq+0x96>
 8004866:	2b03      	cmp	r3, #3
 8004868:	d005      	beq.n	8004876 <USBD_StdEPReq+0x42>
 800486a:	2b00      	cmp	r3, #0
 800486c:	d056      	beq.n	800491c <USBD_StdEPReq+0xe8>
          USBD_CtlError(pdev, req);
 800486e:	4620      	mov	r0, r4
 8004870:	f7ff fdec 	bl	800444c <USBD_CtlError>
          break;
 8004874:	e7f0      	b.n	8004858 <USBD_StdEPReq+0x24>
          switch (pdev->dev_state)
 8004876:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800487a:	2b02      	cmp	r3, #2
 800487c:	d005      	beq.n	800488a <USBD_StdEPReq+0x56>
 800487e:	2b03      	cmp	r3, #3
 8004880:	d013      	beq.n	80048aa <USBD_StdEPReq+0x76>
              USBD_CtlError(pdev, req);
 8004882:	4620      	mov	r0, r4
 8004884:	f7ff fde2 	bl	800444c <USBD_CtlError>
              break;
 8004888:	e7e6      	b.n	8004858 <USBD_StdEPReq+0x24>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800488a:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 800488e:	d008      	beq.n	80048a2 <USBD_StdEPReq+0x6e>
                USBD_LL_StallEP(pdev, ep_addr);
 8004890:	4601      	mov	r1, r0
 8004892:	4620      	mov	r0, r4
 8004894:	f000 fab9 	bl	8004e0a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8004898:	2180      	movs	r1, #128	; 0x80
 800489a:	4620      	mov	r0, r4
 800489c:	f000 fab5 	bl	8004e0a <USBD_LL_StallEP>
 80048a0:	e7da      	b.n	8004858 <USBD_StdEPReq+0x24>
                USBD_CtlError(pdev, req);
 80048a2:	4620      	mov	r0, r4
 80048a4:	f7ff fdd2 	bl	800444c <USBD_CtlError>
 80048a8:	e7d6      	b.n	8004858 <USBD_StdEPReq+0x24>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80048aa:	884b      	ldrh	r3, [r1, #2]
 80048ac:	b923      	cbnz	r3, 80048b8 <USBD_StdEPReq+0x84>
                if ((ep_addr != 0x00U) &&
 80048ae:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 80048b2:	d001      	beq.n	80048b8 <USBD_StdEPReq+0x84>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80048b4:	88cb      	ldrh	r3, [r1, #6]
 80048b6:	b11b      	cbz	r3, 80048c0 <USBD_StdEPReq+0x8c>
              USBD_CtlSendStatus(pdev);
 80048b8:	4620      	mov	r0, r4
 80048ba:	f000 f8e0 	bl	8004a7e <USBD_CtlSendStatus>
              break;
 80048be:	e7cb      	b.n	8004858 <USBD_StdEPReq+0x24>
                  USBD_LL_StallEP(pdev, ep_addr);
 80048c0:	4601      	mov	r1, r0
 80048c2:	4620      	mov	r0, r4
 80048c4:	f000 faa1 	bl	8004e0a <USBD_LL_StallEP>
 80048c8:	e7f6      	b.n	80048b8 <USBD_StdEPReq+0x84>
          switch (pdev->dev_state)
 80048ca:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d005      	beq.n	80048de <USBD_StdEPReq+0xaa>
 80048d2:	2b03      	cmp	r3, #3
 80048d4:	d013      	beq.n	80048fe <USBD_StdEPReq+0xca>
              USBD_CtlError(pdev, req);
 80048d6:	4620      	mov	r0, r4
 80048d8:	f7ff fdb8 	bl	800444c <USBD_CtlError>
              break;
 80048dc:	e7bc      	b.n	8004858 <USBD_StdEPReq+0x24>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80048de:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 80048e2:	d008      	beq.n	80048f6 <USBD_StdEPReq+0xc2>
                USBD_LL_StallEP(pdev, ep_addr);
 80048e4:	4601      	mov	r1, r0
 80048e6:	4620      	mov	r0, r4
 80048e8:	f000 fa8f 	bl	8004e0a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80048ec:	2180      	movs	r1, #128	; 0x80
 80048ee:	4620      	mov	r0, r4
 80048f0:	f000 fa8b 	bl	8004e0a <USBD_LL_StallEP>
 80048f4:	e7b0      	b.n	8004858 <USBD_StdEPReq+0x24>
                USBD_CtlError(pdev, req);
 80048f6:	4620      	mov	r0, r4
 80048f8:	f7ff fda8 	bl	800444c <USBD_CtlError>
 80048fc:	e7ac      	b.n	8004858 <USBD_StdEPReq+0x24>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80048fe:	884b      	ldrh	r3, [r1, #2]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d1a9      	bne.n	8004858 <USBD_StdEPReq+0x24>
                if ((ep_addr & 0x7FU) != 0x00U)
 8004904:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 8004908:	d103      	bne.n	8004912 <USBD_StdEPReq+0xde>
                USBD_CtlSendStatus(pdev);
 800490a:	4620      	mov	r0, r4
 800490c:	f000 f8b7 	bl	8004a7e <USBD_CtlSendStatus>
 8004910:	e7a2      	b.n	8004858 <USBD_StdEPReq+0x24>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8004912:	4601      	mov	r1, r0
 8004914:	4620      	mov	r0, r4
 8004916:	f000 fa80 	bl	8004e1a <USBD_LL_ClearStallEP>
 800491a:	e7f6      	b.n	800490a <USBD_StdEPReq+0xd6>
          switch (pdev->dev_state)
 800491c:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8004920:	2b02      	cmp	r3, #2
 8004922:	d005      	beq.n	8004930 <USBD_StdEPReq+0xfc>
 8004924:	2b03      	cmp	r3, #3
 8004926:	d018      	beq.n	800495a <USBD_StdEPReq+0x126>
              USBD_CtlError(pdev, req);
 8004928:	4620      	mov	r0, r4
 800492a:	f7ff fd8f 	bl	800444c <USBD_CtlError>
              break;
 800492e:	e793      	b.n	8004858 <USBD_StdEPReq+0x24>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004930:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 8004934:	d003      	beq.n	800493e <USBD_StdEPReq+0x10a>
                USBD_CtlError(pdev, req);
 8004936:	4620      	mov	r0, r4
 8004938:	f7ff fd88 	bl	800444c <USBD_CtlError>
                break;
 800493c:	e78c      	b.n	8004858 <USBD_StdEPReq+0x24>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800493e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004942:	bf14      	ite	ne
 8004944:	f104 0114 	addne.w	r1, r4, #20
 8004948:	f504 71aa 	addeq.w	r1, r4, #340	; 0x154
              pep->status = 0x0000U;
 800494c:	2300      	movs	r3, #0
 800494e:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004950:	2202      	movs	r2, #2
 8004952:	4620      	mov	r0, r4
 8004954:	f000 f867 	bl	8004a26 <USBD_CtlSendData>
              break;
 8004958:	e77e      	b.n	8004858 <USBD_StdEPReq+0x24>
              if ((ep_addr & 0x80U) == 0x80U)
 800495a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800495e:	d11b      	bne.n	8004998 <USBD_StdEPReq+0x164>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004960:	f000 030f 	and.w	r3, r0, #15
 8004964:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004968:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800496c:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8004970:	b333      	cbz	r3, 80049c0 <USBD_StdEPReq+0x18c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004972:	f000 037f 	and.w	r3, r0, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004976:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800497a:	eb04 0583 	add.w	r5, r4, r3, lsl #2
 800497e:	f505 75aa 	add.w	r5, r5, #340	; 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004982:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 8004986:	d11f      	bne.n	80049c8 <USBD_StdEPReq+0x194>
                pep->status = 0x0000U;
 8004988:	2300      	movs	r3, #0
 800498a:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800498c:	2202      	movs	r2, #2
 800498e:	4629      	mov	r1, r5
 8004990:	4620      	mov	r0, r4
 8004992:	f000 f848 	bl	8004a26 <USBD_CtlSendData>
              break;
 8004996:	e75f      	b.n	8004858 <USBD_StdEPReq+0x24>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004998:	f000 030f 	and.w	r3, r0, #15
 800499c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80049a0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	b13b      	cbz	r3, 80049b8 <USBD_StdEPReq+0x184>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80049a8:	f000 057f 	and.w	r5, r0, #127	; 0x7f
 80049ac:	3501      	adds	r5, #1
 80049ae:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80049b2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80049b6:	e7e4      	b.n	8004982 <USBD_StdEPReq+0x14e>
                  USBD_CtlError(pdev, req);
 80049b8:	4620      	mov	r0, r4
 80049ba:	f7ff fd47 	bl	800444c <USBD_CtlError>
                  break;
 80049be:	e74b      	b.n	8004858 <USBD_StdEPReq+0x24>
                  USBD_CtlError(pdev, req);
 80049c0:	4620      	mov	r0, r4
 80049c2:	f7ff fd43 	bl	800444c <USBD_CtlError>
                  break;
 80049c6:	e747      	b.n	8004858 <USBD_StdEPReq+0x24>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80049c8:	4601      	mov	r1, r0
 80049ca:	4620      	mov	r0, r4
 80049cc:	f000 fa2d 	bl	8004e2a <USBD_LL_IsStallEP>
 80049d0:	b110      	cbz	r0, 80049d8 <USBD_StdEPReq+0x1a4>
                pep->status = 0x0001U;
 80049d2:	2301      	movs	r3, #1
 80049d4:	602b      	str	r3, [r5, #0]
 80049d6:	e7d9      	b.n	800498c <USBD_StdEPReq+0x158>
                pep->status = 0x0000U;
 80049d8:	2300      	movs	r3, #0
 80049da:	602b      	str	r3, [r5, #0]
 80049dc:	e7d6      	b.n	800498c <USBD_StdEPReq+0x158>

080049de <USBD_GetString>:
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;

  if (desc != NULL)
 80049de:	b308      	cbz	r0, 8004a24 <USBD_GetString+0x46>
{
 80049e0:	b470      	push	{r4, r5, r6}
 80049e2:	4604      	mov	r4, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 80049e4:	7803      	ldrb	r3, [r0, #0]
 80049e6:	b13b      	cbz	r3, 80049f8 <USBD_GetString+0x1a>
 80049e8:	f1c0 0601 	rsb	r6, r0, #1
  {
    len++;
 80049ec:	1983      	adds	r3, r0, r6
 80049ee:	b2db      	uxtb	r3, r3
  while (*buf != '\0')
 80049f0:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80049f4:	2d00      	cmp	r5, #0
 80049f6:	d1f9      	bne.n	80049ec <USBD_GetString+0xe>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80049f8:	3301      	adds	r3, #1
 80049fa:	005b      	lsls	r3, r3, #1
 80049fc:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80049fe:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8004a00:	2303      	movs	r3, #3
 8004a02:	704b      	strb	r3, [r1, #1]
    while (*desc != '\0')
 8004a04:	7820      	ldrb	r0, [r4, #0]
 8004a06:	b158      	cbz	r0, 8004a20 <USBD_GetString+0x42>
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8004a08:	2302      	movs	r3, #2
      unicode[idx++] =  0U;
 8004a0a:	2500      	movs	r5, #0
      unicode[idx++] = *desc++;
 8004a0c:	1c5a      	adds	r2, r3, #1
 8004a0e:	b2d2      	uxtb	r2, r2
 8004a10:	54c8      	strb	r0, [r1, r3]
      unicode[idx++] =  0U;
 8004a12:	3302      	adds	r3, #2
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	548d      	strb	r5, [r1, r2]
    while (*desc != '\0')
 8004a18:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8004a1c:	2800      	cmp	r0, #0
 8004a1e:	d1f5      	bne.n	8004a0c <USBD_GetString+0x2e>
}
 8004a20:	bc70      	pop	{r4, r5, r6}
 8004a22:	4770      	bx	lr
 8004a24:	4770      	bx	lr

08004a26 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8004a26:	b510      	push	{r4, lr}
 8004a28:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8004a2a:	2202      	movs	r2, #2
 8004a2c:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8004a30:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;
 8004a32:	6203      	str	r3, [r0, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004a34:	460a      	mov	r2, r1
 8004a36:	2100      	movs	r1, #0
 8004a38:	f000 fa16 	bl	8004e68 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004a3c:	2000      	movs	r0, #0
 8004a3e:	bd10      	pop	{r4, pc}

08004a40 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8004a40:	b508      	push	{r3, lr}
 8004a42:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004a44:	460a      	mov	r2, r1
 8004a46:	2100      	movs	r1, #0
 8004a48:	f000 fa0e 	bl	8004e68 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004a4c:	2000      	movs	r0, #0
 8004a4e:	bd08      	pop	{r3, pc}

08004a50 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8004a50:	b510      	push	{r4, lr}
 8004a52:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8004a54:	2203      	movs	r2, #3
 8004a56:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8004a5a:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8004a5e:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004a62:	460a      	mov	r2, r1
 8004a64:	2100      	movs	r1, #0
 8004a66:	f000 fa07 	bl	8004e78 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004a6a:	2000      	movs	r0, #0
 8004a6c:	bd10      	pop	{r4, pc}

08004a6e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8004a6e:	b508      	push	{r3, lr}
 8004a70:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004a72:	460a      	mov	r2, r1
 8004a74:	2100      	movs	r1, #0
 8004a76:	f000 f9ff 	bl	8004e78 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004a7a:	2000      	movs	r0, #0
 8004a7c:	bd08      	pop	{r3, pc}

08004a7e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8004a7e:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004a80:	2304      	movs	r3, #4
 8004a82:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8004a86:	2300      	movs	r3, #0
 8004a88:	461a      	mov	r2, r3
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	f000 f9ec 	bl	8004e68 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004a90:	2000      	movs	r0, #0
 8004a92:	bd08      	pop	{r3, pc}

08004a94 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8004a94:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8004a96:	2305      	movs	r3, #5
 8004a98:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	f000 f9e9 	bl	8004e78 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004aa6:	2000      	movs	r0, #0
 8004aa8:	bd08      	pop	{r3, pc}
	...

08004aac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8004aac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8004aae:	2200      	movs	r2, #0
 8004ab0:	490f      	ldr	r1, [pc, #60]	; (8004af0 <MX_USB_DEVICE_Init+0x44>)
 8004ab2:	4810      	ldr	r0, [pc, #64]	; (8004af4 <MX_USB_DEVICE_Init+0x48>)
 8004ab4:	f7ff fb5c 	bl	8004170 <USBD_Init>
 8004ab8:	b970      	cbnz	r0, 8004ad8 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8004aba:	490f      	ldr	r1, [pc, #60]	; (8004af8 <MX_USB_DEVICE_Init+0x4c>)
 8004abc:	480d      	ldr	r0, [pc, #52]	; (8004af4 <MX_USB_DEVICE_Init+0x48>)
 8004abe:	f7ff fb6e 	bl	800419e <USBD_RegisterClass>
 8004ac2:	b960      	cbnz	r0, 8004ade <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8004ac4:	490d      	ldr	r1, [pc, #52]	; (8004afc <MX_USB_DEVICE_Init+0x50>)
 8004ac6:	480b      	ldr	r0, [pc, #44]	; (8004af4 <MX_USB_DEVICE_Init+0x48>)
 8004ac8:	f7ff fb0a 	bl	80040e0 <USBD_CDC_RegisterInterface>
 8004acc:	b950      	cbnz	r0, 8004ae4 <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8004ace:	4809      	ldr	r0, [pc, #36]	; (8004af4 <MX_USB_DEVICE_Init+0x48>)
 8004ad0:	f7ff fb6c 	bl	80041ac <USBD_Start>
 8004ad4:	b948      	cbnz	r0, 8004aea <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8004ad6:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004ad8:	f7fc f960 	bl	8000d9c <Error_Handler>
 8004adc:	e7ed      	b.n	8004aba <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 8004ade:	f7fc f95d 	bl	8000d9c <Error_Handler>
 8004ae2:	e7ef      	b.n	8004ac4 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8004ae4:	f7fc f95a 	bl	8000d9c <Error_Handler>
 8004ae8:	e7f1      	b.n	8004ace <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 8004aea:	f7fc f957 	bl	8000d9c <Error_Handler>
}
 8004aee:	e7f2      	b.n	8004ad6 <MX_USB_DEVICE_Init+0x2a>
 8004af0:	2000012c 	.word	0x2000012c
 8004af4:	2000056c 	.word	0x2000056c
 8004af8:	2000000c 	.word	0x2000000c
 8004afc:	2000011c 	.word	0x2000011c

08004b00 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8004b00:	2000      	movs	r0, #0
 8004b02:	4770      	bx	lr

08004b04 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8004b04:	2000      	movs	r0, #0
 8004b06:	4770      	bx	lr

08004b08 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8004b08:	b510      	push	{r4, lr}
 8004b0a:	4601      	mov	r1, r0
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8004b0c:	4c04      	ldr	r4, [pc, #16]	; (8004b20 <CDC_Receive_FS+0x18>)
 8004b0e:	4620      	mov	r0, r4
 8004b10:	f7ff faf5 	bl	80040fe <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8004b14:	4620      	mov	r0, r4
 8004b16:	f7ff fb12 	bl	800413e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8004b1a:	2000      	movs	r0, #0
 8004b1c:	bd10      	pop	{r4, pc}
 8004b1e:	bf00      	nop
 8004b20:	2000056c 	.word	0x2000056c

08004b24 <CDC_Init_FS>:
{
 8004b24:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8004b26:	4c06      	ldr	r4, [pc, #24]	; (8004b40 <CDC_Init_FS+0x1c>)
 8004b28:	2200      	movs	r2, #0
 8004b2a:	4906      	ldr	r1, [pc, #24]	; (8004b44 <CDC_Init_FS+0x20>)
 8004b2c:	4620      	mov	r0, r4
 8004b2e:	f7ff fade 	bl	80040ee <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8004b32:	4905      	ldr	r1, [pc, #20]	; (8004b48 <CDC_Init_FS+0x24>)
 8004b34:	4620      	mov	r0, r4
 8004b36:	f7ff fae2 	bl	80040fe <USBD_CDC_SetRxBuffer>
}
 8004b3a:	2000      	movs	r0, #0
 8004b3c:	bd10      	pop	{r4, pc}
 8004b3e:	bf00      	nop
 8004b40:	2000056c 	.word	0x2000056c
 8004b44:	20000c18 	.word	0x20000c18
 8004b48:	20000830 	.word	0x20000830

08004b4c <CDC_Transmit_FS>:
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8004b4c:	4b09      	ldr	r3, [pc, #36]	; (8004b74 <CDC_Transmit_FS+0x28>)
 8004b4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
  if (hcdc->TxState != 0){
 8004b52:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004b56:	b10b      	cbz	r3, 8004b5c <CDC_Transmit_FS+0x10>
    return USBD_BUSY;
 8004b58:	2001      	movs	r0, #1
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
  /* USER CODE END 7 */
  return result;
}
 8004b5a:	4770      	bx	lr
{
 8004b5c:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8004b5e:	4c05      	ldr	r4, [pc, #20]	; (8004b74 <CDC_Transmit_FS+0x28>)
 8004b60:	460a      	mov	r2, r1
 8004b62:	4601      	mov	r1, r0
 8004b64:	4620      	mov	r0, r4
 8004b66:	f7ff fac2 	bl	80040ee <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8004b6a:	4620      	mov	r0, r4
 8004b6c:	f7ff facd 	bl	800410a <USBD_CDC_TransmitPacket>
}
 8004b70:	bd10      	pop	{r4, pc}
 8004b72:	bf00      	nop
 8004b74:	2000056c 	.word	0x2000056c

08004b78 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8004b78:	2312      	movs	r3, #18
 8004b7a:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8004b7c:	4800      	ldr	r0, [pc, #0]	; (8004b80 <USBD_FS_DeviceDescriptor+0x8>)
 8004b7e:	4770      	bx	lr
 8004b80:	20000148 	.word	0x20000148

08004b84 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8004b84:	2304      	movs	r3, #4
 8004b86:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8004b88:	4800      	ldr	r0, [pc, #0]	; (8004b8c <USBD_FS_LangIDStrDescriptor+0x8>)
 8004b8a:	4770      	bx	lr
 8004b8c:	2000015c 	.word	0x2000015c

08004b90 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8004b90:	b1aa      	cbz	r2, 8004bbe <IntToUnicode+0x2e>
{
 8004b92:	b470      	push	{r4, r5, r6}
 8004b94:	4614      	mov	r4, r2
  for (idx = 0; idx < len; idx++)
 8004b96:	2300      	movs	r3, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8004b98:	1c4e      	adds	r6, r1, #1
 8004b9a:	461d      	mov	r5, r3
    if (((value >> 28)) < 0xA)
 8004b9c:	0f02      	lsrs	r2, r0, #28
 8004b9e:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 8004ba2:	bf34      	ite	cc
 8004ba4:	3230      	addcc	r2, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8004ba6:	3237      	addcs	r2, #55	; 0x37
 8004ba8:	f801 2013 	strb.w	r2, [r1, r3, lsl #1]
    value = value << 4;
 8004bac:	0100      	lsls	r0, r0, #4
    pbuf[2 * idx + 1] = 0;
 8004bae:	f806 5013 	strb.w	r5, [r6, r3, lsl #1]
  for (idx = 0; idx < len; idx++)
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	b2da      	uxtb	r2, r3
 8004bb6:	42a2      	cmp	r2, r4
 8004bb8:	d3f0      	bcc.n	8004b9c <IntToUnicode+0xc>
  }
}
 8004bba:	bc70      	pop	{r4, r5, r6}
 8004bbc:	4770      	bx	lr
 8004bbe:	4770      	bx	lr

08004bc0 <USBD_FS_SerialStrDescriptor>:
{
 8004bc0:	b538      	push	{r3, r4, r5, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8004bc2:	231a      	movs	r3, #26
 8004bc4:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8004bc6:	4b0b      	ldr	r3, [pc, #44]	; (8004bf4 <USBD_FS_SerialStrDescriptor+0x34>)
 8004bc8:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8004bca:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 8004bcc:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 8004bce:	18c0      	adds	r0, r0, r3
 8004bd0:	d101      	bne.n	8004bd6 <USBD_FS_SerialStrDescriptor+0x16>
}
 8004bd2:	4809      	ldr	r0, [pc, #36]	; (8004bf8 <USBD_FS_SerialStrDescriptor+0x38>)
 8004bd4:	bd38      	pop	{r3, r4, r5, pc}
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8004bd6:	4b09      	ldr	r3, [pc, #36]	; (8004bfc <USBD_FS_SerialStrDescriptor+0x3c>)
 8004bd8:	681d      	ldr	r5, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8004bda:	4c07      	ldr	r4, [pc, #28]	; (8004bf8 <USBD_FS_SerialStrDescriptor+0x38>)
 8004bdc:	2208      	movs	r2, #8
 8004bde:	1ca1      	adds	r1, r4, #2
 8004be0:	f7ff ffd6 	bl	8004b90 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8004be4:	2204      	movs	r2, #4
 8004be6:	f104 0112 	add.w	r1, r4, #18
 8004bea:	4628      	mov	r0, r5
 8004bec:	f7ff ffd0 	bl	8004b90 <IntToUnicode>
 8004bf0:	e7ef      	b.n	8004bd2 <USBD_FS_SerialStrDescriptor+0x12>
 8004bf2:	bf00      	nop
 8004bf4:	1ffff7e8 	.word	0x1ffff7e8
 8004bf8:	20000160 	.word	0x20000160
 8004bfc:	1ffff7ec 	.word	0x1ffff7ec

08004c00 <USBD_FS_ProductStrDescriptor>:
{
 8004c00:	b508      	push	{r3, lr}
 8004c02:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8004c04:	4902      	ldr	r1, [pc, #8]	; (8004c10 <USBD_FS_ProductStrDescriptor+0x10>)
 8004c06:	4803      	ldr	r0, [pc, #12]	; (8004c14 <USBD_FS_ProductStrDescriptor+0x14>)
 8004c08:	f7ff fee9 	bl	80049de <USBD_GetString>
}
 8004c0c:	4800      	ldr	r0, [pc, #0]	; (8004c10 <USBD_FS_ProductStrDescriptor+0x10>)
 8004c0e:	bd08      	pop	{r3, pc}
 8004c10:	20001000 	.word	0x20001000
 8004c14:	080057d4 	.word	0x080057d4

08004c18 <USBD_FS_ManufacturerStrDescriptor>:
{
 8004c18:	b510      	push	{r4, lr}
 8004c1a:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8004c1c:	4c03      	ldr	r4, [pc, #12]	; (8004c2c <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8004c1e:	4621      	mov	r1, r4
 8004c20:	4803      	ldr	r0, [pc, #12]	; (8004c30 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8004c22:	f7ff fedc 	bl	80049de <USBD_GetString>
}
 8004c26:	4620      	mov	r0, r4
 8004c28:	bd10      	pop	{r4, pc}
 8004c2a:	bf00      	nop
 8004c2c:	20001000 	.word	0x20001000
 8004c30:	080057ec 	.word	0x080057ec

08004c34 <USBD_FS_ConfigStrDescriptor>:
{
 8004c34:	b508      	push	{r3, lr}
 8004c36:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8004c38:	4902      	ldr	r1, [pc, #8]	; (8004c44 <USBD_FS_ConfigStrDescriptor+0x10>)
 8004c3a:	4803      	ldr	r0, [pc, #12]	; (8004c48 <USBD_FS_ConfigStrDescriptor+0x14>)
 8004c3c:	f7ff fecf 	bl	80049de <USBD_GetString>
}
 8004c40:	4800      	ldr	r0, [pc, #0]	; (8004c44 <USBD_FS_ConfigStrDescriptor+0x10>)
 8004c42:	bd08      	pop	{r3, pc}
 8004c44:	20001000 	.word	0x20001000
 8004c48:	08005800 	.word	0x08005800

08004c4c <USBD_FS_InterfaceStrDescriptor>:
{
 8004c4c:	b508      	push	{r3, lr}
 8004c4e:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8004c50:	4902      	ldr	r1, [pc, #8]	; (8004c5c <USBD_FS_InterfaceStrDescriptor+0x10>)
 8004c52:	4803      	ldr	r0, [pc, #12]	; (8004c60 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8004c54:	f7ff fec3 	bl	80049de <USBD_GetString>
}
 8004c58:	4800      	ldr	r0, [pc, #0]	; (8004c5c <USBD_FS_InterfaceStrDescriptor+0x10>)
 8004c5a:	bd08      	pop	{r3, pc}
 8004c5c:	20001000 	.word	0x20001000
 8004c60:	0800580c 	.word	0x0800580c

08004c64 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8004c64:	b120      	cbz	r0, 8004c70 <USBD_Get_USB_Status+0xc>
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8004c66:	2802      	cmp	r0, #2
 8004c68:	bf14      	ite	ne
 8004c6a:	2002      	movne	r0, #2
 8004c6c:	2001      	moveq	r0, #1
 8004c6e:	4770      	bx	lr
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8004c70:	4770      	bx	lr
	...

08004c74 <HAL_PCD_MspInit>:
  if(pcdHandle->Instance==USB)
 8004c74:	6802      	ldr	r2, [r0, #0]
 8004c76:	4b0e      	ldr	r3, [pc, #56]	; (8004cb0 <HAL_PCD_MspInit+0x3c>)
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d000      	beq.n	8004c7e <HAL_PCD_MspInit+0xa>
 8004c7c:	4770      	bx	lr
{
 8004c7e:	b500      	push	{lr}
 8004c80:	b083      	sub	sp, #12
    __HAL_RCC_USB_CLK_ENABLE();
 8004c82:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004c86:	69da      	ldr	r2, [r3, #28]
 8004c88:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004c8c:	61da      	str	r2, [r3, #28]
 8004c8e:	69db      	ldr	r3, [r3, #28]
 8004c90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c94:	9301      	str	r3, [sp, #4]
 8004c96:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8004c98:	2200      	movs	r2, #0
 8004c9a:	4611      	mov	r1, r2
 8004c9c:	2014      	movs	r0, #20
 8004c9e:	f7fc fafb 	bl	8001298 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8004ca2:	2014      	movs	r0, #20
 8004ca4:	f7fc fb2a 	bl	80012fc <HAL_NVIC_EnableIRQ>
}
 8004ca8:	b003      	add	sp, #12
 8004caa:	f85d fb04 	ldr.w	pc, [sp], #4
 8004cae:	bf00      	nop
 8004cb0:	40005c00 	.word	0x40005c00

08004cb4 <HAL_PCD_SetupStageCallback>:
{
 8004cb4:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8004cb6:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 8004cba:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8004cbe:	f7ff fa8d 	bl	80041dc <USBD_LL_SetupStage>
}
 8004cc2:	bd08      	pop	{r3, pc}

08004cc4 <HAL_PCD_DataOutStageCallback>:
{
 8004cc4:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8004cc6:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8004cca:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8004cce:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8004cd2:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8004cd6:	f7ff faae 	bl	8004236 <USBD_LL_DataOutStage>
}
 8004cda:	bd08      	pop	{r3, pc}

08004cdc <HAL_PCD_DataInStageCallback>:
{
 8004cdc:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8004cde:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8004ce2:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8004ce6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ce8:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8004cec:	f7ff fae7 	bl	80042be <USBD_LL_DataInStage>
}
 8004cf0:	bd08      	pop	{r3, pc}

08004cf2 <HAL_PCD_SOFCallback>:
{
 8004cf2:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8004cf4:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8004cf8:	f7ff fb86 	bl	8004408 <USBD_LL_SOF>
}
 8004cfc:	bd08      	pop	{r3, pc}

08004cfe <HAL_PCD_ResetCallback>:
{
 8004cfe:	b510      	push	{r4, lr}
 8004d00:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8004d02:	6883      	ldr	r3, [r0, #8]
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d109      	bne.n	8004d1c <HAL_PCD_ResetCallback+0x1e>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8004d08:	2101      	movs	r1, #1
 8004d0a:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 8004d0e:	f7ff fb65 	bl	80043dc <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004d12:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 8004d16:	f7ff fb39 	bl	800438c <USBD_LL_Reset>
}
 8004d1a:	bd10      	pop	{r4, pc}
    Error_Handler();
 8004d1c:	f7fc f83e 	bl	8000d9c <Error_Handler>
 8004d20:	e7f2      	b.n	8004d08 <HAL_PCD_ResetCallback+0xa>
	...

08004d24 <HAL_PCD_SuspendCallback>:
{
 8004d24:	b510      	push	{r4, lr}
 8004d26:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8004d28:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8004d2c:	f7ff fb59 	bl	80043e2 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 8004d30:	69a3      	ldr	r3, [r4, #24]
 8004d32:	b123      	cbz	r3, 8004d3e <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004d34:	4a02      	ldr	r2, [pc, #8]	; (8004d40 <HAL_PCD_SuspendCallback+0x1c>)
 8004d36:	6913      	ldr	r3, [r2, #16]
 8004d38:	f043 0306 	orr.w	r3, r3, #6
 8004d3c:	6113      	str	r3, [r2, #16]
}
 8004d3e:	bd10      	pop	{r4, pc}
 8004d40:	e000ed00 	.word	0xe000ed00

08004d44 <HAL_PCD_ResumeCallback>:
{
 8004d44:	b508      	push	{r3, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8004d46:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8004d4a:	f7ff fb53 	bl	80043f4 <USBD_LL_Resume>
}
 8004d4e:	bd08      	pop	{r3, pc}

08004d50 <USBD_LL_Init>:
{
 8004d50:	b510      	push	{r4, lr}
 8004d52:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8004d54:	481d      	ldr	r0, [pc, #116]	; (8004dcc <USBD_LL_Init+0x7c>)
 8004d56:	f8c0 42e8 	str.w	r4, [r0, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8004d5a:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Instance = USB;
 8004d5e:	4b1c      	ldr	r3, [pc, #112]	; (8004dd0 <USBD_LL_Init+0x80>)
 8004d60:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8004d62:	2308      	movs	r3, #8
 8004d64:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8004d66:	2302      	movs	r3, #2
 8004d68:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8004d6e:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8004d70:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8004d72:	f7fc fc0c 	bl	800158e <HAL_PCD_Init>
 8004d76:	bb30      	cbnz	r0, 8004dc6 <USBD_LL_Init+0x76>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8004d78:	2318      	movs	r3, #24
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	4611      	mov	r1, r2
 8004d7e:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8004d82:	f7fd fb52 	bl	800242a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8004d86:	2358      	movs	r3, #88	; 0x58
 8004d88:	2200      	movs	r2, #0
 8004d8a:	2180      	movs	r1, #128	; 0x80
 8004d8c:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8004d90:	f7fd fb4b 	bl	800242a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8004d94:	23c0      	movs	r3, #192	; 0xc0
 8004d96:	2200      	movs	r2, #0
 8004d98:	2181      	movs	r1, #129	; 0x81
 8004d9a:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8004d9e:	f7fd fb44 	bl	800242a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8004da2:	f44f 7388 	mov.w	r3, #272	; 0x110
 8004da6:	2200      	movs	r2, #0
 8004da8:	2101      	movs	r1, #1
 8004daa:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8004dae:	f7fd fb3c 	bl	800242a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8004db2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004db6:	2200      	movs	r2, #0
 8004db8:	2182      	movs	r1, #130	; 0x82
 8004dba:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8004dbe:	f7fd fb34 	bl	800242a <HAL_PCDEx_PMAConfig>
}
 8004dc2:	2000      	movs	r0, #0
 8004dc4:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8004dc6:	f7fb ffe9 	bl	8000d9c <Error_Handler>
 8004dca:	e7d5      	b.n	8004d78 <USBD_LL_Init+0x28>
 8004dcc:	20001200 	.word	0x20001200
 8004dd0:	40005c00 	.word	0x40005c00

08004dd4 <USBD_LL_Start>:
{
 8004dd4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8004dd6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004dda:	f7fc fc59 	bl	8001690 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004dde:	f7ff ff41 	bl	8004c64 <USBD_Get_USB_Status>
}
 8004de2:	bd08      	pop	{r3, pc}

08004de4 <USBD_LL_OpenEP>:
{
 8004de4:	b510      	push	{r4, lr}
 8004de6:	4614      	mov	r4, r2
 8004de8:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8004dea:	4623      	mov	r3, r4
 8004dec:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004df0:	f7fd f9f7 	bl	80021e2 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004df4:	f7ff ff36 	bl	8004c64 <USBD_Get_USB_Status>
}
 8004df8:	bd10      	pop	{r4, pc}

08004dfa <USBD_LL_CloseEP>:
{
 8004dfa:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8004dfc:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004e00:	f7fd fa27 	bl	8002252 <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004e04:	f7ff ff2e 	bl	8004c64 <USBD_Get_USB_Status>
}
 8004e08:	bd08      	pop	{r3, pc}

08004e0a <USBD_LL_StallEP>:
{
 8004e0a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004e0c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004e10:	f7fd fa94 	bl	800233c <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004e14:	f7ff ff26 	bl	8004c64 <USBD_Get_USB_Status>
}
 8004e18:	bd08      	pop	{r3, pc}

08004e1a <USBD_LL_ClearStallEP>:
{
 8004e1a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8004e1c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004e20:	f7fd fac8 	bl	80023b4 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004e24:	f7ff ff1e 	bl	8004c64 <USBD_Get_USB_Status>
}
 8004e28:	bd08      	pop	{r3, pc}

08004e2a <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8004e2a:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  if((ep_addr & 0x80) == 0x80)
 8004e2e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004e32:	d108      	bne.n	8004e46 <USBD_LL_IsStallEP+0x1c>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8004e34:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8004e38:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8004e3c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8004e40:	f891 016a 	ldrb.w	r0, [r1, #362]	; 0x16a
}
 8004e44:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8004e46:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8004e4a:	3101      	adds	r1, #1
 8004e4c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8004e50:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8004e54:	7888      	ldrb	r0, [r1, #2]
 8004e56:	4770      	bx	lr

08004e58 <USBD_LL_SetUSBAddress>:
{
 8004e58:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8004e5a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004e5e:	f7fc fc30 	bl	80016c2 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004e62:	f7ff feff 	bl	8004c64 <USBD_Get_USB_Status>
}
 8004e66:	bd08      	pop	{r3, pc}

08004e68 <USBD_LL_Transmit>:
{
 8004e68:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8004e6a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004e6e:	f7fd fa48 	bl	8002302 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004e72:	f7ff fef7 	bl	8004c64 <USBD_Get_USB_Status>
}
 8004e76:	bd08      	pop	{r3, pc}

08004e78 <USBD_LL_PrepareReceive>:
{
 8004e78:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8004e7a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004e7e:	f7fd fa1a 	bl	80022b6 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004e82:	f7ff feef 	bl	8004c64 <USBD_Get_USB_Status>
}
 8004e86:	bd08      	pop	{r3, pc}

08004e88 <USBD_LL_GetRxDataSize>:
{
 8004e88:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8004e8a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004e8e:	f7fd fa2f 	bl	80022f0 <HAL_PCD_EP_GetRxCount>
}
 8004e92:	bd08      	pop	{r3, pc}

08004e94 <USBD_static_malloc>:
}
 8004e94:	4800      	ldr	r0, [pc, #0]	; (8004e98 <USBD_static_malloc+0x4>)
 8004e96:	4770      	bx	lr
 8004e98:	20000200 	.word	0x20000200

08004e9c <USBD_static_free>:
}
 8004e9c:	4770      	bx	lr

08004e9e <HAL_PCDEx_SetConnectionState>:
}
 8004e9e:	4770      	bx	lr

08004ea0 <__libc_init_array>:
 8004ea0:	b570      	push	{r4, r5, r6, lr}
 8004ea2:	2600      	movs	r6, #0
 8004ea4:	4d0c      	ldr	r5, [pc, #48]	; (8004ed8 <__libc_init_array+0x38>)
 8004ea6:	4c0d      	ldr	r4, [pc, #52]	; (8004edc <__libc_init_array+0x3c>)
 8004ea8:	1b64      	subs	r4, r4, r5
 8004eaa:	10a4      	asrs	r4, r4, #2
 8004eac:	42a6      	cmp	r6, r4
 8004eae:	d109      	bne.n	8004ec4 <__libc_init_array+0x24>
 8004eb0:	f000 fc6a 	bl	8005788 <_init>
 8004eb4:	2600      	movs	r6, #0
 8004eb6:	4d0a      	ldr	r5, [pc, #40]	; (8004ee0 <__libc_init_array+0x40>)
 8004eb8:	4c0a      	ldr	r4, [pc, #40]	; (8004ee4 <__libc_init_array+0x44>)
 8004eba:	1b64      	subs	r4, r4, r5
 8004ebc:	10a4      	asrs	r4, r4, #2
 8004ebe:	42a6      	cmp	r6, r4
 8004ec0:	d105      	bne.n	8004ece <__libc_init_array+0x2e>
 8004ec2:	bd70      	pop	{r4, r5, r6, pc}
 8004ec4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ec8:	4798      	blx	r3
 8004eca:	3601      	adds	r6, #1
 8004ecc:	e7ee      	b.n	8004eac <__libc_init_array+0xc>
 8004ece:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ed2:	4798      	blx	r3
 8004ed4:	3601      	adds	r6, #1
 8004ed6:	e7f2      	b.n	8004ebe <__libc_init_array+0x1e>
 8004ed8:	08005850 	.word	0x08005850
 8004edc:	08005850 	.word	0x08005850
 8004ee0:	08005850 	.word	0x08005850
 8004ee4:	08005854 	.word	0x08005854

08004ee8 <malloc>:
 8004ee8:	4b02      	ldr	r3, [pc, #8]	; (8004ef4 <malloc+0xc>)
 8004eea:	4601      	mov	r1, r0
 8004eec:	6818      	ldr	r0, [r3, #0]
 8004eee:	f000 b84f 	b.w	8004f90 <_malloc_r>
 8004ef2:	bf00      	nop
 8004ef4:	2000017c 	.word	0x2000017c

08004ef8 <_free_r>:
 8004ef8:	b538      	push	{r3, r4, r5, lr}
 8004efa:	4605      	mov	r5, r0
 8004efc:	2900      	cmp	r1, #0
 8004efe:	d043      	beq.n	8004f88 <_free_r+0x90>
 8004f00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f04:	1f0c      	subs	r4, r1, #4
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	bfb8      	it	lt
 8004f0a:	18e4      	addlt	r4, r4, r3
 8004f0c:	f000 f8ca 	bl	80050a4 <__malloc_lock>
 8004f10:	4a1e      	ldr	r2, [pc, #120]	; (8004f8c <_free_r+0x94>)
 8004f12:	6813      	ldr	r3, [r2, #0]
 8004f14:	4610      	mov	r0, r2
 8004f16:	b933      	cbnz	r3, 8004f26 <_free_r+0x2e>
 8004f18:	6063      	str	r3, [r4, #4]
 8004f1a:	6014      	str	r4, [r2, #0]
 8004f1c:	4628      	mov	r0, r5
 8004f1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f22:	f000 b8c5 	b.w	80050b0 <__malloc_unlock>
 8004f26:	42a3      	cmp	r3, r4
 8004f28:	d90a      	bls.n	8004f40 <_free_r+0x48>
 8004f2a:	6821      	ldr	r1, [r4, #0]
 8004f2c:	1862      	adds	r2, r4, r1
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	bf01      	itttt	eq
 8004f32:	681a      	ldreq	r2, [r3, #0]
 8004f34:	685b      	ldreq	r3, [r3, #4]
 8004f36:	1852      	addeq	r2, r2, r1
 8004f38:	6022      	streq	r2, [r4, #0]
 8004f3a:	6063      	str	r3, [r4, #4]
 8004f3c:	6004      	str	r4, [r0, #0]
 8004f3e:	e7ed      	b.n	8004f1c <_free_r+0x24>
 8004f40:	461a      	mov	r2, r3
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	b10b      	cbz	r3, 8004f4a <_free_r+0x52>
 8004f46:	42a3      	cmp	r3, r4
 8004f48:	d9fa      	bls.n	8004f40 <_free_r+0x48>
 8004f4a:	6811      	ldr	r1, [r2, #0]
 8004f4c:	1850      	adds	r0, r2, r1
 8004f4e:	42a0      	cmp	r0, r4
 8004f50:	d10b      	bne.n	8004f6a <_free_r+0x72>
 8004f52:	6820      	ldr	r0, [r4, #0]
 8004f54:	4401      	add	r1, r0
 8004f56:	1850      	adds	r0, r2, r1
 8004f58:	4283      	cmp	r3, r0
 8004f5a:	6011      	str	r1, [r2, #0]
 8004f5c:	d1de      	bne.n	8004f1c <_free_r+0x24>
 8004f5e:	6818      	ldr	r0, [r3, #0]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	4401      	add	r1, r0
 8004f64:	6011      	str	r1, [r2, #0]
 8004f66:	6053      	str	r3, [r2, #4]
 8004f68:	e7d8      	b.n	8004f1c <_free_r+0x24>
 8004f6a:	d902      	bls.n	8004f72 <_free_r+0x7a>
 8004f6c:	230c      	movs	r3, #12
 8004f6e:	602b      	str	r3, [r5, #0]
 8004f70:	e7d4      	b.n	8004f1c <_free_r+0x24>
 8004f72:	6820      	ldr	r0, [r4, #0]
 8004f74:	1821      	adds	r1, r4, r0
 8004f76:	428b      	cmp	r3, r1
 8004f78:	bf01      	itttt	eq
 8004f7a:	6819      	ldreq	r1, [r3, #0]
 8004f7c:	685b      	ldreq	r3, [r3, #4]
 8004f7e:	1809      	addeq	r1, r1, r0
 8004f80:	6021      	streq	r1, [r4, #0]
 8004f82:	6063      	str	r3, [r4, #4]
 8004f84:	6054      	str	r4, [r2, #4]
 8004f86:	e7c9      	b.n	8004f1c <_free_r+0x24>
 8004f88:	bd38      	pop	{r3, r4, r5, pc}
 8004f8a:	bf00      	nop
 8004f8c:	20000420 	.word	0x20000420

08004f90 <_malloc_r>:
 8004f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f92:	1ccd      	adds	r5, r1, #3
 8004f94:	f025 0503 	bic.w	r5, r5, #3
 8004f98:	3508      	adds	r5, #8
 8004f9a:	2d0c      	cmp	r5, #12
 8004f9c:	bf38      	it	cc
 8004f9e:	250c      	movcc	r5, #12
 8004fa0:	2d00      	cmp	r5, #0
 8004fa2:	4606      	mov	r6, r0
 8004fa4:	db01      	blt.n	8004faa <_malloc_r+0x1a>
 8004fa6:	42a9      	cmp	r1, r5
 8004fa8:	d903      	bls.n	8004fb2 <_malloc_r+0x22>
 8004faa:	230c      	movs	r3, #12
 8004fac:	6033      	str	r3, [r6, #0]
 8004fae:	2000      	movs	r0, #0
 8004fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fb2:	f000 f877 	bl	80050a4 <__malloc_lock>
 8004fb6:	4921      	ldr	r1, [pc, #132]	; (800503c <_malloc_r+0xac>)
 8004fb8:	680a      	ldr	r2, [r1, #0]
 8004fba:	4614      	mov	r4, r2
 8004fbc:	b99c      	cbnz	r4, 8004fe6 <_malloc_r+0x56>
 8004fbe:	4f20      	ldr	r7, [pc, #128]	; (8005040 <_malloc_r+0xb0>)
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	b923      	cbnz	r3, 8004fce <_malloc_r+0x3e>
 8004fc4:	4621      	mov	r1, r4
 8004fc6:	4630      	mov	r0, r6
 8004fc8:	f000 f83c 	bl	8005044 <_sbrk_r>
 8004fcc:	6038      	str	r0, [r7, #0]
 8004fce:	4629      	mov	r1, r5
 8004fd0:	4630      	mov	r0, r6
 8004fd2:	f000 f837 	bl	8005044 <_sbrk_r>
 8004fd6:	1c43      	adds	r3, r0, #1
 8004fd8:	d123      	bne.n	8005022 <_malloc_r+0x92>
 8004fda:	230c      	movs	r3, #12
 8004fdc:	4630      	mov	r0, r6
 8004fde:	6033      	str	r3, [r6, #0]
 8004fe0:	f000 f866 	bl	80050b0 <__malloc_unlock>
 8004fe4:	e7e3      	b.n	8004fae <_malloc_r+0x1e>
 8004fe6:	6823      	ldr	r3, [r4, #0]
 8004fe8:	1b5b      	subs	r3, r3, r5
 8004fea:	d417      	bmi.n	800501c <_malloc_r+0x8c>
 8004fec:	2b0b      	cmp	r3, #11
 8004fee:	d903      	bls.n	8004ff8 <_malloc_r+0x68>
 8004ff0:	6023      	str	r3, [r4, #0]
 8004ff2:	441c      	add	r4, r3
 8004ff4:	6025      	str	r5, [r4, #0]
 8004ff6:	e004      	b.n	8005002 <_malloc_r+0x72>
 8004ff8:	6863      	ldr	r3, [r4, #4]
 8004ffa:	42a2      	cmp	r2, r4
 8004ffc:	bf0c      	ite	eq
 8004ffe:	600b      	streq	r3, [r1, #0]
 8005000:	6053      	strne	r3, [r2, #4]
 8005002:	4630      	mov	r0, r6
 8005004:	f000 f854 	bl	80050b0 <__malloc_unlock>
 8005008:	f104 000b 	add.w	r0, r4, #11
 800500c:	1d23      	adds	r3, r4, #4
 800500e:	f020 0007 	bic.w	r0, r0, #7
 8005012:	1ac2      	subs	r2, r0, r3
 8005014:	d0cc      	beq.n	8004fb0 <_malloc_r+0x20>
 8005016:	1a1b      	subs	r3, r3, r0
 8005018:	50a3      	str	r3, [r4, r2]
 800501a:	e7c9      	b.n	8004fb0 <_malloc_r+0x20>
 800501c:	4622      	mov	r2, r4
 800501e:	6864      	ldr	r4, [r4, #4]
 8005020:	e7cc      	b.n	8004fbc <_malloc_r+0x2c>
 8005022:	1cc4      	adds	r4, r0, #3
 8005024:	f024 0403 	bic.w	r4, r4, #3
 8005028:	42a0      	cmp	r0, r4
 800502a:	d0e3      	beq.n	8004ff4 <_malloc_r+0x64>
 800502c:	1a21      	subs	r1, r4, r0
 800502e:	4630      	mov	r0, r6
 8005030:	f000 f808 	bl	8005044 <_sbrk_r>
 8005034:	3001      	adds	r0, #1
 8005036:	d1dd      	bne.n	8004ff4 <_malloc_r+0x64>
 8005038:	e7cf      	b.n	8004fda <_malloc_r+0x4a>
 800503a:	bf00      	nop
 800503c:	20000420 	.word	0x20000420
 8005040:	20000424 	.word	0x20000424

08005044 <_sbrk_r>:
 8005044:	b538      	push	{r3, r4, r5, lr}
 8005046:	2300      	movs	r3, #0
 8005048:	4d05      	ldr	r5, [pc, #20]	; (8005060 <_sbrk_r+0x1c>)
 800504a:	4604      	mov	r4, r0
 800504c:	4608      	mov	r0, r1
 800504e:	602b      	str	r3, [r5, #0]
 8005050:	f000 fb8c 	bl	800576c <_sbrk>
 8005054:	1c43      	adds	r3, r0, #1
 8005056:	d102      	bne.n	800505e <_sbrk_r+0x1a>
 8005058:	682b      	ldr	r3, [r5, #0]
 800505a:	b103      	cbz	r3, 800505e <_sbrk_r+0x1a>
 800505c:	6023      	str	r3, [r4, #0]
 800505e:	bd38      	pop	{r3, r4, r5, pc}
 8005060:	200014ec 	.word	0x200014ec

08005064 <siprintf>:
 8005064:	b40e      	push	{r1, r2, r3}
 8005066:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800506a:	b500      	push	{lr}
 800506c:	b09c      	sub	sp, #112	; 0x70
 800506e:	ab1d      	add	r3, sp, #116	; 0x74
 8005070:	9002      	str	r0, [sp, #8]
 8005072:	9006      	str	r0, [sp, #24]
 8005074:	9107      	str	r1, [sp, #28]
 8005076:	9104      	str	r1, [sp, #16]
 8005078:	4808      	ldr	r0, [pc, #32]	; (800509c <siprintf+0x38>)
 800507a:	4909      	ldr	r1, [pc, #36]	; (80050a0 <siprintf+0x3c>)
 800507c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005080:	9105      	str	r1, [sp, #20]
 8005082:	6800      	ldr	r0, [r0, #0]
 8005084:	a902      	add	r1, sp, #8
 8005086:	9301      	str	r3, [sp, #4]
 8005088:	f000 f874 	bl	8005174 <_svfiprintf_r>
 800508c:	2200      	movs	r2, #0
 800508e:	9b02      	ldr	r3, [sp, #8]
 8005090:	701a      	strb	r2, [r3, #0]
 8005092:	b01c      	add	sp, #112	; 0x70
 8005094:	f85d eb04 	ldr.w	lr, [sp], #4
 8005098:	b003      	add	sp, #12
 800509a:	4770      	bx	lr
 800509c:	2000017c 	.word	0x2000017c
 80050a0:	ffff0208 	.word	0xffff0208

080050a4 <__malloc_lock>:
 80050a4:	4801      	ldr	r0, [pc, #4]	; (80050ac <__malloc_lock+0x8>)
 80050a6:	f000 bafb 	b.w	80056a0 <__retarget_lock_acquire_recursive>
 80050aa:	bf00      	nop
 80050ac:	200014f4 	.word	0x200014f4

080050b0 <__malloc_unlock>:
 80050b0:	4801      	ldr	r0, [pc, #4]	; (80050b8 <__malloc_unlock+0x8>)
 80050b2:	f000 baf6 	b.w	80056a2 <__retarget_lock_release_recursive>
 80050b6:	bf00      	nop
 80050b8:	200014f4 	.word	0x200014f4

080050bc <__ssputs_r>:
 80050bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050c0:	688e      	ldr	r6, [r1, #8]
 80050c2:	4682      	mov	sl, r0
 80050c4:	429e      	cmp	r6, r3
 80050c6:	460c      	mov	r4, r1
 80050c8:	4690      	mov	r8, r2
 80050ca:	461f      	mov	r7, r3
 80050cc:	d838      	bhi.n	8005140 <__ssputs_r+0x84>
 80050ce:	898a      	ldrh	r2, [r1, #12]
 80050d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80050d4:	d032      	beq.n	800513c <__ssputs_r+0x80>
 80050d6:	6825      	ldr	r5, [r4, #0]
 80050d8:	6909      	ldr	r1, [r1, #16]
 80050da:	3301      	adds	r3, #1
 80050dc:	eba5 0901 	sub.w	r9, r5, r1
 80050e0:	6965      	ldr	r5, [r4, #20]
 80050e2:	444b      	add	r3, r9
 80050e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80050e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80050ec:	106d      	asrs	r5, r5, #1
 80050ee:	429d      	cmp	r5, r3
 80050f0:	bf38      	it	cc
 80050f2:	461d      	movcc	r5, r3
 80050f4:	0553      	lsls	r3, r2, #21
 80050f6:	d531      	bpl.n	800515c <__ssputs_r+0xa0>
 80050f8:	4629      	mov	r1, r5
 80050fa:	f7ff ff49 	bl	8004f90 <_malloc_r>
 80050fe:	4606      	mov	r6, r0
 8005100:	b950      	cbnz	r0, 8005118 <__ssputs_r+0x5c>
 8005102:	230c      	movs	r3, #12
 8005104:	f04f 30ff 	mov.w	r0, #4294967295
 8005108:	f8ca 3000 	str.w	r3, [sl]
 800510c:	89a3      	ldrh	r3, [r4, #12]
 800510e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005112:	81a3      	strh	r3, [r4, #12]
 8005114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005118:	464a      	mov	r2, r9
 800511a:	6921      	ldr	r1, [r4, #16]
 800511c:	f000 fad0 	bl	80056c0 <memcpy>
 8005120:	89a3      	ldrh	r3, [r4, #12]
 8005122:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005126:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800512a:	81a3      	strh	r3, [r4, #12]
 800512c:	6126      	str	r6, [r4, #16]
 800512e:	444e      	add	r6, r9
 8005130:	6026      	str	r6, [r4, #0]
 8005132:	463e      	mov	r6, r7
 8005134:	6165      	str	r5, [r4, #20]
 8005136:	eba5 0509 	sub.w	r5, r5, r9
 800513a:	60a5      	str	r5, [r4, #8]
 800513c:	42be      	cmp	r6, r7
 800513e:	d900      	bls.n	8005142 <__ssputs_r+0x86>
 8005140:	463e      	mov	r6, r7
 8005142:	4632      	mov	r2, r6
 8005144:	4641      	mov	r1, r8
 8005146:	6820      	ldr	r0, [r4, #0]
 8005148:	f000 fac8 	bl	80056dc <memmove>
 800514c:	68a3      	ldr	r3, [r4, #8]
 800514e:	6822      	ldr	r2, [r4, #0]
 8005150:	1b9b      	subs	r3, r3, r6
 8005152:	4432      	add	r2, r6
 8005154:	2000      	movs	r0, #0
 8005156:	60a3      	str	r3, [r4, #8]
 8005158:	6022      	str	r2, [r4, #0]
 800515a:	e7db      	b.n	8005114 <__ssputs_r+0x58>
 800515c:	462a      	mov	r2, r5
 800515e:	f000 fad7 	bl	8005710 <_realloc_r>
 8005162:	4606      	mov	r6, r0
 8005164:	2800      	cmp	r0, #0
 8005166:	d1e1      	bne.n	800512c <__ssputs_r+0x70>
 8005168:	4650      	mov	r0, sl
 800516a:	6921      	ldr	r1, [r4, #16]
 800516c:	f7ff fec4 	bl	8004ef8 <_free_r>
 8005170:	e7c7      	b.n	8005102 <__ssputs_r+0x46>
	...

08005174 <_svfiprintf_r>:
 8005174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005178:	4698      	mov	r8, r3
 800517a:	898b      	ldrh	r3, [r1, #12]
 800517c:	4607      	mov	r7, r0
 800517e:	061b      	lsls	r3, r3, #24
 8005180:	460d      	mov	r5, r1
 8005182:	4614      	mov	r4, r2
 8005184:	b09d      	sub	sp, #116	; 0x74
 8005186:	d50e      	bpl.n	80051a6 <_svfiprintf_r+0x32>
 8005188:	690b      	ldr	r3, [r1, #16]
 800518a:	b963      	cbnz	r3, 80051a6 <_svfiprintf_r+0x32>
 800518c:	2140      	movs	r1, #64	; 0x40
 800518e:	f7ff feff 	bl	8004f90 <_malloc_r>
 8005192:	6028      	str	r0, [r5, #0]
 8005194:	6128      	str	r0, [r5, #16]
 8005196:	b920      	cbnz	r0, 80051a2 <_svfiprintf_r+0x2e>
 8005198:	230c      	movs	r3, #12
 800519a:	603b      	str	r3, [r7, #0]
 800519c:	f04f 30ff 	mov.w	r0, #4294967295
 80051a0:	e0d1      	b.n	8005346 <_svfiprintf_r+0x1d2>
 80051a2:	2340      	movs	r3, #64	; 0x40
 80051a4:	616b      	str	r3, [r5, #20]
 80051a6:	2300      	movs	r3, #0
 80051a8:	9309      	str	r3, [sp, #36]	; 0x24
 80051aa:	2320      	movs	r3, #32
 80051ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80051b0:	2330      	movs	r3, #48	; 0x30
 80051b2:	f04f 0901 	mov.w	r9, #1
 80051b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80051ba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005360 <_svfiprintf_r+0x1ec>
 80051be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80051c2:	4623      	mov	r3, r4
 80051c4:	469a      	mov	sl, r3
 80051c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051ca:	b10a      	cbz	r2, 80051d0 <_svfiprintf_r+0x5c>
 80051cc:	2a25      	cmp	r2, #37	; 0x25
 80051ce:	d1f9      	bne.n	80051c4 <_svfiprintf_r+0x50>
 80051d0:	ebba 0b04 	subs.w	fp, sl, r4
 80051d4:	d00b      	beq.n	80051ee <_svfiprintf_r+0x7a>
 80051d6:	465b      	mov	r3, fp
 80051d8:	4622      	mov	r2, r4
 80051da:	4629      	mov	r1, r5
 80051dc:	4638      	mov	r0, r7
 80051de:	f7ff ff6d 	bl	80050bc <__ssputs_r>
 80051e2:	3001      	adds	r0, #1
 80051e4:	f000 80aa 	beq.w	800533c <_svfiprintf_r+0x1c8>
 80051e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051ea:	445a      	add	r2, fp
 80051ec:	9209      	str	r2, [sp, #36]	; 0x24
 80051ee:	f89a 3000 	ldrb.w	r3, [sl]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	f000 80a2 	beq.w	800533c <_svfiprintf_r+0x1c8>
 80051f8:	2300      	movs	r3, #0
 80051fa:	f04f 32ff 	mov.w	r2, #4294967295
 80051fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005202:	f10a 0a01 	add.w	sl, sl, #1
 8005206:	9304      	str	r3, [sp, #16]
 8005208:	9307      	str	r3, [sp, #28]
 800520a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800520e:	931a      	str	r3, [sp, #104]	; 0x68
 8005210:	4654      	mov	r4, sl
 8005212:	2205      	movs	r2, #5
 8005214:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005218:	4851      	ldr	r0, [pc, #324]	; (8005360 <_svfiprintf_r+0x1ec>)
 800521a:	f000 fa43 	bl	80056a4 <memchr>
 800521e:	9a04      	ldr	r2, [sp, #16]
 8005220:	b9d8      	cbnz	r0, 800525a <_svfiprintf_r+0xe6>
 8005222:	06d0      	lsls	r0, r2, #27
 8005224:	bf44      	itt	mi
 8005226:	2320      	movmi	r3, #32
 8005228:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800522c:	0711      	lsls	r1, r2, #28
 800522e:	bf44      	itt	mi
 8005230:	232b      	movmi	r3, #43	; 0x2b
 8005232:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005236:	f89a 3000 	ldrb.w	r3, [sl]
 800523a:	2b2a      	cmp	r3, #42	; 0x2a
 800523c:	d015      	beq.n	800526a <_svfiprintf_r+0xf6>
 800523e:	4654      	mov	r4, sl
 8005240:	2000      	movs	r0, #0
 8005242:	f04f 0c0a 	mov.w	ip, #10
 8005246:	9a07      	ldr	r2, [sp, #28]
 8005248:	4621      	mov	r1, r4
 800524a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800524e:	3b30      	subs	r3, #48	; 0x30
 8005250:	2b09      	cmp	r3, #9
 8005252:	d94e      	bls.n	80052f2 <_svfiprintf_r+0x17e>
 8005254:	b1b0      	cbz	r0, 8005284 <_svfiprintf_r+0x110>
 8005256:	9207      	str	r2, [sp, #28]
 8005258:	e014      	b.n	8005284 <_svfiprintf_r+0x110>
 800525a:	eba0 0308 	sub.w	r3, r0, r8
 800525e:	fa09 f303 	lsl.w	r3, r9, r3
 8005262:	4313      	orrs	r3, r2
 8005264:	46a2      	mov	sl, r4
 8005266:	9304      	str	r3, [sp, #16]
 8005268:	e7d2      	b.n	8005210 <_svfiprintf_r+0x9c>
 800526a:	9b03      	ldr	r3, [sp, #12]
 800526c:	1d19      	adds	r1, r3, #4
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	9103      	str	r1, [sp, #12]
 8005272:	2b00      	cmp	r3, #0
 8005274:	bfbb      	ittet	lt
 8005276:	425b      	neglt	r3, r3
 8005278:	f042 0202 	orrlt.w	r2, r2, #2
 800527c:	9307      	strge	r3, [sp, #28]
 800527e:	9307      	strlt	r3, [sp, #28]
 8005280:	bfb8      	it	lt
 8005282:	9204      	strlt	r2, [sp, #16]
 8005284:	7823      	ldrb	r3, [r4, #0]
 8005286:	2b2e      	cmp	r3, #46	; 0x2e
 8005288:	d10c      	bne.n	80052a4 <_svfiprintf_r+0x130>
 800528a:	7863      	ldrb	r3, [r4, #1]
 800528c:	2b2a      	cmp	r3, #42	; 0x2a
 800528e:	d135      	bne.n	80052fc <_svfiprintf_r+0x188>
 8005290:	9b03      	ldr	r3, [sp, #12]
 8005292:	3402      	adds	r4, #2
 8005294:	1d1a      	adds	r2, r3, #4
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	9203      	str	r2, [sp, #12]
 800529a:	2b00      	cmp	r3, #0
 800529c:	bfb8      	it	lt
 800529e:	f04f 33ff 	movlt.w	r3, #4294967295
 80052a2:	9305      	str	r3, [sp, #20]
 80052a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005370 <_svfiprintf_r+0x1fc>
 80052a8:	2203      	movs	r2, #3
 80052aa:	4650      	mov	r0, sl
 80052ac:	7821      	ldrb	r1, [r4, #0]
 80052ae:	f000 f9f9 	bl	80056a4 <memchr>
 80052b2:	b140      	cbz	r0, 80052c6 <_svfiprintf_r+0x152>
 80052b4:	2340      	movs	r3, #64	; 0x40
 80052b6:	eba0 000a 	sub.w	r0, r0, sl
 80052ba:	fa03 f000 	lsl.w	r0, r3, r0
 80052be:	9b04      	ldr	r3, [sp, #16]
 80052c0:	3401      	adds	r4, #1
 80052c2:	4303      	orrs	r3, r0
 80052c4:	9304      	str	r3, [sp, #16]
 80052c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052ca:	2206      	movs	r2, #6
 80052cc:	4825      	ldr	r0, [pc, #148]	; (8005364 <_svfiprintf_r+0x1f0>)
 80052ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80052d2:	f000 f9e7 	bl	80056a4 <memchr>
 80052d6:	2800      	cmp	r0, #0
 80052d8:	d038      	beq.n	800534c <_svfiprintf_r+0x1d8>
 80052da:	4b23      	ldr	r3, [pc, #140]	; (8005368 <_svfiprintf_r+0x1f4>)
 80052dc:	bb1b      	cbnz	r3, 8005326 <_svfiprintf_r+0x1b2>
 80052de:	9b03      	ldr	r3, [sp, #12]
 80052e0:	3307      	adds	r3, #7
 80052e2:	f023 0307 	bic.w	r3, r3, #7
 80052e6:	3308      	adds	r3, #8
 80052e8:	9303      	str	r3, [sp, #12]
 80052ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052ec:	4433      	add	r3, r6
 80052ee:	9309      	str	r3, [sp, #36]	; 0x24
 80052f0:	e767      	b.n	80051c2 <_svfiprintf_r+0x4e>
 80052f2:	460c      	mov	r4, r1
 80052f4:	2001      	movs	r0, #1
 80052f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80052fa:	e7a5      	b.n	8005248 <_svfiprintf_r+0xd4>
 80052fc:	2300      	movs	r3, #0
 80052fe:	f04f 0c0a 	mov.w	ip, #10
 8005302:	4619      	mov	r1, r3
 8005304:	3401      	adds	r4, #1
 8005306:	9305      	str	r3, [sp, #20]
 8005308:	4620      	mov	r0, r4
 800530a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800530e:	3a30      	subs	r2, #48	; 0x30
 8005310:	2a09      	cmp	r2, #9
 8005312:	d903      	bls.n	800531c <_svfiprintf_r+0x1a8>
 8005314:	2b00      	cmp	r3, #0
 8005316:	d0c5      	beq.n	80052a4 <_svfiprintf_r+0x130>
 8005318:	9105      	str	r1, [sp, #20]
 800531a:	e7c3      	b.n	80052a4 <_svfiprintf_r+0x130>
 800531c:	4604      	mov	r4, r0
 800531e:	2301      	movs	r3, #1
 8005320:	fb0c 2101 	mla	r1, ip, r1, r2
 8005324:	e7f0      	b.n	8005308 <_svfiprintf_r+0x194>
 8005326:	ab03      	add	r3, sp, #12
 8005328:	9300      	str	r3, [sp, #0]
 800532a:	462a      	mov	r2, r5
 800532c:	4638      	mov	r0, r7
 800532e:	4b0f      	ldr	r3, [pc, #60]	; (800536c <_svfiprintf_r+0x1f8>)
 8005330:	a904      	add	r1, sp, #16
 8005332:	f3af 8000 	nop.w
 8005336:	1c42      	adds	r2, r0, #1
 8005338:	4606      	mov	r6, r0
 800533a:	d1d6      	bne.n	80052ea <_svfiprintf_r+0x176>
 800533c:	89ab      	ldrh	r3, [r5, #12]
 800533e:	065b      	lsls	r3, r3, #25
 8005340:	f53f af2c 	bmi.w	800519c <_svfiprintf_r+0x28>
 8005344:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005346:	b01d      	add	sp, #116	; 0x74
 8005348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800534c:	ab03      	add	r3, sp, #12
 800534e:	9300      	str	r3, [sp, #0]
 8005350:	462a      	mov	r2, r5
 8005352:	4638      	mov	r0, r7
 8005354:	4b05      	ldr	r3, [pc, #20]	; (800536c <_svfiprintf_r+0x1f8>)
 8005356:	a904      	add	r1, sp, #16
 8005358:	f000 f87c 	bl	8005454 <_printf_i>
 800535c:	e7eb      	b.n	8005336 <_svfiprintf_r+0x1c2>
 800535e:	bf00      	nop
 8005360:	0800581a 	.word	0x0800581a
 8005364:	08005824 	.word	0x08005824
 8005368:	00000000 	.word	0x00000000
 800536c:	080050bd 	.word	0x080050bd
 8005370:	08005820 	.word	0x08005820

08005374 <_printf_common>:
 8005374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005378:	4616      	mov	r6, r2
 800537a:	4699      	mov	r9, r3
 800537c:	688a      	ldr	r2, [r1, #8]
 800537e:	690b      	ldr	r3, [r1, #16]
 8005380:	4607      	mov	r7, r0
 8005382:	4293      	cmp	r3, r2
 8005384:	bfb8      	it	lt
 8005386:	4613      	movlt	r3, r2
 8005388:	6033      	str	r3, [r6, #0]
 800538a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800538e:	460c      	mov	r4, r1
 8005390:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005394:	b10a      	cbz	r2, 800539a <_printf_common+0x26>
 8005396:	3301      	adds	r3, #1
 8005398:	6033      	str	r3, [r6, #0]
 800539a:	6823      	ldr	r3, [r4, #0]
 800539c:	0699      	lsls	r1, r3, #26
 800539e:	bf42      	ittt	mi
 80053a0:	6833      	ldrmi	r3, [r6, #0]
 80053a2:	3302      	addmi	r3, #2
 80053a4:	6033      	strmi	r3, [r6, #0]
 80053a6:	6825      	ldr	r5, [r4, #0]
 80053a8:	f015 0506 	ands.w	r5, r5, #6
 80053ac:	d106      	bne.n	80053bc <_printf_common+0x48>
 80053ae:	f104 0a19 	add.w	sl, r4, #25
 80053b2:	68e3      	ldr	r3, [r4, #12]
 80053b4:	6832      	ldr	r2, [r6, #0]
 80053b6:	1a9b      	subs	r3, r3, r2
 80053b8:	42ab      	cmp	r3, r5
 80053ba:	dc28      	bgt.n	800540e <_printf_common+0x9a>
 80053bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80053c0:	1e13      	subs	r3, r2, #0
 80053c2:	6822      	ldr	r2, [r4, #0]
 80053c4:	bf18      	it	ne
 80053c6:	2301      	movne	r3, #1
 80053c8:	0692      	lsls	r2, r2, #26
 80053ca:	d42d      	bmi.n	8005428 <_printf_common+0xb4>
 80053cc:	4649      	mov	r1, r9
 80053ce:	4638      	mov	r0, r7
 80053d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80053d4:	47c0      	blx	r8
 80053d6:	3001      	adds	r0, #1
 80053d8:	d020      	beq.n	800541c <_printf_common+0xa8>
 80053da:	6823      	ldr	r3, [r4, #0]
 80053dc:	68e5      	ldr	r5, [r4, #12]
 80053de:	f003 0306 	and.w	r3, r3, #6
 80053e2:	2b04      	cmp	r3, #4
 80053e4:	bf18      	it	ne
 80053e6:	2500      	movne	r5, #0
 80053e8:	6832      	ldr	r2, [r6, #0]
 80053ea:	f04f 0600 	mov.w	r6, #0
 80053ee:	68a3      	ldr	r3, [r4, #8]
 80053f0:	bf08      	it	eq
 80053f2:	1aad      	subeq	r5, r5, r2
 80053f4:	6922      	ldr	r2, [r4, #16]
 80053f6:	bf08      	it	eq
 80053f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053fc:	4293      	cmp	r3, r2
 80053fe:	bfc4      	itt	gt
 8005400:	1a9b      	subgt	r3, r3, r2
 8005402:	18ed      	addgt	r5, r5, r3
 8005404:	341a      	adds	r4, #26
 8005406:	42b5      	cmp	r5, r6
 8005408:	d11a      	bne.n	8005440 <_printf_common+0xcc>
 800540a:	2000      	movs	r0, #0
 800540c:	e008      	b.n	8005420 <_printf_common+0xac>
 800540e:	2301      	movs	r3, #1
 8005410:	4652      	mov	r2, sl
 8005412:	4649      	mov	r1, r9
 8005414:	4638      	mov	r0, r7
 8005416:	47c0      	blx	r8
 8005418:	3001      	adds	r0, #1
 800541a:	d103      	bne.n	8005424 <_printf_common+0xb0>
 800541c:	f04f 30ff 	mov.w	r0, #4294967295
 8005420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005424:	3501      	adds	r5, #1
 8005426:	e7c4      	b.n	80053b2 <_printf_common+0x3e>
 8005428:	2030      	movs	r0, #48	; 0x30
 800542a:	18e1      	adds	r1, r4, r3
 800542c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005430:	1c5a      	adds	r2, r3, #1
 8005432:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005436:	4422      	add	r2, r4
 8005438:	3302      	adds	r3, #2
 800543a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800543e:	e7c5      	b.n	80053cc <_printf_common+0x58>
 8005440:	2301      	movs	r3, #1
 8005442:	4622      	mov	r2, r4
 8005444:	4649      	mov	r1, r9
 8005446:	4638      	mov	r0, r7
 8005448:	47c0      	blx	r8
 800544a:	3001      	adds	r0, #1
 800544c:	d0e6      	beq.n	800541c <_printf_common+0xa8>
 800544e:	3601      	adds	r6, #1
 8005450:	e7d9      	b.n	8005406 <_printf_common+0x92>
	...

08005454 <_printf_i>:
 8005454:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005458:	460c      	mov	r4, r1
 800545a:	7e27      	ldrb	r7, [r4, #24]
 800545c:	4691      	mov	r9, r2
 800545e:	2f78      	cmp	r7, #120	; 0x78
 8005460:	4680      	mov	r8, r0
 8005462:	469a      	mov	sl, r3
 8005464:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005466:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800546a:	d807      	bhi.n	800547c <_printf_i+0x28>
 800546c:	2f62      	cmp	r7, #98	; 0x62
 800546e:	d80a      	bhi.n	8005486 <_printf_i+0x32>
 8005470:	2f00      	cmp	r7, #0
 8005472:	f000 80d9 	beq.w	8005628 <_printf_i+0x1d4>
 8005476:	2f58      	cmp	r7, #88	; 0x58
 8005478:	f000 80a4 	beq.w	80055c4 <_printf_i+0x170>
 800547c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005480:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005484:	e03a      	b.n	80054fc <_printf_i+0xa8>
 8005486:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800548a:	2b15      	cmp	r3, #21
 800548c:	d8f6      	bhi.n	800547c <_printf_i+0x28>
 800548e:	a001      	add	r0, pc, #4	; (adr r0, 8005494 <_printf_i+0x40>)
 8005490:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005494:	080054ed 	.word	0x080054ed
 8005498:	08005501 	.word	0x08005501
 800549c:	0800547d 	.word	0x0800547d
 80054a0:	0800547d 	.word	0x0800547d
 80054a4:	0800547d 	.word	0x0800547d
 80054a8:	0800547d 	.word	0x0800547d
 80054ac:	08005501 	.word	0x08005501
 80054b0:	0800547d 	.word	0x0800547d
 80054b4:	0800547d 	.word	0x0800547d
 80054b8:	0800547d 	.word	0x0800547d
 80054bc:	0800547d 	.word	0x0800547d
 80054c0:	0800560f 	.word	0x0800560f
 80054c4:	08005531 	.word	0x08005531
 80054c8:	080055f1 	.word	0x080055f1
 80054cc:	0800547d 	.word	0x0800547d
 80054d0:	0800547d 	.word	0x0800547d
 80054d4:	08005631 	.word	0x08005631
 80054d8:	0800547d 	.word	0x0800547d
 80054dc:	08005531 	.word	0x08005531
 80054e0:	0800547d 	.word	0x0800547d
 80054e4:	0800547d 	.word	0x0800547d
 80054e8:	080055f9 	.word	0x080055f9
 80054ec:	680b      	ldr	r3, [r1, #0]
 80054ee:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80054f2:	1d1a      	adds	r2, r3, #4
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	600a      	str	r2, [r1, #0]
 80054f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80054fc:	2301      	movs	r3, #1
 80054fe:	e0a4      	b.n	800564a <_printf_i+0x1f6>
 8005500:	6825      	ldr	r5, [r4, #0]
 8005502:	6808      	ldr	r0, [r1, #0]
 8005504:	062e      	lsls	r6, r5, #24
 8005506:	f100 0304 	add.w	r3, r0, #4
 800550a:	d50a      	bpl.n	8005522 <_printf_i+0xce>
 800550c:	6805      	ldr	r5, [r0, #0]
 800550e:	600b      	str	r3, [r1, #0]
 8005510:	2d00      	cmp	r5, #0
 8005512:	da03      	bge.n	800551c <_printf_i+0xc8>
 8005514:	232d      	movs	r3, #45	; 0x2d
 8005516:	426d      	negs	r5, r5
 8005518:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800551c:	230a      	movs	r3, #10
 800551e:	485e      	ldr	r0, [pc, #376]	; (8005698 <_printf_i+0x244>)
 8005520:	e019      	b.n	8005556 <_printf_i+0x102>
 8005522:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005526:	6805      	ldr	r5, [r0, #0]
 8005528:	600b      	str	r3, [r1, #0]
 800552a:	bf18      	it	ne
 800552c:	b22d      	sxthne	r5, r5
 800552e:	e7ef      	b.n	8005510 <_printf_i+0xbc>
 8005530:	680b      	ldr	r3, [r1, #0]
 8005532:	6825      	ldr	r5, [r4, #0]
 8005534:	1d18      	adds	r0, r3, #4
 8005536:	6008      	str	r0, [r1, #0]
 8005538:	0628      	lsls	r0, r5, #24
 800553a:	d501      	bpl.n	8005540 <_printf_i+0xec>
 800553c:	681d      	ldr	r5, [r3, #0]
 800553e:	e002      	b.n	8005546 <_printf_i+0xf2>
 8005540:	0669      	lsls	r1, r5, #25
 8005542:	d5fb      	bpl.n	800553c <_printf_i+0xe8>
 8005544:	881d      	ldrh	r5, [r3, #0]
 8005546:	2f6f      	cmp	r7, #111	; 0x6f
 8005548:	bf0c      	ite	eq
 800554a:	2308      	moveq	r3, #8
 800554c:	230a      	movne	r3, #10
 800554e:	4852      	ldr	r0, [pc, #328]	; (8005698 <_printf_i+0x244>)
 8005550:	2100      	movs	r1, #0
 8005552:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005556:	6866      	ldr	r6, [r4, #4]
 8005558:	2e00      	cmp	r6, #0
 800555a:	bfa8      	it	ge
 800555c:	6821      	ldrge	r1, [r4, #0]
 800555e:	60a6      	str	r6, [r4, #8]
 8005560:	bfa4      	itt	ge
 8005562:	f021 0104 	bicge.w	r1, r1, #4
 8005566:	6021      	strge	r1, [r4, #0]
 8005568:	b90d      	cbnz	r5, 800556e <_printf_i+0x11a>
 800556a:	2e00      	cmp	r6, #0
 800556c:	d04d      	beq.n	800560a <_printf_i+0x1b6>
 800556e:	4616      	mov	r6, r2
 8005570:	fbb5 f1f3 	udiv	r1, r5, r3
 8005574:	fb03 5711 	mls	r7, r3, r1, r5
 8005578:	5dc7      	ldrb	r7, [r0, r7]
 800557a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800557e:	462f      	mov	r7, r5
 8005580:	42bb      	cmp	r3, r7
 8005582:	460d      	mov	r5, r1
 8005584:	d9f4      	bls.n	8005570 <_printf_i+0x11c>
 8005586:	2b08      	cmp	r3, #8
 8005588:	d10b      	bne.n	80055a2 <_printf_i+0x14e>
 800558a:	6823      	ldr	r3, [r4, #0]
 800558c:	07df      	lsls	r7, r3, #31
 800558e:	d508      	bpl.n	80055a2 <_printf_i+0x14e>
 8005590:	6923      	ldr	r3, [r4, #16]
 8005592:	6861      	ldr	r1, [r4, #4]
 8005594:	4299      	cmp	r1, r3
 8005596:	bfde      	ittt	le
 8005598:	2330      	movle	r3, #48	; 0x30
 800559a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800559e:	f106 36ff 	addle.w	r6, r6, #4294967295
 80055a2:	1b92      	subs	r2, r2, r6
 80055a4:	6122      	str	r2, [r4, #16]
 80055a6:	464b      	mov	r3, r9
 80055a8:	4621      	mov	r1, r4
 80055aa:	4640      	mov	r0, r8
 80055ac:	f8cd a000 	str.w	sl, [sp]
 80055b0:	aa03      	add	r2, sp, #12
 80055b2:	f7ff fedf 	bl	8005374 <_printf_common>
 80055b6:	3001      	adds	r0, #1
 80055b8:	d14c      	bne.n	8005654 <_printf_i+0x200>
 80055ba:	f04f 30ff 	mov.w	r0, #4294967295
 80055be:	b004      	add	sp, #16
 80055c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055c4:	4834      	ldr	r0, [pc, #208]	; (8005698 <_printf_i+0x244>)
 80055c6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80055ca:	680e      	ldr	r6, [r1, #0]
 80055cc:	6823      	ldr	r3, [r4, #0]
 80055ce:	f856 5b04 	ldr.w	r5, [r6], #4
 80055d2:	061f      	lsls	r7, r3, #24
 80055d4:	600e      	str	r6, [r1, #0]
 80055d6:	d514      	bpl.n	8005602 <_printf_i+0x1ae>
 80055d8:	07d9      	lsls	r1, r3, #31
 80055da:	bf44      	itt	mi
 80055dc:	f043 0320 	orrmi.w	r3, r3, #32
 80055e0:	6023      	strmi	r3, [r4, #0]
 80055e2:	b91d      	cbnz	r5, 80055ec <_printf_i+0x198>
 80055e4:	6823      	ldr	r3, [r4, #0]
 80055e6:	f023 0320 	bic.w	r3, r3, #32
 80055ea:	6023      	str	r3, [r4, #0]
 80055ec:	2310      	movs	r3, #16
 80055ee:	e7af      	b.n	8005550 <_printf_i+0xfc>
 80055f0:	6823      	ldr	r3, [r4, #0]
 80055f2:	f043 0320 	orr.w	r3, r3, #32
 80055f6:	6023      	str	r3, [r4, #0]
 80055f8:	2378      	movs	r3, #120	; 0x78
 80055fa:	4828      	ldr	r0, [pc, #160]	; (800569c <_printf_i+0x248>)
 80055fc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005600:	e7e3      	b.n	80055ca <_printf_i+0x176>
 8005602:	065e      	lsls	r6, r3, #25
 8005604:	bf48      	it	mi
 8005606:	b2ad      	uxthmi	r5, r5
 8005608:	e7e6      	b.n	80055d8 <_printf_i+0x184>
 800560a:	4616      	mov	r6, r2
 800560c:	e7bb      	b.n	8005586 <_printf_i+0x132>
 800560e:	680b      	ldr	r3, [r1, #0]
 8005610:	6826      	ldr	r6, [r4, #0]
 8005612:	1d1d      	adds	r5, r3, #4
 8005614:	6960      	ldr	r0, [r4, #20]
 8005616:	600d      	str	r5, [r1, #0]
 8005618:	0635      	lsls	r5, r6, #24
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	d501      	bpl.n	8005622 <_printf_i+0x1ce>
 800561e:	6018      	str	r0, [r3, #0]
 8005620:	e002      	b.n	8005628 <_printf_i+0x1d4>
 8005622:	0671      	lsls	r1, r6, #25
 8005624:	d5fb      	bpl.n	800561e <_printf_i+0x1ca>
 8005626:	8018      	strh	r0, [r3, #0]
 8005628:	2300      	movs	r3, #0
 800562a:	4616      	mov	r6, r2
 800562c:	6123      	str	r3, [r4, #16]
 800562e:	e7ba      	b.n	80055a6 <_printf_i+0x152>
 8005630:	680b      	ldr	r3, [r1, #0]
 8005632:	1d1a      	adds	r2, r3, #4
 8005634:	600a      	str	r2, [r1, #0]
 8005636:	681e      	ldr	r6, [r3, #0]
 8005638:	2100      	movs	r1, #0
 800563a:	4630      	mov	r0, r6
 800563c:	6862      	ldr	r2, [r4, #4]
 800563e:	f000 f831 	bl	80056a4 <memchr>
 8005642:	b108      	cbz	r0, 8005648 <_printf_i+0x1f4>
 8005644:	1b80      	subs	r0, r0, r6
 8005646:	6060      	str	r0, [r4, #4]
 8005648:	6863      	ldr	r3, [r4, #4]
 800564a:	6123      	str	r3, [r4, #16]
 800564c:	2300      	movs	r3, #0
 800564e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005652:	e7a8      	b.n	80055a6 <_printf_i+0x152>
 8005654:	4632      	mov	r2, r6
 8005656:	4649      	mov	r1, r9
 8005658:	4640      	mov	r0, r8
 800565a:	6923      	ldr	r3, [r4, #16]
 800565c:	47d0      	blx	sl
 800565e:	3001      	adds	r0, #1
 8005660:	d0ab      	beq.n	80055ba <_printf_i+0x166>
 8005662:	6823      	ldr	r3, [r4, #0]
 8005664:	079b      	lsls	r3, r3, #30
 8005666:	d413      	bmi.n	8005690 <_printf_i+0x23c>
 8005668:	68e0      	ldr	r0, [r4, #12]
 800566a:	9b03      	ldr	r3, [sp, #12]
 800566c:	4298      	cmp	r0, r3
 800566e:	bfb8      	it	lt
 8005670:	4618      	movlt	r0, r3
 8005672:	e7a4      	b.n	80055be <_printf_i+0x16a>
 8005674:	2301      	movs	r3, #1
 8005676:	4632      	mov	r2, r6
 8005678:	4649      	mov	r1, r9
 800567a:	4640      	mov	r0, r8
 800567c:	47d0      	blx	sl
 800567e:	3001      	adds	r0, #1
 8005680:	d09b      	beq.n	80055ba <_printf_i+0x166>
 8005682:	3501      	adds	r5, #1
 8005684:	68e3      	ldr	r3, [r4, #12]
 8005686:	9903      	ldr	r1, [sp, #12]
 8005688:	1a5b      	subs	r3, r3, r1
 800568a:	42ab      	cmp	r3, r5
 800568c:	dcf2      	bgt.n	8005674 <_printf_i+0x220>
 800568e:	e7eb      	b.n	8005668 <_printf_i+0x214>
 8005690:	2500      	movs	r5, #0
 8005692:	f104 0619 	add.w	r6, r4, #25
 8005696:	e7f5      	b.n	8005684 <_printf_i+0x230>
 8005698:	0800582b 	.word	0x0800582b
 800569c:	0800583c 	.word	0x0800583c

080056a0 <__retarget_lock_acquire_recursive>:
 80056a0:	4770      	bx	lr

080056a2 <__retarget_lock_release_recursive>:
 80056a2:	4770      	bx	lr

080056a4 <memchr>:
 80056a4:	4603      	mov	r3, r0
 80056a6:	b510      	push	{r4, lr}
 80056a8:	b2c9      	uxtb	r1, r1
 80056aa:	4402      	add	r2, r0
 80056ac:	4293      	cmp	r3, r2
 80056ae:	4618      	mov	r0, r3
 80056b0:	d101      	bne.n	80056b6 <memchr+0x12>
 80056b2:	2000      	movs	r0, #0
 80056b4:	e003      	b.n	80056be <memchr+0x1a>
 80056b6:	7804      	ldrb	r4, [r0, #0]
 80056b8:	3301      	adds	r3, #1
 80056ba:	428c      	cmp	r4, r1
 80056bc:	d1f6      	bne.n	80056ac <memchr+0x8>
 80056be:	bd10      	pop	{r4, pc}

080056c0 <memcpy>:
 80056c0:	440a      	add	r2, r1
 80056c2:	4291      	cmp	r1, r2
 80056c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80056c8:	d100      	bne.n	80056cc <memcpy+0xc>
 80056ca:	4770      	bx	lr
 80056cc:	b510      	push	{r4, lr}
 80056ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056d2:	4291      	cmp	r1, r2
 80056d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056d8:	d1f9      	bne.n	80056ce <memcpy+0xe>
 80056da:	bd10      	pop	{r4, pc}

080056dc <memmove>:
 80056dc:	4288      	cmp	r0, r1
 80056de:	b510      	push	{r4, lr}
 80056e0:	eb01 0402 	add.w	r4, r1, r2
 80056e4:	d902      	bls.n	80056ec <memmove+0x10>
 80056e6:	4284      	cmp	r4, r0
 80056e8:	4623      	mov	r3, r4
 80056ea:	d807      	bhi.n	80056fc <memmove+0x20>
 80056ec:	1e43      	subs	r3, r0, #1
 80056ee:	42a1      	cmp	r1, r4
 80056f0:	d008      	beq.n	8005704 <memmove+0x28>
 80056f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80056f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80056fa:	e7f8      	b.n	80056ee <memmove+0x12>
 80056fc:	4601      	mov	r1, r0
 80056fe:	4402      	add	r2, r0
 8005700:	428a      	cmp	r2, r1
 8005702:	d100      	bne.n	8005706 <memmove+0x2a>
 8005704:	bd10      	pop	{r4, pc}
 8005706:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800570a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800570e:	e7f7      	b.n	8005700 <memmove+0x24>

08005710 <_realloc_r>:
 8005710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005712:	4607      	mov	r7, r0
 8005714:	4614      	mov	r4, r2
 8005716:	460e      	mov	r6, r1
 8005718:	b921      	cbnz	r1, 8005724 <_realloc_r+0x14>
 800571a:	4611      	mov	r1, r2
 800571c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005720:	f7ff bc36 	b.w	8004f90 <_malloc_r>
 8005724:	b922      	cbnz	r2, 8005730 <_realloc_r+0x20>
 8005726:	f7ff fbe7 	bl	8004ef8 <_free_r>
 800572a:	4625      	mov	r5, r4
 800572c:	4628      	mov	r0, r5
 800572e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005730:	f000 f814 	bl	800575c <_malloc_usable_size_r>
 8005734:	42a0      	cmp	r0, r4
 8005736:	d20f      	bcs.n	8005758 <_realloc_r+0x48>
 8005738:	4621      	mov	r1, r4
 800573a:	4638      	mov	r0, r7
 800573c:	f7ff fc28 	bl	8004f90 <_malloc_r>
 8005740:	4605      	mov	r5, r0
 8005742:	2800      	cmp	r0, #0
 8005744:	d0f2      	beq.n	800572c <_realloc_r+0x1c>
 8005746:	4631      	mov	r1, r6
 8005748:	4622      	mov	r2, r4
 800574a:	f7ff ffb9 	bl	80056c0 <memcpy>
 800574e:	4631      	mov	r1, r6
 8005750:	4638      	mov	r0, r7
 8005752:	f7ff fbd1 	bl	8004ef8 <_free_r>
 8005756:	e7e9      	b.n	800572c <_realloc_r+0x1c>
 8005758:	4635      	mov	r5, r6
 800575a:	e7e7      	b.n	800572c <_realloc_r+0x1c>

0800575c <_malloc_usable_size_r>:
 800575c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005760:	1f18      	subs	r0, r3, #4
 8005762:	2b00      	cmp	r3, #0
 8005764:	bfbc      	itt	lt
 8005766:	580b      	ldrlt	r3, [r1, r0]
 8005768:	18c0      	addlt	r0, r0, r3
 800576a:	4770      	bx	lr

0800576c <_sbrk>:
 800576c:	4b04      	ldr	r3, [pc, #16]	; (8005780 <_sbrk+0x14>)
 800576e:	4602      	mov	r2, r0
 8005770:	6819      	ldr	r1, [r3, #0]
 8005772:	b909      	cbnz	r1, 8005778 <_sbrk+0xc>
 8005774:	4903      	ldr	r1, [pc, #12]	; (8005784 <_sbrk+0x18>)
 8005776:	6019      	str	r1, [r3, #0]
 8005778:	6818      	ldr	r0, [r3, #0]
 800577a:	4402      	add	r2, r0
 800577c:	601a      	str	r2, [r3, #0]
 800577e:	4770      	bx	lr
 8005780:	20000428 	.word	0x20000428
 8005784:	20001500 	.word	0x20001500

08005788 <_init>:
 8005788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800578a:	bf00      	nop
 800578c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800578e:	bc08      	pop	{r3}
 8005790:	469e      	mov	lr, r3
 8005792:	4770      	bx	lr

08005794 <_fini>:
 8005794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005796:	bf00      	nop
 8005798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800579a:	bc08      	pop	{r3}
 800579c:	469e      	mov	lr, r3
 800579e:	4770      	bx	lr
