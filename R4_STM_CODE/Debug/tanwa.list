
tanwa.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001af0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08001bfc  08001bfc  00011bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c28  08001c28  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001c28  08001c28  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001c28  08001c28  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c28  08001c28  00011c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001c2c  08001c2c  00011c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001c30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  2000000c  08001c3c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  08001c3c  00020140  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000111fe  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028a9  00000000  00000000  00031233  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b48  00000000  00000000  00033ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ae0  00000000  00000000  00034628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a689  00000000  00000000  00035108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011bde  00000000  00000000  0004f791  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e144  00000000  00000000  0006136f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ef4b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d8c  00000000  00000000  000ef508  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00009c4f  00000000  00000000  000f1294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001be4 	.word	0x08001be4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001be4 	.word	0x08001be4

0800014c <_ZN7IgniterC1EP12GPIO_TypeDeftS1_t>:
#include <Igniter.hh>

//(names of args start with '_' sign)
Igniter::Igniter(GPIO_TypeDef* _GPIO_PORT_IGNITER, uint16_t _PIN_IGNITER, GPIO_TypeDef* _IGN_GPIO_PORT_TEST_CON, uint16_t _IGN_PIN_TEST_CON){
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	603b      	str	r3, [r7, #0]
 8000158:	4613      	mov	r3, r2
 800015a:	80fb      	strh	r3, [r7, #6]
	GPIO_PORT_IGNITER = _GPIO_PORT_IGNITER;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	68ba      	ldr	r2, [r7, #8]
 8000160:	601a      	str	r2, [r3, #0]
	PIN_IGNITER = _PIN_IGNITER;
 8000162:	68fb      	ldr	r3, [r7, #12]
 8000164:	88fa      	ldrh	r2, [r7, #6]
 8000166:	809a      	strh	r2, [r3, #4]
	GPIO_PORT_TEST_CON = _IGN_GPIO_PORT_TEST_CON;
 8000168:	68fb      	ldr	r3, [r7, #12]
 800016a:	683a      	ldr	r2, [r7, #0]
 800016c:	609a      	str	r2, [r3, #8]
	PIN_TEST_CON = _IGN_PIN_TEST_CON;
 800016e:	68fb      	ldr	r3, [r7, #12]
 8000170:	8b3a      	ldrh	r2, [r7, #24]
 8000172:	819a      	strh	r2, [r3, #12]
}
 8000174:	68fb      	ldr	r3, [r7, #12]
 8000176:	4618      	mov	r0, r3
 8000178:	3714      	adds	r7, #20
 800017a:	46bd      	mov	sp, r7
 800017c:	bc80      	pop	{r7}
 800017e:	4770      	bx	lr

08000180 <_ZNK7Igniter12is_connectedEv>:

bool Igniter::is_connected() const{
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(GPIO_PORT_TEST_CON, PIN_TEST_CON) == GPIO_PIN_SET)
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	689a      	ldr	r2, [r3, #8]
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	899b      	ldrh	r3, [r3, #12]
 8000190:	4619      	mov	r1, r3
 8000192:	4610      	mov	r0, r2
 8000194:	f000 ff02 	bl	8000f9c <HAL_GPIO_ReadPin>
 8000198:	4603      	mov	r3, r0
 800019a:	2b01      	cmp	r3, #1
 800019c:	bf0c      	ite	eq
 800019e:	2301      	moveq	r3, #1
 80001a0:	2300      	movne	r3, #0
 80001a2:	b2db      	uxtb	r3, r3
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	d001      	beq.n	80001ac <_ZNK7Igniter12is_connectedEv+0x2c>
		return 1;
 80001a8:	2301      	movs	r3, #1
 80001aa:	e000      	b.n	80001ae <_ZNK7Igniter12is_connectedEv+0x2e>
	else
		return 0;
 80001ac:	2300      	movs	r3, #0
}
 80001ae:	4618      	mov	r0, r3
 80001b0:	3708      	adds	r7, #8
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bd80      	pop	{r7, pc}

080001b6 <_ZN7Igniter4FIREEv>:

void Igniter::FIRE(){
 80001b6:	b580      	push	{r7, lr}
 80001b8:	b082      	sub	sp, #8
 80001ba:	af00      	add	r7, sp, #0
 80001bc:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIO_PORT_IGNITER, PIN_IGNITER, GPIO_PIN_SET);
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	6818      	ldr	r0, [r3, #0]
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	889b      	ldrh	r3, [r3, #4]
 80001c6:	2201      	movs	r2, #1
 80001c8:	4619      	mov	r1, r3
 80001ca:	f000 feed 	bl	8000fa8 <HAL_GPIO_WritePin>
}
 80001ce:	bf00      	nop
 80001d0:	3708      	adds	r7, #8
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bd80      	pop	{r7, pc}

080001d6 <_ZN5MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDeftS1_tS1_t>:
#include <L298.hh>

//make struct 'Motor', fill it, return pointer to it    (names for args start with '_' sign)
Motor::Motor(GPIO_TypeDef* _GPIO_PORT_IN1, uint16_t _PIN_IN1, GPIO_TypeDef* _GPIO_PORT_IN2, uint16_t _PIN_IN2,
 80001d6:	b480      	push	{r7}
 80001d8:	b085      	sub	sp, #20
 80001da:	af00      	add	r7, sp, #0
 80001dc:	60f8      	str	r0, [r7, #12]
 80001de:	60b9      	str	r1, [r7, #8]
 80001e0:	603b      	str	r3, [r7, #0]
 80001e2:	4613      	mov	r3, r2
 80001e4:	80fb      	strh	r3, [r7, #6]
		TIM_HandleTypeDef* _TIM_NR_EN, uint16_t _TIM_CHANNEL_EN, GPIO_TypeDef* _GPIO_PORT_LS_OPEN, uint16_t _PIN_LS_OPEN,
		GPIO_TypeDef* _GPIO_PORT_LS_CLOSE, uint16_t _PIN_LS_CLOSE){

	GPIO_PORT_IN1 = _GPIO_PORT_IN1;
 80001e6:	68fb      	ldr	r3, [r7, #12]
 80001e8:	68ba      	ldr	r2, [r7, #8]
 80001ea:	601a      	str	r2, [r3, #0]
	PIN_IN1 = _PIN_IN1;
 80001ec:	68fb      	ldr	r3, [r7, #12]
 80001ee:	88fa      	ldrh	r2, [r7, #6]
 80001f0:	809a      	strh	r2, [r3, #4]
	GPIO_PORT_IN2 = _GPIO_PORT_IN2;
 80001f2:	68fb      	ldr	r3, [r7, #12]
 80001f4:	683a      	ldr	r2, [r7, #0]
 80001f6:	609a      	str	r2, [r3, #8]
	PIN_IN2 = _PIN_IN2;
 80001f8:	68fb      	ldr	r3, [r7, #12]
 80001fa:	8b3a      	ldrh	r2, [r7, #24]
 80001fc:	819a      	strh	r2, [r3, #12]
	TIM_NR_EN = _TIM_NR_EN;
 80001fe:	68fb      	ldr	r3, [r7, #12]
 8000200:	69fa      	ldr	r2, [r7, #28]
 8000202:	611a      	str	r2, [r3, #16]
	TIM_CHANNEL_EN = _TIM_CHANNEL_EN;
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	8c3a      	ldrh	r2, [r7, #32]
 8000208:	829a      	strh	r2, [r3, #20]
	GPIO_PORT_LS_OPEN = _GPIO_PORT_LS_OPEN;
 800020a:	68fb      	ldr	r3, [r7, #12]
 800020c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800020e:	619a      	str	r2, [r3, #24]
	PIN_LS_OPEN = _PIN_LS_OPEN;
 8000210:	68fb      	ldr	r3, [r7, #12]
 8000212:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000214:	839a      	strh	r2, [r3, #28]
	GPIO_PORT_LS_CLOSE = _GPIO_PORT_LS_CLOSE;
 8000216:	68fb      	ldr	r3, [r7, #12]
 8000218:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800021a:	621a      	str	r2, [r3, #32]
	PIN_LS_CLOSE = _PIN_LS_CLOSE;
 800021c:	68fb      	ldr	r3, [r7, #12]
 800021e:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000220:	849a      	strh	r2, [r3, #36]	; 0x24
	status = Status::IDK;
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	2202      	movs	r2, #2
 8000226:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000228:	68fb      	ldr	r3, [r7, #12]
 800022a:	4618      	mov	r0, r3
 800022c:	3714      	adds	r7, #20
 800022e:	46bd      	mov	sp, r7
 8000230:	bc80      	pop	{r7}
 8000232:	4770      	bx	lr

08000234 <_ZN5Motor4stopEv>:


void Motor::stop(){
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(TIM_NR_EN, TIM_CHANNEL_EN, 0);
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	8a9b      	ldrh	r3, [r3, #20]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d105      	bne.n	8000250 <_ZN5Motor4stopEv+0x1c>
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	691b      	ldr	r3, [r3, #16]
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	2200      	movs	r2, #0
 800024c:	635a      	str	r2, [r3, #52]	; 0x34
 800024e:	e018      	b.n	8000282 <_ZN5Motor4stopEv+0x4e>
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	8a9b      	ldrh	r3, [r3, #20]
 8000254:	2b04      	cmp	r3, #4
 8000256:	d105      	bne.n	8000264 <_ZN5Motor4stopEv+0x30>
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	691b      	ldr	r3, [r3, #16]
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	2200      	movs	r2, #0
 8000260:	639a      	str	r2, [r3, #56]	; 0x38
 8000262:	e00e      	b.n	8000282 <_ZN5Motor4stopEv+0x4e>
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	8a9b      	ldrh	r3, [r3, #20]
 8000268:	2b08      	cmp	r3, #8
 800026a:	d105      	bne.n	8000278 <_ZN5Motor4stopEv+0x44>
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	691b      	ldr	r3, [r3, #16]
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	2200      	movs	r2, #0
 8000274:	63da      	str	r2, [r3, #60]	; 0x3c
 8000276:	e004      	b.n	8000282 <_ZN5Motor4stopEv+0x4e>
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	691b      	ldr	r3, [r3, #16]
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	2200      	movs	r2, #0
 8000280:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_GPIO_WritePin(GPIO_PORT_IN1, PIN_IN1, GPIO_PIN_RESET);
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	6818      	ldr	r0, [r3, #0]
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	889b      	ldrh	r3, [r3, #4]
 800028a:	2200      	movs	r2, #0
 800028c:	4619      	mov	r1, r3
 800028e:	f000 fe8b 	bl	8000fa8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIO_PORT_IN2, PIN_IN2, GPIO_PIN_RESET);
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	6898      	ldr	r0, [r3, #8]
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	899b      	ldrh	r3, [r3, #12]
 800029a:	2200      	movs	r2, #0
 800029c:	4619      	mov	r1, r3
 800029e:	f000 fe83 	bl	8000fa8 <HAL_GPIO_WritePin>
}
 80002a2:	bf00      	nop
 80002a4:	3708      	adds	r7, #8
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}

080002aa <_ZN5Motor4openEv>:

void Motor::open(){
 80002aa:	b580      	push	{r7, lr}
 80002ac:	b082      	sub	sp, #8
 80002ae:	af00      	add	r7, sp, #0
 80002b0:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIO_PORT_IN1, PIN_IN1, GPIO_PIN_SET);
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	6818      	ldr	r0, [r3, #0]
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	889b      	ldrh	r3, [r3, #4]
 80002ba:	2201      	movs	r2, #1
 80002bc:	4619      	mov	r1, r3
 80002be:	f000 fe73 	bl	8000fa8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIO_PORT_IN2, PIN_IN2, GPIO_PIN_RESET);
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	6898      	ldr	r0, [r3, #8]
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	899b      	ldrh	r3, [r3, #12]
 80002ca:	2200      	movs	r2, #0
 80002cc:	4619      	mov	r1, r3
 80002ce:	f000 fe6b 	bl	8000fa8 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(TIM_NR_EN, TIM_CHANNEL_EN, 1000);
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	8a9b      	ldrh	r3, [r3, #20]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d106      	bne.n	80002e8 <_ZN5Motor4openEv+0x3e>
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	691b      	ldr	r3, [r3, #16]
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80002e4:	635a      	str	r2, [r3, #52]	; 0x34
 80002e6:	e01b      	b.n	8000320 <_ZN5Motor4openEv+0x76>
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	8a9b      	ldrh	r3, [r3, #20]
 80002ec:	2b04      	cmp	r3, #4
 80002ee:	d106      	bne.n	80002fe <_ZN5Motor4openEv+0x54>
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	691b      	ldr	r3, [r3, #16]
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80002fa:	639a      	str	r2, [r3, #56]	; 0x38
 80002fc:	e010      	b.n	8000320 <_ZN5Motor4openEv+0x76>
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	8a9b      	ldrh	r3, [r3, #20]
 8000302:	2b08      	cmp	r3, #8
 8000304:	d106      	bne.n	8000314 <_ZN5Motor4openEv+0x6a>
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	691b      	ldr	r3, [r3, #16]
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000310:	63da      	str	r2, [r3, #60]	; 0x3c
 8000312:	e005      	b.n	8000320 <_ZN5Motor4openEv+0x76>
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	691b      	ldr	r3, [r3, #16]
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800031e:	641a      	str	r2, [r3, #64]	; 0x40
	status = Status::IDK;
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	2202      	movs	r2, #2
 8000324:	629a      	str	r2, [r3, #40]	; 0x28
	while(HAL_GPIO_ReadPin(GPIO_PORT_LS_OPEN, PIN_LS_OPEN) == GPIO_PIN_RESET);
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	699a      	ldr	r2, [r3, #24]
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	8b9b      	ldrh	r3, [r3, #28]
 800032e:	4619      	mov	r1, r3
 8000330:	4610      	mov	r0, r2
 8000332:	f000 fe33 	bl	8000f9c <HAL_GPIO_ReadPin>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	bf0c      	ite	eq
 800033c:	2301      	moveq	r3, #1
 800033e:	2300      	movne	r3, #0
 8000340:	b2db      	uxtb	r3, r3
 8000342:	2b00      	cmp	r3, #0
 8000344:	d000      	beq.n	8000348 <_ZN5Motor4openEv+0x9e>
 8000346:	e7ee      	b.n	8000326 <_ZN5Motor4openEv+0x7c>
	stop();
 8000348:	6878      	ldr	r0, [r7, #4]
 800034a:	f7ff ff73 	bl	8000234 <_ZN5Motor4stopEv>
	status = Status::OPEN;
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	2200      	movs	r2, #0
 8000352:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000354:	bf00      	nop
 8000356:	3708      	adds	r7, #8
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}

0800035c <_ZN5Motor5closeEv>:

void Motor::close(){
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIO_PORT_IN1, PIN_IN1, GPIO_PIN_RESET);
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	6818      	ldr	r0, [r3, #0]
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	889b      	ldrh	r3, [r3, #4]
 800036c:	2200      	movs	r2, #0
 800036e:	4619      	mov	r1, r3
 8000370:	f000 fe1a 	bl	8000fa8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIO_PORT_IN2, PIN_IN2, GPIO_PIN_SET);
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	6898      	ldr	r0, [r3, #8]
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	899b      	ldrh	r3, [r3, #12]
 800037c:	2201      	movs	r2, #1
 800037e:	4619      	mov	r1, r3
 8000380:	f000 fe12 	bl	8000fa8 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(TIM_NR_EN, TIM_CHANNEL_EN, 1000);
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	8a9b      	ldrh	r3, [r3, #20]
 8000388:	2b00      	cmp	r3, #0
 800038a:	d106      	bne.n	800039a <_ZN5Motor5closeEv+0x3e>
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	691b      	ldr	r3, [r3, #16]
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000396:	635a      	str	r2, [r3, #52]	; 0x34
 8000398:	e01b      	b.n	80003d2 <_ZN5Motor5closeEv+0x76>
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	8a9b      	ldrh	r3, [r3, #20]
 800039e:	2b04      	cmp	r3, #4
 80003a0:	d106      	bne.n	80003b0 <_ZN5Motor5closeEv+0x54>
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	691b      	ldr	r3, [r3, #16]
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80003ac:	639a      	str	r2, [r3, #56]	; 0x38
 80003ae:	e010      	b.n	80003d2 <_ZN5Motor5closeEv+0x76>
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	8a9b      	ldrh	r3, [r3, #20]
 80003b4:	2b08      	cmp	r3, #8
 80003b6:	d106      	bne.n	80003c6 <_ZN5Motor5closeEv+0x6a>
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	691b      	ldr	r3, [r3, #16]
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80003c2:	63da      	str	r2, [r3, #60]	; 0x3c
 80003c4:	e005      	b.n	80003d2 <_ZN5Motor5closeEv+0x76>
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	691b      	ldr	r3, [r3, #16]
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80003d0:	641a      	str	r2, [r3, #64]	; 0x40
	status = Status::IDK;
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	2202      	movs	r2, #2
 80003d6:	629a      	str	r2, [r3, #40]	; 0x28
	while(HAL_GPIO_ReadPin(GPIO_PORT_LS_CLOSE, PIN_LS_CLOSE) == GPIO_PIN_RESET);
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	6a1a      	ldr	r2, [r3, #32]
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80003e0:	4619      	mov	r1, r3
 80003e2:	4610      	mov	r0, r2
 80003e4:	f000 fdda 	bl	8000f9c <HAL_GPIO_ReadPin>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	bf0c      	ite	eq
 80003ee:	2301      	moveq	r3, #1
 80003f0:	2300      	movne	r3, #0
 80003f2:	b2db      	uxtb	r3, r3
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d000      	beq.n	80003fa <_ZN5Motor5closeEv+0x9e>
 80003f8:	e7ee      	b.n	80003d8 <_ZN5Motor5closeEv+0x7c>
	stop();
 80003fa:	6878      	ldr	r0, [r7, #4]
 80003fc:	f7ff ff1a 	bl	8000234 <_ZN5Motor4stopEv>
	status = Status::CLOSE;
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	2201      	movs	r2, #1
 8000404:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000406:	bf00      	nop
 8000408:	3708      	adds	r7, #8
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}

0800040e <_ZN5Motor15test_open_closeEv>:

void Motor::test_open_close(){
 800040e:	b580      	push	{r7, lr}
 8000410:	b082      	sub	sp, #8
 8000412:	af00      	add	r7, sp, #0
 8000414:	6078      	str	r0, [r7, #4]
	open();
 8000416:	6878      	ldr	r0, [r7, #4]
 8000418:	f7ff ff47 	bl	80002aa <_ZN5Motor4openEv>
	close();
 800041c:	6878      	ldr	r0, [r7, #4]
 800041e:	f7ff ff9d 	bl	800035c <_ZN5Motor5closeEv>
	open();
 8000422:	6878      	ldr	r0, [r7, #4]
 8000424:	f7ff ff41 	bl	80002aa <_ZN5Motor4openEv>
	close();
 8000428:	6878      	ldr	r0, [r7, #4]
 800042a:	f7ff ff97 	bl	800035c <_ZN5Motor5closeEv>
	stop();
 800042e:	6878      	ldr	r0, [r7, #4]
 8000430:	f7ff ff00 	bl	8000234 <_ZN5Motor4stopEv>
}
 8000434:	bf00      	nop
 8000436:	3708      	adds	r7, #8
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}

0800043c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800043c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000440:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000442:	2400      	movs	r4, #0
 8000444:	9404      	str	r4, [sp, #16]
 8000446:	9405      	str	r4, [sp, #20]
 8000448:	9406      	str	r4, [sp, #24]
 800044a:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800044c:	4b3c      	ldr	r3, [pc, #240]	; (8000540 <MX_GPIO_Init+0x104>)
 800044e:	699a      	ldr	r2, [r3, #24]
 8000450:	f042 0210 	orr.w	r2, r2, #16
 8000454:	619a      	str	r2, [r3, #24]
 8000456:	699a      	ldr	r2, [r3, #24]
 8000458:	f002 0210 	and.w	r2, r2, #16
 800045c:	9200      	str	r2, [sp, #0]
 800045e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000460:	699a      	ldr	r2, [r3, #24]
 8000462:	f042 0220 	orr.w	r2, r2, #32
 8000466:	619a      	str	r2, [r3, #24]
 8000468:	699a      	ldr	r2, [r3, #24]
 800046a:	f002 0220 	and.w	r2, r2, #32
 800046e:	9201      	str	r2, [sp, #4]
 8000470:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000472:	699a      	ldr	r2, [r3, #24]
 8000474:	f042 0204 	orr.w	r2, r2, #4
 8000478:	619a      	str	r2, [r3, #24]
 800047a:	699a      	ldr	r2, [r3, #24]
 800047c:	f002 0204 	and.w	r2, r2, #4
 8000480:	9202      	str	r2, [sp, #8]
 8000482:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000484:	699a      	ldr	r2, [r3, #24]
 8000486:	f042 0208 	orr.w	r2, r2, #8
 800048a:	619a      	str	r2, [r3, #24]
 800048c:	699b      	ldr	r3, [r3, #24]
 800048e:	f003 0308 	and.w	r3, r3, #8
 8000492:	9303      	str	r3, [sp, #12]
 8000494:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUILD_IN_LED_GPIO_Port, BUILD_IN_LED_Pin, GPIO_PIN_RESET);
 8000496:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8000548 <MX_GPIO_Init+0x10c>
 800049a:	4622      	mov	r2, r4
 800049c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004a0:	4648      	mov	r0, r9
 80004a2:	f000 fd81 	bl	8000fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PQD_D1_Pin|PQD_D2_Pin|IGN_FIRE_Pin, GPIO_PIN_RESET);
 80004a6:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800054c <MX_GPIO_Init+0x110>
 80004aa:	4622      	mov	r2, r4
 80004ac:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
 80004b0:	4640      	mov	r0, r8
 80004b2:	f000 fd79 	bl	8000fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HX1_SCL_Pin|QD_D2_Pin|QD_D1_Pin|DEPR_CLOSE_Pin
 80004b6:	4d23      	ldr	r5, [pc, #140]	; (8000544 <MX_GPIO_Init+0x108>)
 80004b8:	4622      	mov	r2, r4
 80004ba:	f24e 21d0 	movw	r1, #58064	; 0xe2d0
 80004be:	4628      	mov	r0, r5
 80004c0:	f000 fd72 	bl	8000fa8 <HAL_GPIO_WritePin>
                          |DEPR_OPEN_Pin|FILL_CLOSE_Pin|FILL_OPEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUILD_IN_LED_Pin;
 80004c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004c8:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ca:	2701      	movs	r7, #1
 80004cc:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ce:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d0:	2602      	movs	r6, #2
 80004d2:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(BUILD_IN_LED_GPIO_Port, &GPIO_InitStruct);
 80004d4:	a904      	add	r1, sp, #16
 80004d6:	4648      	mov	r0, r9
 80004d8:	f000 fc50 	bl	8000d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IGN_TEST_CON_Pin;
 80004dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80004e0:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004e2:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e4:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(IGN_TEST_CON_GPIO_Port, &GPIO_InitStruct);
 80004e6:	a904      	add	r1, sp, #16
 80004e8:	4648      	mov	r0, r9
 80004ea:	f000 fc47 	bl	8000d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = HX2_SDA_Pin|HX2_SCL_Pin|DEPR_C_LIMIT_SW_Pin|DEPR_O_LIMIT_SW_Pin
 80004ee:	f248 3330 	movw	r3, #33584	; 0x8330
 80004f2:	9304      	str	r3, [sp, #16]
                          |FILL_C_LIMIT_SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004f4:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f6:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f8:	a904      	add	r1, sp, #16
 80004fa:	4640      	mov	r0, r8
 80004fc:	f000 fc3e 	bl	8000d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = PQD_D1_Pin|PQD_D2_Pin|IGN_FIRE_Pin;
 8000500:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000504:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000506:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000508:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800050a:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800050c:	a904      	add	r1, sp, #16
 800050e:	4640      	mov	r0, r8
 8000510:	f000 fc34 	bl	8000d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = HX1_SDA_Pin|FILL_O_LIMIT_SW_Pin;
 8000514:	f241 0308 	movw	r3, #4104	; 0x1008
 8000518:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800051a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051c:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800051e:	a904      	add	r1, sp, #16
 8000520:	4628      	mov	r0, r5
 8000522:	f000 fc2b 	bl	8000d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = HX1_SCL_Pin|QD_D2_Pin|QD_D1_Pin|DEPR_CLOSE_Pin
 8000526:	f24e 23d0 	movw	r3, #58064	; 0xe2d0
 800052a:	9304      	str	r3, [sp, #16]
                          |DEPR_OPEN_Pin|FILL_CLOSE_Pin|FILL_OPEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800052c:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000530:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000532:	a904      	add	r1, sp, #16
 8000534:	4628      	mov	r0, r5
 8000536:	f000 fc21 	bl	8000d7c <HAL_GPIO_Init>

}
 800053a:	b009      	add	sp, #36	; 0x24
 800053c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000540:	40021000 	.word	0x40021000
 8000544:	40010c00 	.word	0x40010c00
 8000548:	40011000 	.word	0x40011000
 800054c:	40010800 	.word	0x40010800

08000550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b0a4      	sub	sp, #144	; 0x90
 8000554:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000556:	f000 fb7f 	bl	8000c58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055a:	f000 f8e3 	bl	8000724 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800055e:	f7ff ff6d 	bl	800043c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000562:	f000 fa8d 	bl	8000a80 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000566:	f000 f9f1 	bl	800094c <MX_TIM3_Init>
  MX_TIM4_Init();
 800056a:	f000 fa49 	bl	8000a00 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 800056e:	f000 faa1 	bl	8000ab4 <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_Delay(1000);
 8000572:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000576:	f000 fb93 	bl	8000ca0 <HAL_Delay>

   // char* buff;
    //memset(buff ,0,sizeof(buff));
    // HAL_TIM_Base_Start_IT(&htim2);
    __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 800057a:	4b63      	ldr	r3, [pc, #396]	; (8000708 <main+0x1b8>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	68da      	ldr	r2, [r3, #12]
 8000580:	4b61      	ldr	r3, [pc, #388]	; (8000708 <main+0x1b8>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f042 0220 	orr.w	r2, r2, #32
 8000588:	60da      	str	r2, [r3, #12]
    /* USER CODE END 2 */

    /* USER CODE BEGIN WHILE */

    // INIT
    Igniter igniter(IGN_FIRE_GPIO_Port, IGN_FIRE_Pin, IGN_TEST_CON_GPIO_Port, IGN_TEST_CON_Pin);
 800058a:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 800058e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000592:	9300      	str	r3, [sp, #0]
 8000594:	4b5d      	ldr	r3, [pc, #372]	; (800070c <main+0x1bc>)
 8000596:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800059a:	495d      	ldr	r1, [pc, #372]	; (8000710 <main+0x1c0>)
 800059c:	f7ff fdd6 	bl	800014c <_ZN7IgniterC1EP12GPIO_TypeDeftS1_t>
    Motor Fill(FILL_OPEN_GPIO_Port, FILL_OPEN_Pin, FILL_CLOSE_GPIO_Port, FILL_CLOSE_Pin, &htim3, TIM_CHANNEL_3, FILL_O_LIMIT_SW_GPIO_Port, FILL_O_LIMIT_SW_Pin, FILL_C_LIMIT_SW_GPIO_Port, FILL_C_LIMIT_SW_Pin);
 80005a0:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80005a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005a8:	9306      	str	r3, [sp, #24]
 80005aa:	4b59      	ldr	r3, [pc, #356]	; (8000710 <main+0x1c0>)
 80005ac:	9305      	str	r3, [sp, #20]
 80005ae:	2308      	movs	r3, #8
 80005b0:	9304      	str	r3, [sp, #16]
 80005b2:	4b58      	ldr	r3, [pc, #352]	; (8000714 <main+0x1c4>)
 80005b4:	9303      	str	r3, [sp, #12]
 80005b6:	2308      	movs	r3, #8
 80005b8:	9302      	str	r3, [sp, #8]
 80005ba:	4b57      	ldr	r3, [pc, #348]	; (8000718 <main+0x1c8>)
 80005bc:	9301      	str	r3, [sp, #4]
 80005be:	2380      	movs	r3, #128	; 0x80
 80005c0:	9300      	str	r3, [sp, #0]
 80005c2:	4b54      	ldr	r3, [pc, #336]	; (8000714 <main+0x1c4>)
 80005c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005c8:	4952      	ldr	r1, [pc, #328]	; (8000714 <main+0x1c4>)
 80005ca:	f7ff fe04 	bl	80001d6 <_ZN5MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDeftS1_tS1_t>
    Motor QD(QD_D1_GPIO_Port, QD_D1_Pin, QD_D2_GPIO_Port, QD_D2_Pin, &htim3, TIM_CHANNEL_3, nullptr, 0, nullptr, 0);
 80005ce:	1d38      	adds	r0, r7, #4
 80005d0:	2300      	movs	r3, #0
 80005d2:	9306      	str	r3, [sp, #24]
 80005d4:	2300      	movs	r3, #0
 80005d6:	9305      	str	r3, [sp, #20]
 80005d8:	2300      	movs	r3, #0
 80005da:	9304      	str	r3, [sp, #16]
 80005dc:	2300      	movs	r3, #0
 80005de:	9303      	str	r3, [sp, #12]
 80005e0:	2308      	movs	r3, #8
 80005e2:	9302      	str	r3, [sp, #8]
 80005e4:	4b4c      	ldr	r3, [pc, #304]	; (8000718 <main+0x1c8>)
 80005e6:	9301      	str	r3, [sp, #4]
 80005e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80005ec:	9300      	str	r3, [sp, #0]
 80005ee:	4b49      	ldr	r3, [pc, #292]	; (8000714 <main+0x1c4>)
 80005f0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80005f4:	4947      	ldr	r1, [pc, #284]	; (8000714 <main+0x1c4>)
 80005f6:	f7ff fdee 	bl	80001d6 <_ZN5MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDeftS1_tS1_t>

    uint16_t signal = 999; //placeholder, we need to do some signal managing with Michał
 80005fa:	f240 33e7 	movw	r3, #999	; 0x3e7
 80005fe:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

    state = 0; //touch only for tests
 8000602:	4b46      	ldr	r3, [pc, #280]	; (800071c <main+0x1cc>)
 8000604:	2200      	movs	r2, #0
 8000606:	701a      	strb	r2, [r3, #0]
    while (1)
    {
  	  switch(state){
 8000608:	4b44      	ldr	r3, [pc, #272]	; (800071c <main+0x1cc>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	2b06      	cmp	r3, #6
 800060e:	d8fb      	bhi.n	8000608 <main+0xb8>
 8000610:	a201      	add	r2, pc, #4	; (adr r2, 8000618 <main+0xc8>)
 8000612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000616:	bf00      	nop
 8000618:	08000635 	.word	0x08000635
 800061c:	08000663 	.word	0x08000663
 8000620:	08000673 	.word	0x08000673
 8000624:	0800069d 	.word	0x0800069d
 8000628:	080006cb 	.word	0x080006cb
 800062c:	080006d3 	.word	0x080006d3
 8000630:	080006f1 	.word	0x080006f1
  		  case 0: //test state
  			  if(igniter.is_connected()){
 8000634:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000638:	4618      	mov	r0, r3
 800063a:	f7ff fda1 	bl	8000180 <_ZNK7Igniter12is_connectedEv>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d004      	beq.n	800064e <main+0xfe>
  				  HAL_GPIO_TogglePin(BUILD_IN_LED_GPIO_Port, BUILD_IN_LED_Pin);
 8000644:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000648:	4830      	ldr	r0, [pc, #192]	; (800070c <main+0x1bc>)
 800064a:	f000 fcb3 	bl	8000fb4 <HAL_GPIO_TogglePin>
  			  }

  			  //place for random tests
  			  Fill.test_open_close();
 800064e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000652:	4618      	mov	r0, r3
 8000654:	f7ff fedb 	bl	800040e <_ZN5Motor15test_open_closeEv>

  			  HAL_Delay(1000);
 8000658:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800065c:	f000 fb20 	bl	8000ca0 <HAL_Delay>
  			  break;
 8000660:	e051      	b.n	8000706 <main+0x1b6>
  		  case 1:	//IDLE
  			  if(signal == 23){  //signal == ready
 8000662:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8000666:	2b17      	cmp	r3, #23
 8000668:	d146      	bne.n	80006f8 <main+0x1a8>
  				  //TODO: send ready
  				  state = 2;
 800066a:	4b2c      	ldr	r3, [pc, #176]	; (800071c <main+0x1cc>)
 800066c:	2202      	movs	r2, #2
 800066e:	701a      	strb	r2, [r3, #0]
  			  }
  			  break;
 8000670:	e042      	b.n	80006f8 <main+0x1a8>
  		  case 2:	//ARMED(hard)
  			  if(igniter.is_connected() && signal == 'h'){
 8000672:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000676:	4618      	mov	r0, r3
 8000678:	f7ff fd82 	bl	8000180 <_ZNK7Igniter12is_connectedEv>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d005      	beq.n	800068e <main+0x13e>
 8000682:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8000686:	2b68      	cmp	r3, #104	; 0x68
 8000688:	d101      	bne.n	800068e <main+0x13e>
 800068a:	2301      	movs	r3, #1
 800068c:	e000      	b.n	8000690 <main+0x140>
 800068e:	2300      	movs	r3, #0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d033      	beq.n	80006fc <main+0x1ac>
  			  	  state = 3;
 8000694:	4b21      	ldr	r3, [pc, #132]	; (800071c <main+0x1cc>)
 8000696:	2203      	movs	r2, #3
 8000698:	701a      	strb	r2, [r3, #0]
  			  }
  			  break;
 800069a:	e02f      	b.n	80006fc <main+0x1ac>
  		  case 3:	//ARMED(soft)
  			  	  if(signal == 666){		//signal == fire
 800069c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80006a0:	f240 229a 	movw	r2, #666	; 0x29a
 80006a4:	4293      	cmp	r3, r2
 80006a6:	d108      	bne.n	80006ba <main+0x16a>
  			  		  igniter.FIRE();
 80006a8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff fd82 	bl	80001b6 <_ZN7Igniter4FIREEv>
  			  		  state = 5;
 80006b2:	4b1a      	ldr	r3, [pc, #104]	; (800071c <main+0x1cc>)
 80006b4:	2205      	movs	r2, #5
 80006b6:	701a      	strb	r2, [r3, #0]
  			  	  }
  			  	  else if(signal == 89){	//signal == arm
  			  		  state = 4;
  			  	  }
  			  break;
 80006b8:	e022      	b.n	8000700 <main+0x1b0>
  			  	  else if(signal == 89){	//signal == arm
 80006ba:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80006be:	2b59      	cmp	r3, #89	; 0x59
 80006c0:	d11e      	bne.n	8000700 <main+0x1b0>
  			  		  state = 4;
 80006c2:	4b16      	ldr	r3, [pc, #88]	; (800071c <main+0x1cc>)
 80006c4:	2204      	movs	r2, #4
 80006c6:	701a      	strb	r2, [r3, #0]
  			  break;
 80006c8:	e01a      	b.n	8000700 <main+0x1b0>
  		  case 4:	//ABORT
  			  state = 2;
 80006ca:	4b14      	ldr	r3, [pc, #80]	; (800071c <main+0x1cc>)
 80006cc:	2202      	movs	r2, #2
 80006ce:	701a      	strb	r2, [r3, #0]
  			  break;
 80006d0:	e019      	b.n	8000706 <main+0x1b6>
  		  case 5:	//FLIGHT
  			  //TODO: Send "fired" 	//n - times
  			 if( ! igniter.is_connected()){
 80006d2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff fd52 	bl	8000180 <_ZNK7Igniter12is_connectedEv>
 80006dc:	4603      	mov	r3, r0
 80006de:	f083 0301 	eor.w	r3, r3, #1
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d00d      	beq.n	8000704 <main+0x1b4>
  				  state = 6;
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <main+0x1cc>)
 80006ea:	2206      	movs	r2, #6
 80006ec:	701a      	strb	r2, [r3, #0]
  			  }
  			  break;
 80006ee:	e009      	b.n	8000704 <main+0x1b4>
  		  case 6:	//END
  			  HAL_Delay(1000000);
 80006f0:	480b      	ldr	r0, [pc, #44]	; (8000720 <main+0x1d0>)
 80006f2:	f000 fad5 	bl	8000ca0 <HAL_Delay>
  			  break;
 80006f6:	e006      	b.n	8000706 <main+0x1b6>
  			  break;
 80006f8:	bf00      	nop
 80006fa:	e785      	b.n	8000608 <main+0xb8>
  			  break;
 80006fc:	bf00      	nop
 80006fe:	e783      	b.n	8000608 <main+0xb8>
  			  break;
 8000700:	bf00      	nop
 8000702:	e781      	b.n	8000608 <main+0xb8>
  			  break;
 8000704:	bf00      	nop
  	  switch(state){
 8000706:	e77f      	b.n	8000608 <main+0xb8>
 8000708:	200000fc 	.word	0x200000fc
 800070c:	40011000 	.word	0x40011000
 8000710:	40010800 	.word	0x40010800
 8000714:	40010c00 	.word	0x40010c00
 8000718:	20000074 	.word	0x20000074
 800071c:	20000028 	.word	0x20000028
 8000720:	000f4240 	.word	0x000f4240

08000724 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b094      	sub	sp, #80	; 0x50
 8000728:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800072e:	2228      	movs	r2, #40	; 0x28
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f001 fa4e 	bl	8001bd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000738:	f107 0314 	add.w	r3, r7, #20
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000748:	1d3b      	adds	r3, r7, #4
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
 8000752:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000754:	2301      	movs	r3, #1
 8000756:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000758:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800075c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800075e:	2300      	movs	r3, #0
 8000760:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000762:	2301      	movs	r3, #1
 8000764:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000766:	2302      	movs	r3, #2
 8000768:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800076a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800076e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000770:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000774:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000776:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800077a:	4618      	mov	r0, r3
 800077c:	f000 fc24 	bl	8000fc8 <HAL_RCC_OscConfig>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	bf14      	ite	ne
 8000786:	2301      	movne	r3, #1
 8000788:	2300      	moveq	r3, #0
 800078a:	b2db      	uxtb	r3, r3
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8000790:	f000 f833 	bl	80007fa <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000794:	230f      	movs	r3, #15
 8000796:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000798:	2302      	movs	r3, #2
 800079a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800079c:	2300      	movs	r3, #0
 800079e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007a4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007aa:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007ac:	f107 0314 	add.w	r3, r7, #20
 80007b0:	2101      	movs	r1, #1
 80007b2:	4618      	mov	r0, r3
 80007b4:	f000 fe54 	bl	8001460 <HAL_RCC_ClockConfig>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	bf14      	ite	ne
 80007be:	2301      	movne	r3, #1
 80007c0:	2300      	moveq	r3, #0
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <_Z18SystemClock_Configv+0xa8>
  {
    Error_Handler();
 80007c8:	f000 f817 	bl	80007fa <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80007cc:	2310      	movs	r3, #16
 80007ce:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80007d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007d4:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	4618      	mov	r0, r3
 80007da:	f000 ff19 	bl	8001610 <HAL_RCCEx_PeriphCLKConfig>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	bf14      	ite	ne
 80007e4:	2301      	movne	r3, #1
 80007e6:	2300      	moveq	r3, #0
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <_Z18SystemClock_Configv+0xce>
  {
    Error_Handler();
 80007ee:	f000 f804 	bl	80007fa <Error_Handler>
  }
}
 80007f2:	bf00      	nop
 80007f4:	3750      	adds	r7, #80	; 0x50
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007fa:	b480      	push	{r7}
 80007fc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007fe:	b672      	cpsid	i
}
 8000800:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000802:	e7fe      	b.n	8000802 <Error_Handler+0x8>

08000804 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000804:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000806:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <HAL_MspInit+0x3c>)
 8000808:	699a      	ldr	r2, [r3, #24]
 800080a:	f042 0201 	orr.w	r2, r2, #1
 800080e:	619a      	str	r2, [r3, #24]
 8000810:	699a      	ldr	r2, [r3, #24]
 8000812:	f002 0201 	and.w	r2, r2, #1
 8000816:	9200      	str	r2, [sp, #0]
 8000818:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800081a:	69da      	ldr	r2, [r3, #28]
 800081c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000820:	61da      	str	r2, [r3, #28]
 8000822:	69db      	ldr	r3, [r3, #28]
 8000824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000828:	9301      	str	r3, [sp, #4]
 800082a:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800082c:	4a05      	ldr	r2, [pc, #20]	; (8000844 <HAL_MspInit+0x40>)
 800082e:	6853      	ldr	r3, [r2, #4]
 8000830:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000834:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000838:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800083a:	b002      	add	sp, #8
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	40021000 	.word	0x40021000
 8000844:	40010000 	.word	0x40010000

08000848 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000848:	e7fe      	b.n	8000848 <NMI_Handler>

0800084a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800084a:	e7fe      	b.n	800084a <HardFault_Handler>

0800084c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800084c:	e7fe      	b.n	800084c <MemManage_Handler>

0800084e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800084e:	e7fe      	b.n	800084e <BusFault_Handler>

08000850 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000850:	e7fe      	b.n	8000850 <UsageFault_Handler>

08000852 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000852:	4770      	bx	lr

08000854 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000854:	4770      	bx	lr

08000856 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000856:	4770      	bx	lr

08000858 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000858:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800085a:	f000 fa0f 	bl	8000c7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800085e:	bd08      	pop	{r3, pc}

08000860 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000860:	4770      	bx	lr
	...

08000864 <HAL_TIM_PWM_MspInit>:
  HAL_TIM_MspPostInit(&htim4);

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000864:	b082      	sub	sp, #8

  if(tim_pwmHandle->Instance==TIM3)
 8000866:	6803      	ldr	r3, [r0, #0]
 8000868:	4a0e      	ldr	r2, [pc, #56]	; (80008a4 <HAL_TIM_PWM_MspInit+0x40>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d004      	beq.n	8000878 <HAL_TIM_PWM_MspInit+0x14>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(tim_pwmHandle->Instance==TIM4)
 800086e:	4a0e      	ldr	r2, [pc, #56]	; (80008a8 <HAL_TIM_PWM_MspInit+0x44>)
 8000870:	4293      	cmp	r3, r2
 8000872:	d00c      	beq.n	800088e <HAL_TIM_PWM_MspInit+0x2a>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000874:	b002      	add	sp, #8
 8000876:	4770      	bx	lr
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000878:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <HAL_TIM_PWM_MspInit+0x48>)
 800087a:	69da      	ldr	r2, [r3, #28]
 800087c:	f042 0202 	orr.w	r2, r2, #2
 8000880:	61da      	str	r2, [r3, #28]
 8000882:	69db      	ldr	r3, [r3, #28]
 8000884:	f003 0302 	and.w	r3, r3, #2
 8000888:	9300      	str	r3, [sp, #0]
 800088a:	9b00      	ldr	r3, [sp, #0]
 800088c:	e7f2      	b.n	8000874 <HAL_TIM_PWM_MspInit+0x10>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800088e:	4b07      	ldr	r3, [pc, #28]	; (80008ac <HAL_TIM_PWM_MspInit+0x48>)
 8000890:	69da      	ldr	r2, [r3, #28]
 8000892:	f042 0204 	orr.w	r2, r2, #4
 8000896:	61da      	str	r2, [r3, #28]
 8000898:	69db      	ldr	r3, [r3, #28]
 800089a:	f003 0304 	and.w	r3, r3, #4
 800089e:	9301      	str	r3, [sp, #4]
 80008a0:	9b01      	ldr	r3, [sp, #4]
}
 80008a2:	e7e7      	b.n	8000874 <HAL_TIM_PWM_MspInit+0x10>
 80008a4:	40000400 	.word	0x40000400
 80008a8:	40000800 	.word	0x40000800
 80008ac:	40021000 	.word	0x40021000

080008b0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80008b0:	b500      	push	{lr}
 80008b2:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b4:	2300      	movs	r3, #0
 80008b6:	9302      	str	r3, [sp, #8]
 80008b8:	9303      	str	r3, [sp, #12]
 80008ba:	9304      	str	r3, [sp, #16]
 80008bc:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM3)
 80008be:	6803      	ldr	r3, [r0, #0]
 80008c0:	4a1d      	ldr	r2, [pc, #116]	; (8000938 <HAL_TIM_MspPostInit+0x88>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d005      	beq.n	80008d2 <HAL_TIM_MspPostInit+0x22>

  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM4)
 80008c6:	4a1d      	ldr	r2, [pc, #116]	; (800093c <HAL_TIM_MspPostInit+0x8c>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d01f      	beq.n	800090c <HAL_TIM_MspPostInit+0x5c>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80008cc:	b007      	add	sp, #28
 80008ce:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d2:	4b1b      	ldr	r3, [pc, #108]	; (8000940 <HAL_TIM_MspPostInit+0x90>)
 80008d4:	699a      	ldr	r2, [r3, #24]
 80008d6:	f042 0208 	orr.w	r2, r2, #8
 80008da:	619a      	str	r2, [r3, #24]
 80008dc:	699b      	ldr	r3, [r3, #24]
 80008de:	f003 0308 	and.w	r3, r3, #8
 80008e2:	9300      	str	r3, [sp, #0]
 80008e4:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = QD_EN_Pin|PQD_EN_Pin|DEPR_EN_Pin;
 80008e6:	2323      	movs	r3, #35	; 0x23
 80008e8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ea:	2302      	movs	r3, #2
 80008ec:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f0:	a902      	add	r1, sp, #8
 80008f2:	4814      	ldr	r0, [pc, #80]	; (8000944 <HAL_TIM_MspPostInit+0x94>)
 80008f4:	f000 fa42 	bl	8000d7c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80008f8:	4a13      	ldr	r2, [pc, #76]	; (8000948 <HAL_TIM_MspPostInit+0x98>)
 80008fa:	6853      	ldr	r3, [r2, #4]
 80008fc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000900:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000904:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000908:	6053      	str	r3, [r2, #4]
 800090a:	e7df      	b.n	80008cc <HAL_TIM_MspPostInit+0x1c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <HAL_TIM_MspPostInit+0x90>)
 800090e:	699a      	ldr	r2, [r3, #24]
 8000910:	f042 0208 	orr.w	r2, r2, #8
 8000914:	619a      	str	r2, [r3, #24]
 8000916:	699b      	ldr	r3, [r3, #24]
 8000918:	f003 0308 	and.w	r3, r3, #8
 800091c:	9301      	str	r3, [sp, #4]
 800091e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = FILL_EN_Pin;
 8000920:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000924:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000926:	2302      	movs	r3, #2
 8000928:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(FILL_EN_GPIO_Port, &GPIO_InitStruct);
 800092c:	a902      	add	r1, sp, #8
 800092e:	4805      	ldr	r0, [pc, #20]	; (8000944 <HAL_TIM_MspPostInit+0x94>)
 8000930:	f000 fa24 	bl	8000d7c <HAL_GPIO_Init>
}
 8000934:	e7ca      	b.n	80008cc <HAL_TIM_MspPostInit+0x1c>
 8000936:	bf00      	nop
 8000938:	40000400 	.word	0x40000400
 800093c:	40000800 	.word	0x40000800
 8000940:	40021000 	.word	0x40021000
 8000944:	40010c00 	.word	0x40010c00
 8000948:	40010000 	.word	0x40010000

0800094c <MX_TIM3_Init>:
{
 800094c:	b500      	push	{lr}
 800094e:	b08b      	sub	sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000950:	2300      	movs	r3, #0
 8000952:	9308      	str	r3, [sp, #32]
 8000954:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000956:	9301      	str	r3, [sp, #4]
 8000958:	9302      	str	r3, [sp, #8]
 800095a:	9303      	str	r3, [sp, #12]
 800095c:	9304      	str	r3, [sp, #16]
 800095e:	9305      	str	r3, [sp, #20]
 8000960:	9306      	str	r3, [sp, #24]
 8000962:	9307      	str	r3, [sp, #28]
  htim3.Instance = TIM3;
 8000964:	4824      	ldr	r0, [pc, #144]	; (80009f8 <MX_TIM3_Init+0xac>)
 8000966:	4a25      	ldr	r2, [pc, #148]	; (80009fc <MX_TIM3_Init+0xb0>)
 8000968:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 7;
 800096a:	2207      	movs	r2, #7
 800096c:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800096e:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 999;
 8000970:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000974:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000976:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000978:	2380      	movs	r3, #128	; 0x80
 800097a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800097c:	f000 ff9c 	bl	80018b8 <HAL_TIM_PWM_Init>
 8000980:	bb50      	cbnz	r0, 80009d8 <MX_TIM3_Init+0x8c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000982:	2300      	movs	r3, #0
 8000984:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000986:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000988:	a908      	add	r1, sp, #32
 800098a:	481b      	ldr	r0, [pc, #108]	; (80009f8 <MX_TIM3_Init+0xac>)
 800098c:	f001 f856 	bl	8001a3c <HAL_TIMEx_MasterConfigSynchronization>
 8000990:	bb28      	cbnz	r0, 80009de <MX_TIM3_Init+0x92>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000992:	2360      	movs	r3, #96	; 0x60
 8000994:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 500;
 8000996:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800099a:	9302      	str	r3, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800099c:	2300      	movs	r3, #0
 800099e:	9303      	str	r3, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009a0:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009a2:	2204      	movs	r2, #4
 80009a4:	eb0d 0102 	add.w	r1, sp, r2
 80009a8:	4813      	ldr	r0, [pc, #76]	; (80009f8 <MX_TIM3_Init+0xac>)
 80009aa:	f000 ffdf 	bl	800196c <HAL_TIM_PWM_ConfigChannel>
 80009ae:	b9c8      	cbnz	r0, 80009e4 <MX_TIM3_Init+0x98>
  sConfigOC.Pulse = 0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009b4:	2208      	movs	r2, #8
 80009b6:	a901      	add	r1, sp, #4
 80009b8:	480f      	ldr	r0, [pc, #60]	; (80009f8 <MX_TIM3_Init+0xac>)
 80009ba:	f000 ffd7 	bl	800196c <HAL_TIM_PWM_ConfigChannel>
 80009be:	b9a0      	cbnz	r0, 80009ea <MX_TIM3_Init+0x9e>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009c0:	220c      	movs	r2, #12
 80009c2:	a901      	add	r1, sp, #4
 80009c4:	480c      	ldr	r0, [pc, #48]	; (80009f8 <MX_TIM3_Init+0xac>)
 80009c6:	f000 ffd1 	bl	800196c <HAL_TIM_PWM_ConfigChannel>
 80009ca:	b988      	cbnz	r0, 80009f0 <MX_TIM3_Init+0xa4>
  HAL_TIM_MspPostInit(&htim3);
 80009cc:	480a      	ldr	r0, [pc, #40]	; (80009f8 <MX_TIM3_Init+0xac>)
 80009ce:	f7ff ff6f 	bl	80008b0 <HAL_TIM_MspPostInit>
}
 80009d2:	b00b      	add	sp, #44	; 0x2c
 80009d4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80009d8:	f7ff ff0f 	bl	80007fa <Error_Handler>
 80009dc:	e7d1      	b.n	8000982 <MX_TIM3_Init+0x36>
    Error_Handler();
 80009de:	f7ff ff0c 	bl	80007fa <Error_Handler>
 80009e2:	e7d6      	b.n	8000992 <MX_TIM3_Init+0x46>
    Error_Handler();
 80009e4:	f7ff ff09 	bl	80007fa <Error_Handler>
 80009e8:	e7e2      	b.n	80009b0 <MX_TIM3_Init+0x64>
    Error_Handler();
 80009ea:	f7ff ff06 	bl	80007fa <Error_Handler>
 80009ee:	e7e7      	b.n	80009c0 <MX_TIM3_Init+0x74>
    Error_Handler();
 80009f0:	f7ff ff03 	bl	80007fa <Error_Handler>
 80009f4:	e7ea      	b.n	80009cc <MX_TIM3_Init+0x80>
 80009f6:	bf00      	nop
 80009f8:	20000074 	.word	0x20000074
 80009fc:	40000400 	.word	0x40000400

08000a00 <MX_TIM4_Init>:
{
 8000a00:	b500      	push	{lr}
 8000a02:	b08b      	sub	sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a04:	2300      	movs	r3, #0
 8000a06:	9308      	str	r3, [sp, #32]
 8000a08:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a0a:	9301      	str	r3, [sp, #4]
 8000a0c:	9302      	str	r3, [sp, #8]
 8000a0e:	9303      	str	r3, [sp, #12]
 8000a10:	9304      	str	r3, [sp, #16]
 8000a12:	9305      	str	r3, [sp, #20]
 8000a14:	9306      	str	r3, [sp, #24]
 8000a16:	9307      	str	r3, [sp, #28]
  htim4.Instance = TIM4;
 8000a18:	4817      	ldr	r0, [pc, #92]	; (8000a78 <MX_TIM4_Init+0x78>)
 8000a1a:	4a18      	ldr	r2, [pc, #96]	; (8000a7c <MX_TIM4_Init+0x7c>)
 8000a1c:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 0;
 8000a1e:	6043      	str	r3, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a20:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 65535;
 8000a22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a26:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a28:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a2a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000a2c:	f000 ff44 	bl	80018b8 <HAL_TIM_PWM_Init>
 8000a30:	b9c8      	cbnz	r0, 8000a66 <MX_TIM4_Init+0x66>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a32:	2300      	movs	r3, #0
 8000a34:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a36:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a38:	a908      	add	r1, sp, #32
 8000a3a:	480f      	ldr	r0, [pc, #60]	; (8000a78 <MX_TIM4_Init+0x78>)
 8000a3c:	f000 fffe 	bl	8001a3c <HAL_TIMEx_MasterConfigSynchronization>
 8000a40:	b9a0      	cbnz	r0, 8000a6c <MX_TIM4_Init+0x6c>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a42:	2360      	movs	r3, #96	; 0x60
 8000a44:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	9302      	str	r3, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a4a:	9303      	str	r3, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a4c:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a4e:	2208      	movs	r2, #8
 8000a50:	a901      	add	r1, sp, #4
 8000a52:	4809      	ldr	r0, [pc, #36]	; (8000a78 <MX_TIM4_Init+0x78>)
 8000a54:	f000 ff8a 	bl	800196c <HAL_TIM_PWM_ConfigChannel>
 8000a58:	b958      	cbnz	r0, 8000a72 <MX_TIM4_Init+0x72>
  HAL_TIM_MspPostInit(&htim4);
 8000a5a:	4807      	ldr	r0, [pc, #28]	; (8000a78 <MX_TIM4_Init+0x78>)
 8000a5c:	f7ff ff28 	bl	80008b0 <HAL_TIM_MspPostInit>
}
 8000a60:	b00b      	add	sp, #44	; 0x2c
 8000a62:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000a66:	f7ff fec8 	bl	80007fa <Error_Handler>
 8000a6a:	e7e2      	b.n	8000a32 <MX_TIM4_Init+0x32>
    Error_Handler();
 8000a6c:	f7ff fec5 	bl	80007fa <Error_Handler>
 8000a70:	e7e7      	b.n	8000a42 <MX_TIM4_Init+0x42>
    Error_Handler();
 8000a72:	f7ff fec2 	bl	80007fa <Error_Handler>
 8000a76:	e7f0      	b.n	8000a5a <MX_TIM4_Init+0x5a>
 8000a78:	2000002c 	.word	0x2000002c
 8000a7c:	40000800 	.word	0x40000800

08000a80 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a80:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a82:	480a      	ldr	r0, [pc, #40]	; (8000aac <MX_USART2_UART_Init+0x2c>)
 8000a84:	4b0a      	ldr	r3, [pc, #40]	; (8000ab0 <MX_USART2_UART_Init+0x30>)
 8000a86:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8000a88:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000a8c:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a92:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a94:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a96:	220c      	movs	r2, #12
 8000a98:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a9a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a9c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a9e:	f001 f845 	bl	8001b2c <HAL_UART_Init>
 8000aa2:	b900      	cbnz	r0, 8000aa6 <MX_USART2_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000aa4:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000aa6:	f7ff fea8 	bl	80007fa <Error_Handler>
}
 8000aaa:	e7fb      	b.n	8000aa4 <MX_USART2_UART_Init+0x24>
 8000aac:	200000fc 	.word	0x200000fc
 8000ab0:	40004400 	.word	0x40004400

08000ab4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000ab4:	b508      	push	{r3, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ab6:	480a      	ldr	r0, [pc, #40]	; (8000ae0 <MX_USART3_UART_Init+0x2c>)
 8000ab8:	4b0a      	ldr	r3, [pc, #40]	; (8000ae4 <MX_USART3_UART_Init+0x30>)
 8000aba:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 8000abc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000ac0:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ac6:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ac8:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000aca:	220c      	movs	r2, #12
 8000acc:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ace:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad0:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ad2:	f001 f82b 	bl	8001b2c <HAL_UART_Init>
 8000ad6:	b900      	cbnz	r0, 8000ada <MX_USART3_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ad8:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000ada:	f7ff fe8e 	bl	80007fa <Error_Handler>
}
 8000ade:	e7fb      	b.n	8000ad8 <MX_USART3_UART_Init+0x24>
 8000ae0:	200000bc 	.word	0x200000bc
 8000ae4:	40004800 	.word	0x40004800

08000ae8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ae8:	b510      	push	{r4, lr}
 8000aea:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aec:	2300      	movs	r3, #0
 8000aee:	9304      	str	r3, [sp, #16]
 8000af0:	9305      	str	r3, [sp, #20]
 8000af2:	9306      	str	r3, [sp, #24]
 8000af4:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART2)
 8000af6:	6803      	ldr	r3, [r0, #0]
 8000af8:	4a2c      	ldr	r2, [pc, #176]	; (8000bac <HAL_UART_MspInit+0xc4>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d004      	beq.n	8000b08 <HAL_UART_MspInit+0x20>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 8000afe:	4a2c      	ldr	r2, [pc, #176]	; (8000bb0 <HAL_UART_MspInit+0xc8>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d029      	beq.n	8000b58 <HAL_UART_MspInit+0x70>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000b04:	b008      	add	sp, #32
 8000b06:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b08:	4b2a      	ldr	r3, [pc, #168]	; (8000bb4 <HAL_UART_MspInit+0xcc>)
 8000b0a:	69da      	ldr	r2, [r3, #28]
 8000b0c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000b10:	61da      	str	r2, [r3, #28]
 8000b12:	69da      	ldr	r2, [r3, #28]
 8000b14:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000b18:	9200      	str	r2, [sp, #0]
 8000b1a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1c:	699a      	ldr	r2, [r3, #24]
 8000b1e:	f042 0204 	orr.w	r2, r2, #4
 8000b22:	619a      	str	r2, [r3, #24]
 8000b24:	699b      	ldr	r3, [r3, #24]
 8000b26:	f003 0304 	and.w	r3, r3, #4
 8000b2a:	9301      	str	r3, [sp, #4]
 8000b2c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b2e:	2304      	movs	r3, #4
 8000b30:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b32:	2302      	movs	r3, #2
 8000b34:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b36:	2303      	movs	r3, #3
 8000b38:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3a:	4c1f      	ldr	r4, [pc, #124]	; (8000bb8 <HAL_UART_MspInit+0xd0>)
 8000b3c:	a904      	add	r1, sp, #16
 8000b3e:	4620      	mov	r0, r4
 8000b40:	f000 f91c 	bl	8000d7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b44:	2308      	movs	r3, #8
 8000b46:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4e:	a904      	add	r1, sp, #16
 8000b50:	4620      	mov	r0, r4
 8000b52:	f000 f913 	bl	8000d7c <HAL_GPIO_Init>
 8000b56:	e7d5      	b.n	8000b04 <HAL_UART_MspInit+0x1c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b58:	4b16      	ldr	r3, [pc, #88]	; (8000bb4 <HAL_UART_MspInit+0xcc>)
 8000b5a:	69da      	ldr	r2, [r3, #28]
 8000b5c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000b60:	61da      	str	r2, [r3, #28]
 8000b62:	69da      	ldr	r2, [r3, #28]
 8000b64:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8000b68:	9202      	str	r2, [sp, #8]
 8000b6a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6c:	699a      	ldr	r2, [r3, #24]
 8000b6e:	f042 0208 	orr.w	r2, r2, #8
 8000b72:	619a      	str	r2, [r3, #24]
 8000b74:	699b      	ldr	r3, [r3, #24]
 8000b76:	f003 0308 	and.w	r3, r3, #8
 8000b7a:	9303      	str	r3, [sp, #12]
 8000b7c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b82:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b84:	2302      	movs	r3, #2
 8000b86:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b8c:	4c0b      	ldr	r4, [pc, #44]	; (8000bbc <HAL_UART_MspInit+0xd4>)
 8000b8e:	a904      	add	r1, sp, #16
 8000b90:	4620      	mov	r0, r4
 8000b92:	f000 f8f3 	bl	8000d7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000b96:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b9a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba2:	a904      	add	r1, sp, #16
 8000ba4:	4620      	mov	r0, r4
 8000ba6:	f000 f8e9 	bl	8000d7c <HAL_GPIO_Init>
}
 8000baa:	e7ab      	b.n	8000b04 <HAL_UART_MspInit+0x1c>
 8000bac:	40004400 	.word	0x40004400
 8000bb0:	40004800 	.word	0x40004800
 8000bb4:	40021000 	.word	0x40021000
 8000bb8:	40010800 	.word	0x40010800
 8000bbc:	40010c00 	.word	0x40010c00

08000bc0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000bc0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000bc2:	e003      	b.n	8000bcc <LoopCopyDataInit>

08000bc4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000bc4:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000bc6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000bc8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000bca:	3104      	adds	r1, #4

08000bcc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000bcc:	480a      	ldr	r0, [pc, #40]	; (8000bf8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000bce:	4b0b      	ldr	r3, [pc, #44]	; (8000bfc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000bd0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000bd2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000bd4:	d3f6      	bcc.n	8000bc4 <CopyDataInit>
  ldr r2, =_sbss
 8000bd6:	4a0a      	ldr	r2, [pc, #40]	; (8000c00 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000bd8:	e002      	b.n	8000be0 <LoopFillZerobss>

08000bda <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000bda:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000bdc:	f842 3b04 	str.w	r3, [r2], #4

08000be0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000be0:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000be2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000be4:	d3f9      	bcc.n	8000bda <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000be6:	f7ff fe3b 	bl	8000860 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bea:	f000 ffcf 	bl	8001b8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bee:	f7ff fcaf 	bl	8000550 <main>
  bx lr
 8000bf2:	4770      	bx	lr
  ldr r3, =_sidata
 8000bf4:	08001c30 	.word	0x08001c30
  ldr r0, =_sdata
 8000bf8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000bfc:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000c00:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000c04:	20000140 	.word	0x20000140

08000c08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c08:	e7fe      	b.n	8000c08 <ADC1_2_IRQHandler>
	...

08000c0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c0c:	b510      	push	{r4, lr}
 8000c0e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c10:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <HAL_InitTick+0x40>)
 8000c12:	7818      	ldrb	r0, [r3, #0]
 8000c14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c18:	fbb3 f3f0 	udiv	r3, r3, r0
 8000c1c:	4a0c      	ldr	r2, [pc, #48]	; (8000c50 <HAL_InitTick+0x44>)
 8000c1e:	6810      	ldr	r0, [r2, #0]
 8000c20:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c24:	f000 f894 	bl	8000d50 <HAL_SYSTICK_Config>
 8000c28:	b968      	cbnz	r0, 8000c46 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c2a:	2c0f      	cmp	r4, #15
 8000c2c:	d901      	bls.n	8000c32 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000c2e:	2001      	movs	r0, #1
 8000c30:	e00a      	b.n	8000c48 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c32:	2200      	movs	r2, #0
 8000c34:	4621      	mov	r1, r4
 8000c36:	f04f 30ff 	mov.w	r0, #4294967295
 8000c3a:	f000 f857 	bl	8000cec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c3e:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <HAL_InitTick+0x48>)
 8000c40:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000c42:	2000      	movs	r0, #0
 8000c44:	e000      	b.n	8000c48 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000c46:	2001      	movs	r0, #1
}
 8000c48:	bd10      	pop	{r4, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000004 	.word	0x20000004
 8000c50:	20000000 	.word	0x20000000
 8000c54:	20000008 	.word	0x20000008

08000c58 <HAL_Init>:
{
 8000c58:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c5a:	4a07      	ldr	r2, [pc, #28]	; (8000c78 <HAL_Init+0x20>)
 8000c5c:	6813      	ldr	r3, [r2, #0]
 8000c5e:	f043 0310 	orr.w	r3, r3, #16
 8000c62:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c64:	2003      	movs	r0, #3
 8000c66:	f000 f82f 	bl	8000cc8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	f7ff ffce 	bl	8000c0c <HAL_InitTick>
  HAL_MspInit();
 8000c70:	f7ff fdc8 	bl	8000804 <HAL_MspInit>
}
 8000c74:	2000      	movs	r0, #0
 8000c76:	bd08      	pop	{r3, pc}
 8000c78:	40022000 	.word	0x40022000

08000c7c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000c7c:	4a03      	ldr	r2, [pc, #12]	; (8000c8c <HAL_IncTick+0x10>)
 8000c7e:	6811      	ldr	r1, [r2, #0]
 8000c80:	4b03      	ldr	r3, [pc, #12]	; (8000c90 <HAL_IncTick+0x14>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	440b      	add	r3, r1
 8000c86:	6013      	str	r3, [r2, #0]
}
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	2000013c 	.word	0x2000013c
 8000c90:	20000004 	.word	0x20000004

08000c94 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000c94:	4b01      	ldr	r3, [pc, #4]	; (8000c9c <HAL_GetTick+0x8>)
 8000c96:	6818      	ldr	r0, [r3, #0]
}
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	2000013c 	.word	0x2000013c

08000ca0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ca0:	b538      	push	{r3, r4, r5, lr}
 8000ca2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000ca4:	f7ff fff6 	bl	8000c94 <HAL_GetTick>
 8000ca8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000caa:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000cae:	d002      	beq.n	8000cb6 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cb0:	4b04      	ldr	r3, [pc, #16]	; (8000cc4 <HAL_Delay+0x24>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cb6:	f7ff ffed 	bl	8000c94 <HAL_GetTick>
 8000cba:	1b40      	subs	r0, r0, r5
 8000cbc:	42a0      	cmp	r0, r4
 8000cbe:	d3fa      	bcc.n	8000cb6 <HAL_Delay+0x16>
  {
  }
}
 8000cc0:	bd38      	pop	{r3, r4, r5, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20000004 	.word	0x20000004

08000cc8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cc8:	4907      	ldr	r1, [pc, #28]	; (8000ce8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000cca:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ccc:	0203      	lsls	r3, r0, #8
 8000cce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cd2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000cd6:	0412      	lsls	r2, r2, #16
 8000cd8:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ce0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000ce4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000ce6:	4770      	bx	lr
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cec:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cee:	4b16      	ldr	r3, [pc, #88]	; (8000d48 <HAL_NVIC_SetPriority+0x5c>)
 8000cf0:	68db      	ldr	r3, [r3, #12]
 8000cf2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cf6:	f1c3 0407 	rsb	r4, r3, #7
 8000cfa:	2c04      	cmp	r4, #4
 8000cfc:	bf28      	it	cs
 8000cfe:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d00:	1d1d      	adds	r5, r3, #4
 8000d02:	2d06      	cmp	r5, #6
 8000d04:	bf8c      	ite	hi
 8000d06:	3b03      	subhi	r3, #3
 8000d08:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d0a:	f04f 35ff 	mov.w	r5, #4294967295
 8000d0e:	fa05 f404 	lsl.w	r4, r5, r4
 8000d12:	ea21 0104 	bic.w	r1, r1, r4
 8000d16:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d18:	fa05 f303 	lsl.w	r3, r5, r3
 8000d1c:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d20:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8000d22:	2800      	cmp	r0, #0
 8000d24:	db09      	blt.n	8000d3a <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d26:	0109      	lsls	r1, r1, #4
 8000d28:	b2c9      	uxtb	r1, r1
 8000d2a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000d2e:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000d32:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000d36:	bc30      	pop	{r4, r5}
 8000d38:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3a:	f000 000f 	and.w	r0, r0, #15
 8000d3e:	0109      	lsls	r1, r1, #4
 8000d40:	b2c9      	uxtb	r1, r1
 8000d42:	4b02      	ldr	r3, [pc, #8]	; (8000d4c <HAL_NVIC_SetPriority+0x60>)
 8000d44:	5419      	strb	r1, [r3, r0]
 8000d46:	e7f6      	b.n	8000d36 <HAL_NVIC_SetPriority+0x4a>
 8000d48:	e000ed00 	.word	0xe000ed00
 8000d4c:	e000ed14 	.word	0xe000ed14

08000d50 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d50:	3801      	subs	r0, #1
 8000d52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d56:	d20a      	bcs.n	8000d6e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <HAL_SYSTICK_Config+0x24>)
 8000d5a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5c:	4a06      	ldr	r2, [pc, #24]	; (8000d78 <HAL_SYSTICK_Config+0x28>)
 8000d5e:	21f0      	movs	r1, #240	; 0xf0
 8000d60:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d64:	2000      	movs	r0, #0
 8000d66:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d68:	2207      	movs	r2, #7
 8000d6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d6c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000d6e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	e000e010 	.word	0xe000e010
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d80:	b083      	sub	sp, #12
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d82:	680f      	ldr	r7, [r1, #0]
 8000d84:	2f00      	cmp	r7, #0
 8000d86:	f000 80f8 	beq.w	8000f7a <HAL_GPIO_Init+0x1fe>
  uint32_t config = 0x00u;
 8000d8a:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8000d8c:	4613      	mov	r3, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d8e:	f8df c200 	ldr.w	ip, [pc, #512]	; 8000f90 <HAL_GPIO_Init+0x214>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d92:	4d7b      	ldr	r5, [pc, #492]	; (8000f80 <HAL_GPIO_Init+0x204>)
      switch (GPIO_Init->Mode)
 8000d94:	4e7b      	ldr	r6, [pc, #492]	; (8000f84 <HAL_GPIO_Init+0x208>)
 8000d96:	f8df e1fc 	ldr.w	lr, [pc, #508]	; 8000f94 <HAL_GPIO_Init+0x218>
 8000d9a:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 8000f98 <HAL_GPIO_Init+0x21c>
 8000d9e:	e09a      	b.n	8000ed6 <HAL_GPIO_Init+0x15a>
 8000da0:	2200      	movs	r2, #0
 8000da2:	e01e      	b.n	8000de2 <HAL_GPIO_Init+0x66>
 8000da4:	42b4      	cmp	r4, r6
 8000da6:	d00c      	beq.n	8000dc2 <HAL_GPIO_Init+0x46>
 8000da8:	d904      	bls.n	8000db4 <HAL_GPIO_Init+0x38>
 8000daa:	4574      	cmp	r4, lr
 8000dac:	d009      	beq.n	8000dc2 <HAL_GPIO_Init+0x46>
 8000dae:	4544      	cmp	r4, r8
 8000db0:	d007      	beq.n	8000dc2 <HAL_GPIO_Init+0x46>
 8000db2:	e016      	b.n	8000de2 <HAL_GPIO_Init+0x66>
 8000db4:	4f74      	ldr	r7, [pc, #464]	; (8000f88 <HAL_GPIO_Init+0x20c>)
 8000db6:	42bc      	cmp	r4, r7
 8000db8:	d003      	beq.n	8000dc2 <HAL_GPIO_Init+0x46>
 8000dba:	f507 2770 	add.w	r7, r7, #983040	; 0xf0000
 8000dbe:	42bc      	cmp	r4, r7
 8000dc0:	d10b      	bne.n	8000dda <HAL_GPIO_Init+0x5e>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000dc2:	688a      	ldr	r2, [r1, #8]
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	f000 80ca 	beq.w	8000f5e <HAL_GPIO_Init+0x1e2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000dca:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000dcc:	bf0c      	ite	eq
 8000dce:	f8c0 9010 	streq.w	r9, [r0, #16]
            GPIOx->BRR = ioposition;
 8000dd2:	f8c0 9014 	strne.w	r9, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dd6:	2208      	movs	r2, #8
 8000dd8:	e003      	b.n	8000de2 <HAL_GPIO_Init+0x66>
      switch (GPIO_Init->Mode)
 8000dda:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8000dde:	42bc      	cmp	r4, r7
 8000de0:	d0ef      	beq.n	8000dc2 <HAL_GPIO_Init+0x46>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000de2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8000de6:	f200 80bc 	bhi.w	8000f62 <HAL_GPIO_Init+0x1e6>
 8000dea:	4607      	mov	r7, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000dec:	ea4f 0983 	mov.w	r9, r3, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000df0:	683c      	ldr	r4, [r7, #0]
 8000df2:	f04f 0b0f 	mov.w	fp, #15
 8000df6:	fa0b fb09 	lsl.w	fp, fp, r9
 8000dfa:	ea24 040b 	bic.w	r4, r4, fp
 8000dfe:	fa02 f909 	lsl.w	r9, r2, r9
 8000e02:	ea44 0409 	orr.w	r4, r4, r9
 8000e06:	603c      	str	r4, [r7, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e08:	684c      	ldr	r4, [r1, #4]
 8000e0a:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8000e0e:	d05d      	beq.n	8000ecc <HAL_GPIO_Init+0x150>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e10:	f8dc 4018 	ldr.w	r4, [ip, #24]
 8000e14:	f044 0401 	orr.w	r4, r4, #1
 8000e18:	f8cc 4018 	str.w	r4, [ip, #24]
 8000e1c:	f8dc 4018 	ldr.w	r4, [ip, #24]
 8000e20:	f004 0401 	and.w	r4, r4, #1
 8000e24:	9401      	str	r4, [sp, #4]
 8000e26:	9c01      	ldr	r4, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8000e28:	f023 0403 	bic.w	r4, r3, #3
 8000e2c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8000e30:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 8000e34:	f8d4 9008 	ldr.w	r9, [r4, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e38:	f003 0703 	and.w	r7, r3, #3
 8000e3c:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 8000e40:	270f      	movs	r7, #15
 8000e42:	fa07 f70b 	lsl.w	r7, r7, fp
 8000e46:	ea29 0907 	bic.w	r9, r9, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e4a:	4f50      	ldr	r7, [pc, #320]	; (8000f8c <HAL_GPIO_Init+0x210>)
 8000e4c:	42b8      	cmp	r0, r7
 8000e4e:	f000 808e 	beq.w	8000f6e <HAL_GPIO_Init+0x1f2>
 8000e52:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000e56:	42b8      	cmp	r0, r7
 8000e58:	f000 808b 	beq.w	8000f72 <HAL_GPIO_Init+0x1f6>
 8000e5c:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000e60:	42b8      	cmp	r0, r7
 8000e62:	f000 8088 	beq.w	8000f76 <HAL_GPIO_Init+0x1fa>
 8000e66:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000e6a:	42b8      	cmp	r0, r7
 8000e6c:	bf0c      	ite	eq
 8000e6e:	2703      	moveq	r7, #3
 8000e70:	2704      	movne	r7, #4
 8000e72:	fa07 f70b 	lsl.w	r7, r7, fp
 8000e76:	ea47 0709 	orr.w	r7, r7, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8000e7a:	60a7      	str	r7, [r4, #8]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e7c:	684c      	ldr	r4, [r1, #4]
 8000e7e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000e82:	682c      	ldr	r4, [r5, #0]
 8000e84:	bf14      	ite	ne
 8000e86:	ea44 040a 	orrne.w	r4, r4, sl
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e8a:	ea24 040a 	biceq.w	r4, r4, sl
 8000e8e:	602c      	str	r4, [r5, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e90:	684c      	ldr	r4, [r1, #4]
 8000e92:	f414 3f00 	tst.w	r4, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000e96:	686c      	ldr	r4, [r5, #4]
 8000e98:	bf14      	ite	ne
 8000e9a:	ea44 040a 	orrne.w	r4, r4, sl
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e9e:	ea24 040a 	biceq.w	r4, r4, sl
 8000ea2:	606c      	str	r4, [r5, #4]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ea4:	684c      	ldr	r4, [r1, #4]
 8000ea6:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000eaa:	68ac      	ldr	r4, [r5, #8]
 8000eac:	bf14      	ite	ne
 8000eae:	ea44 040a 	orrne.w	r4, r4, sl
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000eb2:	ea24 040a 	biceq.w	r4, r4, sl
 8000eb6:	60ac      	str	r4, [r5, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000eb8:	684c      	ldr	r4, [r1, #4]
 8000eba:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ebe:	68ec      	ldr	r4, [r5, #12]
 8000ec0:	bf14      	ite	ne
 8000ec2:	ea44 040a 	orrne.w	r4, r4, sl
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ec6:	ea24 040a 	biceq.w	r4, r4, sl
 8000eca:	60ec      	str	r4, [r5, #12]
        }
      }
    }

	position++;
 8000ecc:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ece:	680f      	ldr	r7, [r1, #0]
 8000ed0:	fa37 f403 	lsrs.w	r4, r7, r3
 8000ed4:	d051      	beq.n	8000f7a <HAL_GPIO_Init+0x1fe>
    ioposition = (0x01uL << position);
 8000ed6:	f04f 0901 	mov.w	r9, #1
 8000eda:	fa09 f903 	lsl.w	r9, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ede:	ea09 0a07 	and.w	sl, r9, r7
    if (iocurrent == ioposition)
 8000ee2:	ea39 0407 	bics.w	r4, r9, r7
 8000ee6:	d1f1      	bne.n	8000ecc <HAL_GPIO_Init+0x150>
      switch (GPIO_Init->Mode)
 8000ee8:	684c      	ldr	r4, [r1, #4]
 8000eea:	2c12      	cmp	r4, #18
 8000eec:	f63f af5a 	bhi.w	8000da4 <HAL_GPIO_Init+0x28>
 8000ef0:	2c12      	cmp	r4, #18
 8000ef2:	f63f af76 	bhi.w	8000de2 <HAL_GPIO_Init+0x66>
 8000ef6:	a701      	add	r7, pc, #4	; (adr r7, 8000efc <HAL_GPIO_Init+0x180>)
 8000ef8:	f857 f024 	ldr.w	pc, [r7, r4, lsl #2]
 8000efc:	08000dc3 	.word	0x08000dc3
 8000f00:	08000f49 	.word	0x08000f49
 8000f04:	08000f53 	.word	0x08000f53
 8000f08:	08000da1 	.word	0x08000da1
 8000f0c:	08000de3 	.word	0x08000de3
 8000f10:	08000de3 	.word	0x08000de3
 8000f14:	08000de3 	.word	0x08000de3
 8000f18:	08000de3 	.word	0x08000de3
 8000f1c:	08000de3 	.word	0x08000de3
 8000f20:	08000de3 	.word	0x08000de3
 8000f24:	08000de3 	.word	0x08000de3
 8000f28:	08000de3 	.word	0x08000de3
 8000f2c:	08000de3 	.word	0x08000de3
 8000f30:	08000de3 	.word	0x08000de3
 8000f34:	08000de3 	.word	0x08000de3
 8000f38:	08000de3 	.word	0x08000de3
 8000f3c:	08000de3 	.word	0x08000de3
 8000f40:	08000f4d 	.word	0x08000f4d
 8000f44:	08000f59 	.word	0x08000f59
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f48:	68ca      	ldr	r2, [r1, #12]
          break;
 8000f4a:	e74a      	b.n	8000de2 <HAL_GPIO_Init+0x66>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f4c:	68ca      	ldr	r2, [r1, #12]
 8000f4e:	3204      	adds	r2, #4
          break;
 8000f50:	e747      	b.n	8000de2 <HAL_GPIO_Init+0x66>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f52:	68ca      	ldr	r2, [r1, #12]
 8000f54:	3208      	adds	r2, #8
          break;
 8000f56:	e744      	b.n	8000de2 <HAL_GPIO_Init+0x66>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f58:	68ca      	ldr	r2, [r1, #12]
 8000f5a:	320c      	adds	r2, #12
          break;
 8000f5c:	e741      	b.n	8000de2 <HAL_GPIO_Init+0x66>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f5e:	2204      	movs	r2, #4
 8000f60:	e73f      	b.n	8000de2 <HAL_GPIO_Init+0x66>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f62:	1d07      	adds	r7, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f64:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8000f68:	f1a9 0920 	sub.w	r9, r9, #32
 8000f6c:	e740      	b.n	8000df0 <HAL_GPIO_Init+0x74>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f6e:	2700      	movs	r7, #0
 8000f70:	e77f      	b.n	8000e72 <HAL_GPIO_Init+0xf6>
 8000f72:	2701      	movs	r7, #1
 8000f74:	e77d      	b.n	8000e72 <HAL_GPIO_Init+0xf6>
 8000f76:	2702      	movs	r7, #2
 8000f78:	e77b      	b.n	8000e72 <HAL_GPIO_Init+0xf6>
  }
}
 8000f7a:	b003      	add	sp, #12
 8000f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f80:	40010400 	.word	0x40010400
 8000f84:	10220000 	.word	0x10220000
 8000f88:	10120000 	.word	0x10120000
 8000f8c:	40010800 	.word	0x40010800
 8000f90:	40021000 	.word	0x40021000
 8000f94:	10310000 	.word	0x10310000
 8000f98:	10320000 	.word	0x10320000

08000f9c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f9c:	6883      	ldr	r3, [r0, #8]
 8000f9e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000fa0:	bf14      	ite	ne
 8000fa2:	2001      	movne	r0, #1
 8000fa4:	2000      	moveq	r0, #0
 8000fa6:	4770      	bx	lr

08000fa8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fa8:	b10a      	cbz	r2, 8000fae <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000faa:	6101      	str	r1, [r0, #16]
 8000fac:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fae:	0409      	lsls	r1, r1, #16
 8000fb0:	6101      	str	r1, [r0, #16]
  }
}
 8000fb2:	4770      	bx	lr

08000fb4 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000fb4:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000fb6:	ea01 0203 	and.w	r2, r1, r3
 8000fba:	ea21 0103 	bic.w	r1, r1, r3
 8000fbe:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000fc2:	6101      	str	r1, [r0, #16]
}
 8000fc4:	4770      	bx	lr
	...

08000fc8 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000fc8:	2800      	cmp	r0, #0
 8000fca:	f000 8201 	beq.w	80013d0 <HAL_RCC_OscConfig+0x408>
{
 8000fce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fd6:	6803      	ldr	r3, [r0, #0]
 8000fd8:	f013 0f01 	tst.w	r3, #1
 8000fdc:	d02c      	beq.n	8001038 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fde:	4baa      	ldr	r3, [pc, #680]	; (8001288 <HAL_RCC_OscConfig+0x2c0>)
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f003 030c 	and.w	r3, r3, #12
 8000fe6:	2b04      	cmp	r3, #4
 8000fe8:	d01d      	beq.n	8001026 <HAL_RCC_OscConfig+0x5e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fea:	4ba7      	ldr	r3, [pc, #668]	; (8001288 <HAL_RCC_OscConfig+0x2c0>)
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f003 030c 	and.w	r3, r3, #12
 8000ff2:	2b08      	cmp	r3, #8
 8000ff4:	d012      	beq.n	800101c <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ff6:	6863      	ldr	r3, [r4, #4]
 8000ff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ffc:	d041      	beq.n	8001082 <HAL_RCC_OscConfig+0xba>
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d155      	bne.n	80010ae <HAL_RCC_OscConfig+0xe6>
 8001002:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001006:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	e037      	b.n	800108c <HAL_RCC_OscConfig+0xc4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800101c:	4b9a      	ldr	r3, [pc, #616]	; (8001288 <HAL_RCC_OscConfig+0x2c0>)
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001024:	d0e7      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001026:	4b98      	ldr	r3, [pc, #608]	; (8001288 <HAL_RCC_OscConfig+0x2c0>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800102e:	d003      	beq.n	8001038 <HAL_RCC_OscConfig+0x70>
 8001030:	6863      	ldr	r3, [r4, #4]
 8001032:	2b00      	cmp	r3, #0
 8001034:	f000 81ce 	beq.w	80013d4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001038:	6823      	ldr	r3, [r4, #0]
 800103a:	f013 0f02 	tst.w	r3, #2
 800103e:	d075      	beq.n	800112c <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001040:	4b91      	ldr	r3, [pc, #580]	; (8001288 <HAL_RCC_OscConfig+0x2c0>)
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f013 0f0c 	tst.w	r3, #12
 8001048:	d05f      	beq.n	800110a <HAL_RCC_OscConfig+0x142>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800104a:	4b8f      	ldr	r3, [pc, #572]	; (8001288 <HAL_RCC_OscConfig+0x2c0>)
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f003 030c 	and.w	r3, r3, #12
 8001052:	2b08      	cmp	r3, #8
 8001054:	d054      	beq.n	8001100 <HAL_RCC_OscConfig+0x138>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001056:	6923      	ldr	r3, [r4, #16]
 8001058:	2b00      	cmp	r3, #0
 800105a:	f000 8089 	beq.w	8001170 <HAL_RCC_OscConfig+0x1a8>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800105e:	4b8b      	ldr	r3, [pc, #556]	; (800128c <HAL_RCC_OscConfig+0x2c4>)
 8001060:	2201      	movs	r2, #1
 8001062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001064:	f7ff fe16 	bl	8000c94 <HAL_GetTick>
 8001068:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800106a:	4e87      	ldr	r6, [pc, #540]	; (8001288 <HAL_RCC_OscConfig+0x2c0>)
 800106c:	6833      	ldr	r3, [r6, #0]
 800106e:	f013 0f02 	tst.w	r3, #2
 8001072:	d174      	bne.n	800115e <HAL_RCC_OscConfig+0x196>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001074:	f7ff fe0e 	bl	8000c94 <HAL_GetTick>
 8001078:	1b40      	subs	r0, r0, r5
 800107a:	2802      	cmp	r0, #2
 800107c:	d9f6      	bls.n	800106c <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_TIMEOUT;
 800107e:	2003      	movs	r0, #3
 8001080:	e1ad      	b.n	80013de <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001082:	4a81      	ldr	r2, [pc, #516]	; (8001288 <HAL_RCC_OscConfig+0x2c0>)
 8001084:	6813      	ldr	r3, [r2, #0]
 8001086:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800108a:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800108c:	6863      	ldr	r3, [r4, #4]
 800108e:	b343      	cbz	r3, 80010e2 <HAL_RCC_OscConfig+0x11a>
        tickstart = HAL_GetTick();
 8001090:	f7ff fe00 	bl	8000c94 <HAL_GetTick>
 8001094:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001096:	4e7c      	ldr	r6, [pc, #496]	; (8001288 <HAL_RCC_OscConfig+0x2c0>)
 8001098:	6833      	ldr	r3, [r6, #0]
 800109a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800109e:	d1cb      	bne.n	8001038 <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010a0:	f7ff fdf8 	bl	8000c94 <HAL_GetTick>
 80010a4:	1b40      	subs	r0, r0, r5
 80010a6:	2864      	cmp	r0, #100	; 0x64
 80010a8:	d9f6      	bls.n	8001098 <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 80010aa:	2003      	movs	r0, #3
 80010ac:	e197      	b.n	80013de <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010b2:	d009      	beq.n	80010c8 <HAL_RCC_OscConfig+0x100>
 80010b4:	4b74      	ldr	r3, [pc, #464]	; (8001288 <HAL_RCC_OscConfig+0x2c0>)
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	e7e1      	b.n	800108c <HAL_RCC_OscConfig+0xc4>
 80010c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80010cc:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	e7d4      	b.n	800108c <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 80010e2:	f7ff fdd7 	bl	8000c94 <HAL_GetTick>
 80010e6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010e8:	4e67      	ldr	r6, [pc, #412]	; (8001288 <HAL_RCC_OscConfig+0x2c0>)
 80010ea:	6833      	ldr	r3, [r6, #0]
 80010ec:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80010f0:	d0a2      	beq.n	8001038 <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010f2:	f7ff fdcf 	bl	8000c94 <HAL_GetTick>
 80010f6:	1b40      	subs	r0, r0, r5
 80010f8:	2864      	cmp	r0, #100	; 0x64
 80010fa:	d9f6      	bls.n	80010ea <HAL_RCC_OscConfig+0x122>
            return HAL_TIMEOUT;
 80010fc:	2003      	movs	r0, #3
 80010fe:	e16e      	b.n	80013de <HAL_RCC_OscConfig+0x416>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001100:	4b61      	ldr	r3, [pc, #388]	; (8001288 <HAL_RCC_OscConfig+0x2c0>)
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001108:	d1a5      	bne.n	8001056 <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800110a:	4b5f      	ldr	r3, [pc, #380]	; (8001288 <HAL_RCC_OscConfig+0x2c0>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f013 0f02 	tst.w	r3, #2
 8001112:	d003      	beq.n	800111c <HAL_RCC_OscConfig+0x154>
 8001114:	6923      	ldr	r3, [r4, #16]
 8001116:	2b01      	cmp	r3, #1
 8001118:	f040 815e 	bne.w	80013d8 <HAL_RCC_OscConfig+0x410>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800111c:	4a5a      	ldr	r2, [pc, #360]	; (8001288 <HAL_RCC_OscConfig+0x2c0>)
 800111e:	6813      	ldr	r3, [r2, #0]
 8001120:	6961      	ldr	r1, [r4, #20]
 8001122:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001126:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800112a:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800112c:	6823      	ldr	r3, [r4, #0]
 800112e:	f013 0f08 	tst.w	r3, #8
 8001132:	d03c      	beq.n	80011ae <HAL_RCC_OscConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001134:	69a3      	ldr	r3, [r4, #24]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d04f      	beq.n	80011da <HAL_RCC_OscConfig+0x212>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800113a:	4b55      	ldr	r3, [pc, #340]	; (8001290 <HAL_RCC_OscConfig+0x2c8>)
 800113c:	2201      	movs	r2, #1
 800113e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001140:	f7ff fda8 	bl	8000c94 <HAL_GetTick>
 8001144:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001146:	4e50      	ldr	r6, [pc, #320]	; (8001288 <HAL_RCC_OscConfig+0x2c0>)
 8001148:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800114a:	f013 0f02 	tst.w	r3, #2
 800114e:	d121      	bne.n	8001194 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001150:	f7ff fda0 	bl	8000c94 <HAL_GetTick>
 8001154:	1b40      	subs	r0, r0, r5
 8001156:	2802      	cmp	r0, #2
 8001158:	d9f6      	bls.n	8001148 <HAL_RCC_OscConfig+0x180>
        {
          return HAL_TIMEOUT;
 800115a:	2003      	movs	r0, #3
 800115c:	e13f      	b.n	80013de <HAL_RCC_OscConfig+0x416>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800115e:	4a4a      	ldr	r2, [pc, #296]	; (8001288 <HAL_RCC_OscConfig+0x2c0>)
 8001160:	6813      	ldr	r3, [r2, #0]
 8001162:	6961      	ldr	r1, [r4, #20]
 8001164:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001168:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800116c:	6013      	str	r3, [r2, #0]
 800116e:	e7dd      	b.n	800112c <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8001170:	4b46      	ldr	r3, [pc, #280]	; (800128c <HAL_RCC_OscConfig+0x2c4>)
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001176:	f7ff fd8d 	bl	8000c94 <HAL_GetTick>
 800117a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800117c:	4e42      	ldr	r6, [pc, #264]	; (8001288 <HAL_RCC_OscConfig+0x2c0>)
 800117e:	6833      	ldr	r3, [r6, #0]
 8001180:	f013 0f02 	tst.w	r3, #2
 8001184:	d0d2      	beq.n	800112c <HAL_RCC_OscConfig+0x164>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001186:	f7ff fd85 	bl	8000c94 <HAL_GetTick>
 800118a:	1b40      	subs	r0, r0, r5
 800118c:	2802      	cmp	r0, #2
 800118e:	d9f6      	bls.n	800117e <HAL_RCC_OscConfig+0x1b6>
            return HAL_TIMEOUT;
 8001190:	2003      	movs	r0, #3
 8001192:	e124      	b.n	80013de <HAL_RCC_OscConfig+0x416>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001194:	4b3f      	ldr	r3, [pc, #252]	; (8001294 <HAL_RCC_OscConfig+0x2cc>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a3f      	ldr	r2, [pc, #252]	; (8001298 <HAL_RCC_OscConfig+0x2d0>)
 800119a:	fba2 2303 	umull	r2, r3, r2, r3
 800119e:	0a5b      	lsrs	r3, r3, #9
 80011a0:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80011a2:	bf00      	nop
  }
  while (Delay --);
 80011a4:	9b01      	ldr	r3, [sp, #4]
 80011a6:	1e5a      	subs	r2, r3, #1
 80011a8:	9201      	str	r2, [sp, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d1f9      	bne.n	80011a2 <HAL_RCC_OscConfig+0x1da>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011ae:	6823      	ldr	r3, [r4, #0]
 80011b0:	f013 0f04 	tst.w	r3, #4
 80011b4:	f000 809c 	beq.w	80012f0 <HAL_RCC_OscConfig+0x328>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011b8:	4b33      	ldr	r3, [pc, #204]	; (8001288 <HAL_RCC_OscConfig+0x2c0>)
 80011ba:	69db      	ldr	r3, [r3, #28]
 80011bc:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80011c0:	d11d      	bne.n	80011fe <HAL_RCC_OscConfig+0x236>
      __HAL_RCC_PWR_CLK_ENABLE();
 80011c2:	4b31      	ldr	r3, [pc, #196]	; (8001288 <HAL_RCC_OscConfig+0x2c0>)
 80011c4:	69da      	ldr	r2, [r3, #28]
 80011c6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80011ca:	61da      	str	r2, [r3, #28]
 80011cc:	69db      	ldr	r3, [r3, #28]
 80011ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 80011d6:	2501      	movs	r5, #1
 80011d8:	e012      	b.n	8001200 <HAL_RCC_OscConfig+0x238>
      __HAL_RCC_LSI_DISABLE();
 80011da:	4b2d      	ldr	r3, [pc, #180]	; (8001290 <HAL_RCC_OscConfig+0x2c8>)
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80011e0:	f7ff fd58 	bl	8000c94 <HAL_GetTick>
 80011e4:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011e6:	4e28      	ldr	r6, [pc, #160]	; (8001288 <HAL_RCC_OscConfig+0x2c0>)
 80011e8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80011ea:	f013 0f02 	tst.w	r3, #2
 80011ee:	d0de      	beq.n	80011ae <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011f0:	f7ff fd50 	bl	8000c94 <HAL_GetTick>
 80011f4:	1b40      	subs	r0, r0, r5
 80011f6:	2802      	cmp	r0, #2
 80011f8:	d9f6      	bls.n	80011e8 <HAL_RCC_OscConfig+0x220>
          return HAL_TIMEOUT;
 80011fa:	2003      	movs	r0, #3
 80011fc:	e0ef      	b.n	80013de <HAL_RCC_OscConfig+0x416>
    FlagStatus       pwrclkchanged = RESET;
 80011fe:	2500      	movs	r5, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001200:	4b26      	ldr	r3, [pc, #152]	; (800129c <HAL_RCC_OscConfig+0x2d4>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001208:	d011      	beq.n	800122e <HAL_RCC_OscConfig+0x266>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800120a:	68e3      	ldr	r3, [r4, #12]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d022      	beq.n	8001256 <HAL_RCC_OscConfig+0x28e>
 8001210:	2b00      	cmp	r3, #0
 8001212:	d145      	bne.n	80012a0 <HAL_RCC_OscConfig+0x2d8>
 8001214:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001218:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800121c:	6a1a      	ldr	r2, [r3, #32]
 800121e:	f022 0201 	bic.w	r2, r2, #1
 8001222:	621a      	str	r2, [r3, #32]
 8001224:	6a1a      	ldr	r2, [r3, #32]
 8001226:	f022 0204 	bic.w	r2, r2, #4
 800122a:	621a      	str	r2, [r3, #32]
 800122c:	e018      	b.n	8001260 <HAL_RCC_OscConfig+0x298>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800122e:	4a1b      	ldr	r2, [pc, #108]	; (800129c <HAL_RCC_OscConfig+0x2d4>)
 8001230:	6813      	ldr	r3, [r2, #0]
 8001232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001236:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001238:	f7ff fd2c 	bl	8000c94 <HAL_GetTick>
 800123c:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800123e:	4f17      	ldr	r7, [pc, #92]	; (800129c <HAL_RCC_OscConfig+0x2d4>)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001246:	d1e0      	bne.n	800120a <HAL_RCC_OscConfig+0x242>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001248:	f7ff fd24 	bl	8000c94 <HAL_GetTick>
 800124c:	1b80      	subs	r0, r0, r6
 800124e:	2864      	cmp	r0, #100	; 0x64
 8001250:	d9f6      	bls.n	8001240 <HAL_RCC_OscConfig+0x278>
          return HAL_TIMEOUT;
 8001252:	2003      	movs	r0, #3
 8001254:	e0c3      	b.n	80013de <HAL_RCC_OscConfig+0x416>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001256:	4a0c      	ldr	r2, [pc, #48]	; (8001288 <HAL_RCC_OscConfig+0x2c0>)
 8001258:	6a13      	ldr	r3, [r2, #32]
 800125a:	f043 0301 	orr.w	r3, r3, #1
 800125e:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001260:	68e3      	ldr	r3, [r4, #12]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d032      	beq.n	80012cc <HAL_RCC_OscConfig+0x304>
      tickstart = HAL_GetTick();
 8001266:	f7ff fd15 	bl	8000c94 <HAL_GetTick>
 800126a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800126c:	4f06      	ldr	r7, [pc, #24]	; (8001288 <HAL_RCC_OscConfig+0x2c0>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800126e:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001272:	6a3b      	ldr	r3, [r7, #32]
 8001274:	f013 0f02 	tst.w	r3, #2
 8001278:	d139      	bne.n	80012ee <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800127a:	f7ff fd0b 	bl	8000c94 <HAL_GetTick>
 800127e:	1b80      	subs	r0, r0, r6
 8001280:	4540      	cmp	r0, r8
 8001282:	d9f6      	bls.n	8001272 <HAL_RCC_OscConfig+0x2aa>
          return HAL_TIMEOUT;
 8001284:	2003      	movs	r0, #3
 8001286:	e0aa      	b.n	80013de <HAL_RCC_OscConfig+0x416>
 8001288:	40021000 	.word	0x40021000
 800128c:	42420000 	.word	0x42420000
 8001290:	42420480 	.word	0x42420480
 8001294:	20000000 	.word	0x20000000
 8001298:	10624dd3 	.word	0x10624dd3
 800129c:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012a0:	2b05      	cmp	r3, #5
 80012a2:	d009      	beq.n	80012b8 <HAL_RCC_OscConfig+0x2f0>
 80012a4:	4b51      	ldr	r3, [pc, #324]	; (80013ec <HAL_RCC_OscConfig+0x424>)
 80012a6:	6a1a      	ldr	r2, [r3, #32]
 80012a8:	f022 0201 	bic.w	r2, r2, #1
 80012ac:	621a      	str	r2, [r3, #32]
 80012ae:	6a1a      	ldr	r2, [r3, #32]
 80012b0:	f022 0204 	bic.w	r2, r2, #4
 80012b4:	621a      	str	r2, [r3, #32]
 80012b6:	e7d3      	b.n	8001260 <HAL_RCC_OscConfig+0x298>
 80012b8:	4b4c      	ldr	r3, [pc, #304]	; (80013ec <HAL_RCC_OscConfig+0x424>)
 80012ba:	6a1a      	ldr	r2, [r3, #32]
 80012bc:	f042 0204 	orr.w	r2, r2, #4
 80012c0:	621a      	str	r2, [r3, #32]
 80012c2:	6a1a      	ldr	r2, [r3, #32]
 80012c4:	f042 0201 	orr.w	r2, r2, #1
 80012c8:	621a      	str	r2, [r3, #32]
 80012ca:	e7c9      	b.n	8001260 <HAL_RCC_OscConfig+0x298>
      tickstart = HAL_GetTick();
 80012cc:	f7ff fce2 	bl	8000c94 <HAL_GetTick>
 80012d0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012d2:	4f46      	ldr	r7, [pc, #280]	; (80013ec <HAL_RCC_OscConfig+0x424>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012d4:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012d8:	6a3b      	ldr	r3, [r7, #32]
 80012da:	f013 0f02 	tst.w	r3, #2
 80012de:	d006      	beq.n	80012ee <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012e0:	f7ff fcd8 	bl	8000c94 <HAL_GetTick>
 80012e4:	1b80      	subs	r0, r0, r6
 80012e6:	4540      	cmp	r0, r8
 80012e8:	d9f6      	bls.n	80012d8 <HAL_RCC_OscConfig+0x310>
          return HAL_TIMEOUT;
 80012ea:	2003      	movs	r0, #3
 80012ec:	e077      	b.n	80013de <HAL_RCC_OscConfig+0x416>
    if (pwrclkchanged == SET)
 80012ee:	b9e5      	cbnz	r5, 800132a <HAL_RCC_OscConfig+0x362>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012f0:	69e3      	ldr	r3, [r4, #28]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d072      	beq.n	80013dc <HAL_RCC_OscConfig+0x414>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012f6:	4a3d      	ldr	r2, [pc, #244]	; (80013ec <HAL_RCC_OscConfig+0x424>)
 80012f8:	6852      	ldr	r2, [r2, #4]
 80012fa:	f002 020c 	and.w	r2, r2, #12
 80012fe:	2a08      	cmp	r2, #8
 8001300:	d056      	beq.n	80013b0 <HAL_RCC_OscConfig+0x3e8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001302:	2b02      	cmp	r3, #2
 8001304:	d017      	beq.n	8001336 <HAL_RCC_OscConfig+0x36e>
        __HAL_RCC_PLL_DISABLE();
 8001306:	4b3a      	ldr	r3, [pc, #232]	; (80013f0 <HAL_RCC_OscConfig+0x428>)
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800130c:	f7ff fcc2 	bl	8000c94 <HAL_GetTick>
 8001310:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001312:	4d36      	ldr	r5, [pc, #216]	; (80013ec <HAL_RCC_OscConfig+0x424>)
 8001314:	682b      	ldr	r3, [r5, #0]
 8001316:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800131a:	d047      	beq.n	80013ac <HAL_RCC_OscConfig+0x3e4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800131c:	f7ff fcba 	bl	8000c94 <HAL_GetTick>
 8001320:	1b00      	subs	r0, r0, r4
 8001322:	2802      	cmp	r0, #2
 8001324:	d9f6      	bls.n	8001314 <HAL_RCC_OscConfig+0x34c>
            return HAL_TIMEOUT;
 8001326:	2003      	movs	r0, #3
 8001328:	e059      	b.n	80013de <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_PWR_CLK_DISABLE();
 800132a:	4a30      	ldr	r2, [pc, #192]	; (80013ec <HAL_RCC_OscConfig+0x424>)
 800132c:	69d3      	ldr	r3, [r2, #28]
 800132e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001332:	61d3      	str	r3, [r2, #28]
 8001334:	e7dc      	b.n	80012f0 <HAL_RCC_OscConfig+0x328>
        __HAL_RCC_PLL_DISABLE();
 8001336:	4b2e      	ldr	r3, [pc, #184]	; (80013f0 <HAL_RCC_OscConfig+0x428>)
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800133c:	f7ff fcaa 	bl	8000c94 <HAL_GetTick>
 8001340:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001342:	4e2a      	ldr	r6, [pc, #168]	; (80013ec <HAL_RCC_OscConfig+0x424>)
 8001344:	6833      	ldr	r3, [r6, #0]
 8001346:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800134a:	d006      	beq.n	800135a <HAL_RCC_OscConfig+0x392>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800134c:	f7ff fca2 	bl	8000c94 <HAL_GetTick>
 8001350:	1b40      	subs	r0, r0, r5
 8001352:	2802      	cmp	r0, #2
 8001354:	d9f6      	bls.n	8001344 <HAL_RCC_OscConfig+0x37c>
            return HAL_TIMEOUT;
 8001356:	2003      	movs	r0, #3
 8001358:	e041      	b.n	80013de <HAL_RCC_OscConfig+0x416>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800135a:	6a23      	ldr	r3, [r4, #32]
 800135c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001360:	d01a      	beq.n	8001398 <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001362:	4922      	ldr	r1, [pc, #136]	; (80013ec <HAL_RCC_OscConfig+0x424>)
 8001364:	684a      	ldr	r2, [r1, #4]
 8001366:	6a23      	ldr	r3, [r4, #32]
 8001368:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800136a:	4303      	orrs	r3, r0
 800136c:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001370:	4313      	orrs	r3, r2
 8001372:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8001374:	4b1e      	ldr	r3, [pc, #120]	; (80013f0 <HAL_RCC_OscConfig+0x428>)
 8001376:	2201      	movs	r2, #1
 8001378:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800137a:	f7ff fc8b 	bl	8000c94 <HAL_GetTick>
 800137e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001380:	4d1a      	ldr	r5, [pc, #104]	; (80013ec <HAL_RCC_OscConfig+0x424>)
 8001382:	682b      	ldr	r3, [r5, #0]
 8001384:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001388:	d10e      	bne.n	80013a8 <HAL_RCC_OscConfig+0x3e0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800138a:	f7ff fc83 	bl	8000c94 <HAL_GetTick>
 800138e:	1b00      	subs	r0, r0, r4
 8001390:	2802      	cmp	r0, #2
 8001392:	d9f6      	bls.n	8001382 <HAL_RCC_OscConfig+0x3ba>
            return HAL_TIMEOUT;
 8001394:	2003      	movs	r0, #3
 8001396:	e022      	b.n	80013de <HAL_RCC_OscConfig+0x416>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001398:	4a14      	ldr	r2, [pc, #80]	; (80013ec <HAL_RCC_OscConfig+0x424>)
 800139a:	6853      	ldr	r3, [r2, #4]
 800139c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80013a0:	68a1      	ldr	r1, [r4, #8]
 80013a2:	430b      	orrs	r3, r1
 80013a4:	6053      	str	r3, [r2, #4]
 80013a6:	e7dc      	b.n	8001362 <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 80013a8:	2000      	movs	r0, #0
 80013aa:	e018      	b.n	80013de <HAL_RCC_OscConfig+0x416>
 80013ac:	2000      	movs	r0, #0
 80013ae:	e016      	b.n	80013de <HAL_RCC_OscConfig+0x416>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d017      	beq.n	80013e4 <HAL_RCC_OscConfig+0x41c>
        pll_config = RCC->CFGR;
 80013b4:	4b0d      	ldr	r3, [pc, #52]	; (80013ec <HAL_RCC_OscConfig+0x424>)
 80013b6:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013b8:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80013bc:	6a22      	ldr	r2, [r4, #32]
 80013be:	4291      	cmp	r1, r2
 80013c0:	d112      	bne.n	80013e8 <HAL_RCC_OscConfig+0x420>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80013c2:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013c6:	6a60      	ldr	r0, [r4, #36]	; 0x24
        return HAL_ERROR;
 80013c8:	1a18      	subs	r0, r3, r0
 80013ca:	bf18      	it	ne
 80013cc:	2001      	movne	r0, #1
 80013ce:	e006      	b.n	80013de <HAL_RCC_OscConfig+0x416>
    return HAL_ERROR;
 80013d0:	2001      	movs	r0, #1
}
 80013d2:	4770      	bx	lr
        return HAL_ERROR;
 80013d4:	2001      	movs	r0, #1
 80013d6:	e002      	b.n	80013de <HAL_RCC_OscConfig+0x416>
        return HAL_ERROR;
 80013d8:	2001      	movs	r0, #1
 80013da:	e000      	b.n	80013de <HAL_RCC_OscConfig+0x416>
  return HAL_OK;
 80013dc:	2000      	movs	r0, #0
}
 80013de:	b002      	add	sp, #8
 80013e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 80013e4:	2001      	movs	r0, #1
 80013e6:	e7fa      	b.n	80013de <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
 80013e8:	2001      	movs	r0, #1
 80013ea:	e7f8      	b.n	80013de <HAL_RCC_OscConfig+0x416>
 80013ec:	40021000 	.word	0x40021000
 80013f0:	42420060 	.word	0x42420060

080013f4 <HAL_RCC_GetSysClockFreq>:
{
 80013f4:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80013f6:	4b16      	ldr	r3, [pc, #88]	; (8001450 <HAL_RCC_GetSysClockFreq+0x5c>)
 80013f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013fa:	f10d 0c18 	add.w	ip, sp, #24
 80013fe:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001402:	f240 2301 	movw	r3, #513	; 0x201
 8001406:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 800140a:	4b12      	ldr	r3, [pc, #72]	; (8001454 <HAL_RCC_GetSysClockFreq+0x60>)
 800140c:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800140e:	f003 020c 	and.w	r2, r3, #12
 8001412:	2a08      	cmp	r2, #8
 8001414:	d002      	beq.n	800141c <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 8001416:	4810      	ldr	r0, [pc, #64]	; (8001458 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8001418:	b006      	add	sp, #24
 800141a:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800141c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001420:	4462      	add	r2, ip
 8001422:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001426:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800142a:	d00c      	beq.n	8001446 <HAL_RCC_GetSysClockFreq+0x52>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800142c:	4b09      	ldr	r3, [pc, #36]	; (8001454 <HAL_RCC_GetSysClockFreq+0x60>)
 800142e:	685b      	ldr	r3, [r3, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001430:	4809      	ldr	r0, [pc, #36]	; (8001458 <HAL_RCC_GetSysClockFreq+0x64>)
 8001432:	fb00 f002 	mul.w	r0, r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001436:	f3c3 4340 	ubfx	r3, r3, #17, #1
 800143a:	4463      	add	r3, ip
 800143c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001440:	fbb0 f0f3 	udiv	r0, r0, r3
 8001444:	e7e8      	b.n	8001418 <HAL_RCC_GetSysClockFreq+0x24>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001446:	4805      	ldr	r0, [pc, #20]	; (800145c <HAL_RCC_GetSysClockFreq+0x68>)
 8001448:	fb00 f002 	mul.w	r0, r0, r2
 800144c:	e7e4      	b.n	8001418 <HAL_RCC_GetSysClockFreq+0x24>
 800144e:	bf00      	nop
 8001450:	08001c14 	.word	0x08001c14
 8001454:	40021000 	.word	0x40021000
 8001458:	007a1200 	.word	0x007a1200
 800145c:	003d0900 	.word	0x003d0900

08001460 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001460:	2800      	cmp	r0, #0
 8001462:	f000 80a2 	beq.w	80015aa <HAL_RCC_ClockConfig+0x14a>
{
 8001466:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800146a:	460d      	mov	r5, r1
 800146c:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800146e:	4b53      	ldr	r3, [pc, #332]	; (80015bc <HAL_RCC_ClockConfig+0x15c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0307 	and.w	r3, r3, #7
 8001476:	428b      	cmp	r3, r1
 8001478:	d20b      	bcs.n	8001492 <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800147a:	4a50      	ldr	r2, [pc, #320]	; (80015bc <HAL_RCC_ClockConfig+0x15c>)
 800147c:	6813      	ldr	r3, [r2, #0]
 800147e:	f023 0307 	bic.w	r3, r3, #7
 8001482:	430b      	orrs	r3, r1
 8001484:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001486:	6813      	ldr	r3, [r2, #0]
 8001488:	f003 0307 	and.w	r3, r3, #7
 800148c:	428b      	cmp	r3, r1
 800148e:	f040 808e 	bne.w	80015ae <HAL_RCC_ClockConfig+0x14e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001492:	6823      	ldr	r3, [r4, #0]
 8001494:	f013 0f02 	tst.w	r3, #2
 8001498:	d017      	beq.n	80014ca <HAL_RCC_ClockConfig+0x6a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800149a:	f013 0f04 	tst.w	r3, #4
 800149e:	d004      	beq.n	80014aa <HAL_RCC_ClockConfig+0x4a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014a0:	4a47      	ldr	r2, [pc, #284]	; (80015c0 <HAL_RCC_ClockConfig+0x160>)
 80014a2:	6853      	ldr	r3, [r2, #4]
 80014a4:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80014a8:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014aa:	6823      	ldr	r3, [r4, #0]
 80014ac:	f013 0f08 	tst.w	r3, #8
 80014b0:	d004      	beq.n	80014bc <HAL_RCC_ClockConfig+0x5c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014b2:	4a43      	ldr	r2, [pc, #268]	; (80015c0 <HAL_RCC_ClockConfig+0x160>)
 80014b4:	6853      	ldr	r3, [r2, #4]
 80014b6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80014ba:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014bc:	4a40      	ldr	r2, [pc, #256]	; (80015c0 <HAL_RCC_ClockConfig+0x160>)
 80014be:	6853      	ldr	r3, [r2, #4]
 80014c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80014c4:	68a1      	ldr	r1, [r4, #8]
 80014c6:	430b      	orrs	r3, r1
 80014c8:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014ca:	6823      	ldr	r3, [r4, #0]
 80014cc:	f013 0f01 	tst.w	r3, #1
 80014d0:	d031      	beq.n	8001536 <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014d2:	6862      	ldr	r2, [r4, #4]
 80014d4:	2a01      	cmp	r2, #1
 80014d6:	d020      	beq.n	800151a <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014d8:	2a02      	cmp	r2, #2
 80014da:	d025      	beq.n	8001528 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014dc:	4b38      	ldr	r3, [pc, #224]	; (80015c0 <HAL_RCC_ClockConfig+0x160>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f013 0f02 	tst.w	r3, #2
 80014e4:	d065      	beq.n	80015b2 <HAL_RCC_ClockConfig+0x152>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014e6:	4936      	ldr	r1, [pc, #216]	; (80015c0 <HAL_RCC_ClockConfig+0x160>)
 80014e8:	684b      	ldr	r3, [r1, #4]
 80014ea:	f023 0303 	bic.w	r3, r3, #3
 80014ee:	4313      	orrs	r3, r2
 80014f0:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 80014f2:	f7ff fbcf 	bl	8000c94 <HAL_GetTick>
 80014f6:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014f8:	4f31      	ldr	r7, [pc, #196]	; (80015c0 <HAL_RCC_ClockConfig+0x160>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014fa:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f003 030c 	and.w	r3, r3, #12
 8001504:	6862      	ldr	r2, [r4, #4]
 8001506:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800150a:	d014      	beq.n	8001536 <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800150c:	f7ff fbc2 	bl	8000c94 <HAL_GetTick>
 8001510:	1b80      	subs	r0, r0, r6
 8001512:	4540      	cmp	r0, r8
 8001514:	d9f3      	bls.n	80014fe <HAL_RCC_ClockConfig+0x9e>
        return HAL_TIMEOUT;
 8001516:	2003      	movs	r0, #3
 8001518:	e045      	b.n	80015a6 <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800151a:	4b29      	ldr	r3, [pc, #164]	; (80015c0 <HAL_RCC_ClockConfig+0x160>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001522:	d1e0      	bne.n	80014e6 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8001524:	2001      	movs	r0, #1
 8001526:	e03e      	b.n	80015a6 <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001528:	4b25      	ldr	r3, [pc, #148]	; (80015c0 <HAL_RCC_ClockConfig+0x160>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001530:	d1d9      	bne.n	80014e6 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8001532:	2001      	movs	r0, #1
 8001534:	e037      	b.n	80015a6 <HAL_RCC_ClockConfig+0x146>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001536:	4b21      	ldr	r3, [pc, #132]	; (80015bc <HAL_RCC_ClockConfig+0x15c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	42ab      	cmp	r3, r5
 8001540:	d90a      	bls.n	8001558 <HAL_RCC_ClockConfig+0xf8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001542:	4a1e      	ldr	r2, [pc, #120]	; (80015bc <HAL_RCC_ClockConfig+0x15c>)
 8001544:	6813      	ldr	r3, [r2, #0]
 8001546:	f023 0307 	bic.w	r3, r3, #7
 800154a:	432b      	orrs	r3, r5
 800154c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800154e:	6813      	ldr	r3, [r2, #0]
 8001550:	f003 0307 	and.w	r3, r3, #7
 8001554:	42ab      	cmp	r3, r5
 8001556:	d12e      	bne.n	80015b6 <HAL_RCC_ClockConfig+0x156>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001558:	6823      	ldr	r3, [r4, #0]
 800155a:	f013 0f04 	tst.w	r3, #4
 800155e:	d006      	beq.n	800156e <HAL_RCC_ClockConfig+0x10e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001560:	4a17      	ldr	r2, [pc, #92]	; (80015c0 <HAL_RCC_ClockConfig+0x160>)
 8001562:	6853      	ldr	r3, [r2, #4]
 8001564:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001568:	68e1      	ldr	r1, [r4, #12]
 800156a:	430b      	orrs	r3, r1
 800156c:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800156e:	6823      	ldr	r3, [r4, #0]
 8001570:	f013 0f08 	tst.w	r3, #8
 8001574:	d007      	beq.n	8001586 <HAL_RCC_ClockConfig+0x126>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001576:	4a12      	ldr	r2, [pc, #72]	; (80015c0 <HAL_RCC_ClockConfig+0x160>)
 8001578:	6853      	ldr	r3, [r2, #4]
 800157a:	6921      	ldr	r1, [r4, #16]
 800157c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001580:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001584:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001586:	f7ff ff35 	bl	80013f4 <HAL_RCC_GetSysClockFreq>
 800158a:	4b0d      	ldr	r3, [pc, #52]	; (80015c0 <HAL_RCC_ClockConfig+0x160>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001592:	4a0c      	ldr	r2, [pc, #48]	; (80015c4 <HAL_RCC_ClockConfig+0x164>)
 8001594:	5cd3      	ldrb	r3, [r2, r3]
 8001596:	40d8      	lsrs	r0, r3
 8001598:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <HAL_RCC_ClockConfig+0x168>)
 800159a:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800159c:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <HAL_RCC_ClockConfig+0x16c>)
 800159e:	6818      	ldr	r0, [r3, #0]
 80015a0:	f7ff fb34 	bl	8000c0c <HAL_InitTick>
  return HAL_OK;
 80015a4:	2000      	movs	r0, #0
}
 80015a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 80015aa:	2001      	movs	r0, #1
}
 80015ac:	4770      	bx	lr
    return HAL_ERROR;
 80015ae:	2001      	movs	r0, #1
 80015b0:	e7f9      	b.n	80015a6 <HAL_RCC_ClockConfig+0x146>
        return HAL_ERROR;
 80015b2:	2001      	movs	r0, #1
 80015b4:	e7f7      	b.n	80015a6 <HAL_RCC_ClockConfig+0x146>
    return HAL_ERROR;
 80015b6:	2001      	movs	r0, #1
 80015b8:	e7f5      	b.n	80015a6 <HAL_RCC_ClockConfig+0x146>
 80015ba:	bf00      	nop
 80015bc:	40022000 	.word	0x40022000
 80015c0:	40021000 	.word	0x40021000
 80015c4:	08001bfc 	.word	0x08001bfc
 80015c8:	20000000 	.word	0x20000000
 80015cc:	20000008 	.word	0x20000008

080015d0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80015d0:	4b04      	ldr	r3, [pc, #16]	; (80015e4 <HAL_RCC_GetPCLK1Freq+0x14>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80015d8:	4a03      	ldr	r2, [pc, #12]	; (80015e8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80015da:	5cd3      	ldrb	r3, [r2, r3]
 80015dc:	4a03      	ldr	r2, [pc, #12]	; (80015ec <HAL_RCC_GetPCLK1Freq+0x1c>)
 80015de:	6810      	ldr	r0, [r2, #0]
}
 80015e0:	40d8      	lsrs	r0, r3
 80015e2:	4770      	bx	lr
 80015e4:	40021000 	.word	0x40021000
 80015e8:	08001c0c 	.word	0x08001c0c
 80015ec:	20000000 	.word	0x20000000

080015f0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80015f0:	4b04      	ldr	r3, [pc, #16]	; (8001604 <HAL_RCC_GetPCLK2Freq+0x14>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80015f8:	4a03      	ldr	r2, [pc, #12]	; (8001608 <HAL_RCC_GetPCLK2Freq+0x18>)
 80015fa:	5cd3      	ldrb	r3, [r2, r3]
 80015fc:	4a03      	ldr	r2, [pc, #12]	; (800160c <HAL_RCC_GetPCLK2Freq+0x1c>)
 80015fe:	6810      	ldr	r0, [r2, #0]
}
 8001600:	40d8      	lsrs	r0, r3
 8001602:	4770      	bx	lr
 8001604:	40021000 	.word	0x40021000
 8001608:	08001c0c 	.word	0x08001c0c
 800160c:	20000000 	.word	0x20000000

08001610 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001614:	b082      	sub	sp, #8
 8001616:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001618:	6803      	ldr	r3, [r0, #0]
 800161a:	f013 0f01 	tst.w	r3, #1
 800161e:	d034      	beq.n	800168a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001620:	4b3e      	ldr	r3, [pc, #248]	; (800171c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001622:	69db      	ldr	r3, [r3, #28]
 8001624:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001628:	d147      	bne.n	80016ba <HAL_RCCEx_PeriphCLKConfig+0xaa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800162a:	4b3c      	ldr	r3, [pc, #240]	; (800171c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800162c:	69da      	ldr	r2, [r3, #28]
 800162e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001632:	61da      	str	r2, [r3, #28]
 8001634:	69db      	ldr	r3, [r3, #28]
 8001636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800163a:	9301      	str	r3, [sp, #4]
 800163c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800163e:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001640:	4b37      	ldr	r3, [pc, #220]	; (8001720 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001648:	d039      	beq.n	80016be <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800164a:	4b34      	ldr	r3, [pc, #208]	; (800171c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800164c:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800164e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001652:	d011      	beq.n	8001678 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8001654:	6862      	ldr	r2, [r4, #4]
 8001656:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800165a:	429a      	cmp	r2, r3
 800165c:	d00c      	beq.n	8001678 <HAL_RCCEx_PeriphCLKConfig+0x68>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800165e:	4a2f      	ldr	r2, [pc, #188]	; (800171c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001660:	6a13      	ldr	r3, [r2, #32]
 8001662:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001666:	492f      	ldr	r1, [pc, #188]	; (8001724 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8001668:	2601      	movs	r6, #1
 800166a:	600e      	str	r6, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800166c:	2600      	movs	r6, #0
 800166e:	600e      	str	r6, [r1, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001670:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001672:	f013 0f01 	tst.w	r3, #1
 8001676:	d136      	bne.n	80016e6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001678:	4a28      	ldr	r2, [pc, #160]	; (800171c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800167a:	6a13      	ldr	r3, [r2, #32]
 800167c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001680:	6861      	ldr	r1, [r4, #4]
 8001682:	430b      	orrs	r3, r1
 8001684:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001686:	2d00      	cmp	r5, #0
 8001688:	d13e      	bne.n	8001708 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800168a:	6823      	ldr	r3, [r4, #0]
 800168c:	f013 0f02 	tst.w	r3, #2
 8001690:	d006      	beq.n	80016a0 <HAL_RCCEx_PeriphCLKConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001692:	4a22      	ldr	r2, [pc, #136]	; (800171c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001694:	6853      	ldr	r3, [r2, #4]
 8001696:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800169a:	68a1      	ldr	r1, [r4, #8]
 800169c:	430b      	orrs	r3, r1
 800169e:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80016a0:	6823      	ldr	r3, [r4, #0]
 80016a2:	f013 0f10 	tst.w	r3, #16
 80016a6:	d034      	beq.n	8001712 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80016a8:	4a1c      	ldr	r2, [pc, #112]	; (800171c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80016aa:	6853      	ldr	r3, [r2, #4]
 80016ac:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80016b0:	68e1      	ldr	r1, [r4, #12]
 80016b2:	430b      	orrs	r3, r1
 80016b4:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80016b6:	2000      	movs	r0, #0
 80016b8:	e02c      	b.n	8001714 <HAL_RCCEx_PeriphCLKConfig+0x104>
    FlagStatus       pwrclkchanged = RESET;
 80016ba:	2500      	movs	r5, #0
 80016bc:	e7c0      	b.n	8001640 <HAL_RCCEx_PeriphCLKConfig+0x30>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016be:	4a18      	ldr	r2, [pc, #96]	; (8001720 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80016c0:	6813      	ldr	r3, [r2, #0]
 80016c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016c6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80016c8:	f7ff fae4 	bl	8000c94 <HAL_GetTick>
 80016cc:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ce:	4f14      	ldr	r7, [pc, #80]	; (8001720 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80016d6:	d1b8      	bne.n	800164a <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016d8:	f7ff fadc 	bl	8000c94 <HAL_GetTick>
 80016dc:	1b80      	subs	r0, r0, r6
 80016de:	2864      	cmp	r0, #100	; 0x64
 80016e0:	d9f6      	bls.n	80016d0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 80016e2:	2003      	movs	r0, #3
 80016e4:	e016      	b.n	8001714 <HAL_RCCEx_PeriphCLKConfig+0x104>
        tickstart = HAL_GetTick();
 80016e6:	f7ff fad5 	bl	8000c94 <HAL_GetTick>
 80016ea:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ec:	4f0b      	ldr	r7, [pc, #44]	; (800171c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ee:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016f2:	6a3b      	ldr	r3, [r7, #32]
 80016f4:	f013 0f02 	tst.w	r3, #2
 80016f8:	d1be      	bne.n	8001678 <HAL_RCCEx_PeriphCLKConfig+0x68>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016fa:	f7ff facb 	bl	8000c94 <HAL_GetTick>
 80016fe:	1b80      	subs	r0, r0, r6
 8001700:	4540      	cmp	r0, r8
 8001702:	d9f6      	bls.n	80016f2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
            return HAL_TIMEOUT;
 8001704:	2003      	movs	r0, #3
 8001706:	e005      	b.n	8001714 <HAL_RCCEx_PeriphCLKConfig+0x104>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001708:	69d3      	ldr	r3, [r2, #28]
 800170a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800170e:	61d3      	str	r3, [r2, #28]
 8001710:	e7bb      	b.n	800168a <HAL_RCCEx_PeriphCLKConfig+0x7a>
  return HAL_OK;
 8001712:	2000      	movs	r0, #0
}
 8001714:	b002      	add	sp, #8
 8001716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800171a:	bf00      	nop
 800171c:	40021000 	.word	0x40021000
 8001720:	40007000 	.word	0x40007000
 8001724:	42420440 	.word	0x42420440

08001728 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001728:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800172a:	6a03      	ldr	r3, [r0, #32]
 800172c:	f023 0301 	bic.w	r3, r3, #1
 8001730:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001732:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001734:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001736:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001738:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800173c:	680d      	ldr	r5, [r1, #0]
 800173e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001740:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001744:	688d      	ldr	r5, [r1, #8]
 8001746:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001748:	4d0b      	ldr	r5, [pc, #44]	; (8001778 <TIM_OC1_SetConfig+0x50>)
 800174a:	42a8      	cmp	r0, r5
 800174c:	d006      	beq.n	800175c <TIM_OC1_SetConfig+0x34>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800174e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001750:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001752:	684a      	ldr	r2, [r1, #4]
 8001754:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001756:	6203      	str	r3, [r0, #32]
}
 8001758:	bc70      	pop	{r4, r5, r6}
 800175a:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 800175c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001760:	68cd      	ldr	r5, [r1, #12]
 8001762:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8001764:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001768:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800176c:	694d      	ldr	r5, [r1, #20]
 800176e:	698e      	ldr	r6, [r1, #24]
 8001770:	4335      	orrs	r5, r6
 8001772:	432c      	orrs	r4, r5
 8001774:	e7eb      	b.n	800174e <TIM_OC1_SetConfig+0x26>
 8001776:	bf00      	nop
 8001778:	40012c00 	.word	0x40012c00

0800177c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800177c:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800177e:	6a03      	ldr	r3, [r0, #32]
 8001780:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001784:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001786:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001788:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800178a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800178c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001790:	680d      	ldr	r5, [r1, #0]
 8001792:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001794:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001798:	688d      	ldr	r5, [r1, #8]
 800179a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800179e:	4d0c      	ldr	r5, [pc, #48]	; (80017d0 <TIM_OC3_SetConfig+0x54>)
 80017a0:	42a8      	cmp	r0, r5
 80017a2:	d006      	beq.n	80017b2 <TIM_OC3_SetConfig+0x36>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80017a4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80017a6:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80017a8:	684a      	ldr	r2, [r1, #4]
 80017aa:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80017ac:	6203      	str	r3, [r0, #32]
}
 80017ae:	bc70      	pop	{r4, r5, r6}
 80017b0:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 80017b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80017b6:	68cd      	ldr	r5, [r1, #12]
 80017b8:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80017bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80017c0:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80017c4:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80017c6:	698e      	ldr	r6, [r1, #24]
 80017c8:	4335      	orrs	r5, r6
 80017ca:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 80017ce:	e7e9      	b.n	80017a4 <TIM_OC3_SetConfig+0x28>
 80017d0:	40012c00 	.word	0x40012c00

080017d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80017d4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80017d6:	6a03      	ldr	r3, [r0, #32]
 80017d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80017dc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80017de:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80017e0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80017e2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80017e4:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80017e8:	680d      	ldr	r5, [r1, #0]
 80017ea:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80017ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80017f2:	688d      	ldr	r5, [r1, #8]
 80017f4:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80017f8:	4d07      	ldr	r5, [pc, #28]	; (8001818 <TIM_OC4_SetConfig+0x44>)
 80017fa:	42a8      	cmp	r0, r5
 80017fc:	d006      	beq.n	800180c <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80017fe:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001800:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001802:	684a      	ldr	r2, [r1, #4]
 8001804:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001806:	6203      	str	r3, [r0, #32]
}
 8001808:	bc30      	pop	{r4, r5}
 800180a:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 800180c:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001810:	694d      	ldr	r5, [r1, #20]
 8001812:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8001816:	e7f2      	b.n	80017fe <TIM_OC4_SetConfig+0x2a>
 8001818:	40012c00 	.word	0x40012c00

0800181c <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 800181c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800181e:	4a25      	ldr	r2, [pc, #148]	; (80018b4 <TIM_Base_SetConfig+0x98>)
 8001820:	4290      	cmp	r0, r2
 8001822:	d014      	beq.n	800184e <TIM_Base_SetConfig+0x32>
 8001824:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001828:	d02b      	beq.n	8001882 <TIM_Base_SetConfig+0x66>
 800182a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800182e:	4290      	cmp	r0, r2
 8001830:	d022      	beq.n	8001878 <TIM_Base_SetConfig+0x5c>
 8001832:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001836:	4290      	cmp	r0, r2
 8001838:	d037      	beq.n	80018aa <TIM_Base_SetConfig+0x8e>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800183a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800183e:	694a      	ldr	r2, [r1, #20]
 8001840:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001842:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001844:	688b      	ldr	r3, [r1, #8]
 8001846:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001848:	680b      	ldr	r3, [r1, #0]
 800184a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800184c:	e02a      	b.n	80018a4 <TIM_Base_SetConfig+0x88>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800184e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001852:	684a      	ldr	r2, [r1, #4]
 8001854:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8001856:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800185a:	68ca      	ldr	r2, [r1, #12]
 800185c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800185e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001862:	694a      	ldr	r2, [r1, #20]
 8001864:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001866:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001868:	688b      	ldr	r3, [r1, #8]
 800186a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800186c:	680b      	ldr	r3, [r1, #0]
 800186e:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8001870:	690a      	ldr	r2, [r1, #16]
 8001872:	4b10      	ldr	r3, [pc, #64]	; (80018b4 <TIM_Base_SetConfig+0x98>)
 8001874:	631a      	str	r2, [r3, #48]	; 0x30
 8001876:	e015      	b.n	80018a4 <TIM_Base_SetConfig+0x88>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001878:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800187c:	684a      	ldr	r2, [r1, #4]
 800187e:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001880:	e003      	b.n	800188a <TIM_Base_SetConfig+0x6e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001886:	684a      	ldr	r2, [r1, #4]
 8001888:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 800188a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800188e:	68ca      	ldr	r2, [r1, #12]
 8001890:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001892:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001896:	694a      	ldr	r2, [r1, #20]
 8001898:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800189a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800189c:	688b      	ldr	r3, [r1, #8]
 800189e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80018a0:	680b      	ldr	r3, [r1, #0]
 80018a2:	6283      	str	r3, [r0, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 80018a4:	2301      	movs	r3, #1
 80018a6:	6143      	str	r3, [r0, #20]
}
 80018a8:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80018aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80018ae:	684a      	ldr	r2, [r1, #4]
 80018b0:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80018b2:	e7ea      	b.n	800188a <TIM_Base_SetConfig+0x6e>
 80018b4:	40012c00 	.word	0x40012c00

080018b8 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80018b8:	b340      	cbz	r0, 800190c <HAL_TIM_PWM_Init+0x54>
{
 80018ba:	b510      	push	{r4, lr}
 80018bc:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80018be:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80018c2:	b1f3      	cbz	r3, 8001902 <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80018c4:	2302      	movs	r3, #2
 80018c6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018ca:	4621      	mov	r1, r4
 80018cc:	f851 0b04 	ldr.w	r0, [r1], #4
 80018d0:	f7ff ffa4 	bl	800181c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018d4:	2301      	movs	r3, #1
 80018d6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018da:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80018de:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80018e2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80018e6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80018ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80018f2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80018f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80018fa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80018fe:	2000      	movs	r0, #0
}
 8001900:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8001902:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001906:	f7fe ffad 	bl	8000864 <HAL_TIM_PWM_MspInit>
 800190a:	e7db      	b.n	80018c4 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 800190c:	2001      	movs	r0, #1
}
 800190e:	4770      	bx	lr

08001910 <TIM_OC2_SetConfig>:
{
 8001910:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001912:	6a03      	ldr	r3, [r0, #32]
 8001914:	f023 0310 	bic.w	r3, r3, #16
 8001918:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800191a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800191c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800191e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001920:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001924:	680d      	ldr	r5, [r1, #0]
 8001926:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800192a:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800192e:	688d      	ldr	r5, [r1, #8]
 8001930:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001934:	4d0c      	ldr	r5, [pc, #48]	; (8001968 <TIM_OC2_SetConfig+0x58>)
 8001936:	42a8      	cmp	r0, r5
 8001938:	d006      	beq.n	8001948 <TIM_OC2_SetConfig+0x38>
  TIMx->CR2 = tmpcr2;
 800193a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800193c:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800193e:	684a      	ldr	r2, [r1, #4]
 8001940:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001942:	6203      	str	r3, [r0, #32]
}
 8001944:	bc70      	pop	{r4, r5, r6}
 8001946:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8001948:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800194c:	68cd      	ldr	r5, [r1, #12]
 800194e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8001952:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001956:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800195a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800195c:	698e      	ldr	r6, [r1, #24]
 800195e:	4335      	orrs	r5, r6
 8001960:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8001964:	e7e9      	b.n	800193a <TIM_OC2_SetConfig+0x2a>
 8001966:	bf00      	nop
 8001968:	40012c00 	.word	0x40012c00

0800196c <HAL_TIM_PWM_ConfigChannel>:
{
 800196c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800196e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001972:	2b01      	cmp	r3, #1
 8001974:	d060      	beq.n	8001a38 <HAL_TIM_PWM_ConfigChannel+0xcc>
 8001976:	4604      	mov	r4, r0
 8001978:	460d      	mov	r5, r1
 800197a:	2301      	movs	r3, #1
 800197c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8001980:	2a0c      	cmp	r2, #12
 8001982:	d81a      	bhi.n	80019ba <HAL_TIM_PWM_ConfigChannel+0x4e>
 8001984:	e8df f002 	tbb	[pc, r2]
 8001988:	19191907 	.word	0x19191907
 800198c:	1919191d 	.word	0x1919191d
 8001990:	19191931 	.word	0x19191931
 8001994:	44          	.byte	0x44
 8001995:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001996:	6800      	ldr	r0, [r0, #0]
 8001998:	f7ff fec6 	bl	8001728 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800199c:	6822      	ldr	r2, [r4, #0]
 800199e:	6993      	ldr	r3, [r2, #24]
 80019a0:	f043 0308 	orr.w	r3, r3, #8
 80019a4:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80019a6:	6822      	ldr	r2, [r4, #0]
 80019a8:	6993      	ldr	r3, [r2, #24]
 80019aa:	f023 0304 	bic.w	r3, r3, #4
 80019ae:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80019b0:	6822      	ldr	r2, [r4, #0]
 80019b2:	6993      	ldr	r3, [r2, #24]
 80019b4:	6929      	ldr	r1, [r5, #16]
 80019b6:	430b      	orrs	r3, r1
 80019b8:	6193      	str	r3, [r2, #24]
  __HAL_UNLOCK(htim);
 80019ba:	2000      	movs	r0, #0
 80019bc:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80019c0:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80019c2:	6800      	ldr	r0, [r0, #0]
 80019c4:	f7ff ffa4 	bl	8001910 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80019c8:	6822      	ldr	r2, [r4, #0]
 80019ca:	6993      	ldr	r3, [r2, #24]
 80019cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019d0:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80019d2:	6822      	ldr	r2, [r4, #0]
 80019d4:	6993      	ldr	r3, [r2, #24]
 80019d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80019da:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80019dc:	6822      	ldr	r2, [r4, #0]
 80019de:	6993      	ldr	r3, [r2, #24]
 80019e0:	6929      	ldr	r1, [r5, #16]
 80019e2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80019e6:	6193      	str	r3, [r2, #24]
      break;
 80019e8:	e7e7      	b.n	80019ba <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80019ea:	6800      	ldr	r0, [r0, #0]
 80019ec:	f7ff fec6 	bl	800177c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80019f0:	6822      	ldr	r2, [r4, #0]
 80019f2:	69d3      	ldr	r3, [r2, #28]
 80019f4:	f043 0308 	orr.w	r3, r3, #8
 80019f8:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80019fa:	6822      	ldr	r2, [r4, #0]
 80019fc:	69d3      	ldr	r3, [r2, #28]
 80019fe:	f023 0304 	bic.w	r3, r3, #4
 8001a02:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001a04:	6822      	ldr	r2, [r4, #0]
 8001a06:	69d3      	ldr	r3, [r2, #28]
 8001a08:	6929      	ldr	r1, [r5, #16]
 8001a0a:	430b      	orrs	r3, r1
 8001a0c:	61d3      	str	r3, [r2, #28]
      break;
 8001a0e:	e7d4      	b.n	80019ba <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001a10:	6800      	ldr	r0, [r0, #0]
 8001a12:	f7ff fedf 	bl	80017d4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001a16:	6822      	ldr	r2, [r4, #0]
 8001a18:	69d3      	ldr	r3, [r2, #28]
 8001a1a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a1e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001a20:	6822      	ldr	r2, [r4, #0]
 8001a22:	69d3      	ldr	r3, [r2, #28]
 8001a24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001a28:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001a2a:	6822      	ldr	r2, [r4, #0]
 8001a2c:	69d3      	ldr	r3, [r2, #28]
 8001a2e:	6929      	ldr	r1, [r5, #16]
 8001a30:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001a34:	61d3      	str	r3, [r2, #28]
      break;
 8001a36:	e7c0      	b.n	80019ba <HAL_TIM_PWM_ConfigChannel+0x4e>
  __HAL_LOCK(htim);
 8001a38:	2002      	movs	r0, #2
 8001a3a:	e7c1      	b.n	80019c0 <HAL_TIM_PWM_ConfigChannel+0x54>

08001a3c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001a3c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d02b      	beq.n	8001a9c <HAL_TIMEx_MasterConfigSynchronization+0x60>
{
 8001a44:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8001a46:	2301      	movs	r3, #1
 8001a48:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001a52:	6804      	ldr	r4, [r0, #0]
 8001a54:	6863      	ldr	r3, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001a56:	68a2      	ldr	r2, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001a58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001a5c:	680d      	ldr	r5, [r1, #0]
 8001a5e:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001a60:	6063      	str	r3, [r4, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a62:	6803      	ldr	r3, [r0, #0]
 8001a64:	4c0e      	ldr	r4, [pc, #56]	; (8001aa0 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8001a66:	42a3      	cmp	r3, r4
 8001a68:	d00a      	beq.n	8001a80 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8001a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a6e:	d007      	beq.n	8001a80 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8001a70:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8001a74:	42a3      	cmp	r3, r4
 8001a76:	d003      	beq.n	8001a80 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8001a78:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001a7c:	42a3      	cmp	r3, r4
 8001a7e:	d104      	bne.n	8001a8a <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001a80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001a84:	6849      	ldr	r1, [r1, #4]
 8001a86:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001a88:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001a90:	2300      	movs	r3, #0
 8001a92:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8001a96:	4618      	mov	r0, r3
}
 8001a98:	bc30      	pop	{r4, r5}
 8001a9a:	4770      	bx	lr
  __HAL_LOCK(htim);
 8001a9c:	2002      	movs	r0, #2
}
 8001a9e:	4770      	bx	lr
 8001aa0:	40012c00 	.word	0x40012c00

08001aa4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001aa4:	b510      	push	{r4, lr}
 8001aa6:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001aa8:	6802      	ldr	r2, [r0, #0]
 8001aaa:	6913      	ldr	r3, [r2, #16]
 8001aac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ab0:	68c1      	ldr	r1, [r0, #12]
 8001ab2:	430b      	orrs	r3, r1
 8001ab4:	6113      	str	r3, [r2, #16]
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
  MODIFY_REG(huart->Instance->CR1,
 8001ab6:	6801      	ldr	r1, [r0, #0]
 8001ab8:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001aba:	6883      	ldr	r3, [r0, #8]
 8001abc:	6900      	ldr	r0, [r0, #16]
 8001abe:	4303      	orrs	r3, r0
 8001ac0:	6960      	ldr	r0, [r4, #20]
 8001ac2:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8001ac4:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8001ac8:	f022 020c 	bic.w	r2, r2, #12
 8001acc:	4313      	orrs	r3, r2
 8001ace:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ad0:	6822      	ldr	r2, [r4, #0]
 8001ad2:	6953      	ldr	r3, [r2, #20]
 8001ad4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ad8:	69a1      	ldr	r1, [r4, #24]
 8001ada:	430b      	orrs	r3, r1
 8001adc:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 8001ade:	6822      	ldr	r2, [r4, #0]
 8001ae0:	4b10      	ldr	r3, [pc, #64]	; (8001b24 <UART_SetConfig+0x80>)
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d01a      	beq.n	8001b1c <UART_SetConfig+0x78>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001ae6:	f7ff fd73 	bl	80015d0 <HAL_RCC_GetPCLK1Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001aea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001aee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001af2:	6863      	ldr	r3, [r4, #4]
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001afa:	6824      	ldr	r4, [r4, #0]
 8001afc:	480a      	ldr	r0, [pc, #40]	; (8001b28 <UART_SetConfig+0x84>)
 8001afe:	fba0 2103 	umull	r2, r1, r0, r3
 8001b02:	0949      	lsrs	r1, r1, #5
 8001b04:	2264      	movs	r2, #100	; 0x64
 8001b06:	fb02 3311 	mls	r3, r2, r1, r3
 8001b0a:	011b      	lsls	r3, r3, #4
 8001b0c:	3332      	adds	r3, #50	; 0x32
 8001b0e:	fba0 2303 	umull	r2, r3, r0, r3
 8001b12:	0109      	lsls	r1, r1, #4
 8001b14:	eb01 1353 	add.w	r3, r1, r3, lsr #5
 8001b18:	60a3      	str	r3, [r4, #8]
#endif /* USART_CR1_OVER8 */
}
 8001b1a:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8001b1c:	f7ff fd68 	bl	80015f0 <HAL_RCC_GetPCLK2Freq>
 8001b20:	e7e3      	b.n	8001aea <UART_SetConfig+0x46>
 8001b22:	bf00      	nop
 8001b24:	40013800 	.word	0x40013800
 8001b28:	51eb851f 	.word	0x51eb851f

08001b2c <HAL_UART_Init>:
  if (huart == NULL)
 8001b2c:	b358      	cbz	r0, 8001b86 <HAL_UART_Init+0x5a>
{
 8001b2e:	b510      	push	{r4, lr}
 8001b30:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8001b32:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001b36:	b30b      	cbz	r3, 8001b7c <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8001b38:	2324      	movs	r3, #36	; 0x24
 8001b3a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001b3e:	6822      	ldr	r2, [r4, #0]
 8001b40:	68d3      	ldr	r3, [r2, #12]
 8001b42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001b46:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001b48:	4620      	mov	r0, r4
 8001b4a:	f7ff ffab 	bl	8001aa4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b4e:	6822      	ldr	r2, [r4, #0]
 8001b50:	6913      	ldr	r3, [r2, #16]
 8001b52:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001b56:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b58:	6822      	ldr	r2, [r4, #0]
 8001b5a:	6953      	ldr	r3, [r2, #20]
 8001b5c:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001b60:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8001b62:	6822      	ldr	r2, [r4, #0]
 8001b64:	68d3      	ldr	r3, [r2, #12]
 8001b66:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b6a:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b6c:	2000      	movs	r0, #0
 8001b6e:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001b70:	2320      	movs	r3, #32
 8001b72:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001b76:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8001b7a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001b7c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001b80:	f7fe ffb2 	bl	8000ae8 <HAL_UART_MspInit>
 8001b84:	e7d8      	b.n	8001b38 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8001b86:	2001      	movs	r0, #1
}
 8001b88:	4770      	bx	lr
	...

08001b8c <__libc_init_array>:
 8001b8c:	b570      	push	{r4, r5, r6, lr}
 8001b8e:	2600      	movs	r6, #0
 8001b90:	4d0c      	ldr	r5, [pc, #48]	; (8001bc4 <__libc_init_array+0x38>)
 8001b92:	4c0d      	ldr	r4, [pc, #52]	; (8001bc8 <__libc_init_array+0x3c>)
 8001b94:	1b64      	subs	r4, r4, r5
 8001b96:	10a4      	asrs	r4, r4, #2
 8001b98:	42a6      	cmp	r6, r4
 8001b9a:	d109      	bne.n	8001bb0 <__libc_init_array+0x24>
 8001b9c:	f000 f822 	bl	8001be4 <_init>
 8001ba0:	2600      	movs	r6, #0
 8001ba2:	4d0a      	ldr	r5, [pc, #40]	; (8001bcc <__libc_init_array+0x40>)
 8001ba4:	4c0a      	ldr	r4, [pc, #40]	; (8001bd0 <__libc_init_array+0x44>)
 8001ba6:	1b64      	subs	r4, r4, r5
 8001ba8:	10a4      	asrs	r4, r4, #2
 8001baa:	42a6      	cmp	r6, r4
 8001bac:	d105      	bne.n	8001bba <__libc_init_array+0x2e>
 8001bae:	bd70      	pop	{r4, r5, r6, pc}
 8001bb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8001bb4:	4798      	blx	r3
 8001bb6:	3601      	adds	r6, #1
 8001bb8:	e7ee      	b.n	8001b98 <__libc_init_array+0xc>
 8001bba:	f855 3b04 	ldr.w	r3, [r5], #4
 8001bbe:	4798      	blx	r3
 8001bc0:	3601      	adds	r6, #1
 8001bc2:	e7f2      	b.n	8001baa <__libc_init_array+0x1e>
 8001bc4:	08001c28 	.word	0x08001c28
 8001bc8:	08001c28 	.word	0x08001c28
 8001bcc:	08001c28 	.word	0x08001c28
 8001bd0:	08001c2c 	.word	0x08001c2c

08001bd4 <memset>:
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	4402      	add	r2, r0
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d100      	bne.n	8001bde <memset+0xa>
 8001bdc:	4770      	bx	lr
 8001bde:	f803 1b01 	strb.w	r1, [r3], #1
 8001be2:	e7f9      	b.n	8001bd8 <memset+0x4>

08001be4 <_init>:
 8001be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001be6:	bf00      	nop
 8001be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bea:	bc08      	pop	{r3}
 8001bec:	469e      	mov	lr, r3
 8001bee:	4770      	bx	lr

08001bf0 <_fini>:
 8001bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bf2:	bf00      	nop
 8001bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bf6:	bc08      	pop	{r3}
 8001bf8:	469e      	mov	lr, r3
 8001bfa:	4770      	bx	lr
