
tanwa.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000019bc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08001ac8  08001ac8  00011ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001af4  08001af4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001af4  08001af4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001af4  08001af4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001af4  08001af4  00011af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001af8  08001af8  00011af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001afc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000420  2000000c  08001b08  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000042c  08001b08  0002042c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013999  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c60  00000000  00000000  000339ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d48  00000000  00000000  00036630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001058  00000000  00000000  00037378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004b1a  00000000  00000000  000383d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014c2d  00000000  00000000  0003ceea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e9ff  00000000  00000000  00051b17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e0516  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002248  00000000  00000000  000e056c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0000cf8f  00000000  00000000  000e27b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001ab0 	.word	0x08001ab0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001ab0 	.word	0x08001ab0

0800014c <_ZN7IgniterC1EP12GPIO_TypeDeftS1_t>:
#include <Igniter.hh>

//(names of args start with '_' sign)
Igniter::Igniter(GPIO_TypeDef* _GPIO_PORT_IGNITER, uint16_t _PIN_IGNITER, GPIO_TypeDef* _IGN_GPIO_PORT_TEST_CON, uint16_t _IGN_PIN_TEST_CON){
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	603b      	str	r3, [r7, #0]
 8000158:	4613      	mov	r3, r2
 800015a:	80fb      	strh	r3, [r7, #6]
	GPIO_PORT_IGNITER = _GPIO_PORT_IGNITER;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	68ba      	ldr	r2, [r7, #8]
 8000160:	601a      	str	r2, [r3, #0]
	PIN_IGNITER = _PIN_IGNITER;
 8000162:	68fb      	ldr	r3, [r7, #12]
 8000164:	88fa      	ldrh	r2, [r7, #6]
 8000166:	809a      	strh	r2, [r3, #4]
	GPIO_PORT_TEST_CON = _IGN_GPIO_PORT_TEST_CON;
 8000168:	68fb      	ldr	r3, [r7, #12]
 800016a:	683a      	ldr	r2, [r7, #0]
 800016c:	609a      	str	r2, [r3, #8]
	PIN_TEST_CON = _IGN_PIN_TEST_CON;
 800016e:	68fb      	ldr	r3, [r7, #12]
 8000170:	8b3a      	ldrh	r2, [r7, #24]
 8000172:	819a      	strh	r2, [r3, #12]
}
 8000174:	68fb      	ldr	r3, [r7, #12]
 8000176:	4618      	mov	r0, r3
 8000178:	3714      	adds	r7, #20
 800017a:	46bd      	mov	sp, r7
 800017c:	bc80      	pop	{r7}
 800017e:	4770      	bx	lr

08000180 <_ZNK7Igniter12is_connectedEv>:

bool Igniter::is_connected() const{
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(GPIO_PORT_TEST_CON, PIN_TEST_CON) == GPIO_PIN_SET)
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	689a      	ldr	r2, [r3, #8]
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	899b      	ldrh	r3, [r3, #12]
 8000190:	4619      	mov	r1, r3
 8000192:	4610      	mov	r0, r2
 8000194:	f000 fdc0 	bl	8000d18 <HAL_GPIO_ReadPin>
 8000198:	4603      	mov	r3, r0
 800019a:	2b01      	cmp	r3, #1
 800019c:	bf0c      	ite	eq
 800019e:	2301      	moveq	r3, #1
 80001a0:	2300      	movne	r3, #0
 80001a2:	b2db      	uxtb	r3, r3
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	d001      	beq.n	80001ac <_ZNK7Igniter12is_connectedEv+0x2c>
		return 1;
 80001a8:	2301      	movs	r3, #1
 80001aa:	e000      	b.n	80001ae <_ZNK7Igniter12is_connectedEv+0x2e>
	else
		return 0;
 80001ac:	2300      	movs	r3, #0
}
 80001ae:	4618      	mov	r0, r3
 80001b0:	3708      	adds	r7, #8
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bd80      	pop	{r7, pc}

080001b6 <_ZN7Igniter4FIREEv>:

void Igniter::FIRE(){
 80001b6:	b580      	push	{r7, lr}
 80001b8:	b082      	sub	sp, #8
 80001ba:	af00      	add	r7, sp, #0
 80001bc:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIO_PORT_IGNITER, PIN_IGNITER, GPIO_PIN_SET);
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	6818      	ldr	r0, [r3, #0]
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	889b      	ldrh	r3, [r3, #4]
 80001c6:	2201      	movs	r2, #1
 80001c8:	4619      	mov	r1, r3
 80001ca:	f000 fdab 	bl	8000d24 <HAL_GPIO_WritePin>
}
 80001ce:	bf00      	nop
 80001d0:	3708      	adds	r7, #8
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bd80      	pop	{r7, pc}
	...

080001d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80001dc:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001de:	2400      	movs	r4, #0
 80001e0:	9404      	str	r4, [sp, #16]
 80001e2:	9405      	str	r4, [sp, #20]
 80001e4:	9406      	str	r4, [sp, #24]
 80001e6:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001e8:	4b3c      	ldr	r3, [pc, #240]	; (80002dc <MX_GPIO_Init+0x104>)
 80001ea:	699a      	ldr	r2, [r3, #24]
 80001ec:	f042 0210 	orr.w	r2, r2, #16
 80001f0:	619a      	str	r2, [r3, #24]
 80001f2:	699a      	ldr	r2, [r3, #24]
 80001f4:	f002 0210 	and.w	r2, r2, #16
 80001f8:	9200      	str	r2, [sp, #0]
 80001fa:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001fc:	699a      	ldr	r2, [r3, #24]
 80001fe:	f042 0220 	orr.w	r2, r2, #32
 8000202:	619a      	str	r2, [r3, #24]
 8000204:	699a      	ldr	r2, [r3, #24]
 8000206:	f002 0220 	and.w	r2, r2, #32
 800020a:	9201      	str	r2, [sp, #4]
 800020c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800020e:	699a      	ldr	r2, [r3, #24]
 8000210:	f042 0204 	orr.w	r2, r2, #4
 8000214:	619a      	str	r2, [r3, #24]
 8000216:	699a      	ldr	r2, [r3, #24]
 8000218:	f002 0204 	and.w	r2, r2, #4
 800021c:	9202      	str	r2, [sp, #8]
 800021e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000220:	699a      	ldr	r2, [r3, #24]
 8000222:	f042 0208 	orr.w	r2, r2, #8
 8000226:	619a      	str	r2, [r3, #24]
 8000228:	699b      	ldr	r3, [r3, #24]
 800022a:	f003 0308 	and.w	r3, r3, #8
 800022e:	9303      	str	r3, [sp, #12]
 8000230:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUILD_IN_LED_GPIO_Port, BUILD_IN_LED_Pin, GPIO_PIN_RESET);
 8000232:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 80002e4 <MX_GPIO_Init+0x10c>
 8000236:	4622      	mov	r2, r4
 8000238:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800023c:	4648      	mov	r0, r9
 800023e:	f000 fd71 	bl	8000d24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PQD_D1_Pin|PQD_D2_Pin|IGN_FIRE_Pin, GPIO_PIN_RESET);
 8000242:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80002e8 <MX_GPIO_Init+0x110>
 8000246:	4622      	mov	r2, r4
 8000248:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
 800024c:	4640      	mov	r0, r8
 800024e:	f000 fd69 	bl	8000d24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HX1_SCL_Pin|QD_D2_Pin|QD_D1_Pin|DEPR_CLOSE_Pin
 8000252:	4d23      	ldr	r5, [pc, #140]	; (80002e0 <MX_GPIO_Init+0x108>)
 8000254:	4622      	mov	r2, r4
 8000256:	f24e 21d0 	movw	r1, #58064	; 0xe2d0
 800025a:	4628      	mov	r0, r5
 800025c:	f000 fd62 	bl	8000d24 <HAL_GPIO_WritePin>
                          |DEPR_OPEN_Pin|FILL_CLOSE_Pin|FILL_OPEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUILD_IN_LED_Pin;
 8000260:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000264:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000266:	2701      	movs	r7, #1
 8000268:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800026a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800026c:	2602      	movs	r6, #2
 800026e:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(BUILD_IN_LED_GPIO_Port, &GPIO_InitStruct);
 8000270:	a904      	add	r1, sp, #16
 8000272:	4648      	mov	r0, r9
 8000274:	f000 fc40 	bl	8000af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IGN_TEST_CON_Pin;
 8000278:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800027c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800027e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000280:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(IGN_TEST_CON_GPIO_Port, &GPIO_InitStruct);
 8000282:	a904      	add	r1, sp, #16
 8000284:	4648      	mov	r0, r9
 8000286:	f000 fc37 	bl	8000af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = HX2_SDA_Pin|HX2_SCL_Pin|DEPR_C_LIMIT_SW_Pin|DEPR_O_LIMIT_SW_Pin
 800028a:	f248 3330 	movw	r3, #33584	; 0x8330
 800028e:	9304      	str	r3, [sp, #16]
                          |FILL_C_LIMIT_SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000290:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000292:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000294:	a904      	add	r1, sp, #16
 8000296:	4640      	mov	r0, r8
 8000298:	f000 fc2e 	bl	8000af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = PQD_D1_Pin|PQD_D2_Pin|IGN_FIRE_Pin;
 800029c:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80002a0:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002a2:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002a4:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002a6:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002a8:	a904      	add	r1, sp, #16
 80002aa:	4640      	mov	r0, r8
 80002ac:	f000 fc24 	bl	8000af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = HX1_SDA_Pin|FILL_O_LIMIT_SW_Pin;
 80002b0:	f241 0308 	movw	r3, #4104	; 0x1008
 80002b4:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002b6:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002b8:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002ba:	a904      	add	r1, sp, #16
 80002bc:	4628      	mov	r0, r5
 80002be:	f000 fc1b 	bl	8000af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = HX1_SCL_Pin|QD_D2_Pin|QD_D1_Pin|DEPR_CLOSE_Pin
 80002c2:	f24e 23d0 	movw	r3, #58064	; 0xe2d0
 80002c6:	9304      	str	r3, [sp, #16]
                          |DEPR_OPEN_Pin|FILL_CLOSE_Pin|FILL_OPEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002c8:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ca:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002cc:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002ce:	a904      	add	r1, sp, #16
 80002d0:	4628      	mov	r0, r5
 80002d2:	f000 fc11 	bl	8000af8 <HAL_GPIO_Init>

}
 80002d6:	b009      	add	sp, #36	; 0x24
 80002d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80002dc:	40021000 	.word	0x40021000
 80002e0:	40010c00 	.word	0x40010c00
 80002e4:	40011000 	.word	0x40011000
 80002e8:	40010800 	.word	0x40010800

080002ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b088      	sub	sp, #32
 80002f0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002f2:	f000 fb6f 	bl	80009d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002f6:	f000 f8a5 	bl	8000444 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002fa:	f7ff ff6d 	bl	80001d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002fe:	f000 fa4f 	bl	80007a0 <MX_USART2_UART_Init>
  MX_USB_PCD_Init();
 8000302:	f000 faed 	bl	80008e0 <MX_USB_PCD_Init>
  MX_TIM3_Init();
 8000306:	f000 f9b1 	bl	800066c <MX_TIM3_Init>
  MX_TIM4_Init();
 800030a:	f000 fa09 	bl	8000720 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 800030e:	f000 fa61 	bl	80007d4 <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_Delay(1000);
 8000312:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000316:	f000 fb81 	bl	8000a1c <HAL_Delay>

   // char* buff;
    //memset(buff ,0,sizeof(buff));
    // HAL_TIM_Base_Start_IT(&htim2);
    __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 800031a:	4b45      	ldr	r3, [pc, #276]	; (8000430 <main+0x144>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	68da      	ldr	r2, [r3, #12]
 8000320:	4b43      	ldr	r3, [pc, #268]	; (8000430 <main+0x144>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	f042 0220 	orr.w	r2, r2, #32
 8000328:	60da      	str	r2, [r3, #12]
    /* USER CODE END 2 */

    /* USER CODE BEGIN WHILE */

    // INIT
    Igniter igniter(IGN_FIRE_GPIO_Port, IGN_FIRE_Pin, IGN_TEST_CON_GPIO_Port, IGN_TEST_CON_Pin);
 800032a:	1d38      	adds	r0, r7, #4
 800032c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	4b40      	ldr	r3, [pc, #256]	; (8000434 <main+0x148>)
 8000334:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000338:	493f      	ldr	r1, [pc, #252]	; (8000438 <main+0x14c>)
 800033a:	f7ff ff07 	bl	800014c <_ZN7IgniterC1EP12GPIO_TypeDeftS1_t>
    //Motor* QD = motor_init(QD_D1_GPIO_Port, QD_D1_Pin, QD_D2_GPIO_Port, QD_D2_Pin, QD_EN_GPIO_Port, QD_EN_Pin, nullptr, 0, nullptr, 0);
    //motor_initial(QD);
    uint16_t signal = 999; //placeholder, we need to do some signal managing with Michał
 800033e:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000342:	82fb      	strh	r3, [r7, #22]
    state = 0; //touch only for tests
 8000344:	4b3d      	ldr	r3, [pc, #244]	; (800043c <main+0x150>)
 8000346:	2200      	movs	r2, #0
 8000348:	701a      	strb	r2, [r3, #0]
    while (1)
    {
  	  switch(state){
 800034a:	4b3c      	ldr	r3, [pc, #240]	; (800043c <main+0x150>)
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	2b06      	cmp	r3, #6
 8000350:	d8fb      	bhi.n	800034a <main+0x5e>
 8000352:	a201      	add	r2, pc, #4	; (adr r2, 8000358 <main+0x6c>)
 8000354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000358:	08000375 	.word	0x08000375
 800035c:	08000397 	.word	0x08000397
 8000360:	080003a5 	.word	0x080003a5
 8000364:	080003cb 	.word	0x080003cb
 8000368:	080003f3 	.word	0x080003f3
 800036c:	080003fb 	.word	0x080003fb
 8000370:	08000417 	.word	0x08000417
  		  case 0: //test state
  			  if(igniter.is_connected()){
 8000374:	1d3b      	adds	r3, r7, #4
 8000376:	4618      	mov	r0, r3
 8000378:	f7ff ff02 	bl	8000180 <_ZNK7Igniter12is_connectedEv>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d004      	beq.n	800038c <main+0xa0>
  				  HAL_GPIO_TogglePin(BUILD_IN_LED_GPIO_Port, BUILD_IN_LED_Pin);
 8000382:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000386:	482b      	ldr	r0, [pc, #172]	; (8000434 <main+0x148>)
 8000388:	f000 fcd2 	bl	8000d30 <HAL_GPIO_TogglePin>
  			  }
  			  HAL_Delay(1000);
 800038c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000390:	f000 fb44 	bl	8000a1c <HAL_Delay>

  			  //place for random tests

  			  break;
 8000394:	e04a      	b.n	800042c <main+0x140>
  		  case 1:	//IDLE
  			  if(signal == 23){  //signal == ready
 8000396:	8afb      	ldrh	r3, [r7, #22]
 8000398:	2b17      	cmp	r3, #23
 800039a:	d140      	bne.n	800041e <main+0x132>
  				  //TODO: send ready
  				  state = 2;
 800039c:	4b27      	ldr	r3, [pc, #156]	; (800043c <main+0x150>)
 800039e:	2202      	movs	r2, #2
 80003a0:	701a      	strb	r2, [r3, #0]
  			  }
  			  break;
 80003a2:	e03c      	b.n	800041e <main+0x132>
  		  case 2:	//ARMED(hard)
  			  if(igniter.is_connected() && signal == 'h'){
 80003a4:	1d3b      	adds	r3, r7, #4
 80003a6:	4618      	mov	r0, r3
 80003a8:	f7ff feea 	bl	8000180 <_ZNK7Igniter12is_connectedEv>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d004      	beq.n	80003bc <main+0xd0>
 80003b2:	8afb      	ldrh	r3, [r7, #22]
 80003b4:	2b68      	cmp	r3, #104	; 0x68
 80003b6:	d101      	bne.n	80003bc <main+0xd0>
 80003b8:	2301      	movs	r3, #1
 80003ba:	e000      	b.n	80003be <main+0xd2>
 80003bc:	2300      	movs	r3, #0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d02f      	beq.n	8000422 <main+0x136>
  			  	  state = 3;
 80003c2:	4b1e      	ldr	r3, [pc, #120]	; (800043c <main+0x150>)
 80003c4:	2203      	movs	r2, #3
 80003c6:	701a      	strb	r2, [r3, #0]
  			  }
  			  break;
 80003c8:	e02b      	b.n	8000422 <main+0x136>
  		  case 3:	//ARMED(soft)
  			  	  if(signal == 666){		//signal == fire
 80003ca:	8afb      	ldrh	r3, [r7, #22]
 80003cc:	f240 229a 	movw	r2, #666	; 0x29a
 80003d0:	4293      	cmp	r3, r2
 80003d2:	d107      	bne.n	80003e4 <main+0xf8>
  			  		  igniter.FIRE();
 80003d4:	1d3b      	adds	r3, r7, #4
 80003d6:	4618      	mov	r0, r3
 80003d8:	f7ff feed 	bl	80001b6 <_ZN7Igniter4FIREEv>
  			  		  state = 5;
 80003dc:	4b17      	ldr	r3, [pc, #92]	; (800043c <main+0x150>)
 80003de:	2205      	movs	r2, #5
 80003e0:	701a      	strb	r2, [r3, #0]
  			  	  }
  			  	  else if(signal == 89){	//signal == arm
  			  		  state = 4;
  			  	  }
  			  break;
 80003e2:	e020      	b.n	8000426 <main+0x13a>
  			  	  else if(signal == 89){	//signal == arm
 80003e4:	8afb      	ldrh	r3, [r7, #22]
 80003e6:	2b59      	cmp	r3, #89	; 0x59
 80003e8:	d11d      	bne.n	8000426 <main+0x13a>
  			  		  state = 4;
 80003ea:	4b14      	ldr	r3, [pc, #80]	; (800043c <main+0x150>)
 80003ec:	2204      	movs	r2, #4
 80003ee:	701a      	strb	r2, [r3, #0]
  			  break;
 80003f0:	e019      	b.n	8000426 <main+0x13a>
  		  case 4:	//ABORT
  			  state = 2;
 80003f2:	4b12      	ldr	r3, [pc, #72]	; (800043c <main+0x150>)
 80003f4:	2202      	movs	r2, #2
 80003f6:	701a      	strb	r2, [r3, #0]
  			  break;
 80003f8:	e018      	b.n	800042c <main+0x140>
  		  case 5:	//FLIGHT
  			  //TODO: Send "fired" 	//n - times
  			  if( ! igniter.is_connected()){
 80003fa:	1d3b      	adds	r3, r7, #4
 80003fc:	4618      	mov	r0, r3
 80003fe:	f7ff febf 	bl	8000180 <_ZNK7Igniter12is_connectedEv>
 8000402:	4603      	mov	r3, r0
 8000404:	f083 0301 	eor.w	r3, r3, #1
 8000408:	b2db      	uxtb	r3, r3
 800040a:	2b00      	cmp	r3, #0
 800040c:	d00d      	beq.n	800042a <main+0x13e>
  				  state = 6;
 800040e:	4b0b      	ldr	r3, [pc, #44]	; (800043c <main+0x150>)
 8000410:	2206      	movs	r2, #6
 8000412:	701a      	strb	r2, [r3, #0]
  			  }
  			  break;
 8000414:	e009      	b.n	800042a <main+0x13e>
  		  case 6:	//END
  			  HAL_Delay(1000000);
 8000416:	480a      	ldr	r0, [pc, #40]	; (8000440 <main+0x154>)
 8000418:	f000 fb00 	bl	8000a1c <HAL_Delay>
  			  break;
 800041c:	e006      	b.n	800042c <main+0x140>
  			  break;
 800041e:	bf00      	nop
 8000420:	e793      	b.n	800034a <main+0x5e>
  			  break;
 8000422:	bf00      	nop
 8000424:	e791      	b.n	800034a <main+0x5e>
  			  break;
 8000426:	bf00      	nop
 8000428:	e78f      	b.n	800034a <main+0x5e>
  			  break;
 800042a:	bf00      	nop
  	  switch(state){
 800042c:	e78d      	b.n	800034a <main+0x5e>
 800042e:	bf00      	nop
 8000430:	200000fc 	.word	0x200000fc
 8000434:	40011000 	.word	0x40011000
 8000438:	40010800 	.word	0x40010800
 800043c:	20000028 	.word	0x20000028
 8000440:	000f4240 	.word	0x000f4240

08000444 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b094      	sub	sp, #80	; 0x50
 8000448:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800044a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800044e:	2228      	movs	r2, #40	; 0x28
 8000450:	2100      	movs	r1, #0
 8000452:	4618      	mov	r0, r3
 8000454:	f001 fb24 	bl	8001aa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000458:	f107 0314 	add.w	r3, r7, #20
 800045c:	2200      	movs	r2, #0
 800045e:	601a      	str	r2, [r3, #0]
 8000460:	605a      	str	r2, [r3, #4]
 8000462:	609a      	str	r2, [r3, #8]
 8000464:	60da      	str	r2, [r3, #12]
 8000466:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000468:	1d3b      	adds	r3, r7, #4
 800046a:	2200      	movs	r2, #0
 800046c:	601a      	str	r2, [r3, #0]
 800046e:	605a      	str	r2, [r3, #4]
 8000470:	609a      	str	r2, [r3, #8]
 8000472:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000474:	2301      	movs	r3, #1
 8000476:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000478:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800047c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800047e:	2300      	movs	r3, #0
 8000480:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000482:	2301      	movs	r3, #1
 8000484:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000486:	2302      	movs	r3, #2
 8000488:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800048a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800048e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000490:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000494:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000496:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800049a:	4618      	mov	r0, r3
 800049c:	f000 fcd2 	bl	8000e44 <HAL_RCC_OscConfig>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	bf14      	ite	ne
 80004a6:	2301      	movne	r3, #1
 80004a8:	2300      	moveq	r3, #0
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d001      	beq.n	80004b4 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 80004b0:	f000 f833 	bl	800051a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004b4:	230f      	movs	r3, #15
 80004b6:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004b8:	2302      	movs	r3, #2
 80004ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004bc:	2300      	movs	r3, #0
 80004be:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004c4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80004c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004ca:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004cc:	f107 0314 	add.w	r3, r7, #20
 80004d0:	2101      	movs	r1, #1
 80004d2:	4618      	mov	r0, r3
 80004d4:	f000 ff02 	bl	80012dc <HAL_RCC_ClockConfig>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	bf14      	ite	ne
 80004de:	2301      	movne	r3, #1
 80004e0:	2300      	moveq	r3, #0
 80004e2:	b2db      	uxtb	r3, r3
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <_Z18SystemClock_Configv+0xa8>
  {
    Error_Handler();
 80004e8:	f000 f817 	bl	800051a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80004ec:	2310      	movs	r3, #16
 80004ee:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80004f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80004f4:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004f6:	1d3b      	adds	r3, r7, #4
 80004f8:	4618      	mov	r0, r3
 80004fa:	f000 ffc7 	bl	800148c <HAL_RCCEx_PeriphCLKConfig>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	bf14      	ite	ne
 8000504:	2301      	movne	r3, #1
 8000506:	2300      	moveq	r3, #0
 8000508:	b2db      	uxtb	r3, r3
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <_Z18SystemClock_Configv+0xce>
  {
    Error_Handler();
 800050e:	f000 f804 	bl	800051a <Error_Handler>
  }
}
 8000512:	bf00      	nop
 8000514:	3750      	adds	r7, #80	; 0x50
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}

0800051a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800051a:	b480      	push	{r7}
 800051c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800051e:	b672      	cpsid	i
}
 8000520:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000522:	e7fe      	b.n	8000522 <Error_Handler+0x8>

08000524 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000524:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000526:	4b0e      	ldr	r3, [pc, #56]	; (8000560 <HAL_MspInit+0x3c>)
 8000528:	699a      	ldr	r2, [r3, #24]
 800052a:	f042 0201 	orr.w	r2, r2, #1
 800052e:	619a      	str	r2, [r3, #24]
 8000530:	699a      	ldr	r2, [r3, #24]
 8000532:	f002 0201 	and.w	r2, r2, #1
 8000536:	9200      	str	r2, [sp, #0]
 8000538:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800053a:	69da      	ldr	r2, [r3, #28]
 800053c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000540:	61da      	str	r2, [r3, #28]
 8000542:	69db      	ldr	r3, [r3, #28]
 8000544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000548:	9301      	str	r3, [sp, #4]
 800054a:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800054c:	4a05      	ldr	r2, [pc, #20]	; (8000564 <HAL_MspInit+0x40>)
 800054e:	6853      	ldr	r3, [r2, #4]
 8000550:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000554:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000558:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800055a:	b002      	add	sp, #8
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	40021000 	.word	0x40021000
 8000564:	40010000 	.word	0x40010000

08000568 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000568:	e7fe      	b.n	8000568 <NMI_Handler>

0800056a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800056a:	e7fe      	b.n	800056a <HardFault_Handler>

0800056c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800056c:	e7fe      	b.n	800056c <MemManage_Handler>

0800056e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800056e:	e7fe      	b.n	800056e <BusFault_Handler>

08000570 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000570:	e7fe      	b.n	8000570 <UsageFault_Handler>

08000572 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000572:	4770      	bx	lr

08000574 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000574:	4770      	bx	lr

08000576 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000576:	4770      	bx	lr

08000578 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000578:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800057a:	f000 fa3d 	bl	80009f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800057e:	bd08      	pop	{r3, pc}

08000580 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000580:	4770      	bx	lr
	...

08000584 <HAL_TIM_PWM_MspInit>:
  HAL_TIM_MspPostInit(&htim4);

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000584:	b082      	sub	sp, #8

  if(tim_pwmHandle->Instance==TIM3)
 8000586:	6803      	ldr	r3, [r0, #0]
 8000588:	4a0e      	ldr	r2, [pc, #56]	; (80005c4 <HAL_TIM_PWM_MspInit+0x40>)
 800058a:	4293      	cmp	r3, r2
 800058c:	d004      	beq.n	8000598 <HAL_TIM_PWM_MspInit+0x14>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(tim_pwmHandle->Instance==TIM4)
 800058e:	4a0e      	ldr	r2, [pc, #56]	; (80005c8 <HAL_TIM_PWM_MspInit+0x44>)
 8000590:	4293      	cmp	r3, r2
 8000592:	d00c      	beq.n	80005ae <HAL_TIM_PWM_MspInit+0x2a>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000594:	b002      	add	sp, #8
 8000596:	4770      	bx	lr
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000598:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <HAL_TIM_PWM_MspInit+0x48>)
 800059a:	69da      	ldr	r2, [r3, #28]
 800059c:	f042 0202 	orr.w	r2, r2, #2
 80005a0:	61da      	str	r2, [r3, #28]
 80005a2:	69db      	ldr	r3, [r3, #28]
 80005a4:	f003 0302 	and.w	r3, r3, #2
 80005a8:	9300      	str	r3, [sp, #0]
 80005aa:	9b00      	ldr	r3, [sp, #0]
 80005ac:	e7f2      	b.n	8000594 <HAL_TIM_PWM_MspInit+0x10>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80005ae:	4b07      	ldr	r3, [pc, #28]	; (80005cc <HAL_TIM_PWM_MspInit+0x48>)
 80005b0:	69da      	ldr	r2, [r3, #28]
 80005b2:	f042 0204 	orr.w	r2, r2, #4
 80005b6:	61da      	str	r2, [r3, #28]
 80005b8:	69db      	ldr	r3, [r3, #28]
 80005ba:	f003 0304 	and.w	r3, r3, #4
 80005be:	9301      	str	r3, [sp, #4]
 80005c0:	9b01      	ldr	r3, [sp, #4]
}
 80005c2:	e7e7      	b.n	8000594 <HAL_TIM_PWM_MspInit+0x10>
 80005c4:	40000400 	.word	0x40000400
 80005c8:	40000800 	.word	0x40000800
 80005cc:	40021000 	.word	0x40021000

080005d0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80005d0:	b500      	push	{lr}
 80005d2:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d4:	2300      	movs	r3, #0
 80005d6:	9302      	str	r3, [sp, #8]
 80005d8:	9303      	str	r3, [sp, #12]
 80005da:	9304      	str	r3, [sp, #16]
 80005dc:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM3)
 80005de:	6803      	ldr	r3, [r0, #0]
 80005e0:	4a1d      	ldr	r2, [pc, #116]	; (8000658 <HAL_TIM_MspPostInit+0x88>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d005      	beq.n	80005f2 <HAL_TIM_MspPostInit+0x22>

  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM4)
 80005e6:	4a1d      	ldr	r2, [pc, #116]	; (800065c <HAL_TIM_MspPostInit+0x8c>)
 80005e8:	4293      	cmp	r3, r2
 80005ea:	d01f      	beq.n	800062c <HAL_TIM_MspPostInit+0x5c>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80005ec:	b007      	add	sp, #28
 80005ee:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f2:	4b1b      	ldr	r3, [pc, #108]	; (8000660 <HAL_TIM_MspPostInit+0x90>)
 80005f4:	699a      	ldr	r2, [r3, #24]
 80005f6:	f042 0208 	orr.w	r2, r2, #8
 80005fa:	619a      	str	r2, [r3, #24]
 80005fc:	699b      	ldr	r3, [r3, #24]
 80005fe:	f003 0308 	and.w	r3, r3, #8
 8000602:	9300      	str	r3, [sp, #0]
 8000604:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = QD_EN_Pin|PQD_EN_Pin|DEPR_EN_Pin;
 8000606:	2323      	movs	r3, #35	; 0x23
 8000608:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800060a:	2302      	movs	r3, #2
 800060c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000610:	a902      	add	r1, sp, #8
 8000612:	4814      	ldr	r0, [pc, #80]	; (8000664 <HAL_TIM_MspPostInit+0x94>)
 8000614:	f000 fa70 	bl	8000af8 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8000618:	4a13      	ldr	r2, [pc, #76]	; (8000668 <HAL_TIM_MspPostInit+0x98>)
 800061a:	6853      	ldr	r3, [r2, #4]
 800061c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000620:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000624:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000628:	6053      	str	r3, [r2, #4]
 800062a:	e7df      	b.n	80005ec <HAL_TIM_MspPostInit+0x1c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800062c:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <HAL_TIM_MspPostInit+0x90>)
 800062e:	699a      	ldr	r2, [r3, #24]
 8000630:	f042 0208 	orr.w	r2, r2, #8
 8000634:	619a      	str	r2, [r3, #24]
 8000636:	699b      	ldr	r3, [r3, #24]
 8000638:	f003 0308 	and.w	r3, r3, #8
 800063c:	9301      	str	r3, [sp, #4]
 800063e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = FILL_EN_Pin;
 8000640:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000644:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000646:	2302      	movs	r3, #2
 8000648:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(FILL_EN_GPIO_Port, &GPIO_InitStruct);
 800064c:	a902      	add	r1, sp, #8
 800064e:	4805      	ldr	r0, [pc, #20]	; (8000664 <HAL_TIM_MspPostInit+0x94>)
 8000650:	f000 fa52 	bl	8000af8 <HAL_GPIO_Init>
}
 8000654:	e7ca      	b.n	80005ec <HAL_TIM_MspPostInit+0x1c>
 8000656:	bf00      	nop
 8000658:	40000400 	.word	0x40000400
 800065c:	40000800 	.word	0x40000800
 8000660:	40021000 	.word	0x40021000
 8000664:	40010c00 	.word	0x40010c00
 8000668:	40010000 	.word	0x40010000

0800066c <MX_TIM3_Init>:
{
 800066c:	b500      	push	{lr}
 800066e:	b08b      	sub	sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000670:	2300      	movs	r3, #0
 8000672:	9308      	str	r3, [sp, #32]
 8000674:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000676:	9301      	str	r3, [sp, #4]
 8000678:	9302      	str	r3, [sp, #8]
 800067a:	9303      	str	r3, [sp, #12]
 800067c:	9304      	str	r3, [sp, #16]
 800067e:	9305      	str	r3, [sp, #20]
 8000680:	9306      	str	r3, [sp, #24]
 8000682:	9307      	str	r3, [sp, #28]
  htim3.Instance = TIM3;
 8000684:	4824      	ldr	r0, [pc, #144]	; (8000718 <MX_TIM3_Init+0xac>)
 8000686:	4a25      	ldr	r2, [pc, #148]	; (800071c <MX_TIM3_Init+0xb0>)
 8000688:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 7;
 800068a:	2207      	movs	r2, #7
 800068c:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800068e:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 999;
 8000690:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000694:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000696:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000698:	2380      	movs	r3, #128	; 0x80
 800069a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800069c:	f001 f84a 	bl	8001734 <HAL_TIM_PWM_Init>
 80006a0:	bb50      	cbnz	r0, 80006f8 <MX_TIM3_Init+0x8c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006a2:	2300      	movs	r3, #0
 80006a4:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006a6:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006a8:	a908      	add	r1, sp, #32
 80006aa:	481b      	ldr	r0, [pc, #108]	; (8000718 <MX_TIM3_Init+0xac>)
 80006ac:	f001 f904 	bl	80018b8 <HAL_TIMEx_MasterConfigSynchronization>
 80006b0:	bb28      	cbnz	r0, 80006fe <MX_TIM3_Init+0x92>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006b2:	2360      	movs	r3, #96	; 0x60
 80006b4:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 500;
 80006b6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80006ba:	9302      	str	r3, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006bc:	2300      	movs	r3, #0
 80006be:	9303      	str	r3, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006c0:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006c2:	2204      	movs	r2, #4
 80006c4:	eb0d 0102 	add.w	r1, sp, r2
 80006c8:	4813      	ldr	r0, [pc, #76]	; (8000718 <MX_TIM3_Init+0xac>)
 80006ca:	f001 f88d 	bl	80017e8 <HAL_TIM_PWM_ConfigChannel>
 80006ce:	b9c8      	cbnz	r0, 8000704 <MX_TIM3_Init+0x98>
  sConfigOC.Pulse = 0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80006d4:	2208      	movs	r2, #8
 80006d6:	a901      	add	r1, sp, #4
 80006d8:	480f      	ldr	r0, [pc, #60]	; (8000718 <MX_TIM3_Init+0xac>)
 80006da:	f001 f885 	bl	80017e8 <HAL_TIM_PWM_ConfigChannel>
 80006de:	b9a0      	cbnz	r0, 800070a <MX_TIM3_Init+0x9e>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80006e0:	220c      	movs	r2, #12
 80006e2:	a901      	add	r1, sp, #4
 80006e4:	480c      	ldr	r0, [pc, #48]	; (8000718 <MX_TIM3_Init+0xac>)
 80006e6:	f001 f87f 	bl	80017e8 <HAL_TIM_PWM_ConfigChannel>
 80006ea:	b988      	cbnz	r0, 8000710 <MX_TIM3_Init+0xa4>
  HAL_TIM_MspPostInit(&htim3);
 80006ec:	480a      	ldr	r0, [pc, #40]	; (8000718 <MX_TIM3_Init+0xac>)
 80006ee:	f7ff ff6f 	bl	80005d0 <HAL_TIM_MspPostInit>
}
 80006f2:	b00b      	add	sp, #44	; 0x2c
 80006f4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80006f8:	f7ff ff0f 	bl	800051a <Error_Handler>
 80006fc:	e7d1      	b.n	80006a2 <MX_TIM3_Init+0x36>
    Error_Handler();
 80006fe:	f7ff ff0c 	bl	800051a <Error_Handler>
 8000702:	e7d6      	b.n	80006b2 <MX_TIM3_Init+0x46>
    Error_Handler();
 8000704:	f7ff ff09 	bl	800051a <Error_Handler>
 8000708:	e7e2      	b.n	80006d0 <MX_TIM3_Init+0x64>
    Error_Handler();
 800070a:	f7ff ff06 	bl	800051a <Error_Handler>
 800070e:	e7e7      	b.n	80006e0 <MX_TIM3_Init+0x74>
    Error_Handler();
 8000710:	f7ff ff03 	bl	800051a <Error_Handler>
 8000714:	e7ea      	b.n	80006ec <MX_TIM3_Init+0x80>
 8000716:	bf00      	nop
 8000718:	20000074 	.word	0x20000074
 800071c:	40000400 	.word	0x40000400

08000720 <MX_TIM4_Init>:
{
 8000720:	b500      	push	{lr}
 8000722:	b08b      	sub	sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000724:	2300      	movs	r3, #0
 8000726:	9308      	str	r3, [sp, #32]
 8000728:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 800072a:	9301      	str	r3, [sp, #4]
 800072c:	9302      	str	r3, [sp, #8]
 800072e:	9303      	str	r3, [sp, #12]
 8000730:	9304      	str	r3, [sp, #16]
 8000732:	9305      	str	r3, [sp, #20]
 8000734:	9306      	str	r3, [sp, #24]
 8000736:	9307      	str	r3, [sp, #28]
  htim4.Instance = TIM4;
 8000738:	4817      	ldr	r0, [pc, #92]	; (8000798 <MX_TIM4_Init+0x78>)
 800073a:	4a18      	ldr	r2, [pc, #96]	; (800079c <MX_TIM4_Init+0x7c>)
 800073c:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 0;
 800073e:	6043      	str	r3, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000740:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 65535;
 8000742:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000746:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000748:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800074a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800074c:	f000 fff2 	bl	8001734 <HAL_TIM_PWM_Init>
 8000750:	b9c8      	cbnz	r0, 8000786 <MX_TIM4_Init+0x66>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000752:	2300      	movs	r3, #0
 8000754:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000756:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000758:	a908      	add	r1, sp, #32
 800075a:	480f      	ldr	r0, [pc, #60]	; (8000798 <MX_TIM4_Init+0x78>)
 800075c:	f001 f8ac 	bl	80018b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000760:	b9a0      	cbnz	r0, 800078c <MX_TIM4_Init+0x6c>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000762:	2360      	movs	r3, #96	; 0x60
 8000764:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	9302      	str	r3, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800076a:	9303      	str	r3, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800076c:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800076e:	2208      	movs	r2, #8
 8000770:	a901      	add	r1, sp, #4
 8000772:	4809      	ldr	r0, [pc, #36]	; (8000798 <MX_TIM4_Init+0x78>)
 8000774:	f001 f838 	bl	80017e8 <HAL_TIM_PWM_ConfigChannel>
 8000778:	b958      	cbnz	r0, 8000792 <MX_TIM4_Init+0x72>
  HAL_TIM_MspPostInit(&htim4);
 800077a:	4807      	ldr	r0, [pc, #28]	; (8000798 <MX_TIM4_Init+0x78>)
 800077c:	f7ff ff28 	bl	80005d0 <HAL_TIM_MspPostInit>
}
 8000780:	b00b      	add	sp, #44	; 0x2c
 8000782:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000786:	f7ff fec8 	bl	800051a <Error_Handler>
 800078a:	e7e2      	b.n	8000752 <MX_TIM4_Init+0x32>
    Error_Handler();
 800078c:	f7ff fec5 	bl	800051a <Error_Handler>
 8000790:	e7e7      	b.n	8000762 <MX_TIM4_Init+0x42>
    Error_Handler();
 8000792:	f7ff fec2 	bl	800051a <Error_Handler>
 8000796:	e7f0      	b.n	800077a <MX_TIM4_Init+0x5a>
 8000798:	2000002c 	.word	0x2000002c
 800079c:	40000800 	.word	0x40000800

080007a0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80007a0:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 80007a2:	480a      	ldr	r0, [pc, #40]	; (80007cc <MX_USART2_UART_Init+0x2c>)
 80007a4:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <MX_USART2_UART_Init+0x30>)
 80007a6:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 80007a8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80007ac:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ae:	2300      	movs	r3, #0
 80007b0:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007b2:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007b4:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007b6:	220c      	movs	r2, #12
 80007b8:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ba:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007bc:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007be:	f001 f8f3 	bl	80019a8 <HAL_UART_Init>
 80007c2:	b900      	cbnz	r0, 80007c6 <MX_USART2_UART_Init+0x26>
  {
    Error_Handler();
  }

}
 80007c4:	bd08      	pop	{r3, pc}
    Error_Handler();
 80007c6:	f7ff fea8 	bl	800051a <Error_Handler>
}
 80007ca:	e7fb      	b.n	80007c4 <MX_USART2_UART_Init+0x24>
 80007cc:	200000fc 	.word	0x200000fc
 80007d0:	40004400 	.word	0x40004400

080007d4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80007d4:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
 80007d6:	480a      	ldr	r0, [pc, #40]	; (8000800 <MX_USART3_UART_Init+0x2c>)
 80007d8:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <MX_USART3_UART_Init+0x30>)
 80007da:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 80007dc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80007e0:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007e2:	2300      	movs	r3, #0
 80007e4:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007e6:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007e8:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007ea:	220c      	movs	r2, #12
 80007ec:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ee:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f0:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007f2:	f001 f8d9 	bl	80019a8 <HAL_UART_Init>
 80007f6:	b900      	cbnz	r0, 80007fa <MX_USART3_UART_Init+0x26>
  {
    Error_Handler();
  }

}
 80007f8:	bd08      	pop	{r3, pc}
    Error_Handler();
 80007fa:	f7ff fe8e 	bl	800051a <Error_Handler>
}
 80007fe:	e7fb      	b.n	80007f8 <MX_USART3_UART_Init+0x24>
 8000800:	200000bc 	.word	0x200000bc
 8000804:	40004800 	.word	0x40004800

08000808 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000808:	b510      	push	{r4, lr}
 800080a:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080c:	2300      	movs	r3, #0
 800080e:	9304      	str	r3, [sp, #16]
 8000810:	9305      	str	r3, [sp, #20]
 8000812:	9306      	str	r3, [sp, #24]
 8000814:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART2)
 8000816:	6803      	ldr	r3, [r0, #0]
 8000818:	4a2c      	ldr	r2, [pc, #176]	; (80008cc <HAL_UART_MspInit+0xc4>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d004      	beq.n	8000828 <HAL_UART_MspInit+0x20>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 800081e:	4a2c      	ldr	r2, [pc, #176]	; (80008d0 <HAL_UART_MspInit+0xc8>)
 8000820:	4293      	cmp	r3, r2
 8000822:	d029      	beq.n	8000878 <HAL_UART_MspInit+0x70>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000824:	b008      	add	sp, #32
 8000826:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8000828:	4b2a      	ldr	r3, [pc, #168]	; (80008d4 <HAL_UART_MspInit+0xcc>)
 800082a:	69da      	ldr	r2, [r3, #28]
 800082c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000830:	61da      	str	r2, [r3, #28]
 8000832:	69da      	ldr	r2, [r3, #28]
 8000834:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000838:	9200      	str	r2, [sp, #0]
 800083a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800083c:	699a      	ldr	r2, [r3, #24]
 800083e:	f042 0204 	orr.w	r2, r2, #4
 8000842:	619a      	str	r2, [r3, #24]
 8000844:	699b      	ldr	r3, [r3, #24]
 8000846:	f003 0304 	and.w	r3, r3, #4
 800084a:	9301      	str	r3, [sp, #4]
 800084c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800084e:	2304      	movs	r3, #4
 8000850:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000852:	2302      	movs	r3, #2
 8000854:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000856:	2303      	movs	r3, #3
 8000858:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085a:	4c1f      	ldr	r4, [pc, #124]	; (80008d8 <HAL_UART_MspInit+0xd0>)
 800085c:	a904      	add	r1, sp, #16
 800085e:	4620      	mov	r0, r4
 8000860:	f000 f94a 	bl	8000af8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000864:	2308      	movs	r3, #8
 8000866:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000868:	2300      	movs	r3, #0
 800086a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086e:	a904      	add	r1, sp, #16
 8000870:	4620      	mov	r0, r4
 8000872:	f000 f941 	bl	8000af8 <HAL_GPIO_Init>
 8000876:	e7d5      	b.n	8000824 <HAL_UART_MspInit+0x1c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000878:	4b16      	ldr	r3, [pc, #88]	; (80008d4 <HAL_UART_MspInit+0xcc>)
 800087a:	69da      	ldr	r2, [r3, #28]
 800087c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000880:	61da      	str	r2, [r3, #28]
 8000882:	69da      	ldr	r2, [r3, #28]
 8000884:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8000888:	9202      	str	r2, [sp, #8]
 800088a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800088c:	699a      	ldr	r2, [r3, #24]
 800088e:	f042 0208 	orr.w	r2, r2, #8
 8000892:	619a      	str	r2, [r3, #24]
 8000894:	699b      	ldr	r3, [r3, #24]
 8000896:	f003 0308 	and.w	r3, r3, #8
 800089a:	9303      	str	r3, [sp, #12]
 800089c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800089e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008a2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a4:	2302      	movs	r3, #2
 80008a6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008a8:	2303      	movs	r3, #3
 80008aa:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ac:	4c0b      	ldr	r4, [pc, #44]	; (80008dc <HAL_UART_MspInit+0xd4>)
 80008ae:	a904      	add	r1, sp, #16
 80008b0:	4620      	mov	r0, r4
 80008b2:	f000 f921 	bl	8000af8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80008b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80008ba:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008bc:	2300      	movs	r3, #0
 80008be:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c2:	a904      	add	r1, sp, #16
 80008c4:	4620      	mov	r0, r4
 80008c6:	f000 f917 	bl	8000af8 <HAL_GPIO_Init>
}
 80008ca:	e7ab      	b.n	8000824 <HAL_UART_MspInit+0x1c>
 80008cc:	40004400 	.word	0x40004400
 80008d0:	40004800 	.word	0x40004800
 80008d4:	40021000 	.word	0x40021000
 80008d8:	40010800 	.word	0x40010800
 80008dc:	40010c00 	.word	0x40010c00

080008e0 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 80008e0:	b508      	push	{r3, lr}

  hpcd_USB_FS.Instance = USB;
 80008e2:	4809      	ldr	r0, [pc, #36]	; (8000908 <MX_USB_PCD_Init+0x28>)
 80008e4:	4b09      	ldr	r3, [pc, #36]	; (800090c <MX_USB_PCD_Init+0x2c>)
 80008e6:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80008e8:	2308      	movs	r3, #8
 80008ea:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80008ec:	2302      	movs	r3, #2
 80008ee:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80008f0:	2300      	movs	r3, #0
 80008f2:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80008f4:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80008f6:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80008f8:	f000 fa23 	bl	8000d42 <HAL_PCD_Init>
 80008fc:	b900      	cbnz	r0, 8000900 <MX_USB_PCD_Init+0x20>
  {
    Error_Handler();
  }

}
 80008fe:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000900:	f7ff fe0b 	bl	800051a <Error_Handler>
}
 8000904:	e7fb      	b.n	80008fe <MX_USB_PCD_Init+0x1e>
 8000906:	bf00      	nop
 8000908:	2000013c 	.word	0x2000013c
 800090c:	40005c00 	.word	0x40005c00

08000910 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{

  if(pcdHandle->Instance==USB)
 8000910:	6802      	ldr	r2, [r0, #0]
 8000912:	4b09      	ldr	r3, [pc, #36]	; (8000938 <HAL_PCD_MspInit+0x28>)
 8000914:	429a      	cmp	r2, r3
 8000916:	d000      	beq.n	800091a <HAL_PCD_MspInit+0xa>
 8000918:	4770      	bx	lr
{
 800091a:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800091c:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8000920:	69da      	ldr	r2, [r3, #28]
 8000922:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000926:	61da      	str	r2, [r3, #28]
 8000928:	69db      	ldr	r3, [r3, #28]
 800092a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800092e:	9301      	str	r3, [sp, #4]
 8000930:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8000932:	b002      	add	sp, #8
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	40005c00 	.word	0x40005c00

0800093c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800093c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800093e:	e003      	b.n	8000948 <LoopCopyDataInit>

08000940 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000940:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000942:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000944:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000946:	3104      	adds	r1, #4

08000948 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000948:	480a      	ldr	r0, [pc, #40]	; (8000974 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800094a:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800094c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800094e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000950:	d3f6      	bcc.n	8000940 <CopyDataInit>
  ldr r2, =_sbss
 8000952:	4a0a      	ldr	r2, [pc, #40]	; (800097c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000954:	e002      	b.n	800095c <LoopFillZerobss>

08000956 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000956:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000958:	f842 3b04 	str.w	r3, [r2], #4

0800095c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800095c:	4b08      	ldr	r3, [pc, #32]	; (8000980 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800095e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000960:	d3f9      	bcc.n	8000956 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000962:	f7ff fe0d 	bl	8000580 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000966:	f001 f877 	bl	8001a58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800096a:	f7ff fcbf 	bl	80002ec <main>
  bx lr
 800096e:	4770      	bx	lr
  ldr r3, =_sidata
 8000970:	08001afc 	.word	0x08001afc
  ldr r0, =_sdata
 8000974:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000978:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 800097c:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000980:	2000042c 	.word	0x2000042c

08000984 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000984:	e7fe      	b.n	8000984 <ADC1_2_IRQHandler>
	...

08000988 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000988:	b510      	push	{r4, lr}
 800098a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800098c:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <HAL_InitTick+0x40>)
 800098e:	7818      	ldrb	r0, [r3, #0]
 8000990:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000994:	fbb3 f3f0 	udiv	r3, r3, r0
 8000998:	4a0c      	ldr	r2, [pc, #48]	; (80009cc <HAL_InitTick+0x44>)
 800099a:	6810      	ldr	r0, [r2, #0]
 800099c:	fbb0 f0f3 	udiv	r0, r0, r3
 80009a0:	f000 f894 	bl	8000acc <HAL_SYSTICK_Config>
 80009a4:	b968      	cbnz	r0, 80009c2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009a6:	2c0f      	cmp	r4, #15
 80009a8:	d901      	bls.n	80009ae <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80009aa:	2001      	movs	r0, #1
 80009ac:	e00a      	b.n	80009c4 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009ae:	2200      	movs	r2, #0
 80009b0:	4621      	mov	r1, r4
 80009b2:	f04f 30ff 	mov.w	r0, #4294967295
 80009b6:	f000 f857 	bl	8000a68 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009ba:	4b05      	ldr	r3, [pc, #20]	; (80009d0 <HAL_InitTick+0x48>)
 80009bc:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80009be:	2000      	movs	r0, #0
 80009c0:	e000      	b.n	80009c4 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80009c2:	2001      	movs	r0, #1
}
 80009c4:	bd10      	pop	{r4, pc}
 80009c6:	bf00      	nop
 80009c8:	20000004 	.word	0x20000004
 80009cc:	20000000 	.word	0x20000000
 80009d0:	20000008 	.word	0x20000008

080009d4 <HAL_Init>:
{
 80009d4:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009d6:	4a07      	ldr	r2, [pc, #28]	; (80009f4 <HAL_Init+0x20>)
 80009d8:	6813      	ldr	r3, [r2, #0]
 80009da:	f043 0310 	orr.w	r3, r3, #16
 80009de:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009e0:	2003      	movs	r0, #3
 80009e2:	f000 f82f 	bl	8000a44 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80009e6:	2000      	movs	r0, #0
 80009e8:	f7ff ffce 	bl	8000988 <HAL_InitTick>
  HAL_MspInit();
 80009ec:	f7ff fd9a 	bl	8000524 <HAL_MspInit>
}
 80009f0:	2000      	movs	r0, #0
 80009f2:	bd08      	pop	{r3, pc}
 80009f4:	40022000 	.word	0x40022000

080009f8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80009f8:	4a03      	ldr	r2, [pc, #12]	; (8000a08 <HAL_IncTick+0x10>)
 80009fa:	6811      	ldr	r1, [r2, #0]
 80009fc:	4b03      	ldr	r3, [pc, #12]	; (8000a0c <HAL_IncTick+0x14>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	440b      	add	r3, r1
 8000a02:	6013      	str	r3, [r2, #0]
}
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	20000428 	.word	0x20000428
 8000a0c:	20000004 	.word	0x20000004

08000a10 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000a10:	4b01      	ldr	r3, [pc, #4]	; (8000a18 <HAL_GetTick+0x8>)
 8000a12:	6818      	ldr	r0, [r3, #0]
}
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	20000428 	.word	0x20000428

08000a1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a1c:	b538      	push	{r3, r4, r5, lr}
 8000a1e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000a20:	f7ff fff6 	bl	8000a10 <HAL_GetTick>
 8000a24:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a26:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000a2a:	d002      	beq.n	8000a32 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a2c:	4b04      	ldr	r3, [pc, #16]	; (8000a40 <HAL_Delay+0x24>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a32:	f7ff ffed 	bl	8000a10 <HAL_GetTick>
 8000a36:	1b40      	subs	r0, r0, r5
 8000a38:	42a0      	cmp	r0, r4
 8000a3a:	d3fa      	bcc.n	8000a32 <HAL_Delay+0x16>
  {
  }
}
 8000a3c:	bd38      	pop	{r3, r4, r5, pc}
 8000a3e:	bf00      	nop
 8000a40:	20000004 	.word	0x20000004

08000a44 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a44:	4907      	ldr	r1, [pc, #28]	; (8000a64 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000a46:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a48:	0203      	lsls	r3, r0, #8
 8000a4a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a4e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000a52:	0412      	lsls	r2, r2, #16
 8000a54:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000a60:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000a62:	4770      	bx	lr
 8000a64:	e000ed00 	.word	0xe000ed00

08000a68 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a68:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a6a:	4b16      	ldr	r3, [pc, #88]	; (8000ac4 <HAL_NVIC_SetPriority+0x5c>)
 8000a6c:	68db      	ldr	r3, [r3, #12]
 8000a6e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a72:	f1c3 0407 	rsb	r4, r3, #7
 8000a76:	2c04      	cmp	r4, #4
 8000a78:	bf28      	it	cs
 8000a7a:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a7c:	1d1d      	adds	r5, r3, #4
 8000a7e:	2d06      	cmp	r5, #6
 8000a80:	bf8c      	ite	hi
 8000a82:	3b03      	subhi	r3, #3
 8000a84:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a86:	f04f 35ff 	mov.w	r5, #4294967295
 8000a8a:	fa05 f404 	lsl.w	r4, r5, r4
 8000a8e:	ea21 0104 	bic.w	r1, r1, r4
 8000a92:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a94:	fa05 f303 	lsl.w	r3, r5, r3
 8000a98:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a9c:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8000a9e:	2800      	cmp	r0, #0
 8000aa0:	db09      	blt.n	8000ab6 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa2:	0109      	lsls	r1, r1, #4
 8000aa4:	b2c9      	uxtb	r1, r1
 8000aa6:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000aaa:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000aae:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000ab2:	bc30      	pop	{r4, r5}
 8000ab4:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab6:	f000 000f 	and.w	r0, r0, #15
 8000aba:	0109      	lsls	r1, r1, #4
 8000abc:	b2c9      	uxtb	r1, r1
 8000abe:	4b02      	ldr	r3, [pc, #8]	; (8000ac8 <HAL_NVIC_SetPriority+0x60>)
 8000ac0:	5419      	strb	r1, [r3, r0]
 8000ac2:	e7f6      	b.n	8000ab2 <HAL_NVIC_SetPriority+0x4a>
 8000ac4:	e000ed00 	.word	0xe000ed00
 8000ac8:	e000ed14 	.word	0xe000ed14

08000acc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000acc:	3801      	subs	r0, #1
 8000ace:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ad2:	d20a      	bcs.n	8000aea <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <HAL_SYSTICK_Config+0x24>)
 8000ad6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad8:	4a06      	ldr	r2, [pc, #24]	; (8000af4 <HAL_SYSTICK_Config+0x28>)
 8000ada:	21f0      	movs	r1, #240	; 0xf0
 8000adc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ae4:	2207      	movs	r2, #7
 8000ae6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ae8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000aea:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	e000e010 	.word	0xe000e010
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000afc:	b083      	sub	sp, #12
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000afe:	680f      	ldr	r7, [r1, #0]
 8000b00:	2f00      	cmp	r7, #0
 8000b02:	f000 80f8 	beq.w	8000cf6 <HAL_GPIO_Init+0x1fe>
  uint32_t config = 0x00u;
 8000b06:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8000b08:	4613      	mov	r3, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b0a:	f8df c200 	ldr.w	ip, [pc, #512]	; 8000d0c <HAL_GPIO_Init+0x214>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b0e:	4d7b      	ldr	r5, [pc, #492]	; (8000cfc <HAL_GPIO_Init+0x204>)
      switch (GPIO_Init->Mode)
 8000b10:	4e7b      	ldr	r6, [pc, #492]	; (8000d00 <HAL_GPIO_Init+0x208>)
 8000b12:	f8df e1fc 	ldr.w	lr, [pc, #508]	; 8000d10 <HAL_GPIO_Init+0x218>
 8000b16:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 8000d14 <HAL_GPIO_Init+0x21c>
 8000b1a:	e09a      	b.n	8000c52 <HAL_GPIO_Init+0x15a>
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	e01e      	b.n	8000b5e <HAL_GPIO_Init+0x66>
 8000b20:	42b4      	cmp	r4, r6
 8000b22:	d00c      	beq.n	8000b3e <HAL_GPIO_Init+0x46>
 8000b24:	d904      	bls.n	8000b30 <HAL_GPIO_Init+0x38>
 8000b26:	4574      	cmp	r4, lr
 8000b28:	d009      	beq.n	8000b3e <HAL_GPIO_Init+0x46>
 8000b2a:	4544      	cmp	r4, r8
 8000b2c:	d007      	beq.n	8000b3e <HAL_GPIO_Init+0x46>
 8000b2e:	e016      	b.n	8000b5e <HAL_GPIO_Init+0x66>
 8000b30:	4f74      	ldr	r7, [pc, #464]	; (8000d04 <HAL_GPIO_Init+0x20c>)
 8000b32:	42bc      	cmp	r4, r7
 8000b34:	d003      	beq.n	8000b3e <HAL_GPIO_Init+0x46>
 8000b36:	f507 2770 	add.w	r7, r7, #983040	; 0xf0000
 8000b3a:	42bc      	cmp	r4, r7
 8000b3c:	d10b      	bne.n	8000b56 <HAL_GPIO_Init+0x5e>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b3e:	688a      	ldr	r2, [r1, #8]
 8000b40:	2a00      	cmp	r2, #0
 8000b42:	f000 80ca 	beq.w	8000cda <HAL_GPIO_Init+0x1e2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b46:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000b48:	bf0c      	ite	eq
 8000b4a:	f8c0 9010 	streq.w	r9, [r0, #16]
            GPIOx->BRR = ioposition;
 8000b4e:	f8c0 9014 	strne.w	r9, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b52:	2208      	movs	r2, #8
 8000b54:	e003      	b.n	8000b5e <HAL_GPIO_Init+0x66>
      switch (GPIO_Init->Mode)
 8000b56:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8000b5a:	42bc      	cmp	r4, r7
 8000b5c:	d0ef      	beq.n	8000b3e <HAL_GPIO_Init+0x46>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b5e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8000b62:	f200 80bc 	bhi.w	8000cde <HAL_GPIO_Init+0x1e6>
 8000b66:	4607      	mov	r7, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b68:	ea4f 0983 	mov.w	r9, r3, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b6c:	683c      	ldr	r4, [r7, #0]
 8000b6e:	f04f 0b0f 	mov.w	fp, #15
 8000b72:	fa0b fb09 	lsl.w	fp, fp, r9
 8000b76:	ea24 040b 	bic.w	r4, r4, fp
 8000b7a:	fa02 f909 	lsl.w	r9, r2, r9
 8000b7e:	ea44 0409 	orr.w	r4, r4, r9
 8000b82:	603c      	str	r4, [r7, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b84:	684c      	ldr	r4, [r1, #4]
 8000b86:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8000b8a:	d05d      	beq.n	8000c48 <HAL_GPIO_Init+0x150>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b8c:	f8dc 4018 	ldr.w	r4, [ip, #24]
 8000b90:	f044 0401 	orr.w	r4, r4, #1
 8000b94:	f8cc 4018 	str.w	r4, [ip, #24]
 8000b98:	f8dc 4018 	ldr.w	r4, [ip, #24]
 8000b9c:	f004 0401 	and.w	r4, r4, #1
 8000ba0:	9401      	str	r4, [sp, #4]
 8000ba2:	9c01      	ldr	r4, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8000ba4:	f023 0403 	bic.w	r4, r3, #3
 8000ba8:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8000bac:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 8000bb0:	f8d4 9008 	ldr.w	r9, [r4, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000bb4:	f003 0703 	and.w	r7, r3, #3
 8000bb8:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 8000bbc:	270f      	movs	r7, #15
 8000bbe:	fa07 f70b 	lsl.w	r7, r7, fp
 8000bc2:	ea29 0907 	bic.w	r9, r9, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000bc6:	4f50      	ldr	r7, [pc, #320]	; (8000d08 <HAL_GPIO_Init+0x210>)
 8000bc8:	42b8      	cmp	r0, r7
 8000bca:	f000 808e 	beq.w	8000cea <HAL_GPIO_Init+0x1f2>
 8000bce:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000bd2:	42b8      	cmp	r0, r7
 8000bd4:	f000 808b 	beq.w	8000cee <HAL_GPIO_Init+0x1f6>
 8000bd8:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000bdc:	42b8      	cmp	r0, r7
 8000bde:	f000 8088 	beq.w	8000cf2 <HAL_GPIO_Init+0x1fa>
 8000be2:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000be6:	42b8      	cmp	r0, r7
 8000be8:	bf0c      	ite	eq
 8000bea:	2703      	moveq	r7, #3
 8000bec:	2704      	movne	r7, #4
 8000bee:	fa07 f70b 	lsl.w	r7, r7, fp
 8000bf2:	ea47 0709 	orr.w	r7, r7, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8000bf6:	60a7      	str	r7, [r4, #8]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bf8:	684c      	ldr	r4, [r1, #4]
 8000bfa:	f414 3f80 	tst.w	r4, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000bfe:	682c      	ldr	r4, [r5, #0]
 8000c00:	bf14      	ite	ne
 8000c02:	ea44 040a 	orrne.w	r4, r4, sl
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c06:	ea24 040a 	biceq.w	r4, r4, sl
 8000c0a:	602c      	str	r4, [r5, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c0c:	684c      	ldr	r4, [r1, #4]
 8000c0e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000c12:	686c      	ldr	r4, [r5, #4]
 8000c14:	bf14      	ite	ne
 8000c16:	ea44 040a 	orrne.w	r4, r4, sl
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c1a:	ea24 040a 	biceq.w	r4, r4, sl
 8000c1e:	606c      	str	r4, [r5, #4]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c20:	684c      	ldr	r4, [r1, #4]
 8000c22:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c26:	68ac      	ldr	r4, [r5, #8]
 8000c28:	bf14      	ite	ne
 8000c2a:	ea44 040a 	orrne.w	r4, r4, sl
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c2e:	ea24 040a 	biceq.w	r4, r4, sl
 8000c32:	60ac      	str	r4, [r5, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c34:	684c      	ldr	r4, [r1, #4]
 8000c36:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c3a:	68ec      	ldr	r4, [r5, #12]
 8000c3c:	bf14      	ite	ne
 8000c3e:	ea44 040a 	orrne.w	r4, r4, sl
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c42:	ea24 040a 	biceq.w	r4, r4, sl
 8000c46:	60ec      	str	r4, [r5, #12]
        }
      }
    }

	position++;
 8000c48:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c4a:	680f      	ldr	r7, [r1, #0]
 8000c4c:	fa37 f403 	lsrs.w	r4, r7, r3
 8000c50:	d051      	beq.n	8000cf6 <HAL_GPIO_Init+0x1fe>
    ioposition = (0x01uL << position);
 8000c52:	f04f 0901 	mov.w	r9, #1
 8000c56:	fa09 f903 	lsl.w	r9, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c5a:	ea09 0a07 	and.w	sl, r9, r7
    if (iocurrent == ioposition)
 8000c5e:	ea39 0407 	bics.w	r4, r9, r7
 8000c62:	d1f1      	bne.n	8000c48 <HAL_GPIO_Init+0x150>
      switch (GPIO_Init->Mode)
 8000c64:	684c      	ldr	r4, [r1, #4]
 8000c66:	2c12      	cmp	r4, #18
 8000c68:	f63f af5a 	bhi.w	8000b20 <HAL_GPIO_Init+0x28>
 8000c6c:	2c12      	cmp	r4, #18
 8000c6e:	f63f af76 	bhi.w	8000b5e <HAL_GPIO_Init+0x66>
 8000c72:	a701      	add	r7, pc, #4	; (adr r7, 8000c78 <HAL_GPIO_Init+0x180>)
 8000c74:	f857 f024 	ldr.w	pc, [r7, r4, lsl #2]
 8000c78:	08000b3f 	.word	0x08000b3f
 8000c7c:	08000cc5 	.word	0x08000cc5
 8000c80:	08000ccf 	.word	0x08000ccf
 8000c84:	08000b1d 	.word	0x08000b1d
 8000c88:	08000b5f 	.word	0x08000b5f
 8000c8c:	08000b5f 	.word	0x08000b5f
 8000c90:	08000b5f 	.word	0x08000b5f
 8000c94:	08000b5f 	.word	0x08000b5f
 8000c98:	08000b5f 	.word	0x08000b5f
 8000c9c:	08000b5f 	.word	0x08000b5f
 8000ca0:	08000b5f 	.word	0x08000b5f
 8000ca4:	08000b5f 	.word	0x08000b5f
 8000ca8:	08000b5f 	.word	0x08000b5f
 8000cac:	08000b5f 	.word	0x08000b5f
 8000cb0:	08000b5f 	.word	0x08000b5f
 8000cb4:	08000b5f 	.word	0x08000b5f
 8000cb8:	08000b5f 	.word	0x08000b5f
 8000cbc:	08000cc9 	.word	0x08000cc9
 8000cc0:	08000cd5 	.word	0x08000cd5
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000cc4:	68ca      	ldr	r2, [r1, #12]
          break;
 8000cc6:	e74a      	b.n	8000b5e <HAL_GPIO_Init+0x66>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000cc8:	68ca      	ldr	r2, [r1, #12]
 8000cca:	3204      	adds	r2, #4
          break;
 8000ccc:	e747      	b.n	8000b5e <HAL_GPIO_Init+0x66>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cce:	68ca      	ldr	r2, [r1, #12]
 8000cd0:	3208      	adds	r2, #8
          break;
 8000cd2:	e744      	b.n	8000b5e <HAL_GPIO_Init+0x66>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000cd4:	68ca      	ldr	r2, [r1, #12]
 8000cd6:	320c      	adds	r2, #12
          break;
 8000cd8:	e741      	b.n	8000b5e <HAL_GPIO_Init+0x66>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000cda:	2204      	movs	r2, #4
 8000cdc:	e73f      	b.n	8000b5e <HAL_GPIO_Init+0x66>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cde:	1d07      	adds	r7, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ce0:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8000ce4:	f1a9 0920 	sub.w	r9, r9, #32
 8000ce8:	e740      	b.n	8000b6c <HAL_GPIO_Init+0x74>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000cea:	2700      	movs	r7, #0
 8000cec:	e77f      	b.n	8000bee <HAL_GPIO_Init+0xf6>
 8000cee:	2701      	movs	r7, #1
 8000cf0:	e77d      	b.n	8000bee <HAL_GPIO_Init+0xf6>
 8000cf2:	2702      	movs	r7, #2
 8000cf4:	e77b      	b.n	8000bee <HAL_GPIO_Init+0xf6>
  }
}
 8000cf6:	b003      	add	sp, #12
 8000cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cfc:	40010400 	.word	0x40010400
 8000d00:	10220000 	.word	0x10220000
 8000d04:	10120000 	.word	0x10120000
 8000d08:	40010800 	.word	0x40010800
 8000d0c:	40021000 	.word	0x40021000
 8000d10:	10310000 	.word	0x10310000
 8000d14:	10320000 	.word	0x10320000

08000d18 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000d18:	6883      	ldr	r3, [r0, #8]
 8000d1a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000d1c:	bf14      	ite	ne
 8000d1e:	2001      	movne	r0, #1
 8000d20:	2000      	moveq	r0, #0
 8000d22:	4770      	bx	lr

08000d24 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d24:	b10a      	cbz	r2, 8000d2a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d26:	6101      	str	r1, [r0, #16]
 8000d28:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d2a:	0409      	lsls	r1, r1, #16
 8000d2c:	6101      	str	r1, [r0, #16]
  }
}
 8000d2e:	4770      	bx	lr

08000d30 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000d30:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d32:	ea01 0203 	and.w	r2, r1, r3
 8000d36:	ea21 0103 	bic.w	r1, r1, r3
 8000d3a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000d3e:	6101      	str	r1, [r0, #16]
}
 8000d40:	4770      	bx	lr

08000d42 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000d42:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d44:	b087      	sub	sp, #28
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000d46:	2800      	cmp	r0, #0
 8000d48:	d07a      	beq.n	8000e40 <HAL_PCD_Init+0xfe>
 8000d4a:	4605      	mov	r5, r0

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000d4c:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 8000d50:	b1db      	cbz	r3, 8000d8a <HAL_PCD_Init+0x48>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000d52:	2303      	movs	r3, #3
 8000d54:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000d58:	6828      	ldr	r0, [r5, #0]
 8000d5a:	f000 fe5b 	bl	8001a14 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000d5e:	462c      	mov	r4, r5
 8000d60:	f854 7b10 	ldr.w	r7, [r4], #16
 8000d64:	466e      	mov	r6, sp
 8000d66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d68:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000d6a:	6823      	ldr	r3, [r4, #0]
 8000d6c:	6033      	str	r3, [r6, #0]
 8000d6e:	1d2b      	adds	r3, r5, #4
 8000d70:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d72:	4638      	mov	r0, r7
 8000d74:	f000 fe47 	bl	8001a06 <USB_CoreInit>
 8000d78:	4604      	mov	r4, r0
 8000d7a:	b158      	cbz	r0, 8000d94 <HAL_PCD_Init+0x52>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
    return HAL_ERROR;
 8000d82:	2401      	movs	r4, #1
  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8000d84:	4620      	mov	r0, r4
 8000d86:	b007      	add	sp, #28
 8000d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8000d8a:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 8000d8e:	f7ff fdbf 	bl	8000910 <HAL_PCD_MspInit>
 8000d92:	e7de      	b.n	8000d52 <HAL_PCD_Init+0x10>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000d94:	2100      	movs	r1, #0
 8000d96:	6828      	ldr	r0, [r5, #0]
 8000d98:	f000 fe46 	bl	8001a28 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d9c:	6868      	ldr	r0, [r5, #4]
 8000d9e:	b388      	cbz	r0, 8000e04 <HAL_PCD_Init+0xc2>
 8000da0:	4623      	mov	r3, r4
    hpcd->IN_ep[i].is_in = 1U;
 8000da2:	2601      	movs	r6, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000da4:	2100      	movs	r1, #0
    hpcd->IN_ep[i].is_in = 1U;
 8000da6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8000daa:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8000dae:	f882 6029 	strb.w	r6, [r2, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 8000db2:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000db6:	86d3      	strh	r3, [r2, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000db8:	f882 102b 	strb.w	r1, [r2, #43]	; 0x2b
    hpcd->IN_ep[i].maxpacket = 0U;
 8000dbc:	6391      	str	r1, [r2, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000dbe:	63d1      	str	r1, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 8000dc0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8000dc4:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8000dc8:	6411      	str	r1, [r2, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000dca:	3301      	adds	r3, #1
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	4283      	cmp	r3, r0
 8000dd0:	d3e9      	bcc.n	8000da6 <HAL_PCD_Init+0x64>
    hpcd->OUT_ep[i].is_in = 0U;
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8000dd8:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8000ddc:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 8000de0:	f883 4168 	strb.w	r4, [r3, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000de4:	f883 216b 	strb.w	r2, [r3, #363]	; 0x16b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000de8:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000dec:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000df0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8000df4:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8000df8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000dfc:	3401      	adds	r4, #1
 8000dfe:	b2e4      	uxtb	r4, r4
 8000e00:	4284      	cmp	r4, r0
 8000e02:	d3e7      	bcc.n	8000dd4 <HAL_PCD_Init+0x92>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e04:	462c      	mov	r4, r5
 8000e06:	f854 7b10 	ldr.w	r7, [r4], #16
 8000e0a:	466e      	mov	r6, sp
 8000e0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e0e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000e10:	6823      	ldr	r3, [r4, #0]
 8000e12:	6033      	str	r3, [r6, #0]
 8000e14:	1d2b      	adds	r3, r5, #4
 8000e16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e18:	4638      	mov	r0, r7
 8000e1a:	f000 fe07 	bl	8001a2c <USB_DevInit>
 8000e1e:	4604      	mov	r4, r0
 8000e20:	b120      	cbz	r0, 8000e2c <HAL_PCD_Init+0xea>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e22:	2302      	movs	r3, #2
 8000e24:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
    return HAL_ERROR;
 8000e28:	2401      	movs	r4, #1
 8000e2a:	e7ab      	b.n	8000d84 <HAL_PCD_Init+0x42>
  hpcd->USB_Address = 0U;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000e32:	2301      	movs	r3, #1
 8000e34:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000e38:	6828      	ldr	r0, [r5, #0]
 8000e3a:	f000 fe0a 	bl	8001a52 <USB_DevDisconnect>
  return HAL_OK;
 8000e3e:	e7a1      	b.n	8000d84 <HAL_PCD_Init+0x42>
    return HAL_ERROR;
 8000e40:	2401      	movs	r4, #1
 8000e42:	e79f      	b.n	8000d84 <HAL_PCD_Init+0x42>

08000e44 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e44:	2800      	cmp	r0, #0
 8000e46:	f000 8201 	beq.w	800124c <HAL_RCC_OscConfig+0x408>
{
 8000e4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e52:	6803      	ldr	r3, [r0, #0]
 8000e54:	f013 0f01 	tst.w	r3, #1
 8000e58:	d02c      	beq.n	8000eb4 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e5a:	4baa      	ldr	r3, [pc, #680]	; (8001104 <HAL_RCC_OscConfig+0x2c0>)
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f003 030c 	and.w	r3, r3, #12
 8000e62:	2b04      	cmp	r3, #4
 8000e64:	d01d      	beq.n	8000ea2 <HAL_RCC_OscConfig+0x5e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e66:	4ba7      	ldr	r3, [pc, #668]	; (8001104 <HAL_RCC_OscConfig+0x2c0>)
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f003 030c 	and.w	r3, r3, #12
 8000e6e:	2b08      	cmp	r3, #8
 8000e70:	d012      	beq.n	8000e98 <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e72:	6863      	ldr	r3, [r4, #4]
 8000e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e78:	d041      	beq.n	8000efe <HAL_RCC_OscConfig+0xba>
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d155      	bne.n	8000f2a <HAL_RCC_OscConfig+0xe6>
 8000e7e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000e82:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	e037      	b.n	8000f08 <HAL_RCC_OscConfig+0xc4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e98:	4b9a      	ldr	r3, [pc, #616]	; (8001104 <HAL_RCC_OscConfig+0x2c0>)
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000ea0:	d0e7      	beq.n	8000e72 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ea2:	4b98      	ldr	r3, [pc, #608]	; (8001104 <HAL_RCC_OscConfig+0x2c0>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000eaa:	d003      	beq.n	8000eb4 <HAL_RCC_OscConfig+0x70>
 8000eac:	6863      	ldr	r3, [r4, #4]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	f000 81ce 	beq.w	8001250 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000eb4:	6823      	ldr	r3, [r4, #0]
 8000eb6:	f013 0f02 	tst.w	r3, #2
 8000eba:	d075      	beq.n	8000fa8 <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ebc:	4b91      	ldr	r3, [pc, #580]	; (8001104 <HAL_RCC_OscConfig+0x2c0>)
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f013 0f0c 	tst.w	r3, #12
 8000ec4:	d05f      	beq.n	8000f86 <HAL_RCC_OscConfig+0x142>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000ec6:	4b8f      	ldr	r3, [pc, #572]	; (8001104 <HAL_RCC_OscConfig+0x2c0>)
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	f003 030c 	and.w	r3, r3, #12
 8000ece:	2b08      	cmp	r3, #8
 8000ed0:	d054      	beq.n	8000f7c <HAL_RCC_OscConfig+0x138>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ed2:	6923      	ldr	r3, [r4, #16]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	f000 8089 	beq.w	8000fec <HAL_RCC_OscConfig+0x1a8>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000eda:	4b8b      	ldr	r3, [pc, #556]	; (8001108 <HAL_RCC_OscConfig+0x2c4>)
 8000edc:	2201      	movs	r2, #1
 8000ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ee0:	f7ff fd96 	bl	8000a10 <HAL_GetTick>
 8000ee4:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ee6:	4e87      	ldr	r6, [pc, #540]	; (8001104 <HAL_RCC_OscConfig+0x2c0>)
 8000ee8:	6833      	ldr	r3, [r6, #0]
 8000eea:	f013 0f02 	tst.w	r3, #2
 8000eee:	d174      	bne.n	8000fda <HAL_RCC_OscConfig+0x196>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ef0:	f7ff fd8e 	bl	8000a10 <HAL_GetTick>
 8000ef4:	1b40      	subs	r0, r0, r5
 8000ef6:	2802      	cmp	r0, #2
 8000ef8:	d9f6      	bls.n	8000ee8 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_TIMEOUT;
 8000efa:	2003      	movs	r0, #3
 8000efc:	e1ad      	b.n	800125a <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000efe:	4a81      	ldr	r2, [pc, #516]	; (8001104 <HAL_RCC_OscConfig+0x2c0>)
 8000f00:	6813      	ldr	r3, [r2, #0]
 8000f02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f06:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f08:	6863      	ldr	r3, [r4, #4]
 8000f0a:	b343      	cbz	r3, 8000f5e <HAL_RCC_OscConfig+0x11a>
        tickstart = HAL_GetTick();
 8000f0c:	f7ff fd80 	bl	8000a10 <HAL_GetTick>
 8000f10:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f12:	4e7c      	ldr	r6, [pc, #496]	; (8001104 <HAL_RCC_OscConfig+0x2c0>)
 8000f14:	6833      	ldr	r3, [r6, #0]
 8000f16:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000f1a:	d1cb      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f1c:	f7ff fd78 	bl	8000a10 <HAL_GetTick>
 8000f20:	1b40      	subs	r0, r0, r5
 8000f22:	2864      	cmp	r0, #100	; 0x64
 8000f24:	d9f6      	bls.n	8000f14 <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 8000f26:	2003      	movs	r0, #3
 8000f28:	e197      	b.n	800125a <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f2a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f2e:	d009      	beq.n	8000f44 <HAL_RCC_OscConfig+0x100>
 8000f30:	4b74      	ldr	r3, [pc, #464]	; (8001104 <HAL_RCC_OscConfig+0x2c0>)
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	e7e1      	b.n	8000f08 <HAL_RCC_OscConfig+0xc4>
 8000f44:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f48:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	e7d4      	b.n	8000f08 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 8000f5e:	f7ff fd57 	bl	8000a10 <HAL_GetTick>
 8000f62:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f64:	4e67      	ldr	r6, [pc, #412]	; (8001104 <HAL_RCC_OscConfig+0x2c0>)
 8000f66:	6833      	ldr	r3, [r6, #0]
 8000f68:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000f6c:	d0a2      	beq.n	8000eb4 <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f6e:	f7ff fd4f 	bl	8000a10 <HAL_GetTick>
 8000f72:	1b40      	subs	r0, r0, r5
 8000f74:	2864      	cmp	r0, #100	; 0x64
 8000f76:	d9f6      	bls.n	8000f66 <HAL_RCC_OscConfig+0x122>
            return HAL_TIMEOUT;
 8000f78:	2003      	movs	r0, #3
 8000f7a:	e16e      	b.n	800125a <HAL_RCC_OscConfig+0x416>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f7c:	4b61      	ldr	r3, [pc, #388]	; (8001104 <HAL_RCC_OscConfig+0x2c0>)
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000f84:	d1a5      	bne.n	8000ed2 <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f86:	4b5f      	ldr	r3, [pc, #380]	; (8001104 <HAL_RCC_OscConfig+0x2c0>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f013 0f02 	tst.w	r3, #2
 8000f8e:	d003      	beq.n	8000f98 <HAL_RCC_OscConfig+0x154>
 8000f90:	6923      	ldr	r3, [r4, #16]
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	f040 815e 	bne.w	8001254 <HAL_RCC_OscConfig+0x410>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f98:	4a5a      	ldr	r2, [pc, #360]	; (8001104 <HAL_RCC_OscConfig+0x2c0>)
 8000f9a:	6813      	ldr	r3, [r2, #0]
 8000f9c:	6961      	ldr	r1, [r4, #20]
 8000f9e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000fa2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000fa6:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fa8:	6823      	ldr	r3, [r4, #0]
 8000faa:	f013 0f08 	tst.w	r3, #8
 8000fae:	d03c      	beq.n	800102a <HAL_RCC_OscConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fb0:	69a3      	ldr	r3, [r4, #24]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d04f      	beq.n	8001056 <HAL_RCC_OscConfig+0x212>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fb6:	4b55      	ldr	r3, [pc, #340]	; (800110c <HAL_RCC_OscConfig+0x2c8>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fbc:	f7ff fd28 	bl	8000a10 <HAL_GetTick>
 8000fc0:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fc2:	4e50      	ldr	r6, [pc, #320]	; (8001104 <HAL_RCC_OscConfig+0x2c0>)
 8000fc4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8000fc6:	f013 0f02 	tst.w	r3, #2
 8000fca:	d121      	bne.n	8001010 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fcc:	f7ff fd20 	bl	8000a10 <HAL_GetTick>
 8000fd0:	1b40      	subs	r0, r0, r5
 8000fd2:	2802      	cmp	r0, #2
 8000fd4:	d9f6      	bls.n	8000fc4 <HAL_RCC_OscConfig+0x180>
        {
          return HAL_TIMEOUT;
 8000fd6:	2003      	movs	r0, #3
 8000fd8:	e13f      	b.n	800125a <HAL_RCC_OscConfig+0x416>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fda:	4a4a      	ldr	r2, [pc, #296]	; (8001104 <HAL_RCC_OscConfig+0x2c0>)
 8000fdc:	6813      	ldr	r3, [r2, #0]
 8000fde:	6961      	ldr	r1, [r4, #20]
 8000fe0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000fe4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000fe8:	6013      	str	r3, [r2, #0]
 8000fea:	e7dd      	b.n	8000fa8 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8000fec:	4b46      	ldr	r3, [pc, #280]	; (8001108 <HAL_RCC_OscConfig+0x2c4>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ff2:	f7ff fd0d 	bl	8000a10 <HAL_GetTick>
 8000ff6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ff8:	4e42      	ldr	r6, [pc, #264]	; (8001104 <HAL_RCC_OscConfig+0x2c0>)
 8000ffa:	6833      	ldr	r3, [r6, #0]
 8000ffc:	f013 0f02 	tst.w	r3, #2
 8001000:	d0d2      	beq.n	8000fa8 <HAL_RCC_OscConfig+0x164>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001002:	f7ff fd05 	bl	8000a10 <HAL_GetTick>
 8001006:	1b40      	subs	r0, r0, r5
 8001008:	2802      	cmp	r0, #2
 800100a:	d9f6      	bls.n	8000ffa <HAL_RCC_OscConfig+0x1b6>
            return HAL_TIMEOUT;
 800100c:	2003      	movs	r0, #3
 800100e:	e124      	b.n	800125a <HAL_RCC_OscConfig+0x416>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001010:	4b3f      	ldr	r3, [pc, #252]	; (8001110 <HAL_RCC_OscConfig+0x2cc>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a3f      	ldr	r2, [pc, #252]	; (8001114 <HAL_RCC_OscConfig+0x2d0>)
 8001016:	fba2 2303 	umull	r2, r3, r2, r3
 800101a:	0a5b      	lsrs	r3, r3, #9
 800101c:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800101e:	bf00      	nop
  }
  while (Delay --);
 8001020:	9b01      	ldr	r3, [sp, #4]
 8001022:	1e5a      	subs	r2, r3, #1
 8001024:	9201      	str	r2, [sp, #4]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d1f9      	bne.n	800101e <HAL_RCC_OscConfig+0x1da>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800102a:	6823      	ldr	r3, [r4, #0]
 800102c:	f013 0f04 	tst.w	r3, #4
 8001030:	f000 809c 	beq.w	800116c <HAL_RCC_OscConfig+0x328>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001034:	4b33      	ldr	r3, [pc, #204]	; (8001104 <HAL_RCC_OscConfig+0x2c0>)
 8001036:	69db      	ldr	r3, [r3, #28]
 8001038:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800103c:	d11d      	bne.n	800107a <HAL_RCC_OscConfig+0x236>
      __HAL_RCC_PWR_CLK_ENABLE();
 800103e:	4b31      	ldr	r3, [pc, #196]	; (8001104 <HAL_RCC_OscConfig+0x2c0>)
 8001040:	69da      	ldr	r2, [r3, #28]
 8001042:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001046:	61da      	str	r2, [r3, #28]
 8001048:	69db      	ldr	r3, [r3, #28]
 800104a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 8001052:	2501      	movs	r5, #1
 8001054:	e012      	b.n	800107c <HAL_RCC_OscConfig+0x238>
      __HAL_RCC_LSI_DISABLE();
 8001056:	4b2d      	ldr	r3, [pc, #180]	; (800110c <HAL_RCC_OscConfig+0x2c8>)
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800105c:	f7ff fcd8 	bl	8000a10 <HAL_GetTick>
 8001060:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001062:	4e28      	ldr	r6, [pc, #160]	; (8001104 <HAL_RCC_OscConfig+0x2c0>)
 8001064:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001066:	f013 0f02 	tst.w	r3, #2
 800106a:	d0de      	beq.n	800102a <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800106c:	f7ff fcd0 	bl	8000a10 <HAL_GetTick>
 8001070:	1b40      	subs	r0, r0, r5
 8001072:	2802      	cmp	r0, #2
 8001074:	d9f6      	bls.n	8001064 <HAL_RCC_OscConfig+0x220>
          return HAL_TIMEOUT;
 8001076:	2003      	movs	r0, #3
 8001078:	e0ef      	b.n	800125a <HAL_RCC_OscConfig+0x416>
    FlagStatus       pwrclkchanged = RESET;
 800107a:	2500      	movs	r5, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800107c:	4b26      	ldr	r3, [pc, #152]	; (8001118 <HAL_RCC_OscConfig+0x2d4>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001084:	d011      	beq.n	80010aa <HAL_RCC_OscConfig+0x266>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001086:	68e3      	ldr	r3, [r4, #12]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d022      	beq.n	80010d2 <HAL_RCC_OscConfig+0x28e>
 800108c:	2b00      	cmp	r3, #0
 800108e:	d145      	bne.n	800111c <HAL_RCC_OscConfig+0x2d8>
 8001090:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001094:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001098:	6a1a      	ldr	r2, [r3, #32]
 800109a:	f022 0201 	bic.w	r2, r2, #1
 800109e:	621a      	str	r2, [r3, #32]
 80010a0:	6a1a      	ldr	r2, [r3, #32]
 80010a2:	f022 0204 	bic.w	r2, r2, #4
 80010a6:	621a      	str	r2, [r3, #32]
 80010a8:	e018      	b.n	80010dc <HAL_RCC_OscConfig+0x298>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010aa:	4a1b      	ldr	r2, [pc, #108]	; (8001118 <HAL_RCC_OscConfig+0x2d4>)
 80010ac:	6813      	ldr	r3, [r2, #0]
 80010ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010b2:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80010b4:	f7ff fcac 	bl	8000a10 <HAL_GetTick>
 80010b8:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010ba:	4f17      	ldr	r7, [pc, #92]	; (8001118 <HAL_RCC_OscConfig+0x2d4>)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	f413 7f80 	tst.w	r3, #256	; 0x100
 80010c2:	d1e0      	bne.n	8001086 <HAL_RCC_OscConfig+0x242>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010c4:	f7ff fca4 	bl	8000a10 <HAL_GetTick>
 80010c8:	1b80      	subs	r0, r0, r6
 80010ca:	2864      	cmp	r0, #100	; 0x64
 80010cc:	d9f6      	bls.n	80010bc <HAL_RCC_OscConfig+0x278>
          return HAL_TIMEOUT;
 80010ce:	2003      	movs	r0, #3
 80010d0:	e0c3      	b.n	800125a <HAL_RCC_OscConfig+0x416>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010d2:	4a0c      	ldr	r2, [pc, #48]	; (8001104 <HAL_RCC_OscConfig+0x2c0>)
 80010d4:	6a13      	ldr	r3, [r2, #32]
 80010d6:	f043 0301 	orr.w	r3, r3, #1
 80010da:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010dc:	68e3      	ldr	r3, [r4, #12]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d032      	beq.n	8001148 <HAL_RCC_OscConfig+0x304>
      tickstart = HAL_GetTick();
 80010e2:	f7ff fc95 	bl	8000a10 <HAL_GetTick>
 80010e6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010e8:	4f06      	ldr	r7, [pc, #24]	; (8001104 <HAL_RCC_OscConfig+0x2c0>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010ea:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010ee:	6a3b      	ldr	r3, [r7, #32]
 80010f0:	f013 0f02 	tst.w	r3, #2
 80010f4:	d139      	bne.n	800116a <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010f6:	f7ff fc8b 	bl	8000a10 <HAL_GetTick>
 80010fa:	1b80      	subs	r0, r0, r6
 80010fc:	4540      	cmp	r0, r8
 80010fe:	d9f6      	bls.n	80010ee <HAL_RCC_OscConfig+0x2aa>
          return HAL_TIMEOUT;
 8001100:	2003      	movs	r0, #3
 8001102:	e0aa      	b.n	800125a <HAL_RCC_OscConfig+0x416>
 8001104:	40021000 	.word	0x40021000
 8001108:	42420000 	.word	0x42420000
 800110c:	42420480 	.word	0x42420480
 8001110:	20000000 	.word	0x20000000
 8001114:	10624dd3 	.word	0x10624dd3
 8001118:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800111c:	2b05      	cmp	r3, #5
 800111e:	d009      	beq.n	8001134 <HAL_RCC_OscConfig+0x2f0>
 8001120:	4b51      	ldr	r3, [pc, #324]	; (8001268 <HAL_RCC_OscConfig+0x424>)
 8001122:	6a1a      	ldr	r2, [r3, #32]
 8001124:	f022 0201 	bic.w	r2, r2, #1
 8001128:	621a      	str	r2, [r3, #32]
 800112a:	6a1a      	ldr	r2, [r3, #32]
 800112c:	f022 0204 	bic.w	r2, r2, #4
 8001130:	621a      	str	r2, [r3, #32]
 8001132:	e7d3      	b.n	80010dc <HAL_RCC_OscConfig+0x298>
 8001134:	4b4c      	ldr	r3, [pc, #304]	; (8001268 <HAL_RCC_OscConfig+0x424>)
 8001136:	6a1a      	ldr	r2, [r3, #32]
 8001138:	f042 0204 	orr.w	r2, r2, #4
 800113c:	621a      	str	r2, [r3, #32]
 800113e:	6a1a      	ldr	r2, [r3, #32]
 8001140:	f042 0201 	orr.w	r2, r2, #1
 8001144:	621a      	str	r2, [r3, #32]
 8001146:	e7c9      	b.n	80010dc <HAL_RCC_OscConfig+0x298>
      tickstart = HAL_GetTick();
 8001148:	f7ff fc62 	bl	8000a10 <HAL_GetTick>
 800114c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800114e:	4f46      	ldr	r7, [pc, #280]	; (8001268 <HAL_RCC_OscConfig+0x424>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001150:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001154:	6a3b      	ldr	r3, [r7, #32]
 8001156:	f013 0f02 	tst.w	r3, #2
 800115a:	d006      	beq.n	800116a <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800115c:	f7ff fc58 	bl	8000a10 <HAL_GetTick>
 8001160:	1b80      	subs	r0, r0, r6
 8001162:	4540      	cmp	r0, r8
 8001164:	d9f6      	bls.n	8001154 <HAL_RCC_OscConfig+0x310>
          return HAL_TIMEOUT;
 8001166:	2003      	movs	r0, #3
 8001168:	e077      	b.n	800125a <HAL_RCC_OscConfig+0x416>
    if (pwrclkchanged == SET)
 800116a:	b9e5      	cbnz	r5, 80011a6 <HAL_RCC_OscConfig+0x362>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800116c:	69e3      	ldr	r3, [r4, #28]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d072      	beq.n	8001258 <HAL_RCC_OscConfig+0x414>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001172:	4a3d      	ldr	r2, [pc, #244]	; (8001268 <HAL_RCC_OscConfig+0x424>)
 8001174:	6852      	ldr	r2, [r2, #4]
 8001176:	f002 020c 	and.w	r2, r2, #12
 800117a:	2a08      	cmp	r2, #8
 800117c:	d056      	beq.n	800122c <HAL_RCC_OscConfig+0x3e8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800117e:	2b02      	cmp	r3, #2
 8001180:	d017      	beq.n	80011b2 <HAL_RCC_OscConfig+0x36e>
        __HAL_RCC_PLL_DISABLE();
 8001182:	4b3a      	ldr	r3, [pc, #232]	; (800126c <HAL_RCC_OscConfig+0x428>)
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001188:	f7ff fc42 	bl	8000a10 <HAL_GetTick>
 800118c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800118e:	4d36      	ldr	r5, [pc, #216]	; (8001268 <HAL_RCC_OscConfig+0x424>)
 8001190:	682b      	ldr	r3, [r5, #0]
 8001192:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001196:	d047      	beq.n	8001228 <HAL_RCC_OscConfig+0x3e4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001198:	f7ff fc3a 	bl	8000a10 <HAL_GetTick>
 800119c:	1b00      	subs	r0, r0, r4
 800119e:	2802      	cmp	r0, #2
 80011a0:	d9f6      	bls.n	8001190 <HAL_RCC_OscConfig+0x34c>
            return HAL_TIMEOUT;
 80011a2:	2003      	movs	r0, #3
 80011a4:	e059      	b.n	800125a <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_PWR_CLK_DISABLE();
 80011a6:	4a30      	ldr	r2, [pc, #192]	; (8001268 <HAL_RCC_OscConfig+0x424>)
 80011a8:	69d3      	ldr	r3, [r2, #28]
 80011aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011ae:	61d3      	str	r3, [r2, #28]
 80011b0:	e7dc      	b.n	800116c <HAL_RCC_OscConfig+0x328>
        __HAL_RCC_PLL_DISABLE();
 80011b2:	4b2e      	ldr	r3, [pc, #184]	; (800126c <HAL_RCC_OscConfig+0x428>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80011b8:	f7ff fc2a 	bl	8000a10 <HAL_GetTick>
 80011bc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011be:	4e2a      	ldr	r6, [pc, #168]	; (8001268 <HAL_RCC_OscConfig+0x424>)
 80011c0:	6833      	ldr	r3, [r6, #0]
 80011c2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80011c6:	d006      	beq.n	80011d6 <HAL_RCC_OscConfig+0x392>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011c8:	f7ff fc22 	bl	8000a10 <HAL_GetTick>
 80011cc:	1b40      	subs	r0, r0, r5
 80011ce:	2802      	cmp	r0, #2
 80011d0:	d9f6      	bls.n	80011c0 <HAL_RCC_OscConfig+0x37c>
            return HAL_TIMEOUT;
 80011d2:	2003      	movs	r0, #3
 80011d4:	e041      	b.n	800125a <HAL_RCC_OscConfig+0x416>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80011d6:	6a23      	ldr	r3, [r4, #32]
 80011d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011dc:	d01a      	beq.n	8001214 <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011de:	4922      	ldr	r1, [pc, #136]	; (8001268 <HAL_RCC_OscConfig+0x424>)
 80011e0:	684a      	ldr	r2, [r1, #4]
 80011e2:	6a23      	ldr	r3, [r4, #32]
 80011e4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80011e6:	4303      	orrs	r3, r0
 80011e8:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80011ec:	4313      	orrs	r3, r2
 80011ee:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 80011f0:	4b1e      	ldr	r3, [pc, #120]	; (800126c <HAL_RCC_OscConfig+0x428>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80011f6:	f7ff fc0b 	bl	8000a10 <HAL_GetTick>
 80011fa:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011fc:	4d1a      	ldr	r5, [pc, #104]	; (8001268 <HAL_RCC_OscConfig+0x424>)
 80011fe:	682b      	ldr	r3, [r5, #0]
 8001200:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001204:	d10e      	bne.n	8001224 <HAL_RCC_OscConfig+0x3e0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001206:	f7ff fc03 	bl	8000a10 <HAL_GetTick>
 800120a:	1b00      	subs	r0, r0, r4
 800120c:	2802      	cmp	r0, #2
 800120e:	d9f6      	bls.n	80011fe <HAL_RCC_OscConfig+0x3ba>
            return HAL_TIMEOUT;
 8001210:	2003      	movs	r0, #3
 8001212:	e022      	b.n	800125a <HAL_RCC_OscConfig+0x416>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001214:	4a14      	ldr	r2, [pc, #80]	; (8001268 <HAL_RCC_OscConfig+0x424>)
 8001216:	6853      	ldr	r3, [r2, #4]
 8001218:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800121c:	68a1      	ldr	r1, [r4, #8]
 800121e:	430b      	orrs	r3, r1
 8001220:	6053      	str	r3, [r2, #4]
 8001222:	e7dc      	b.n	80011de <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 8001224:	2000      	movs	r0, #0
 8001226:	e018      	b.n	800125a <HAL_RCC_OscConfig+0x416>
 8001228:	2000      	movs	r0, #0
 800122a:	e016      	b.n	800125a <HAL_RCC_OscConfig+0x416>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800122c:	2b01      	cmp	r3, #1
 800122e:	d017      	beq.n	8001260 <HAL_RCC_OscConfig+0x41c>
        pll_config = RCC->CFGR;
 8001230:	4b0d      	ldr	r3, [pc, #52]	; (8001268 <HAL_RCC_OscConfig+0x424>)
 8001232:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001234:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8001238:	6a22      	ldr	r2, [r4, #32]
 800123a:	4291      	cmp	r1, r2
 800123c:	d112      	bne.n	8001264 <HAL_RCC_OscConfig+0x420>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800123e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001242:	6a60      	ldr	r0, [r4, #36]	; 0x24
        return HAL_ERROR;
 8001244:	1a18      	subs	r0, r3, r0
 8001246:	bf18      	it	ne
 8001248:	2001      	movne	r0, #1
 800124a:	e006      	b.n	800125a <HAL_RCC_OscConfig+0x416>
    return HAL_ERROR;
 800124c:	2001      	movs	r0, #1
}
 800124e:	4770      	bx	lr
        return HAL_ERROR;
 8001250:	2001      	movs	r0, #1
 8001252:	e002      	b.n	800125a <HAL_RCC_OscConfig+0x416>
        return HAL_ERROR;
 8001254:	2001      	movs	r0, #1
 8001256:	e000      	b.n	800125a <HAL_RCC_OscConfig+0x416>
  return HAL_OK;
 8001258:	2000      	movs	r0, #0
}
 800125a:	b002      	add	sp, #8
 800125c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 8001260:	2001      	movs	r0, #1
 8001262:	e7fa      	b.n	800125a <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
 8001264:	2001      	movs	r0, #1
 8001266:	e7f8      	b.n	800125a <HAL_RCC_OscConfig+0x416>
 8001268:	40021000 	.word	0x40021000
 800126c:	42420060 	.word	0x42420060

08001270 <HAL_RCC_GetSysClockFreq>:
{
 8001270:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001272:	4b16      	ldr	r3, [pc, #88]	; (80012cc <HAL_RCC_GetSysClockFreq+0x5c>)
 8001274:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001276:	f10d 0c18 	add.w	ip, sp, #24
 800127a:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800127e:	f240 2301 	movw	r3, #513	; 0x201
 8001282:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8001286:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <HAL_RCC_GetSysClockFreq+0x60>)
 8001288:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800128a:	f003 020c 	and.w	r2, r3, #12
 800128e:	2a08      	cmp	r2, #8
 8001290:	d002      	beq.n	8001298 <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 8001292:	4810      	ldr	r0, [pc, #64]	; (80012d4 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8001294:	b006      	add	sp, #24
 8001296:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001298:	f3c3 4283 	ubfx	r2, r3, #18, #4
 800129c:	4462      	add	r2, ip
 800129e:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80012a2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80012a6:	d00c      	beq.n	80012c2 <HAL_RCC_GetSysClockFreq+0x52>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80012a8:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <HAL_RCC_GetSysClockFreq+0x60>)
 80012aa:	685b      	ldr	r3, [r3, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80012ac:	4809      	ldr	r0, [pc, #36]	; (80012d4 <HAL_RCC_GetSysClockFreq+0x64>)
 80012ae:	fb00 f002 	mul.w	r0, r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80012b2:	f3c3 4340 	ubfx	r3, r3, #17, #1
 80012b6:	4463      	add	r3, ip
 80012b8:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80012bc:	fbb0 f0f3 	udiv	r0, r0, r3
 80012c0:	e7e8      	b.n	8001294 <HAL_RCC_GetSysClockFreq+0x24>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80012c2:	4805      	ldr	r0, [pc, #20]	; (80012d8 <HAL_RCC_GetSysClockFreq+0x68>)
 80012c4:	fb00 f002 	mul.w	r0, r0, r2
 80012c8:	e7e4      	b.n	8001294 <HAL_RCC_GetSysClockFreq+0x24>
 80012ca:	bf00      	nop
 80012cc:	08001ae0 	.word	0x08001ae0
 80012d0:	40021000 	.word	0x40021000
 80012d4:	007a1200 	.word	0x007a1200
 80012d8:	003d0900 	.word	0x003d0900

080012dc <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80012dc:	2800      	cmp	r0, #0
 80012de:	f000 80a2 	beq.w	8001426 <HAL_RCC_ClockConfig+0x14a>
{
 80012e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012e6:	460d      	mov	r5, r1
 80012e8:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012ea:	4b53      	ldr	r3, [pc, #332]	; (8001438 <HAL_RCC_ClockConfig+0x15c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0307 	and.w	r3, r3, #7
 80012f2:	428b      	cmp	r3, r1
 80012f4:	d20b      	bcs.n	800130e <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012f6:	4a50      	ldr	r2, [pc, #320]	; (8001438 <HAL_RCC_ClockConfig+0x15c>)
 80012f8:	6813      	ldr	r3, [r2, #0]
 80012fa:	f023 0307 	bic.w	r3, r3, #7
 80012fe:	430b      	orrs	r3, r1
 8001300:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001302:	6813      	ldr	r3, [r2, #0]
 8001304:	f003 0307 	and.w	r3, r3, #7
 8001308:	428b      	cmp	r3, r1
 800130a:	f040 808e 	bne.w	800142a <HAL_RCC_ClockConfig+0x14e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800130e:	6823      	ldr	r3, [r4, #0]
 8001310:	f013 0f02 	tst.w	r3, #2
 8001314:	d017      	beq.n	8001346 <HAL_RCC_ClockConfig+0x6a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001316:	f013 0f04 	tst.w	r3, #4
 800131a:	d004      	beq.n	8001326 <HAL_RCC_ClockConfig+0x4a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800131c:	4a47      	ldr	r2, [pc, #284]	; (800143c <HAL_RCC_ClockConfig+0x160>)
 800131e:	6853      	ldr	r3, [r2, #4]
 8001320:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001324:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001326:	6823      	ldr	r3, [r4, #0]
 8001328:	f013 0f08 	tst.w	r3, #8
 800132c:	d004      	beq.n	8001338 <HAL_RCC_ClockConfig+0x5c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800132e:	4a43      	ldr	r2, [pc, #268]	; (800143c <HAL_RCC_ClockConfig+0x160>)
 8001330:	6853      	ldr	r3, [r2, #4]
 8001332:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001336:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001338:	4a40      	ldr	r2, [pc, #256]	; (800143c <HAL_RCC_ClockConfig+0x160>)
 800133a:	6853      	ldr	r3, [r2, #4]
 800133c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001340:	68a1      	ldr	r1, [r4, #8]
 8001342:	430b      	orrs	r3, r1
 8001344:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001346:	6823      	ldr	r3, [r4, #0]
 8001348:	f013 0f01 	tst.w	r3, #1
 800134c:	d031      	beq.n	80013b2 <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800134e:	6862      	ldr	r2, [r4, #4]
 8001350:	2a01      	cmp	r2, #1
 8001352:	d020      	beq.n	8001396 <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001354:	2a02      	cmp	r2, #2
 8001356:	d025      	beq.n	80013a4 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001358:	4b38      	ldr	r3, [pc, #224]	; (800143c <HAL_RCC_ClockConfig+0x160>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f013 0f02 	tst.w	r3, #2
 8001360:	d065      	beq.n	800142e <HAL_RCC_ClockConfig+0x152>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001362:	4936      	ldr	r1, [pc, #216]	; (800143c <HAL_RCC_ClockConfig+0x160>)
 8001364:	684b      	ldr	r3, [r1, #4]
 8001366:	f023 0303 	bic.w	r3, r3, #3
 800136a:	4313      	orrs	r3, r2
 800136c:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 800136e:	f7ff fb4f 	bl	8000a10 <HAL_GetTick>
 8001372:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001374:	4f31      	ldr	r7, [pc, #196]	; (800143c <HAL_RCC_ClockConfig+0x160>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001376:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f003 030c 	and.w	r3, r3, #12
 8001380:	6862      	ldr	r2, [r4, #4]
 8001382:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001386:	d014      	beq.n	80013b2 <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001388:	f7ff fb42 	bl	8000a10 <HAL_GetTick>
 800138c:	1b80      	subs	r0, r0, r6
 800138e:	4540      	cmp	r0, r8
 8001390:	d9f3      	bls.n	800137a <HAL_RCC_ClockConfig+0x9e>
        return HAL_TIMEOUT;
 8001392:	2003      	movs	r0, #3
 8001394:	e045      	b.n	8001422 <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001396:	4b29      	ldr	r3, [pc, #164]	; (800143c <HAL_RCC_ClockConfig+0x160>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800139e:	d1e0      	bne.n	8001362 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80013a0:	2001      	movs	r0, #1
 80013a2:	e03e      	b.n	8001422 <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013a4:	4b25      	ldr	r3, [pc, #148]	; (800143c <HAL_RCC_ClockConfig+0x160>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80013ac:	d1d9      	bne.n	8001362 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80013ae:	2001      	movs	r0, #1
 80013b0:	e037      	b.n	8001422 <HAL_RCC_ClockConfig+0x146>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013b2:	4b21      	ldr	r3, [pc, #132]	; (8001438 <HAL_RCC_ClockConfig+0x15c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0307 	and.w	r3, r3, #7
 80013ba:	42ab      	cmp	r3, r5
 80013bc:	d90a      	bls.n	80013d4 <HAL_RCC_ClockConfig+0xf8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013be:	4a1e      	ldr	r2, [pc, #120]	; (8001438 <HAL_RCC_ClockConfig+0x15c>)
 80013c0:	6813      	ldr	r3, [r2, #0]
 80013c2:	f023 0307 	bic.w	r3, r3, #7
 80013c6:	432b      	orrs	r3, r5
 80013c8:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013ca:	6813      	ldr	r3, [r2, #0]
 80013cc:	f003 0307 	and.w	r3, r3, #7
 80013d0:	42ab      	cmp	r3, r5
 80013d2:	d12e      	bne.n	8001432 <HAL_RCC_ClockConfig+0x156>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013d4:	6823      	ldr	r3, [r4, #0]
 80013d6:	f013 0f04 	tst.w	r3, #4
 80013da:	d006      	beq.n	80013ea <HAL_RCC_ClockConfig+0x10e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013dc:	4a17      	ldr	r2, [pc, #92]	; (800143c <HAL_RCC_ClockConfig+0x160>)
 80013de:	6853      	ldr	r3, [r2, #4]
 80013e0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80013e4:	68e1      	ldr	r1, [r4, #12]
 80013e6:	430b      	orrs	r3, r1
 80013e8:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013ea:	6823      	ldr	r3, [r4, #0]
 80013ec:	f013 0f08 	tst.w	r3, #8
 80013f0:	d007      	beq.n	8001402 <HAL_RCC_ClockConfig+0x126>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80013f2:	4a12      	ldr	r2, [pc, #72]	; (800143c <HAL_RCC_ClockConfig+0x160>)
 80013f4:	6853      	ldr	r3, [r2, #4]
 80013f6:	6921      	ldr	r1, [r4, #16]
 80013f8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80013fc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001400:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001402:	f7ff ff35 	bl	8001270 <HAL_RCC_GetSysClockFreq>
 8001406:	4b0d      	ldr	r3, [pc, #52]	; (800143c <HAL_RCC_ClockConfig+0x160>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800140e:	4a0c      	ldr	r2, [pc, #48]	; (8001440 <HAL_RCC_ClockConfig+0x164>)
 8001410:	5cd3      	ldrb	r3, [r2, r3]
 8001412:	40d8      	lsrs	r0, r3
 8001414:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <HAL_RCC_ClockConfig+0x168>)
 8001416:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001418:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <HAL_RCC_ClockConfig+0x16c>)
 800141a:	6818      	ldr	r0, [r3, #0]
 800141c:	f7ff fab4 	bl	8000988 <HAL_InitTick>
  return HAL_OK;
 8001420:	2000      	movs	r0, #0
}
 8001422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8001426:	2001      	movs	r0, #1
}
 8001428:	4770      	bx	lr
    return HAL_ERROR;
 800142a:	2001      	movs	r0, #1
 800142c:	e7f9      	b.n	8001422 <HAL_RCC_ClockConfig+0x146>
        return HAL_ERROR;
 800142e:	2001      	movs	r0, #1
 8001430:	e7f7      	b.n	8001422 <HAL_RCC_ClockConfig+0x146>
    return HAL_ERROR;
 8001432:	2001      	movs	r0, #1
 8001434:	e7f5      	b.n	8001422 <HAL_RCC_ClockConfig+0x146>
 8001436:	bf00      	nop
 8001438:	40022000 	.word	0x40022000
 800143c:	40021000 	.word	0x40021000
 8001440:	08001ac8 	.word	0x08001ac8
 8001444:	20000000 	.word	0x20000000
 8001448:	20000008 	.word	0x20000008

0800144c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800144c:	4b04      	ldr	r3, [pc, #16]	; (8001460 <HAL_RCC_GetPCLK1Freq+0x14>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001454:	4a03      	ldr	r2, [pc, #12]	; (8001464 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001456:	5cd3      	ldrb	r3, [r2, r3]
 8001458:	4a03      	ldr	r2, [pc, #12]	; (8001468 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800145a:	6810      	ldr	r0, [r2, #0]
}
 800145c:	40d8      	lsrs	r0, r3
 800145e:	4770      	bx	lr
 8001460:	40021000 	.word	0x40021000
 8001464:	08001ad8 	.word	0x08001ad8
 8001468:	20000000 	.word	0x20000000

0800146c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800146c:	4b04      	ldr	r3, [pc, #16]	; (8001480 <HAL_RCC_GetPCLK2Freq+0x14>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001474:	4a03      	ldr	r2, [pc, #12]	; (8001484 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001476:	5cd3      	ldrb	r3, [r2, r3]
 8001478:	4a03      	ldr	r2, [pc, #12]	; (8001488 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800147a:	6810      	ldr	r0, [r2, #0]
}
 800147c:	40d8      	lsrs	r0, r3
 800147e:	4770      	bx	lr
 8001480:	40021000 	.word	0x40021000
 8001484:	08001ad8 	.word	0x08001ad8
 8001488:	20000000 	.word	0x20000000

0800148c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800148c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001490:	b082      	sub	sp, #8
 8001492:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001494:	6803      	ldr	r3, [r0, #0]
 8001496:	f013 0f01 	tst.w	r3, #1
 800149a:	d034      	beq.n	8001506 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800149c:	4b3e      	ldr	r3, [pc, #248]	; (8001598 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800149e:	69db      	ldr	r3, [r3, #28]
 80014a0:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80014a4:	d147      	bne.n	8001536 <HAL_RCCEx_PeriphCLKConfig+0xaa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014a6:	4b3c      	ldr	r3, [pc, #240]	; (8001598 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80014a8:	69da      	ldr	r2, [r3, #28]
 80014aa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014ae:	61da      	str	r2, [r3, #28]
 80014b0:	69db      	ldr	r3, [r3, #28]
 80014b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b6:	9301      	str	r3, [sp, #4]
 80014b8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80014ba:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014bc:	4b37      	ldr	r3, [pc, #220]	; (800159c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80014c4:	d039      	beq.n	800153a <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80014c6:	4b34      	ldr	r3, [pc, #208]	; (8001598 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80014c8:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80014ca:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80014ce:	d011      	beq.n	80014f4 <HAL_RCCEx_PeriphCLKConfig+0x68>
 80014d0:	6862      	ldr	r2, [r4, #4]
 80014d2:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d00c      	beq.n	80014f4 <HAL_RCCEx_PeriphCLKConfig+0x68>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80014da:	4a2f      	ldr	r2, [pc, #188]	; (8001598 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80014dc:	6a13      	ldr	r3, [r2, #32]
 80014de:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80014e2:	492f      	ldr	r1, [pc, #188]	; (80015a0 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80014e4:	2601      	movs	r6, #1
 80014e6:	600e      	str	r6, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80014e8:	2600      	movs	r6, #0
 80014ea:	600e      	str	r6, [r1, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80014ec:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80014ee:	f013 0f01 	tst.w	r3, #1
 80014f2:	d136      	bne.n	8001562 <HAL_RCCEx_PeriphCLKConfig+0xd6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80014f4:	4a28      	ldr	r2, [pc, #160]	; (8001598 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80014f6:	6a13      	ldr	r3, [r2, #32]
 80014f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80014fc:	6861      	ldr	r1, [r4, #4]
 80014fe:	430b      	orrs	r3, r1
 8001500:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001502:	2d00      	cmp	r5, #0
 8001504:	d13e      	bne.n	8001584 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001506:	6823      	ldr	r3, [r4, #0]
 8001508:	f013 0f02 	tst.w	r3, #2
 800150c:	d006      	beq.n	800151c <HAL_RCCEx_PeriphCLKConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800150e:	4a22      	ldr	r2, [pc, #136]	; (8001598 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001510:	6853      	ldr	r3, [r2, #4]
 8001512:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001516:	68a1      	ldr	r1, [r4, #8]
 8001518:	430b      	orrs	r3, r1
 800151a:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800151c:	6823      	ldr	r3, [r4, #0]
 800151e:	f013 0f10 	tst.w	r3, #16
 8001522:	d034      	beq.n	800158e <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001524:	4a1c      	ldr	r2, [pc, #112]	; (8001598 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001526:	6853      	ldr	r3, [r2, #4]
 8001528:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800152c:	68e1      	ldr	r1, [r4, #12]
 800152e:	430b      	orrs	r3, r1
 8001530:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001532:	2000      	movs	r0, #0
 8001534:	e02c      	b.n	8001590 <HAL_RCCEx_PeriphCLKConfig+0x104>
    FlagStatus       pwrclkchanged = RESET;
 8001536:	2500      	movs	r5, #0
 8001538:	e7c0      	b.n	80014bc <HAL_RCCEx_PeriphCLKConfig+0x30>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800153a:	4a18      	ldr	r2, [pc, #96]	; (800159c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 800153c:	6813      	ldr	r3, [r2, #0]
 800153e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001542:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001544:	f7ff fa64 	bl	8000a10 <HAL_GetTick>
 8001548:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800154a:	4f14      	ldr	r7, [pc, #80]	; (800159c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001552:	d1b8      	bne.n	80014c6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001554:	f7ff fa5c 	bl	8000a10 <HAL_GetTick>
 8001558:	1b80      	subs	r0, r0, r6
 800155a:	2864      	cmp	r0, #100	; 0x64
 800155c:	d9f6      	bls.n	800154c <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 800155e:	2003      	movs	r0, #3
 8001560:	e016      	b.n	8001590 <HAL_RCCEx_PeriphCLKConfig+0x104>
        tickstart = HAL_GetTick();
 8001562:	f7ff fa55 	bl	8000a10 <HAL_GetTick>
 8001566:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001568:	4f0b      	ldr	r7, [pc, #44]	; (8001598 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800156a:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800156e:	6a3b      	ldr	r3, [r7, #32]
 8001570:	f013 0f02 	tst.w	r3, #2
 8001574:	d1be      	bne.n	80014f4 <HAL_RCCEx_PeriphCLKConfig+0x68>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001576:	f7ff fa4b 	bl	8000a10 <HAL_GetTick>
 800157a:	1b80      	subs	r0, r0, r6
 800157c:	4540      	cmp	r0, r8
 800157e:	d9f6      	bls.n	800156e <HAL_RCCEx_PeriphCLKConfig+0xe2>
            return HAL_TIMEOUT;
 8001580:	2003      	movs	r0, #3
 8001582:	e005      	b.n	8001590 <HAL_RCCEx_PeriphCLKConfig+0x104>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001584:	69d3      	ldr	r3, [r2, #28]
 8001586:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800158a:	61d3      	str	r3, [r2, #28]
 800158c:	e7bb      	b.n	8001506 <HAL_RCCEx_PeriphCLKConfig+0x7a>
  return HAL_OK;
 800158e:	2000      	movs	r0, #0
}
 8001590:	b002      	add	sp, #8
 8001592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001596:	bf00      	nop
 8001598:	40021000 	.word	0x40021000
 800159c:	40007000 	.word	0x40007000
 80015a0:	42420440 	.word	0x42420440

080015a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80015a4:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80015a6:	6a03      	ldr	r3, [r0, #32]
 80015a8:	f023 0301 	bic.w	r3, r3, #1
 80015ac:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80015ae:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80015b0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80015b2:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80015b4:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80015b8:	680d      	ldr	r5, [r1, #0]
 80015ba:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80015bc:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80015c0:	688d      	ldr	r5, [r1, #8]
 80015c2:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80015c4:	4d0b      	ldr	r5, [pc, #44]	; (80015f4 <TIM_OC1_SetConfig+0x50>)
 80015c6:	42a8      	cmp	r0, r5
 80015c8:	d006      	beq.n	80015d8 <TIM_OC1_SetConfig+0x34>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80015ca:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80015cc:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80015ce:	684a      	ldr	r2, [r1, #4]
 80015d0:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80015d2:	6203      	str	r3, [r0, #32]
}
 80015d4:	bc70      	pop	{r4, r5, r6}
 80015d6:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 80015d8:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80015dc:	68cd      	ldr	r5, [r1, #12]
 80015de:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80015e0:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80015e4:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80015e8:	694d      	ldr	r5, [r1, #20]
 80015ea:	698e      	ldr	r6, [r1, #24]
 80015ec:	4335      	orrs	r5, r6
 80015ee:	432c      	orrs	r4, r5
 80015f0:	e7eb      	b.n	80015ca <TIM_OC1_SetConfig+0x26>
 80015f2:	bf00      	nop
 80015f4:	40012c00 	.word	0x40012c00

080015f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80015f8:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80015fa:	6a03      	ldr	r3, [r0, #32]
 80015fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001600:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001602:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001604:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001606:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001608:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800160c:	680d      	ldr	r5, [r1, #0]
 800160e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001610:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001614:	688d      	ldr	r5, [r1, #8]
 8001616:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800161a:	4d0c      	ldr	r5, [pc, #48]	; (800164c <TIM_OC3_SetConfig+0x54>)
 800161c:	42a8      	cmp	r0, r5
 800161e:	d006      	beq.n	800162e <TIM_OC3_SetConfig+0x36>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001620:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001622:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001624:	684a      	ldr	r2, [r1, #4]
 8001626:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001628:	6203      	str	r3, [r0, #32]
}
 800162a:	bc70      	pop	{r4, r5, r6}
 800162c:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 800162e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001632:	68cd      	ldr	r5, [r1, #12]
 8001634:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8001638:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800163c:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001640:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001642:	698e      	ldr	r6, [r1, #24]
 8001644:	4335      	orrs	r5, r6
 8001646:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 800164a:	e7e9      	b.n	8001620 <TIM_OC3_SetConfig+0x28>
 800164c:	40012c00 	.word	0x40012c00

08001650 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001650:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001652:	6a03      	ldr	r3, [r0, #32]
 8001654:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001658:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800165a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800165c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800165e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001660:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001664:	680d      	ldr	r5, [r1, #0]
 8001666:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800166a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800166e:	688d      	ldr	r5, [r1, #8]
 8001670:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001674:	4d07      	ldr	r5, [pc, #28]	; (8001694 <TIM_OC4_SetConfig+0x44>)
 8001676:	42a8      	cmp	r0, r5
 8001678:	d006      	beq.n	8001688 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800167a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800167c:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800167e:	684a      	ldr	r2, [r1, #4]
 8001680:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001682:	6203      	str	r3, [r0, #32]
}
 8001684:	bc30      	pop	{r4, r5}
 8001686:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001688:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800168c:	694d      	ldr	r5, [r1, #20]
 800168e:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8001692:	e7f2      	b.n	800167a <TIM_OC4_SetConfig+0x2a>
 8001694:	40012c00 	.word	0x40012c00

08001698 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8001698:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800169a:	4a25      	ldr	r2, [pc, #148]	; (8001730 <TIM_Base_SetConfig+0x98>)
 800169c:	4290      	cmp	r0, r2
 800169e:	d014      	beq.n	80016ca <TIM_Base_SetConfig+0x32>
 80016a0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80016a4:	d02b      	beq.n	80016fe <TIM_Base_SetConfig+0x66>
 80016a6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80016aa:	4290      	cmp	r0, r2
 80016ac:	d022      	beq.n	80016f4 <TIM_Base_SetConfig+0x5c>
 80016ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80016b2:	4290      	cmp	r0, r2
 80016b4:	d037      	beq.n	8001726 <TIM_Base_SetConfig+0x8e>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80016b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80016ba:	694a      	ldr	r2, [r1, #20]
 80016bc:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80016be:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80016c0:	688b      	ldr	r3, [r1, #8]
 80016c2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80016c4:	680b      	ldr	r3, [r1, #0]
 80016c6:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80016c8:	e02a      	b.n	8001720 <TIM_Base_SetConfig+0x88>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80016ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80016ce:	684a      	ldr	r2, [r1, #4]
 80016d0:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80016d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80016d6:	68ca      	ldr	r2, [r1, #12]
 80016d8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80016da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80016de:	694a      	ldr	r2, [r1, #20]
 80016e0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80016e2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80016e4:	688b      	ldr	r3, [r1, #8]
 80016e6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80016e8:	680b      	ldr	r3, [r1, #0]
 80016ea:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80016ec:	690a      	ldr	r2, [r1, #16]
 80016ee:	4b10      	ldr	r3, [pc, #64]	; (8001730 <TIM_Base_SetConfig+0x98>)
 80016f0:	631a      	str	r2, [r3, #48]	; 0x30
 80016f2:	e015      	b.n	8001720 <TIM_Base_SetConfig+0x88>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80016f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80016f8:	684a      	ldr	r2, [r1, #4]
 80016fa:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80016fc:	e003      	b.n	8001706 <TIM_Base_SetConfig+0x6e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80016fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001702:	684a      	ldr	r2, [r1, #4]
 8001704:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8001706:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800170a:	68ca      	ldr	r2, [r1, #12]
 800170c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800170e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001712:	694a      	ldr	r2, [r1, #20]
 8001714:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001716:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001718:	688b      	ldr	r3, [r1, #8]
 800171a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800171c:	680b      	ldr	r3, [r1, #0]
 800171e:	6283      	str	r3, [r0, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8001720:	2301      	movs	r3, #1
 8001722:	6143      	str	r3, [r0, #20]
}
 8001724:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800172a:	684a      	ldr	r2, [r1, #4]
 800172c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800172e:	e7ea      	b.n	8001706 <TIM_Base_SetConfig+0x6e>
 8001730:	40012c00 	.word	0x40012c00

08001734 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8001734:	b340      	cbz	r0, 8001788 <HAL_TIM_PWM_Init+0x54>
{
 8001736:	b510      	push	{r4, lr}
 8001738:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800173a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800173e:	b1f3      	cbz	r3, 800177e <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8001740:	2302      	movs	r3, #2
 8001742:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001746:	4621      	mov	r1, r4
 8001748:	f851 0b04 	ldr.w	r0, [r1], #4
 800174c:	f7ff ffa4 	bl	8001698 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001750:	2301      	movs	r3, #1
 8001752:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001756:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800175a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800175e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001762:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001766:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800176a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800176e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8001772:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8001776:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800177a:	2000      	movs	r0, #0
}
 800177c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800177e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001782:	f7fe feff 	bl	8000584 <HAL_TIM_PWM_MspInit>
 8001786:	e7db      	b.n	8001740 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8001788:	2001      	movs	r0, #1
}
 800178a:	4770      	bx	lr

0800178c <TIM_OC2_SetConfig>:
{
 800178c:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800178e:	6a03      	ldr	r3, [r0, #32]
 8001790:	f023 0310 	bic.w	r3, r3, #16
 8001794:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001796:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8001798:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800179a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800179c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80017a0:	680d      	ldr	r5, [r1, #0]
 80017a2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 80017a6:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80017aa:	688d      	ldr	r5, [r1, #8]
 80017ac:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80017b0:	4d0c      	ldr	r5, [pc, #48]	; (80017e4 <TIM_OC2_SetConfig+0x58>)
 80017b2:	42a8      	cmp	r0, r5
 80017b4:	d006      	beq.n	80017c4 <TIM_OC2_SetConfig+0x38>
  TIMx->CR2 = tmpcr2;
 80017b6:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80017b8:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80017ba:	684a      	ldr	r2, [r1, #4]
 80017bc:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80017be:	6203      	str	r3, [r0, #32]
}
 80017c0:	bc70      	pop	{r4, r5, r6}
 80017c2:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 80017c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80017c8:	68cd      	ldr	r5, [r1, #12]
 80017ca:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80017ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80017d2:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80017d6:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80017d8:	698e      	ldr	r6, [r1, #24]
 80017da:	4335      	orrs	r5, r6
 80017dc:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 80017e0:	e7e9      	b.n	80017b6 <TIM_OC2_SetConfig+0x2a>
 80017e2:	bf00      	nop
 80017e4:	40012c00 	.word	0x40012c00

080017e8 <HAL_TIM_PWM_ConfigChannel>:
{
 80017e8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80017ea:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d060      	beq.n	80018b4 <HAL_TIM_PWM_ConfigChannel+0xcc>
 80017f2:	4604      	mov	r4, r0
 80017f4:	460d      	mov	r5, r1
 80017f6:	2301      	movs	r3, #1
 80017f8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 80017fc:	2a0c      	cmp	r2, #12
 80017fe:	d81a      	bhi.n	8001836 <HAL_TIM_PWM_ConfigChannel+0x4e>
 8001800:	e8df f002 	tbb	[pc, r2]
 8001804:	19191907 	.word	0x19191907
 8001808:	1919191d 	.word	0x1919191d
 800180c:	19191931 	.word	0x19191931
 8001810:	44          	.byte	0x44
 8001811:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001812:	6800      	ldr	r0, [r0, #0]
 8001814:	f7ff fec6 	bl	80015a4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001818:	6822      	ldr	r2, [r4, #0]
 800181a:	6993      	ldr	r3, [r2, #24]
 800181c:	f043 0308 	orr.w	r3, r3, #8
 8001820:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001822:	6822      	ldr	r2, [r4, #0]
 8001824:	6993      	ldr	r3, [r2, #24]
 8001826:	f023 0304 	bic.w	r3, r3, #4
 800182a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800182c:	6822      	ldr	r2, [r4, #0]
 800182e:	6993      	ldr	r3, [r2, #24]
 8001830:	6929      	ldr	r1, [r5, #16]
 8001832:	430b      	orrs	r3, r1
 8001834:	6193      	str	r3, [r2, #24]
  __HAL_UNLOCK(htim);
 8001836:	2000      	movs	r0, #0
 8001838:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800183c:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800183e:	6800      	ldr	r0, [r0, #0]
 8001840:	f7ff ffa4 	bl	800178c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001844:	6822      	ldr	r2, [r4, #0]
 8001846:	6993      	ldr	r3, [r2, #24]
 8001848:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800184c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800184e:	6822      	ldr	r2, [r4, #0]
 8001850:	6993      	ldr	r3, [r2, #24]
 8001852:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001856:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001858:	6822      	ldr	r2, [r4, #0]
 800185a:	6993      	ldr	r3, [r2, #24]
 800185c:	6929      	ldr	r1, [r5, #16]
 800185e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001862:	6193      	str	r3, [r2, #24]
      break;
 8001864:	e7e7      	b.n	8001836 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001866:	6800      	ldr	r0, [r0, #0]
 8001868:	f7ff fec6 	bl	80015f8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800186c:	6822      	ldr	r2, [r4, #0]
 800186e:	69d3      	ldr	r3, [r2, #28]
 8001870:	f043 0308 	orr.w	r3, r3, #8
 8001874:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001876:	6822      	ldr	r2, [r4, #0]
 8001878:	69d3      	ldr	r3, [r2, #28]
 800187a:	f023 0304 	bic.w	r3, r3, #4
 800187e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001880:	6822      	ldr	r2, [r4, #0]
 8001882:	69d3      	ldr	r3, [r2, #28]
 8001884:	6929      	ldr	r1, [r5, #16]
 8001886:	430b      	orrs	r3, r1
 8001888:	61d3      	str	r3, [r2, #28]
      break;
 800188a:	e7d4      	b.n	8001836 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800188c:	6800      	ldr	r0, [r0, #0]
 800188e:	f7ff fedf 	bl	8001650 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001892:	6822      	ldr	r2, [r4, #0]
 8001894:	69d3      	ldr	r3, [r2, #28]
 8001896:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800189a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800189c:	6822      	ldr	r2, [r4, #0]
 800189e:	69d3      	ldr	r3, [r2, #28]
 80018a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80018a4:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80018a6:	6822      	ldr	r2, [r4, #0]
 80018a8:	69d3      	ldr	r3, [r2, #28]
 80018aa:	6929      	ldr	r1, [r5, #16]
 80018ac:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80018b0:	61d3      	str	r3, [r2, #28]
      break;
 80018b2:	e7c0      	b.n	8001836 <HAL_TIM_PWM_ConfigChannel+0x4e>
  __HAL_LOCK(htim);
 80018b4:	2002      	movs	r0, #2
 80018b6:	e7c1      	b.n	800183c <HAL_TIM_PWM_ConfigChannel+0x54>

080018b8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80018b8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d02b      	beq.n	8001918 <HAL_TIMEx_MasterConfigSynchronization+0x60>
{
 80018c0:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 80018c2:	2301      	movs	r3, #1
 80018c4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018c8:	2302      	movs	r3, #2
 80018ca:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80018ce:	6804      	ldr	r4, [r0, #0]
 80018d0:	6863      	ldr	r3, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80018d2:	68a2      	ldr	r2, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80018d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80018d8:	680d      	ldr	r5, [r1, #0]
 80018da:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80018dc:	6063      	str	r3, [r4, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80018de:	6803      	ldr	r3, [r0, #0]
 80018e0:	4c0e      	ldr	r4, [pc, #56]	; (800191c <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 80018e2:	42a3      	cmp	r3, r4
 80018e4:	d00a      	beq.n	80018fc <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80018e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018ea:	d007      	beq.n	80018fc <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80018ec:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 80018f0:	42a3      	cmp	r3, r4
 80018f2:	d003      	beq.n	80018fc <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80018f4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80018f8:	42a3      	cmp	r3, r4
 80018fa:	d104      	bne.n	8001906 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80018fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001900:	6849      	ldr	r1, [r1, #4]
 8001902:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001904:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001906:	2301      	movs	r3, #1
 8001908:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800190c:	2300      	movs	r3, #0
 800190e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8001912:	4618      	mov	r0, r3
}
 8001914:	bc30      	pop	{r4, r5}
 8001916:	4770      	bx	lr
  __HAL_LOCK(htim);
 8001918:	2002      	movs	r0, #2
}
 800191a:	4770      	bx	lr
 800191c:	40012c00 	.word	0x40012c00

08001920 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001920:	b510      	push	{r4, lr}
 8001922:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001924:	6802      	ldr	r2, [r0, #0]
 8001926:	6913      	ldr	r3, [r2, #16]
 8001928:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800192c:	68c1      	ldr	r1, [r0, #12]
 800192e:	430b      	orrs	r3, r1
 8001930:	6113      	str	r3, [r2, #16]
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
  MODIFY_REG(huart->Instance->CR1,
 8001932:	6801      	ldr	r1, [r0, #0]
 8001934:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001936:	6883      	ldr	r3, [r0, #8]
 8001938:	6900      	ldr	r0, [r0, #16]
 800193a:	4303      	orrs	r3, r0
 800193c:	6960      	ldr	r0, [r4, #20]
 800193e:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8001940:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8001944:	f022 020c 	bic.w	r2, r2, #12
 8001948:	4313      	orrs	r3, r2
 800194a:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800194c:	6822      	ldr	r2, [r4, #0]
 800194e:	6953      	ldr	r3, [r2, #20]
 8001950:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001954:	69a1      	ldr	r1, [r4, #24]
 8001956:	430b      	orrs	r3, r1
 8001958:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 800195a:	6822      	ldr	r2, [r4, #0]
 800195c:	4b10      	ldr	r3, [pc, #64]	; (80019a0 <UART_SetConfig+0x80>)
 800195e:	429a      	cmp	r2, r3
 8001960:	d01a      	beq.n	8001998 <UART_SetConfig+0x78>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001962:	f7ff fd73 	bl	800144c <HAL_RCC_GetPCLK1Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001966:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800196a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800196e:	6863      	ldr	r3, [r4, #4]
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	fbb0 f3f3 	udiv	r3, r0, r3
 8001976:	6824      	ldr	r4, [r4, #0]
 8001978:	480a      	ldr	r0, [pc, #40]	; (80019a4 <UART_SetConfig+0x84>)
 800197a:	fba0 2103 	umull	r2, r1, r0, r3
 800197e:	0949      	lsrs	r1, r1, #5
 8001980:	2264      	movs	r2, #100	; 0x64
 8001982:	fb02 3311 	mls	r3, r2, r1, r3
 8001986:	011b      	lsls	r3, r3, #4
 8001988:	3332      	adds	r3, #50	; 0x32
 800198a:	fba0 2303 	umull	r2, r3, r0, r3
 800198e:	0109      	lsls	r1, r1, #4
 8001990:	eb01 1353 	add.w	r3, r1, r3, lsr #5
 8001994:	60a3      	str	r3, [r4, #8]
#endif /* USART_CR1_OVER8 */
}
 8001996:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8001998:	f7ff fd68 	bl	800146c <HAL_RCC_GetPCLK2Freq>
 800199c:	e7e3      	b.n	8001966 <UART_SetConfig+0x46>
 800199e:	bf00      	nop
 80019a0:	40013800 	.word	0x40013800
 80019a4:	51eb851f 	.word	0x51eb851f

080019a8 <HAL_UART_Init>:
  if (huart == NULL)
 80019a8:	b358      	cbz	r0, 8001a02 <HAL_UART_Init+0x5a>
{
 80019aa:	b510      	push	{r4, lr}
 80019ac:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80019ae:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80019b2:	b30b      	cbz	r3, 80019f8 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80019b4:	2324      	movs	r3, #36	; 0x24
 80019b6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80019ba:	6822      	ldr	r2, [r4, #0]
 80019bc:	68d3      	ldr	r3, [r2, #12]
 80019be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80019c2:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80019c4:	4620      	mov	r0, r4
 80019c6:	f7ff ffab 	bl	8001920 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019ca:	6822      	ldr	r2, [r4, #0]
 80019cc:	6913      	ldr	r3, [r2, #16]
 80019ce:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80019d2:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019d4:	6822      	ldr	r2, [r4, #0]
 80019d6:	6953      	ldr	r3, [r2, #20]
 80019d8:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80019dc:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80019de:	6822      	ldr	r2, [r4, #0]
 80019e0:	68d3      	ldr	r3, [r2, #12]
 80019e2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019e6:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019e8:	2000      	movs	r0, #0
 80019ea:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80019ec:	2320      	movs	r3, #32
 80019ee:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80019f2:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 80019f6:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80019f8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80019fc:	f7fe ff04 	bl	8000808 <HAL_UART_MspInit>
 8001a00:	e7d8      	b.n	80019b4 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8001a02:	2001      	movs	r0, #1
}
 8001a04:	4770      	bx	lr

08001a06 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001a06:	b084      	sub	sp, #16
 8001a08:	a801      	add	r0, sp, #4
 8001a0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8001a0e:	2000      	movs	r0, #0
 8001a10:	b004      	add	sp, #16
 8001a12:	4770      	bx	lr

08001a14 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8001a14:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8001a18:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001a1c:	045b      	lsls	r3, r3, #17
 8001a1e:	0c5b      	lsrs	r3, r3, #17
 8001a20:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8001a24:	2000      	movs	r0, #0
 8001a26:	4770      	bx	lr

08001a28 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001a28:	2000      	movs	r0, #0
 8001a2a:	4770      	bx	lr

08001a2c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001a2c:	b084      	sub	sp, #16
 8001a2e:	b410      	push	{r4}
 8001a30:	4604      	mov	r4, r0
 8001a32:	a802      	add	r0, sp, #8
 8001a34:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8001a3e:	2000      	movs	r0, #0
 8001a40:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8001a44:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8001a48:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50

  return HAL_OK;
}
 8001a4c:	bc10      	pop	{r4}
 8001a4e:	b004      	add	sp, #16
 8001a50:	4770      	bx	lr

08001a52 <USB_DevDisconnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8001a52:	2000      	movs	r0, #0
 8001a54:	4770      	bx	lr
	...

08001a58 <__libc_init_array>:
 8001a58:	b570      	push	{r4, r5, r6, lr}
 8001a5a:	2600      	movs	r6, #0
 8001a5c:	4d0c      	ldr	r5, [pc, #48]	; (8001a90 <__libc_init_array+0x38>)
 8001a5e:	4c0d      	ldr	r4, [pc, #52]	; (8001a94 <__libc_init_array+0x3c>)
 8001a60:	1b64      	subs	r4, r4, r5
 8001a62:	10a4      	asrs	r4, r4, #2
 8001a64:	42a6      	cmp	r6, r4
 8001a66:	d109      	bne.n	8001a7c <__libc_init_array+0x24>
 8001a68:	f000 f822 	bl	8001ab0 <_init>
 8001a6c:	2600      	movs	r6, #0
 8001a6e:	4d0a      	ldr	r5, [pc, #40]	; (8001a98 <__libc_init_array+0x40>)
 8001a70:	4c0a      	ldr	r4, [pc, #40]	; (8001a9c <__libc_init_array+0x44>)
 8001a72:	1b64      	subs	r4, r4, r5
 8001a74:	10a4      	asrs	r4, r4, #2
 8001a76:	42a6      	cmp	r6, r4
 8001a78:	d105      	bne.n	8001a86 <__libc_init_array+0x2e>
 8001a7a:	bd70      	pop	{r4, r5, r6, pc}
 8001a7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a80:	4798      	blx	r3
 8001a82:	3601      	adds	r6, #1
 8001a84:	e7ee      	b.n	8001a64 <__libc_init_array+0xc>
 8001a86:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a8a:	4798      	blx	r3
 8001a8c:	3601      	adds	r6, #1
 8001a8e:	e7f2      	b.n	8001a76 <__libc_init_array+0x1e>
 8001a90:	08001af4 	.word	0x08001af4
 8001a94:	08001af4 	.word	0x08001af4
 8001a98:	08001af4 	.word	0x08001af4
 8001a9c:	08001af8 	.word	0x08001af8

08001aa0 <memset>:
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	4402      	add	r2, r0
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d100      	bne.n	8001aaa <memset+0xa>
 8001aa8:	4770      	bx	lr
 8001aaa:	f803 1b01 	strb.w	r1, [r3], #1
 8001aae:	e7f9      	b.n	8001aa4 <memset+0x4>

08001ab0 <_init>:
 8001ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ab2:	bf00      	nop
 8001ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ab6:	bc08      	pop	{r3}
 8001ab8:	469e      	mov	lr, r3
 8001aba:	4770      	bx	lr

08001abc <_fini>:
 8001abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001abe:	bf00      	nop
 8001ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ac2:	bc08      	pop	{r3}
 8001ac4:	469e      	mov	lr, r3
 8001ac6:	4770      	bx	lr
