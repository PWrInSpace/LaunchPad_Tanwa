
tanwa.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ad4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08001be0  08001be0  00011be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c0c  08001c0c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001c0c  08001c0c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001c0c  08001c0c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c0c  08001c0c  00011c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001c10  08001c10  00011c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001c14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  2000000c  08001c20  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  08001c20  00020140  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001119a  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002872  00000000  00000000  000311cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b48  00000000  00000000  00033a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ae0  00000000  00000000  00034590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a689  00000000  00000000  00035070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011bd1  00000000  00000000  0004f6f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e142  00000000  00000000  000612ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ef40c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d8c  00000000  00000000  000ef460  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00009c4f  00000000  00000000  000f11ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001bc8 	.word	0x08001bc8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001bc8 	.word	0x08001bc8

0800014c <_ZN7IgniterC1EP12GPIO_TypeDeftS1_t>:
#include <Igniter.hh>

//(names of args start with '_' sign)
Igniter::Igniter(GPIO_TypeDef* _GPIO_PORT_IGNITER, uint16_t _PIN_IGNITER, GPIO_TypeDef* _IGN_GPIO_PORT_TEST_CON, uint16_t _IGN_PIN_TEST_CON){
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	603b      	str	r3, [r7, #0]
 8000158:	4613      	mov	r3, r2
 800015a:	80fb      	strh	r3, [r7, #6]
	GPIO_PORT_IGNITER = _GPIO_PORT_IGNITER;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	68ba      	ldr	r2, [r7, #8]
 8000160:	601a      	str	r2, [r3, #0]
	PIN_IGNITER = _PIN_IGNITER;
 8000162:	68fb      	ldr	r3, [r7, #12]
 8000164:	88fa      	ldrh	r2, [r7, #6]
 8000166:	809a      	strh	r2, [r3, #4]
	GPIO_PORT_TEST_CON = _IGN_GPIO_PORT_TEST_CON;
 8000168:	68fb      	ldr	r3, [r7, #12]
 800016a:	683a      	ldr	r2, [r7, #0]
 800016c:	609a      	str	r2, [r3, #8]
	PIN_TEST_CON = _IGN_PIN_TEST_CON;
 800016e:	68fb      	ldr	r3, [r7, #12]
 8000170:	8b3a      	ldrh	r2, [r7, #24]
 8000172:	819a      	strh	r2, [r3, #12]
}
 8000174:	68fb      	ldr	r3, [r7, #12]
 8000176:	4618      	mov	r0, r3
 8000178:	3714      	adds	r7, #20
 800017a:	46bd      	mov	sp, r7
 800017c:	bc80      	pop	{r7}
 800017e:	4770      	bx	lr

08000180 <_ZNK7Igniter12is_connectedEv>:

bool Igniter::is_connected() const{
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(GPIO_PORT_TEST_CON, PIN_TEST_CON) == GPIO_PIN_SET)
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	689a      	ldr	r2, [r3, #8]
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	899b      	ldrh	r3, [r3, #12]
 8000190:	4619      	mov	r1, r3
 8000192:	4610      	mov	r0, r2
 8000194:	f000 fef4 	bl	8000f80 <HAL_GPIO_ReadPin>
 8000198:	4603      	mov	r3, r0
 800019a:	2b01      	cmp	r3, #1
 800019c:	bf0c      	ite	eq
 800019e:	2301      	moveq	r3, #1
 80001a0:	2300      	movne	r3, #0
 80001a2:	b2db      	uxtb	r3, r3
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	d001      	beq.n	80001ac <_ZNK7Igniter12is_connectedEv+0x2c>
		return 1;
 80001a8:	2301      	movs	r3, #1
 80001aa:	e000      	b.n	80001ae <_ZNK7Igniter12is_connectedEv+0x2e>
	else
		return 0;
 80001ac:	2300      	movs	r3, #0
}
 80001ae:	4618      	mov	r0, r3
 80001b0:	3708      	adds	r7, #8
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bd80      	pop	{r7, pc}

080001b6 <_ZN7Igniter4FIREEv>:

void Igniter::FIRE(){
 80001b6:	b580      	push	{r7, lr}
 80001b8:	b082      	sub	sp, #8
 80001ba:	af00      	add	r7, sp, #0
 80001bc:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIO_PORT_IGNITER, PIN_IGNITER, GPIO_PIN_SET);
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	6818      	ldr	r0, [r3, #0]
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	889b      	ldrh	r3, [r3, #4]
 80001c6:	2201      	movs	r2, #1
 80001c8:	4619      	mov	r1, r3
 80001ca:	f000 fedf 	bl	8000f8c <HAL_GPIO_WritePin>
}
 80001ce:	bf00      	nop
 80001d0:	3708      	adds	r7, #8
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bd80      	pop	{r7, pc}

080001d6 <_ZN5MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDeftS1_tS1_t>:
#include <L298.hh>

//make struct 'Motor', fill it, return pointer to it    (names for args start with '_' sign)
Motor::Motor(GPIO_TypeDef* _GPIO_PORT_IN1, uint16_t _PIN_IN1, GPIO_TypeDef* _GPIO_PORT_IN2, uint16_t _PIN_IN2,
 80001d6:	b480      	push	{r7}
 80001d8:	b085      	sub	sp, #20
 80001da:	af00      	add	r7, sp, #0
 80001dc:	60f8      	str	r0, [r7, #12]
 80001de:	60b9      	str	r1, [r7, #8]
 80001e0:	603b      	str	r3, [r7, #0]
 80001e2:	4613      	mov	r3, r2
 80001e4:	80fb      	strh	r3, [r7, #6]
		TIM_HandleTypeDef* _TIM_NR_EN, uint16_t _TIM_CHANNEL_EN, GPIO_TypeDef* _GPIO_PORT_LS_OPEN, uint16_t _PIN_LS_OPEN,
		GPIO_TypeDef* _GPIO_PORT_LS_CLOSE, uint16_t _PIN_LS_CLOSE){

	GPIO_PORT_IN1 = _GPIO_PORT_IN1;
 80001e6:	68fb      	ldr	r3, [r7, #12]
 80001e8:	68ba      	ldr	r2, [r7, #8]
 80001ea:	601a      	str	r2, [r3, #0]
	PIN_IN1 = _PIN_IN1;
 80001ec:	68fb      	ldr	r3, [r7, #12]
 80001ee:	88fa      	ldrh	r2, [r7, #6]
 80001f0:	809a      	strh	r2, [r3, #4]
	GPIO_PORT_IN2 = _GPIO_PORT_IN2;
 80001f2:	68fb      	ldr	r3, [r7, #12]
 80001f4:	683a      	ldr	r2, [r7, #0]
 80001f6:	609a      	str	r2, [r3, #8]
	PIN_IN2 = _PIN_IN2;
 80001f8:	68fb      	ldr	r3, [r7, #12]
 80001fa:	8b3a      	ldrh	r2, [r7, #24]
 80001fc:	819a      	strh	r2, [r3, #12]
	TIM_NR_EN = _TIM_NR_EN;
 80001fe:	68fb      	ldr	r3, [r7, #12]
 8000200:	69fa      	ldr	r2, [r7, #28]
 8000202:	611a      	str	r2, [r3, #16]
	TIM_CHANNEL_EN = _TIM_CHANNEL_EN;
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	8c3a      	ldrh	r2, [r7, #32]
 8000208:	829a      	strh	r2, [r3, #20]
	GPIO_PORT_LS_OPEN = _GPIO_PORT_LS_OPEN;
 800020a:	68fb      	ldr	r3, [r7, #12]
 800020c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800020e:	619a      	str	r2, [r3, #24]
	PIN_LS_OPEN = _PIN_LS_OPEN;
 8000210:	68fb      	ldr	r3, [r7, #12]
 8000212:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000214:	839a      	strh	r2, [r3, #28]
	GPIO_PORT_LS_CLOSE = _GPIO_PORT_LS_CLOSE;
 8000216:	68fb      	ldr	r3, [r7, #12]
 8000218:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800021a:	621a      	str	r2, [r3, #32]
	PIN_LS_CLOSE = _PIN_LS_CLOSE;
 800021c:	68fb      	ldr	r3, [r7, #12]
 800021e:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000220:	849a      	strh	r2, [r3, #36]	; 0x24
}
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	4618      	mov	r0, r3
 8000226:	3714      	adds	r7, #20
 8000228:	46bd      	mov	sp, r7
 800022a:	bc80      	pop	{r7}
 800022c:	4770      	bx	lr

0800022e <_ZN5Motor4stopEv>:


void Motor::stop(){
 800022e:	b580      	push	{r7, lr}
 8000230:	b082      	sub	sp, #8
 8000232:	af00      	add	r7, sp, #0
 8000234:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(TIM_NR_EN, TIM_CHANNEL_EN, 0);
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	8a9b      	ldrh	r3, [r3, #20]
 800023a:	2b00      	cmp	r3, #0
 800023c:	d105      	bne.n	800024a <_ZN5Motor4stopEv+0x1c>
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	691b      	ldr	r3, [r3, #16]
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	2200      	movs	r2, #0
 8000246:	635a      	str	r2, [r3, #52]	; 0x34
 8000248:	e018      	b.n	800027c <_ZN5Motor4stopEv+0x4e>
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	8a9b      	ldrh	r3, [r3, #20]
 800024e:	2b04      	cmp	r3, #4
 8000250:	d105      	bne.n	800025e <_ZN5Motor4stopEv+0x30>
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	691b      	ldr	r3, [r3, #16]
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	2200      	movs	r2, #0
 800025a:	639a      	str	r2, [r3, #56]	; 0x38
 800025c:	e00e      	b.n	800027c <_ZN5Motor4stopEv+0x4e>
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	8a9b      	ldrh	r3, [r3, #20]
 8000262:	2b08      	cmp	r3, #8
 8000264:	d105      	bne.n	8000272 <_ZN5Motor4stopEv+0x44>
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	691b      	ldr	r3, [r3, #16]
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	2200      	movs	r2, #0
 800026e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000270:	e004      	b.n	800027c <_ZN5Motor4stopEv+0x4e>
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	691b      	ldr	r3, [r3, #16]
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	2200      	movs	r2, #0
 800027a:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_GPIO_WritePin(GPIO_PORT_IN1, PIN_IN1, GPIO_PIN_RESET);
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	6818      	ldr	r0, [r3, #0]
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	889b      	ldrh	r3, [r3, #4]
 8000284:	2200      	movs	r2, #0
 8000286:	4619      	mov	r1, r3
 8000288:	f000 fe80 	bl	8000f8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIO_PORT_IN2, PIN_IN2, GPIO_PIN_RESET);
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	6898      	ldr	r0, [r3, #8]
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	899b      	ldrh	r3, [r3, #12]
 8000294:	2200      	movs	r2, #0
 8000296:	4619      	mov	r1, r3
 8000298:	f000 fe78 	bl	8000f8c <HAL_GPIO_WritePin>
;
}
 800029c:	bf00      	nop
 800029e:	3708      	adds	r7, #8
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}

080002a4 <_ZN5Motor4openEv>:

void Motor::open(){
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(TIM_NR_EN, TIM_CHANNEL_EN, 1000);
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	8a9b      	ldrh	r3, [r3, #20]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d106      	bne.n	80002c2 <_ZN5Motor4openEv+0x1e>
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	691b      	ldr	r3, [r3, #16]
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80002be:	635a      	str	r2, [r3, #52]	; 0x34
 80002c0:	e01b      	b.n	80002fa <_ZN5Motor4openEv+0x56>
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	8a9b      	ldrh	r3, [r3, #20]
 80002c6:	2b04      	cmp	r3, #4
 80002c8:	d106      	bne.n	80002d8 <_ZN5Motor4openEv+0x34>
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	691b      	ldr	r3, [r3, #16]
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80002d4:	639a      	str	r2, [r3, #56]	; 0x38
 80002d6:	e010      	b.n	80002fa <_ZN5Motor4openEv+0x56>
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	8a9b      	ldrh	r3, [r3, #20]
 80002dc:	2b08      	cmp	r3, #8
 80002de:	d106      	bne.n	80002ee <_ZN5Motor4openEv+0x4a>
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	691b      	ldr	r3, [r3, #16]
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80002ea:	63da      	str	r2, [r3, #60]	; 0x3c
 80002ec:	e005      	b.n	80002fa <_ZN5Motor4openEv+0x56>
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	691b      	ldr	r3, [r3, #16]
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80002f8:	641a      	str	r2, [r3, #64]	; 0x40
	do{
		HAL_GPIO_WritePin(GPIO_PORT_IN1, PIN_IN1, GPIO_PIN_RESET);
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	6818      	ldr	r0, [r3, #0]
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	889b      	ldrh	r3, [r3, #4]
 8000302:	2200      	movs	r2, #0
 8000304:	4619      	mov	r1, r3
 8000306:	f000 fe41 	bl	8000f8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_PORT_IN2, PIN_IN2, GPIO_PIN_RESET);
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	6898      	ldr	r0, [r3, #8]
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	899b      	ldrh	r3, [r3, #12]
 8000312:	2200      	movs	r2, #0
 8000314:	4619      	mov	r1, r3
 8000316:	f000 fe39 	bl	8000f8c <HAL_GPIO_WritePin>
	}while(HAL_GPIO_ReadPin(GPIO_PORT_LS_OPEN, PIN_LS_OPEN) == GPIO_PIN_RESET);
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	699a      	ldr	r2, [r3, #24]
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	8b9b      	ldrh	r3, [r3, #28]
 8000322:	4619      	mov	r1, r3
 8000324:	4610      	mov	r0, r2
 8000326:	f000 fe2b 	bl	8000f80 <HAL_GPIO_ReadPin>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	bf0c      	ite	eq
 8000330:	2301      	moveq	r3, #1
 8000332:	2300      	movne	r3, #0
 8000334:	b2db      	uxtb	r3, r3
 8000336:	2b00      	cmp	r3, #0
 8000338:	d000      	beq.n	800033c <_ZN5Motor4openEv+0x98>
	do{
 800033a:	e7de      	b.n	80002fa <_ZN5Motor4openEv+0x56>
	stop();
 800033c:	6878      	ldr	r0, [r7, #4]
 800033e:	f7ff ff76 	bl	800022e <_ZN5Motor4stopEv>
}
 8000342:	bf00      	nop
 8000344:	3708      	adds	r7, #8
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}

0800034a <_ZN5Motor5closeEv>:

void Motor::close(){
 800034a:	b580      	push	{r7, lr}
 800034c:	b082      	sub	sp, #8
 800034e:	af00      	add	r7, sp, #0
 8000350:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(TIM_NR_EN, TIM_CHANNEL_EN, 1000);
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	8a9b      	ldrh	r3, [r3, #20]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d106      	bne.n	8000368 <_ZN5Motor5closeEv+0x1e>
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	691b      	ldr	r3, [r3, #16]
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000364:	635a      	str	r2, [r3, #52]	; 0x34
 8000366:	e01b      	b.n	80003a0 <_ZN5Motor5closeEv+0x56>
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	8a9b      	ldrh	r3, [r3, #20]
 800036c:	2b04      	cmp	r3, #4
 800036e:	d106      	bne.n	800037e <_ZN5Motor5closeEv+0x34>
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	691b      	ldr	r3, [r3, #16]
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800037a:	639a      	str	r2, [r3, #56]	; 0x38
 800037c:	e010      	b.n	80003a0 <_ZN5Motor5closeEv+0x56>
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	8a9b      	ldrh	r3, [r3, #20]
 8000382:	2b08      	cmp	r3, #8
 8000384:	d106      	bne.n	8000394 <_ZN5Motor5closeEv+0x4a>
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	691b      	ldr	r3, [r3, #16]
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000390:	63da      	str	r2, [r3, #60]	; 0x3c
 8000392:	e005      	b.n	80003a0 <_ZN5Motor5closeEv+0x56>
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	691b      	ldr	r3, [r3, #16]
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800039e:	641a      	str	r2, [r3, #64]	; 0x40
	do{
		HAL_GPIO_WritePin(GPIO_PORT_IN1, PIN_IN1, GPIO_PIN_RESET);
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	6818      	ldr	r0, [r3, #0]
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	889b      	ldrh	r3, [r3, #4]
 80003a8:	2200      	movs	r2, #0
 80003aa:	4619      	mov	r1, r3
 80003ac:	f000 fdee 	bl	8000f8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_PORT_IN2, PIN_IN2, GPIO_PIN_SET);
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	6898      	ldr	r0, [r3, #8]
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	899b      	ldrh	r3, [r3, #12]
 80003b8:	2201      	movs	r2, #1
 80003ba:	4619      	mov	r1, r3
 80003bc:	f000 fde6 	bl	8000f8c <HAL_GPIO_WritePin>
	}while( HAL_GPIO_ReadPin(GPIO_PORT_LS_CLOSE, PIN_LS_CLOSE) == GPIO_PIN_RESET);
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	6a1a      	ldr	r2, [r3, #32]
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80003c8:	4619      	mov	r1, r3
 80003ca:	4610      	mov	r0, r2
 80003cc:	f000 fdd8 	bl	8000f80 <HAL_GPIO_ReadPin>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	bf0c      	ite	eq
 80003d6:	2301      	moveq	r3, #1
 80003d8:	2300      	movne	r3, #0
 80003da:	b2db      	uxtb	r3, r3
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d000      	beq.n	80003e2 <_ZN5Motor5closeEv+0x98>
	do{
 80003e0:	e7de      	b.n	80003a0 <_ZN5Motor5closeEv+0x56>
	stop();
 80003e2:	6878      	ldr	r0, [r7, #4]
 80003e4:	f7ff ff23 	bl	800022e <_ZN5Motor4stopEv>
}
 80003e8:	bf00      	nop
 80003ea:	3708      	adds	r7, #8
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}

080003f0 <_ZN5Motor15test_open_closeEv>:

void Motor::test_open_close(){
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
	open();
 80003f8:	6878      	ldr	r0, [r7, #4]
 80003fa:	f7ff ff53 	bl	80002a4 <_ZN5Motor4openEv>
	close();
 80003fe:	6878      	ldr	r0, [r7, #4]
 8000400:	f7ff ffa3 	bl	800034a <_ZN5Motor5closeEv>
	open();
 8000404:	6878      	ldr	r0, [r7, #4]
 8000406:	f7ff ff4d 	bl	80002a4 <_ZN5Motor4openEv>
	close();
 800040a:	6878      	ldr	r0, [r7, #4]
 800040c:	f7ff ff9d 	bl	800034a <_ZN5Motor5closeEv>
	stop();
 8000410:	6878      	ldr	r0, [r7, #4]
 8000412:	f7ff ff0c 	bl	800022e <_ZN5Motor4stopEv>
}
 8000416:	bf00      	nop
 8000418:	3708      	adds	r7, #8
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
	...

08000420 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000420:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000424:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000426:	2400      	movs	r4, #0
 8000428:	9404      	str	r4, [sp, #16]
 800042a:	9405      	str	r4, [sp, #20]
 800042c:	9406      	str	r4, [sp, #24]
 800042e:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000430:	4b3c      	ldr	r3, [pc, #240]	; (8000524 <MX_GPIO_Init+0x104>)
 8000432:	699a      	ldr	r2, [r3, #24]
 8000434:	f042 0210 	orr.w	r2, r2, #16
 8000438:	619a      	str	r2, [r3, #24]
 800043a:	699a      	ldr	r2, [r3, #24]
 800043c:	f002 0210 	and.w	r2, r2, #16
 8000440:	9200      	str	r2, [sp, #0]
 8000442:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000444:	699a      	ldr	r2, [r3, #24]
 8000446:	f042 0220 	orr.w	r2, r2, #32
 800044a:	619a      	str	r2, [r3, #24]
 800044c:	699a      	ldr	r2, [r3, #24]
 800044e:	f002 0220 	and.w	r2, r2, #32
 8000452:	9201      	str	r2, [sp, #4]
 8000454:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000456:	699a      	ldr	r2, [r3, #24]
 8000458:	f042 0204 	orr.w	r2, r2, #4
 800045c:	619a      	str	r2, [r3, #24]
 800045e:	699a      	ldr	r2, [r3, #24]
 8000460:	f002 0204 	and.w	r2, r2, #4
 8000464:	9202      	str	r2, [sp, #8]
 8000466:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000468:	699a      	ldr	r2, [r3, #24]
 800046a:	f042 0208 	orr.w	r2, r2, #8
 800046e:	619a      	str	r2, [r3, #24]
 8000470:	699b      	ldr	r3, [r3, #24]
 8000472:	f003 0308 	and.w	r3, r3, #8
 8000476:	9303      	str	r3, [sp, #12]
 8000478:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUILD_IN_LED_GPIO_Port, BUILD_IN_LED_Pin, GPIO_PIN_RESET);
 800047a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 800052c <MX_GPIO_Init+0x10c>
 800047e:	4622      	mov	r2, r4
 8000480:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000484:	4648      	mov	r0, r9
 8000486:	f000 fd81 	bl	8000f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PQD_D1_Pin|PQD_D2_Pin|IGN_FIRE_Pin, GPIO_PIN_RESET);
 800048a:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8000530 <MX_GPIO_Init+0x110>
 800048e:	4622      	mov	r2, r4
 8000490:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
 8000494:	4640      	mov	r0, r8
 8000496:	f000 fd79 	bl	8000f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HX1_SCL_Pin|QD_D2_Pin|QD_D1_Pin|DEPR_CLOSE_Pin
 800049a:	4d23      	ldr	r5, [pc, #140]	; (8000528 <MX_GPIO_Init+0x108>)
 800049c:	4622      	mov	r2, r4
 800049e:	f24e 21d0 	movw	r1, #58064	; 0xe2d0
 80004a2:	4628      	mov	r0, r5
 80004a4:	f000 fd72 	bl	8000f8c <HAL_GPIO_WritePin>
                          |DEPR_OPEN_Pin|FILL_CLOSE_Pin|FILL_OPEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUILD_IN_LED_Pin;
 80004a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004ac:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ae:	2701      	movs	r7, #1
 80004b0:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b2:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b4:	2602      	movs	r6, #2
 80004b6:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(BUILD_IN_LED_GPIO_Port, &GPIO_InitStruct);
 80004b8:	a904      	add	r1, sp, #16
 80004ba:	4648      	mov	r0, r9
 80004bc:	f000 fc50 	bl	8000d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IGN_TEST_CON_Pin;
 80004c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80004c4:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004c6:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c8:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(IGN_TEST_CON_GPIO_Port, &GPIO_InitStruct);
 80004ca:	a904      	add	r1, sp, #16
 80004cc:	4648      	mov	r0, r9
 80004ce:	f000 fc47 	bl	8000d60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = HX2_SDA_Pin|HX2_SCL_Pin|DEPR_C_LIMIT_SW_Pin|DEPR_O_LIMIT_SW_Pin
 80004d2:	f248 3330 	movw	r3, #33584	; 0x8330
 80004d6:	9304      	str	r3, [sp, #16]
                          |FILL_C_LIMIT_SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004d8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004da:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004dc:	a904      	add	r1, sp, #16
 80004de:	4640      	mov	r0, r8
 80004e0:	f000 fc3e 	bl	8000d60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = PQD_D1_Pin|PQD_D2_Pin|IGN_FIRE_Pin;
 80004e4:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80004e8:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ea:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ec:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ee:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f0:	a904      	add	r1, sp, #16
 80004f2:	4640      	mov	r0, r8
 80004f4:	f000 fc34 	bl	8000d60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = HX1_SDA_Pin|FILL_O_LIMIT_SW_Pin;
 80004f8:	f241 0308 	movw	r3, #4104	; 0x1008
 80004fc:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004fe:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000500:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000502:	a904      	add	r1, sp, #16
 8000504:	4628      	mov	r0, r5
 8000506:	f000 fc2b 	bl	8000d60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = HX1_SCL_Pin|QD_D2_Pin|QD_D1_Pin|DEPR_CLOSE_Pin
 800050a:	f24e 23d0 	movw	r3, #58064	; 0xe2d0
 800050e:	9304      	str	r3, [sp, #16]
                          |DEPR_OPEN_Pin|FILL_CLOSE_Pin|FILL_OPEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000510:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000512:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000514:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000516:	a904      	add	r1, sp, #16
 8000518:	4628      	mov	r0, r5
 800051a:	f000 fc21 	bl	8000d60 <HAL_GPIO_Init>

}
 800051e:	b009      	add	sp, #36	; 0x24
 8000520:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000524:	40021000 	.word	0x40021000
 8000528:	40010c00 	.word	0x40010c00
 800052c:	40011000 	.word	0x40011000
 8000530:	40010800 	.word	0x40010800

08000534 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b0a2      	sub	sp, #136	; 0x88
 8000538:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053a:	f000 fb7f 	bl	8000c3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053e:	f000 f8e3 	bl	8000708 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000542:	f7ff ff6d 	bl	8000420 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000546:	f000 fa8d 	bl	8000a64 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800054a:	f000 f9f1 	bl	8000930 <MX_TIM3_Init>
  MX_TIM4_Init();
 800054e:	f000 fa49 	bl	80009e4 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8000552:	f000 faa1 	bl	8000a98 <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_Delay(1000);
 8000556:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800055a:	f000 fb93 	bl	8000c84 <HAL_Delay>

   // char* buff;
    //memset(buff ,0,sizeof(buff));
    // HAL_TIM_Base_Start_IT(&htim2);
    __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 800055e:	4b63      	ldr	r3, [pc, #396]	; (80006ec <main+0x1b8>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	68da      	ldr	r2, [r3, #12]
 8000564:	4b61      	ldr	r3, [pc, #388]	; (80006ec <main+0x1b8>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f042 0220 	orr.w	r2, r2, #32
 800056c:	60da      	str	r2, [r3, #12]
    /* USER CODE END 2 */

    /* USER CODE BEGIN WHILE */

    // INIT
    Igniter igniter(IGN_FIRE_GPIO_Port, IGN_FIRE_Pin, IGN_TEST_CON_GPIO_Port, IGN_TEST_CON_Pin);
 800056e:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8000572:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000576:	9300      	str	r3, [sp, #0]
 8000578:	4b5d      	ldr	r3, [pc, #372]	; (80006f0 <main+0x1bc>)
 800057a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800057e:	495d      	ldr	r1, [pc, #372]	; (80006f4 <main+0x1c0>)
 8000580:	f7ff fde4 	bl	800014c <_ZN7IgniterC1EP12GPIO_TypeDeftS1_t>
    Motor Fill(FILL_OPEN_GPIO_Port, FILL_OPEN_Pin, FILL_CLOSE_GPIO_Port, FILL_CLOSE_Pin, &htim3, TIM_CHANNEL_3, FILL_O_LIMIT_SW_GPIO_Port, FILL_O_LIMIT_SW_Pin, FILL_C_LIMIT_SW_GPIO_Port, FILL_C_LIMIT_SW_Pin);
 8000584:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8000588:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800058c:	9306      	str	r3, [sp, #24]
 800058e:	4b59      	ldr	r3, [pc, #356]	; (80006f4 <main+0x1c0>)
 8000590:	9305      	str	r3, [sp, #20]
 8000592:	2308      	movs	r3, #8
 8000594:	9304      	str	r3, [sp, #16]
 8000596:	4b58      	ldr	r3, [pc, #352]	; (80006f8 <main+0x1c4>)
 8000598:	9303      	str	r3, [sp, #12]
 800059a:	2308      	movs	r3, #8
 800059c:	9302      	str	r3, [sp, #8]
 800059e:	4b57      	ldr	r3, [pc, #348]	; (80006fc <main+0x1c8>)
 80005a0:	9301      	str	r3, [sp, #4]
 80005a2:	2380      	movs	r3, #128	; 0x80
 80005a4:	9300      	str	r3, [sp, #0]
 80005a6:	4b54      	ldr	r3, [pc, #336]	; (80006f8 <main+0x1c4>)
 80005a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005ac:	4952      	ldr	r1, [pc, #328]	; (80006f8 <main+0x1c4>)
 80005ae:	f7ff fe12 	bl	80001d6 <_ZN5MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDeftS1_tS1_t>
    Motor QD(QD_D1_GPIO_Port, QD_D1_Pin, QD_D2_GPIO_Port, QD_D2_Pin, &htim3, TIM_CHANNEL_3, nullptr, 0, nullptr, 0);
 80005b2:	1d38      	adds	r0, r7, #4
 80005b4:	2300      	movs	r3, #0
 80005b6:	9306      	str	r3, [sp, #24]
 80005b8:	2300      	movs	r3, #0
 80005ba:	9305      	str	r3, [sp, #20]
 80005bc:	2300      	movs	r3, #0
 80005be:	9304      	str	r3, [sp, #16]
 80005c0:	2300      	movs	r3, #0
 80005c2:	9303      	str	r3, [sp, #12]
 80005c4:	2308      	movs	r3, #8
 80005c6:	9302      	str	r3, [sp, #8]
 80005c8:	4b4c      	ldr	r3, [pc, #304]	; (80006fc <main+0x1c8>)
 80005ca:	9301      	str	r3, [sp, #4]
 80005cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	4b49      	ldr	r3, [pc, #292]	; (80006f8 <main+0x1c4>)
 80005d4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80005d8:	4947      	ldr	r1, [pc, #284]	; (80006f8 <main+0x1c4>)
 80005da:	f7ff fdfc 	bl	80001d6 <_ZN5MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDeftS1_tS1_t>

    uint16_t signal = 999; //placeholder, we need to do some signal managing with Michał
 80005de:	f240 33e7 	movw	r3, #999	; 0x3e7
 80005e2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

    state = 0; //touch only for tests
 80005e6:	4b46      	ldr	r3, [pc, #280]	; (8000700 <main+0x1cc>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	701a      	strb	r2, [r3, #0]
    while (1)
    {
  	  switch(state){
 80005ec:	4b44      	ldr	r3, [pc, #272]	; (8000700 <main+0x1cc>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	2b06      	cmp	r3, #6
 80005f2:	d8fb      	bhi.n	80005ec <main+0xb8>
 80005f4:	a201      	add	r2, pc, #4	; (adr r2, 80005fc <main+0xc8>)
 80005f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005fa:	bf00      	nop
 80005fc:	08000619 	.word	0x08000619
 8000600:	08000647 	.word	0x08000647
 8000604:	08000657 	.word	0x08000657
 8000608:	08000681 	.word	0x08000681
 800060c:	080006af 	.word	0x080006af
 8000610:	080006b7 	.word	0x080006b7
 8000614:	080006d5 	.word	0x080006d5
  		  case 0: //test state
  			  if(igniter.is_connected()){
 8000618:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800061c:	4618      	mov	r0, r3
 800061e:	f7ff fdaf 	bl	8000180 <_ZNK7Igniter12is_connectedEv>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d004      	beq.n	8000632 <main+0xfe>
  				  HAL_GPIO_TogglePin(BUILD_IN_LED_GPIO_Port, BUILD_IN_LED_Pin);
 8000628:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800062c:	4830      	ldr	r0, [pc, #192]	; (80006f0 <main+0x1bc>)
 800062e:	f000 fcb3 	bl	8000f98 <HAL_GPIO_TogglePin>
  			  }
  			  HAL_Delay(1000);
 8000632:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000636:	f000 fb25 	bl	8000c84 <HAL_Delay>

  			  Fill.test_open_close();
 800063a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800063e:	4618      	mov	r0, r3
 8000640:	f7ff fed6 	bl	80003f0 <_ZN5Motor15test_open_closeEv>
  			  //place for random tests

  			  break;
 8000644:	e051      	b.n	80006ea <main+0x1b6>
  		  case 1:	//IDLE
  			  if(signal == 23){  //signal == ready
 8000646:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800064a:	2b17      	cmp	r3, #23
 800064c:	d146      	bne.n	80006dc <main+0x1a8>
  				  //TODO: send ready
  				  state = 2;
 800064e:	4b2c      	ldr	r3, [pc, #176]	; (8000700 <main+0x1cc>)
 8000650:	2202      	movs	r2, #2
 8000652:	701a      	strb	r2, [r3, #0]
  			  }
  			  break;
 8000654:	e042      	b.n	80006dc <main+0x1a8>
  		  case 2:	//ARMED(hard)
  			  if(igniter.is_connected() && signal == 'h'){
 8000656:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff fd90 	bl	8000180 <_ZNK7Igniter12is_connectedEv>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d005      	beq.n	8000672 <main+0x13e>
 8000666:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800066a:	2b68      	cmp	r3, #104	; 0x68
 800066c:	d101      	bne.n	8000672 <main+0x13e>
 800066e:	2301      	movs	r3, #1
 8000670:	e000      	b.n	8000674 <main+0x140>
 8000672:	2300      	movs	r3, #0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d033      	beq.n	80006e0 <main+0x1ac>
  			  	  state = 3;
 8000678:	4b21      	ldr	r3, [pc, #132]	; (8000700 <main+0x1cc>)
 800067a:	2203      	movs	r2, #3
 800067c:	701a      	strb	r2, [r3, #0]
  			  }
  			  break;
 800067e:	e02f      	b.n	80006e0 <main+0x1ac>
  		  case 3:	//ARMED(soft)
  			  	  if(signal == 666){		//signal == fire
 8000680:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8000684:	f240 229a 	movw	r2, #666	; 0x29a
 8000688:	4293      	cmp	r3, r2
 800068a:	d108      	bne.n	800069e <main+0x16a>
  			  		  igniter.FIRE();
 800068c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000690:	4618      	mov	r0, r3
 8000692:	f7ff fd90 	bl	80001b6 <_ZN7Igniter4FIREEv>
  			  		  state = 5;
 8000696:	4b1a      	ldr	r3, [pc, #104]	; (8000700 <main+0x1cc>)
 8000698:	2205      	movs	r2, #5
 800069a:	701a      	strb	r2, [r3, #0]
  			  	  }
  			  	  else if(signal == 89){	//signal == arm
  			  		  state = 4;
  			  	  }
  			  break;
 800069c:	e022      	b.n	80006e4 <main+0x1b0>
  			  	  else if(signal == 89){	//signal == arm
 800069e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80006a2:	2b59      	cmp	r3, #89	; 0x59
 80006a4:	d11e      	bne.n	80006e4 <main+0x1b0>
  			  		  state = 4;
 80006a6:	4b16      	ldr	r3, [pc, #88]	; (8000700 <main+0x1cc>)
 80006a8:	2204      	movs	r2, #4
 80006aa:	701a      	strb	r2, [r3, #0]
  			  break;
 80006ac:	e01a      	b.n	80006e4 <main+0x1b0>
  		  case 4:	//ABORT
  			  state = 2;
 80006ae:	4b14      	ldr	r3, [pc, #80]	; (8000700 <main+0x1cc>)
 80006b0:	2202      	movs	r2, #2
 80006b2:	701a      	strb	r2, [r3, #0]
  			  break;
 80006b4:	e019      	b.n	80006ea <main+0x1b6>
  		  case 5:	//FLIGHT
  			  //TODO: Send "fired" 	//n - times
  			 if( ! igniter.is_connected()){
 80006b6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff fd60 	bl	8000180 <_ZNK7Igniter12is_connectedEv>
 80006c0:	4603      	mov	r3, r0
 80006c2:	f083 0301 	eor.w	r3, r3, #1
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d00d      	beq.n	80006e8 <main+0x1b4>
  				  state = 6;
 80006cc:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <main+0x1cc>)
 80006ce:	2206      	movs	r2, #6
 80006d0:	701a      	strb	r2, [r3, #0]
  			  }
  			  break;
 80006d2:	e009      	b.n	80006e8 <main+0x1b4>
  		  case 6:	//END
  			  HAL_Delay(1000000);
 80006d4:	480b      	ldr	r0, [pc, #44]	; (8000704 <main+0x1d0>)
 80006d6:	f000 fad5 	bl	8000c84 <HAL_Delay>
  			  break;
 80006da:	e006      	b.n	80006ea <main+0x1b6>
  			  break;
 80006dc:	bf00      	nop
 80006de:	e785      	b.n	80005ec <main+0xb8>
  			  break;
 80006e0:	bf00      	nop
 80006e2:	e783      	b.n	80005ec <main+0xb8>
  			  break;
 80006e4:	bf00      	nop
 80006e6:	e781      	b.n	80005ec <main+0xb8>
  			  break;
 80006e8:	bf00      	nop
  	  switch(state){
 80006ea:	e77f      	b.n	80005ec <main+0xb8>
 80006ec:	200000fc 	.word	0x200000fc
 80006f0:	40011000 	.word	0x40011000
 80006f4:	40010800 	.word	0x40010800
 80006f8:	40010c00 	.word	0x40010c00
 80006fc:	20000074 	.word	0x20000074
 8000700:	20000028 	.word	0x20000028
 8000704:	000f4240 	.word	0x000f4240

08000708 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b094      	sub	sp, #80	; 0x50
 800070c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000712:	2228      	movs	r2, #40	; 0x28
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f001 fa4e 	bl	8001bb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800071c:	f107 0314 	add.w	r3, r7, #20
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800072c:	1d3b      	adds	r3, r7, #4
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000738:	2301      	movs	r3, #1
 800073a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800073c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000740:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000742:	2300      	movs	r3, #0
 8000744:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000746:	2301      	movs	r3, #1
 8000748:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800074a:	2302      	movs	r3, #2
 800074c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800074e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000752:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000754:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000758:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800075e:	4618      	mov	r0, r3
 8000760:	f000 fc24 	bl	8000fac <HAL_RCC_OscConfig>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	bf14      	ite	ne
 800076a:	2301      	movne	r3, #1
 800076c:	2300      	moveq	r3, #0
 800076e:	b2db      	uxtb	r3, r3
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8000774:	f000 f833 	bl	80007de <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000778:	230f      	movs	r3, #15
 800077a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800077c:	2302      	movs	r3, #2
 800077e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000784:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000788:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800078a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800078e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000790:	f107 0314 	add.w	r3, r7, #20
 8000794:	2101      	movs	r1, #1
 8000796:	4618      	mov	r0, r3
 8000798:	f000 fe54 	bl	8001444 <HAL_RCC_ClockConfig>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	bf14      	ite	ne
 80007a2:	2301      	movne	r3, #1
 80007a4:	2300      	moveq	r3, #0
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <_Z18SystemClock_Configv+0xa8>
  {
    Error_Handler();
 80007ac:	f000 f817 	bl	80007de <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80007b0:	2310      	movs	r3, #16
 80007b2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80007b4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007b8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 ff19 	bl	80015f4 <HAL_RCCEx_PeriphCLKConfig>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	bf14      	ite	ne
 80007c8:	2301      	movne	r3, #1
 80007ca:	2300      	moveq	r3, #0
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <_Z18SystemClock_Configv+0xce>
  {
    Error_Handler();
 80007d2:	f000 f804 	bl	80007de <Error_Handler>
  }
}
 80007d6:	bf00      	nop
 80007d8:	3750      	adds	r7, #80	; 0x50
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}

080007de <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007de:	b480      	push	{r7}
 80007e0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e2:	b672      	cpsid	i
}
 80007e4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e6:	e7fe      	b.n	80007e6 <Error_Handler+0x8>

080007e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e8:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007ea:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <HAL_MspInit+0x3c>)
 80007ec:	699a      	ldr	r2, [r3, #24]
 80007ee:	f042 0201 	orr.w	r2, r2, #1
 80007f2:	619a      	str	r2, [r3, #24]
 80007f4:	699a      	ldr	r2, [r3, #24]
 80007f6:	f002 0201 	and.w	r2, r2, #1
 80007fa:	9200      	str	r2, [sp, #0]
 80007fc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fe:	69da      	ldr	r2, [r3, #28]
 8000800:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000804:	61da      	str	r2, [r3, #28]
 8000806:	69db      	ldr	r3, [r3, #28]
 8000808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800080c:	9301      	str	r3, [sp, #4]
 800080e:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000810:	4a05      	ldr	r2, [pc, #20]	; (8000828 <HAL_MspInit+0x40>)
 8000812:	6853      	ldr	r3, [r2, #4]
 8000814:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000818:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800081c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800081e:	b002      	add	sp, #8
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	40021000 	.word	0x40021000
 8000828:	40010000 	.word	0x40010000

0800082c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800082c:	e7fe      	b.n	800082c <NMI_Handler>

0800082e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800082e:	e7fe      	b.n	800082e <HardFault_Handler>

08000830 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000830:	e7fe      	b.n	8000830 <MemManage_Handler>

08000832 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000832:	e7fe      	b.n	8000832 <BusFault_Handler>

08000834 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000834:	e7fe      	b.n	8000834 <UsageFault_Handler>

08000836 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000836:	4770      	bx	lr

08000838 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000838:	4770      	bx	lr

0800083a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800083a:	4770      	bx	lr

0800083c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800083c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800083e:	f000 fa0f 	bl	8000c60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000842:	bd08      	pop	{r3, pc}

08000844 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000844:	4770      	bx	lr
	...

08000848 <HAL_TIM_PWM_MspInit>:
  HAL_TIM_MspPostInit(&htim4);

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000848:	b082      	sub	sp, #8

  if(tim_pwmHandle->Instance==TIM3)
 800084a:	6803      	ldr	r3, [r0, #0]
 800084c:	4a0e      	ldr	r2, [pc, #56]	; (8000888 <HAL_TIM_PWM_MspInit+0x40>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d004      	beq.n	800085c <HAL_TIM_PWM_MspInit+0x14>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(tim_pwmHandle->Instance==TIM4)
 8000852:	4a0e      	ldr	r2, [pc, #56]	; (800088c <HAL_TIM_PWM_MspInit+0x44>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d00c      	beq.n	8000872 <HAL_TIM_PWM_MspInit+0x2a>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000858:	b002      	add	sp, #8
 800085a:	4770      	bx	lr
    __HAL_RCC_TIM3_CLK_ENABLE();
 800085c:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <HAL_TIM_PWM_MspInit+0x48>)
 800085e:	69da      	ldr	r2, [r3, #28]
 8000860:	f042 0202 	orr.w	r2, r2, #2
 8000864:	61da      	str	r2, [r3, #28]
 8000866:	69db      	ldr	r3, [r3, #28]
 8000868:	f003 0302 	and.w	r3, r3, #2
 800086c:	9300      	str	r3, [sp, #0]
 800086e:	9b00      	ldr	r3, [sp, #0]
 8000870:	e7f2      	b.n	8000858 <HAL_TIM_PWM_MspInit+0x10>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000872:	4b07      	ldr	r3, [pc, #28]	; (8000890 <HAL_TIM_PWM_MspInit+0x48>)
 8000874:	69da      	ldr	r2, [r3, #28]
 8000876:	f042 0204 	orr.w	r2, r2, #4
 800087a:	61da      	str	r2, [r3, #28]
 800087c:	69db      	ldr	r3, [r3, #28]
 800087e:	f003 0304 	and.w	r3, r3, #4
 8000882:	9301      	str	r3, [sp, #4]
 8000884:	9b01      	ldr	r3, [sp, #4]
}
 8000886:	e7e7      	b.n	8000858 <HAL_TIM_PWM_MspInit+0x10>
 8000888:	40000400 	.word	0x40000400
 800088c:	40000800 	.word	0x40000800
 8000890:	40021000 	.word	0x40021000

08000894 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000894:	b500      	push	{lr}
 8000896:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000898:	2300      	movs	r3, #0
 800089a:	9302      	str	r3, [sp, #8]
 800089c:	9303      	str	r3, [sp, #12]
 800089e:	9304      	str	r3, [sp, #16]
 80008a0:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM3)
 80008a2:	6803      	ldr	r3, [r0, #0]
 80008a4:	4a1d      	ldr	r2, [pc, #116]	; (800091c <HAL_TIM_MspPostInit+0x88>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d005      	beq.n	80008b6 <HAL_TIM_MspPostInit+0x22>

  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM4)
 80008aa:	4a1d      	ldr	r2, [pc, #116]	; (8000920 <HAL_TIM_MspPostInit+0x8c>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d01f      	beq.n	80008f0 <HAL_TIM_MspPostInit+0x5c>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80008b0:	b007      	add	sp, #28
 80008b2:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b6:	4b1b      	ldr	r3, [pc, #108]	; (8000924 <HAL_TIM_MspPostInit+0x90>)
 80008b8:	699a      	ldr	r2, [r3, #24]
 80008ba:	f042 0208 	orr.w	r2, r2, #8
 80008be:	619a      	str	r2, [r3, #24]
 80008c0:	699b      	ldr	r3, [r3, #24]
 80008c2:	f003 0308 	and.w	r3, r3, #8
 80008c6:	9300      	str	r3, [sp, #0]
 80008c8:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = QD_EN_Pin|PQD_EN_Pin|DEPR_EN_Pin;
 80008ca:	2323      	movs	r3, #35	; 0x23
 80008cc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ce:	2302      	movs	r3, #2
 80008d0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d4:	a902      	add	r1, sp, #8
 80008d6:	4814      	ldr	r0, [pc, #80]	; (8000928 <HAL_TIM_MspPostInit+0x94>)
 80008d8:	f000 fa42 	bl	8000d60 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80008dc:	4a13      	ldr	r2, [pc, #76]	; (800092c <HAL_TIM_MspPostInit+0x98>)
 80008de:	6853      	ldr	r3, [r2, #4]
 80008e0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80008e4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80008e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008ec:	6053      	str	r3, [r2, #4]
 80008ee:	e7df      	b.n	80008b0 <HAL_TIM_MspPostInit+0x1c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f0:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <HAL_TIM_MspPostInit+0x90>)
 80008f2:	699a      	ldr	r2, [r3, #24]
 80008f4:	f042 0208 	orr.w	r2, r2, #8
 80008f8:	619a      	str	r2, [r3, #24]
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	f003 0308 	and.w	r3, r3, #8
 8000900:	9301      	str	r3, [sp, #4]
 8000902:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = FILL_EN_Pin;
 8000904:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000908:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090a:	2302      	movs	r3, #2
 800090c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(FILL_EN_GPIO_Port, &GPIO_InitStruct);
 8000910:	a902      	add	r1, sp, #8
 8000912:	4805      	ldr	r0, [pc, #20]	; (8000928 <HAL_TIM_MspPostInit+0x94>)
 8000914:	f000 fa24 	bl	8000d60 <HAL_GPIO_Init>
}
 8000918:	e7ca      	b.n	80008b0 <HAL_TIM_MspPostInit+0x1c>
 800091a:	bf00      	nop
 800091c:	40000400 	.word	0x40000400
 8000920:	40000800 	.word	0x40000800
 8000924:	40021000 	.word	0x40021000
 8000928:	40010c00 	.word	0x40010c00
 800092c:	40010000 	.word	0x40010000

08000930 <MX_TIM3_Init>:
{
 8000930:	b500      	push	{lr}
 8000932:	b08b      	sub	sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000934:	2300      	movs	r3, #0
 8000936:	9308      	str	r3, [sp, #32]
 8000938:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 800093a:	9301      	str	r3, [sp, #4]
 800093c:	9302      	str	r3, [sp, #8]
 800093e:	9303      	str	r3, [sp, #12]
 8000940:	9304      	str	r3, [sp, #16]
 8000942:	9305      	str	r3, [sp, #20]
 8000944:	9306      	str	r3, [sp, #24]
 8000946:	9307      	str	r3, [sp, #28]
  htim3.Instance = TIM3;
 8000948:	4824      	ldr	r0, [pc, #144]	; (80009dc <MX_TIM3_Init+0xac>)
 800094a:	4a25      	ldr	r2, [pc, #148]	; (80009e0 <MX_TIM3_Init+0xb0>)
 800094c:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 7;
 800094e:	2207      	movs	r2, #7
 8000950:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000952:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 999;
 8000954:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000958:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800095a:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800095c:	2380      	movs	r3, #128	; 0x80
 800095e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000960:	f000 ff9c 	bl	800189c <HAL_TIM_PWM_Init>
 8000964:	bb50      	cbnz	r0, 80009bc <MX_TIM3_Init+0x8c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000966:	2300      	movs	r3, #0
 8000968:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800096a:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800096c:	a908      	add	r1, sp, #32
 800096e:	481b      	ldr	r0, [pc, #108]	; (80009dc <MX_TIM3_Init+0xac>)
 8000970:	f001 f856 	bl	8001a20 <HAL_TIMEx_MasterConfigSynchronization>
 8000974:	bb28      	cbnz	r0, 80009c2 <MX_TIM3_Init+0x92>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000976:	2360      	movs	r3, #96	; 0x60
 8000978:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 500;
 800097a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800097e:	9302      	str	r3, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000980:	2300      	movs	r3, #0
 8000982:	9303      	str	r3, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000984:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000986:	2204      	movs	r2, #4
 8000988:	eb0d 0102 	add.w	r1, sp, r2
 800098c:	4813      	ldr	r0, [pc, #76]	; (80009dc <MX_TIM3_Init+0xac>)
 800098e:	f000 ffdf 	bl	8001950 <HAL_TIM_PWM_ConfigChannel>
 8000992:	b9c8      	cbnz	r0, 80009c8 <MX_TIM3_Init+0x98>
  sConfigOC.Pulse = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000998:	2208      	movs	r2, #8
 800099a:	a901      	add	r1, sp, #4
 800099c:	480f      	ldr	r0, [pc, #60]	; (80009dc <MX_TIM3_Init+0xac>)
 800099e:	f000 ffd7 	bl	8001950 <HAL_TIM_PWM_ConfigChannel>
 80009a2:	b9a0      	cbnz	r0, 80009ce <MX_TIM3_Init+0x9e>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009a4:	220c      	movs	r2, #12
 80009a6:	a901      	add	r1, sp, #4
 80009a8:	480c      	ldr	r0, [pc, #48]	; (80009dc <MX_TIM3_Init+0xac>)
 80009aa:	f000 ffd1 	bl	8001950 <HAL_TIM_PWM_ConfigChannel>
 80009ae:	b988      	cbnz	r0, 80009d4 <MX_TIM3_Init+0xa4>
  HAL_TIM_MspPostInit(&htim3);
 80009b0:	480a      	ldr	r0, [pc, #40]	; (80009dc <MX_TIM3_Init+0xac>)
 80009b2:	f7ff ff6f 	bl	8000894 <HAL_TIM_MspPostInit>
}
 80009b6:	b00b      	add	sp, #44	; 0x2c
 80009b8:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80009bc:	f7ff ff0f 	bl	80007de <Error_Handler>
 80009c0:	e7d1      	b.n	8000966 <MX_TIM3_Init+0x36>
    Error_Handler();
 80009c2:	f7ff ff0c 	bl	80007de <Error_Handler>
 80009c6:	e7d6      	b.n	8000976 <MX_TIM3_Init+0x46>
    Error_Handler();
 80009c8:	f7ff ff09 	bl	80007de <Error_Handler>
 80009cc:	e7e2      	b.n	8000994 <MX_TIM3_Init+0x64>
    Error_Handler();
 80009ce:	f7ff ff06 	bl	80007de <Error_Handler>
 80009d2:	e7e7      	b.n	80009a4 <MX_TIM3_Init+0x74>
    Error_Handler();
 80009d4:	f7ff ff03 	bl	80007de <Error_Handler>
 80009d8:	e7ea      	b.n	80009b0 <MX_TIM3_Init+0x80>
 80009da:	bf00      	nop
 80009dc:	20000074 	.word	0x20000074
 80009e0:	40000400 	.word	0x40000400

080009e4 <MX_TIM4_Init>:
{
 80009e4:	b500      	push	{lr}
 80009e6:	b08b      	sub	sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009e8:	2300      	movs	r3, #0
 80009ea:	9308      	str	r3, [sp, #32]
 80009ec:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009ee:	9301      	str	r3, [sp, #4]
 80009f0:	9302      	str	r3, [sp, #8]
 80009f2:	9303      	str	r3, [sp, #12]
 80009f4:	9304      	str	r3, [sp, #16]
 80009f6:	9305      	str	r3, [sp, #20]
 80009f8:	9306      	str	r3, [sp, #24]
 80009fa:	9307      	str	r3, [sp, #28]
  htim4.Instance = TIM4;
 80009fc:	4817      	ldr	r0, [pc, #92]	; (8000a5c <MX_TIM4_Init+0x78>)
 80009fe:	4a18      	ldr	r2, [pc, #96]	; (8000a60 <MX_TIM4_Init+0x7c>)
 8000a00:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 0;
 8000a02:	6043      	str	r3, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a04:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 65535;
 8000a06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a0a:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a0c:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a0e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000a10:	f000 ff44 	bl	800189c <HAL_TIM_PWM_Init>
 8000a14:	b9c8      	cbnz	r0, 8000a4a <MX_TIM4_Init+0x66>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a16:	2300      	movs	r3, #0
 8000a18:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a1a:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a1c:	a908      	add	r1, sp, #32
 8000a1e:	480f      	ldr	r0, [pc, #60]	; (8000a5c <MX_TIM4_Init+0x78>)
 8000a20:	f000 fffe 	bl	8001a20 <HAL_TIMEx_MasterConfigSynchronization>
 8000a24:	b9a0      	cbnz	r0, 8000a50 <MX_TIM4_Init+0x6c>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a26:	2360      	movs	r3, #96	; 0x60
 8000a28:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	9302      	str	r3, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a2e:	9303      	str	r3, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a30:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a32:	2208      	movs	r2, #8
 8000a34:	a901      	add	r1, sp, #4
 8000a36:	4809      	ldr	r0, [pc, #36]	; (8000a5c <MX_TIM4_Init+0x78>)
 8000a38:	f000 ff8a 	bl	8001950 <HAL_TIM_PWM_ConfigChannel>
 8000a3c:	b958      	cbnz	r0, 8000a56 <MX_TIM4_Init+0x72>
  HAL_TIM_MspPostInit(&htim4);
 8000a3e:	4807      	ldr	r0, [pc, #28]	; (8000a5c <MX_TIM4_Init+0x78>)
 8000a40:	f7ff ff28 	bl	8000894 <HAL_TIM_MspPostInit>
}
 8000a44:	b00b      	add	sp, #44	; 0x2c
 8000a46:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000a4a:	f7ff fec8 	bl	80007de <Error_Handler>
 8000a4e:	e7e2      	b.n	8000a16 <MX_TIM4_Init+0x32>
    Error_Handler();
 8000a50:	f7ff fec5 	bl	80007de <Error_Handler>
 8000a54:	e7e7      	b.n	8000a26 <MX_TIM4_Init+0x42>
    Error_Handler();
 8000a56:	f7ff fec2 	bl	80007de <Error_Handler>
 8000a5a:	e7f0      	b.n	8000a3e <MX_TIM4_Init+0x5a>
 8000a5c:	2000002c 	.word	0x2000002c
 8000a60:	40000800 	.word	0x40000800

08000a64 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a64:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a66:	480a      	ldr	r0, [pc, #40]	; (8000a90 <MX_USART2_UART_Init+0x2c>)
 8000a68:	4b0a      	ldr	r3, [pc, #40]	; (8000a94 <MX_USART2_UART_Init+0x30>)
 8000a6a:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8000a6c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000a70:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a72:	2300      	movs	r3, #0
 8000a74:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a76:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a78:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a7a:	220c      	movs	r2, #12
 8000a7c:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a7e:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a80:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a82:	f001 f845 	bl	8001b10 <HAL_UART_Init>
 8000a86:	b900      	cbnz	r0, 8000a8a <MX_USART2_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a88:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000a8a:	f7ff fea8 	bl	80007de <Error_Handler>
}
 8000a8e:	e7fb      	b.n	8000a88 <MX_USART2_UART_Init+0x24>
 8000a90:	200000fc 	.word	0x200000fc
 8000a94:	40004400 	.word	0x40004400

08000a98 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000a98:	b508      	push	{r3, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a9a:	480a      	ldr	r0, [pc, #40]	; (8000ac4 <MX_USART3_UART_Init+0x2c>)
 8000a9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ac8 <MX_USART3_UART_Init+0x30>)
 8000a9e:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 8000aa0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000aa4:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000aaa:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000aac:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000aae:	220c      	movs	r2, #12
 8000ab0:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ab2:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab4:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ab6:	f001 f82b 	bl	8001b10 <HAL_UART_Init>
 8000aba:	b900      	cbnz	r0, 8000abe <MX_USART3_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000abc:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000abe:	f7ff fe8e 	bl	80007de <Error_Handler>
}
 8000ac2:	e7fb      	b.n	8000abc <MX_USART3_UART_Init+0x24>
 8000ac4:	200000bc 	.word	0x200000bc
 8000ac8:	40004800 	.word	0x40004800

08000acc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000acc:	b510      	push	{r4, lr}
 8000ace:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	9304      	str	r3, [sp, #16]
 8000ad4:	9305      	str	r3, [sp, #20]
 8000ad6:	9306      	str	r3, [sp, #24]
 8000ad8:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART2)
 8000ada:	6803      	ldr	r3, [r0, #0]
 8000adc:	4a2c      	ldr	r2, [pc, #176]	; (8000b90 <HAL_UART_MspInit+0xc4>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d004      	beq.n	8000aec <HAL_UART_MspInit+0x20>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 8000ae2:	4a2c      	ldr	r2, [pc, #176]	; (8000b94 <HAL_UART_MspInit+0xc8>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d029      	beq.n	8000b3c <HAL_UART_MspInit+0x70>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000ae8:	b008      	add	sp, #32
 8000aea:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aec:	4b2a      	ldr	r3, [pc, #168]	; (8000b98 <HAL_UART_MspInit+0xcc>)
 8000aee:	69da      	ldr	r2, [r3, #28]
 8000af0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000af4:	61da      	str	r2, [r3, #28]
 8000af6:	69da      	ldr	r2, [r3, #28]
 8000af8:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000afc:	9200      	str	r2, [sp, #0]
 8000afe:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b00:	699a      	ldr	r2, [r3, #24]
 8000b02:	f042 0204 	orr.w	r2, r2, #4
 8000b06:	619a      	str	r2, [r3, #24]
 8000b08:	699b      	ldr	r3, [r3, #24]
 8000b0a:	f003 0304 	and.w	r3, r3, #4
 8000b0e:	9301      	str	r3, [sp, #4]
 8000b10:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b12:	2304      	movs	r3, #4
 8000b14:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b16:	2302      	movs	r3, #2
 8000b18:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b1a:	2303      	movs	r3, #3
 8000b1c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1e:	4c1f      	ldr	r4, [pc, #124]	; (8000b9c <HAL_UART_MspInit+0xd0>)
 8000b20:	a904      	add	r1, sp, #16
 8000b22:	4620      	mov	r0, r4
 8000b24:	f000 f91c 	bl	8000d60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b28:	2308      	movs	r3, #8
 8000b2a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b32:	a904      	add	r1, sp, #16
 8000b34:	4620      	mov	r0, r4
 8000b36:	f000 f913 	bl	8000d60 <HAL_GPIO_Init>
 8000b3a:	e7d5      	b.n	8000ae8 <HAL_UART_MspInit+0x1c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b3c:	4b16      	ldr	r3, [pc, #88]	; (8000b98 <HAL_UART_MspInit+0xcc>)
 8000b3e:	69da      	ldr	r2, [r3, #28]
 8000b40:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000b44:	61da      	str	r2, [r3, #28]
 8000b46:	69da      	ldr	r2, [r3, #28]
 8000b48:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8000b4c:	9202      	str	r2, [sp, #8]
 8000b4e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b50:	699a      	ldr	r2, [r3, #24]
 8000b52:	f042 0208 	orr.w	r2, r2, #8
 8000b56:	619a      	str	r2, [r3, #24]
 8000b58:	699b      	ldr	r3, [r3, #24]
 8000b5a:	f003 0308 	and.w	r3, r3, #8
 8000b5e:	9303      	str	r3, [sp, #12]
 8000b60:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b66:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b70:	4c0b      	ldr	r4, [pc, #44]	; (8000ba0 <HAL_UART_MspInit+0xd4>)
 8000b72:	a904      	add	r1, sp, #16
 8000b74:	4620      	mov	r0, r4
 8000b76:	f000 f8f3 	bl	8000d60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000b7a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b7e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b80:	2300      	movs	r3, #0
 8000b82:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b86:	a904      	add	r1, sp, #16
 8000b88:	4620      	mov	r0, r4
 8000b8a:	f000 f8e9 	bl	8000d60 <HAL_GPIO_Init>
}
 8000b8e:	e7ab      	b.n	8000ae8 <HAL_UART_MspInit+0x1c>
 8000b90:	40004400 	.word	0x40004400
 8000b94:	40004800 	.word	0x40004800
 8000b98:	40021000 	.word	0x40021000
 8000b9c:	40010800 	.word	0x40010800
 8000ba0:	40010c00 	.word	0x40010c00

08000ba4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000ba4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000ba6:	e003      	b.n	8000bb0 <LoopCopyDataInit>

08000ba8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000ba8:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000baa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000bac:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000bae:	3104      	adds	r1, #4

08000bb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000bb0:	480a      	ldr	r0, [pc, #40]	; (8000bdc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000bb2:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000bb4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000bb6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000bb8:	d3f6      	bcc.n	8000ba8 <CopyDataInit>
  ldr r2, =_sbss
 8000bba:	4a0a      	ldr	r2, [pc, #40]	; (8000be4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000bbc:	e002      	b.n	8000bc4 <LoopFillZerobss>

08000bbe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000bbe:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000bc0:	f842 3b04 	str.w	r3, [r2], #4

08000bc4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000bc4:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000bc6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000bc8:	d3f9      	bcc.n	8000bbe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bca:	f7ff fe3b 	bl	8000844 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bce:	f000 ffcf 	bl	8001b70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bd2:	f7ff fcaf 	bl	8000534 <main>
  bx lr
 8000bd6:	4770      	bx	lr
  ldr r3, =_sidata
 8000bd8:	08001c14 	.word	0x08001c14
  ldr r0, =_sdata
 8000bdc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000be0:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000be4:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000be8:	20000140 	.word	0x20000140

08000bec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bec:	e7fe      	b.n	8000bec <ADC1_2_IRQHandler>
	...

08000bf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf0:	b510      	push	{r4, lr}
 8000bf2:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bf4:	4b0e      	ldr	r3, [pc, #56]	; (8000c30 <HAL_InitTick+0x40>)
 8000bf6:	7818      	ldrb	r0, [r3, #0]
 8000bf8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bfc:	fbb3 f3f0 	udiv	r3, r3, r0
 8000c00:	4a0c      	ldr	r2, [pc, #48]	; (8000c34 <HAL_InitTick+0x44>)
 8000c02:	6810      	ldr	r0, [r2, #0]
 8000c04:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c08:	f000 f894 	bl	8000d34 <HAL_SYSTICK_Config>
 8000c0c:	b968      	cbnz	r0, 8000c2a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c0e:	2c0f      	cmp	r4, #15
 8000c10:	d901      	bls.n	8000c16 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000c12:	2001      	movs	r0, #1
 8000c14:	e00a      	b.n	8000c2c <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c16:	2200      	movs	r2, #0
 8000c18:	4621      	mov	r1, r4
 8000c1a:	f04f 30ff 	mov.w	r0, #4294967295
 8000c1e:	f000 f857 	bl	8000cd0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c22:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <HAL_InitTick+0x48>)
 8000c24:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000c26:	2000      	movs	r0, #0
 8000c28:	e000      	b.n	8000c2c <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000c2a:	2001      	movs	r0, #1
}
 8000c2c:	bd10      	pop	{r4, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000004 	.word	0x20000004
 8000c34:	20000000 	.word	0x20000000
 8000c38:	20000008 	.word	0x20000008

08000c3c <HAL_Init>:
{
 8000c3c:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c3e:	4a07      	ldr	r2, [pc, #28]	; (8000c5c <HAL_Init+0x20>)
 8000c40:	6813      	ldr	r3, [r2, #0]
 8000c42:	f043 0310 	orr.w	r3, r3, #16
 8000c46:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c48:	2003      	movs	r0, #3
 8000c4a:	f000 f82f 	bl	8000cac <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c4e:	2000      	movs	r0, #0
 8000c50:	f7ff ffce 	bl	8000bf0 <HAL_InitTick>
  HAL_MspInit();
 8000c54:	f7ff fdc8 	bl	80007e8 <HAL_MspInit>
}
 8000c58:	2000      	movs	r0, #0
 8000c5a:	bd08      	pop	{r3, pc}
 8000c5c:	40022000 	.word	0x40022000

08000c60 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000c60:	4a03      	ldr	r2, [pc, #12]	; (8000c70 <HAL_IncTick+0x10>)
 8000c62:	6811      	ldr	r1, [r2, #0]
 8000c64:	4b03      	ldr	r3, [pc, #12]	; (8000c74 <HAL_IncTick+0x14>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	440b      	add	r3, r1
 8000c6a:	6013      	str	r3, [r2, #0]
}
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	2000013c 	.word	0x2000013c
 8000c74:	20000004 	.word	0x20000004

08000c78 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000c78:	4b01      	ldr	r3, [pc, #4]	; (8000c80 <HAL_GetTick+0x8>)
 8000c7a:	6818      	ldr	r0, [r3, #0]
}
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	2000013c 	.word	0x2000013c

08000c84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c84:	b538      	push	{r3, r4, r5, lr}
 8000c86:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000c88:	f7ff fff6 	bl	8000c78 <HAL_GetTick>
 8000c8c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c8e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000c92:	d002      	beq.n	8000c9a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c94:	4b04      	ldr	r3, [pc, #16]	; (8000ca8 <HAL_Delay+0x24>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c9a:	f7ff ffed 	bl	8000c78 <HAL_GetTick>
 8000c9e:	1b40      	subs	r0, r0, r5
 8000ca0:	42a0      	cmp	r0, r4
 8000ca2:	d3fa      	bcc.n	8000c9a <HAL_Delay+0x16>
  {
  }
}
 8000ca4:	bd38      	pop	{r3, r4, r5, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20000004 	.word	0x20000004

08000cac <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cac:	4907      	ldr	r1, [pc, #28]	; (8000ccc <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000cae:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000cb0:	0203      	lsls	r3, r0, #8
 8000cb2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cb6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000cba:	0412      	lsls	r2, r2, #16
 8000cbc:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000cc8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000cca:	4770      	bx	lr
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cd0:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cd2:	4b16      	ldr	r3, [pc, #88]	; (8000d2c <HAL_NVIC_SetPriority+0x5c>)
 8000cd4:	68db      	ldr	r3, [r3, #12]
 8000cd6:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cda:	f1c3 0407 	rsb	r4, r3, #7
 8000cde:	2c04      	cmp	r4, #4
 8000ce0:	bf28      	it	cs
 8000ce2:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ce4:	1d1d      	adds	r5, r3, #4
 8000ce6:	2d06      	cmp	r5, #6
 8000ce8:	bf8c      	ite	hi
 8000cea:	3b03      	subhi	r3, #3
 8000cec:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cee:	f04f 35ff 	mov.w	r5, #4294967295
 8000cf2:	fa05 f404 	lsl.w	r4, r5, r4
 8000cf6:	ea21 0104 	bic.w	r1, r1, r4
 8000cfa:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cfc:	fa05 f303 	lsl.w	r3, r5, r3
 8000d00:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d04:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8000d06:	2800      	cmp	r0, #0
 8000d08:	db09      	blt.n	8000d1e <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0a:	0109      	lsls	r1, r1, #4
 8000d0c:	b2c9      	uxtb	r1, r1
 8000d0e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000d12:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000d16:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000d1a:	bc30      	pop	{r4, r5}
 8000d1c:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1e:	f000 000f 	and.w	r0, r0, #15
 8000d22:	0109      	lsls	r1, r1, #4
 8000d24:	b2c9      	uxtb	r1, r1
 8000d26:	4b02      	ldr	r3, [pc, #8]	; (8000d30 <HAL_NVIC_SetPriority+0x60>)
 8000d28:	5419      	strb	r1, [r3, r0]
 8000d2a:	e7f6      	b.n	8000d1a <HAL_NVIC_SetPriority+0x4a>
 8000d2c:	e000ed00 	.word	0xe000ed00
 8000d30:	e000ed14 	.word	0xe000ed14

08000d34 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d34:	3801      	subs	r0, #1
 8000d36:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d3a:	d20a      	bcs.n	8000d52 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d3c:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <HAL_SYSTICK_Config+0x24>)
 8000d3e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d40:	4a06      	ldr	r2, [pc, #24]	; (8000d5c <HAL_SYSTICK_Config+0x28>)
 8000d42:	21f0      	movs	r1, #240	; 0xf0
 8000d44:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d48:	2000      	movs	r0, #0
 8000d4a:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d4c:	2207      	movs	r2, #7
 8000d4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d50:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000d52:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	e000e010 	.word	0xe000e010
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d64:	b083      	sub	sp, #12
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d66:	680f      	ldr	r7, [r1, #0]
 8000d68:	2f00      	cmp	r7, #0
 8000d6a:	f000 80f8 	beq.w	8000f5e <HAL_GPIO_Init+0x1fe>
  uint32_t config = 0x00u;
 8000d6e:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8000d70:	4613      	mov	r3, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d72:	f8df c200 	ldr.w	ip, [pc, #512]	; 8000f74 <HAL_GPIO_Init+0x214>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d76:	4d7b      	ldr	r5, [pc, #492]	; (8000f64 <HAL_GPIO_Init+0x204>)
      switch (GPIO_Init->Mode)
 8000d78:	4e7b      	ldr	r6, [pc, #492]	; (8000f68 <HAL_GPIO_Init+0x208>)
 8000d7a:	f8df e1fc 	ldr.w	lr, [pc, #508]	; 8000f78 <HAL_GPIO_Init+0x218>
 8000d7e:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 8000f7c <HAL_GPIO_Init+0x21c>
 8000d82:	e09a      	b.n	8000eba <HAL_GPIO_Init+0x15a>
 8000d84:	2200      	movs	r2, #0
 8000d86:	e01e      	b.n	8000dc6 <HAL_GPIO_Init+0x66>
 8000d88:	42b4      	cmp	r4, r6
 8000d8a:	d00c      	beq.n	8000da6 <HAL_GPIO_Init+0x46>
 8000d8c:	d904      	bls.n	8000d98 <HAL_GPIO_Init+0x38>
 8000d8e:	4574      	cmp	r4, lr
 8000d90:	d009      	beq.n	8000da6 <HAL_GPIO_Init+0x46>
 8000d92:	4544      	cmp	r4, r8
 8000d94:	d007      	beq.n	8000da6 <HAL_GPIO_Init+0x46>
 8000d96:	e016      	b.n	8000dc6 <HAL_GPIO_Init+0x66>
 8000d98:	4f74      	ldr	r7, [pc, #464]	; (8000f6c <HAL_GPIO_Init+0x20c>)
 8000d9a:	42bc      	cmp	r4, r7
 8000d9c:	d003      	beq.n	8000da6 <HAL_GPIO_Init+0x46>
 8000d9e:	f507 2770 	add.w	r7, r7, #983040	; 0xf0000
 8000da2:	42bc      	cmp	r4, r7
 8000da4:	d10b      	bne.n	8000dbe <HAL_GPIO_Init+0x5e>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000da6:	688a      	ldr	r2, [r1, #8]
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f000 80ca 	beq.w	8000f42 <HAL_GPIO_Init+0x1e2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000dae:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000db0:	bf0c      	ite	eq
 8000db2:	f8c0 9010 	streq.w	r9, [r0, #16]
            GPIOx->BRR = ioposition;
 8000db6:	f8c0 9014 	strne.w	r9, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dba:	2208      	movs	r2, #8
 8000dbc:	e003      	b.n	8000dc6 <HAL_GPIO_Init+0x66>
      switch (GPIO_Init->Mode)
 8000dbe:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8000dc2:	42bc      	cmp	r4, r7
 8000dc4:	d0ef      	beq.n	8000da6 <HAL_GPIO_Init+0x46>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000dc6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8000dca:	f200 80bc 	bhi.w	8000f46 <HAL_GPIO_Init+0x1e6>
 8000dce:	4607      	mov	r7, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000dd0:	ea4f 0983 	mov.w	r9, r3, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000dd4:	683c      	ldr	r4, [r7, #0]
 8000dd6:	f04f 0b0f 	mov.w	fp, #15
 8000dda:	fa0b fb09 	lsl.w	fp, fp, r9
 8000dde:	ea24 040b 	bic.w	r4, r4, fp
 8000de2:	fa02 f909 	lsl.w	r9, r2, r9
 8000de6:	ea44 0409 	orr.w	r4, r4, r9
 8000dea:	603c      	str	r4, [r7, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dec:	684c      	ldr	r4, [r1, #4]
 8000dee:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8000df2:	d05d      	beq.n	8000eb0 <HAL_GPIO_Init+0x150>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000df4:	f8dc 4018 	ldr.w	r4, [ip, #24]
 8000df8:	f044 0401 	orr.w	r4, r4, #1
 8000dfc:	f8cc 4018 	str.w	r4, [ip, #24]
 8000e00:	f8dc 4018 	ldr.w	r4, [ip, #24]
 8000e04:	f004 0401 	and.w	r4, r4, #1
 8000e08:	9401      	str	r4, [sp, #4]
 8000e0a:	9c01      	ldr	r4, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8000e0c:	f023 0403 	bic.w	r4, r3, #3
 8000e10:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8000e14:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 8000e18:	f8d4 9008 	ldr.w	r9, [r4, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e1c:	f003 0703 	and.w	r7, r3, #3
 8000e20:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 8000e24:	270f      	movs	r7, #15
 8000e26:	fa07 f70b 	lsl.w	r7, r7, fp
 8000e2a:	ea29 0907 	bic.w	r9, r9, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e2e:	4f50      	ldr	r7, [pc, #320]	; (8000f70 <HAL_GPIO_Init+0x210>)
 8000e30:	42b8      	cmp	r0, r7
 8000e32:	f000 808e 	beq.w	8000f52 <HAL_GPIO_Init+0x1f2>
 8000e36:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000e3a:	42b8      	cmp	r0, r7
 8000e3c:	f000 808b 	beq.w	8000f56 <HAL_GPIO_Init+0x1f6>
 8000e40:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000e44:	42b8      	cmp	r0, r7
 8000e46:	f000 8088 	beq.w	8000f5a <HAL_GPIO_Init+0x1fa>
 8000e4a:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000e4e:	42b8      	cmp	r0, r7
 8000e50:	bf0c      	ite	eq
 8000e52:	2703      	moveq	r7, #3
 8000e54:	2704      	movne	r7, #4
 8000e56:	fa07 f70b 	lsl.w	r7, r7, fp
 8000e5a:	ea47 0709 	orr.w	r7, r7, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8000e5e:	60a7      	str	r7, [r4, #8]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e60:	684c      	ldr	r4, [r1, #4]
 8000e62:	f414 3f80 	tst.w	r4, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000e66:	682c      	ldr	r4, [r5, #0]
 8000e68:	bf14      	ite	ne
 8000e6a:	ea44 040a 	orrne.w	r4, r4, sl
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e6e:	ea24 040a 	biceq.w	r4, r4, sl
 8000e72:	602c      	str	r4, [r5, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e74:	684c      	ldr	r4, [r1, #4]
 8000e76:	f414 3f00 	tst.w	r4, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000e7a:	686c      	ldr	r4, [r5, #4]
 8000e7c:	bf14      	ite	ne
 8000e7e:	ea44 040a 	orrne.w	r4, r4, sl
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e82:	ea24 040a 	biceq.w	r4, r4, sl
 8000e86:	606c      	str	r4, [r5, #4]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e88:	684c      	ldr	r4, [r1, #4]
 8000e8a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e8e:	68ac      	ldr	r4, [r5, #8]
 8000e90:	bf14      	ite	ne
 8000e92:	ea44 040a 	orrne.w	r4, r4, sl
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e96:	ea24 040a 	biceq.w	r4, r4, sl
 8000e9a:	60ac      	str	r4, [r5, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e9c:	684c      	ldr	r4, [r1, #4]
 8000e9e:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ea2:	68ec      	ldr	r4, [r5, #12]
 8000ea4:	bf14      	ite	ne
 8000ea6:	ea44 040a 	orrne.w	r4, r4, sl
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000eaa:	ea24 040a 	biceq.w	r4, r4, sl
 8000eae:	60ec      	str	r4, [r5, #12]
        }
      }
    }

	position++;
 8000eb0:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eb2:	680f      	ldr	r7, [r1, #0]
 8000eb4:	fa37 f403 	lsrs.w	r4, r7, r3
 8000eb8:	d051      	beq.n	8000f5e <HAL_GPIO_Init+0x1fe>
    ioposition = (0x01uL << position);
 8000eba:	f04f 0901 	mov.w	r9, #1
 8000ebe:	fa09 f903 	lsl.w	r9, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ec2:	ea09 0a07 	and.w	sl, r9, r7
    if (iocurrent == ioposition)
 8000ec6:	ea39 0407 	bics.w	r4, r9, r7
 8000eca:	d1f1      	bne.n	8000eb0 <HAL_GPIO_Init+0x150>
      switch (GPIO_Init->Mode)
 8000ecc:	684c      	ldr	r4, [r1, #4]
 8000ece:	2c12      	cmp	r4, #18
 8000ed0:	f63f af5a 	bhi.w	8000d88 <HAL_GPIO_Init+0x28>
 8000ed4:	2c12      	cmp	r4, #18
 8000ed6:	f63f af76 	bhi.w	8000dc6 <HAL_GPIO_Init+0x66>
 8000eda:	a701      	add	r7, pc, #4	; (adr r7, 8000ee0 <HAL_GPIO_Init+0x180>)
 8000edc:	f857 f024 	ldr.w	pc, [r7, r4, lsl #2]
 8000ee0:	08000da7 	.word	0x08000da7
 8000ee4:	08000f2d 	.word	0x08000f2d
 8000ee8:	08000f37 	.word	0x08000f37
 8000eec:	08000d85 	.word	0x08000d85
 8000ef0:	08000dc7 	.word	0x08000dc7
 8000ef4:	08000dc7 	.word	0x08000dc7
 8000ef8:	08000dc7 	.word	0x08000dc7
 8000efc:	08000dc7 	.word	0x08000dc7
 8000f00:	08000dc7 	.word	0x08000dc7
 8000f04:	08000dc7 	.word	0x08000dc7
 8000f08:	08000dc7 	.word	0x08000dc7
 8000f0c:	08000dc7 	.word	0x08000dc7
 8000f10:	08000dc7 	.word	0x08000dc7
 8000f14:	08000dc7 	.word	0x08000dc7
 8000f18:	08000dc7 	.word	0x08000dc7
 8000f1c:	08000dc7 	.word	0x08000dc7
 8000f20:	08000dc7 	.word	0x08000dc7
 8000f24:	08000f31 	.word	0x08000f31
 8000f28:	08000f3d 	.word	0x08000f3d
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f2c:	68ca      	ldr	r2, [r1, #12]
          break;
 8000f2e:	e74a      	b.n	8000dc6 <HAL_GPIO_Init+0x66>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f30:	68ca      	ldr	r2, [r1, #12]
 8000f32:	3204      	adds	r2, #4
          break;
 8000f34:	e747      	b.n	8000dc6 <HAL_GPIO_Init+0x66>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f36:	68ca      	ldr	r2, [r1, #12]
 8000f38:	3208      	adds	r2, #8
          break;
 8000f3a:	e744      	b.n	8000dc6 <HAL_GPIO_Init+0x66>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f3c:	68ca      	ldr	r2, [r1, #12]
 8000f3e:	320c      	adds	r2, #12
          break;
 8000f40:	e741      	b.n	8000dc6 <HAL_GPIO_Init+0x66>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f42:	2204      	movs	r2, #4
 8000f44:	e73f      	b.n	8000dc6 <HAL_GPIO_Init+0x66>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f46:	1d07      	adds	r7, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f48:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8000f4c:	f1a9 0920 	sub.w	r9, r9, #32
 8000f50:	e740      	b.n	8000dd4 <HAL_GPIO_Init+0x74>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f52:	2700      	movs	r7, #0
 8000f54:	e77f      	b.n	8000e56 <HAL_GPIO_Init+0xf6>
 8000f56:	2701      	movs	r7, #1
 8000f58:	e77d      	b.n	8000e56 <HAL_GPIO_Init+0xf6>
 8000f5a:	2702      	movs	r7, #2
 8000f5c:	e77b      	b.n	8000e56 <HAL_GPIO_Init+0xf6>
  }
}
 8000f5e:	b003      	add	sp, #12
 8000f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f64:	40010400 	.word	0x40010400
 8000f68:	10220000 	.word	0x10220000
 8000f6c:	10120000 	.word	0x10120000
 8000f70:	40010800 	.word	0x40010800
 8000f74:	40021000 	.word	0x40021000
 8000f78:	10310000 	.word	0x10310000
 8000f7c:	10320000 	.word	0x10320000

08000f80 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f80:	6883      	ldr	r3, [r0, #8]
 8000f82:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000f84:	bf14      	ite	ne
 8000f86:	2001      	movne	r0, #1
 8000f88:	2000      	moveq	r0, #0
 8000f8a:	4770      	bx	lr

08000f8c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f8c:	b10a      	cbz	r2, 8000f92 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f8e:	6101      	str	r1, [r0, #16]
 8000f90:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f92:	0409      	lsls	r1, r1, #16
 8000f94:	6101      	str	r1, [r0, #16]
  }
}
 8000f96:	4770      	bx	lr

08000f98 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000f98:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f9a:	ea01 0203 	and.w	r2, r1, r3
 8000f9e:	ea21 0103 	bic.w	r1, r1, r3
 8000fa2:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000fa6:	6101      	str	r1, [r0, #16]
}
 8000fa8:	4770      	bx	lr
	...

08000fac <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000fac:	2800      	cmp	r0, #0
 8000fae:	f000 8201 	beq.w	80013b4 <HAL_RCC_OscConfig+0x408>
{
 8000fb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fba:	6803      	ldr	r3, [r0, #0]
 8000fbc:	f013 0f01 	tst.w	r3, #1
 8000fc0:	d02c      	beq.n	800101c <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fc2:	4baa      	ldr	r3, [pc, #680]	; (800126c <HAL_RCC_OscConfig+0x2c0>)
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f003 030c 	and.w	r3, r3, #12
 8000fca:	2b04      	cmp	r3, #4
 8000fcc:	d01d      	beq.n	800100a <HAL_RCC_OscConfig+0x5e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fce:	4ba7      	ldr	r3, [pc, #668]	; (800126c <HAL_RCC_OscConfig+0x2c0>)
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f003 030c 	and.w	r3, r3, #12
 8000fd6:	2b08      	cmp	r3, #8
 8000fd8:	d012      	beq.n	8001000 <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fda:	6863      	ldr	r3, [r4, #4]
 8000fdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fe0:	d041      	beq.n	8001066 <HAL_RCC_OscConfig+0xba>
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d155      	bne.n	8001092 <HAL_RCC_OscConfig+0xe6>
 8000fe6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000fea:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	e037      	b.n	8001070 <HAL_RCC_OscConfig+0xc4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001000:	4b9a      	ldr	r3, [pc, #616]	; (800126c <HAL_RCC_OscConfig+0x2c0>)
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001008:	d0e7      	beq.n	8000fda <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800100a:	4b98      	ldr	r3, [pc, #608]	; (800126c <HAL_RCC_OscConfig+0x2c0>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001012:	d003      	beq.n	800101c <HAL_RCC_OscConfig+0x70>
 8001014:	6863      	ldr	r3, [r4, #4]
 8001016:	2b00      	cmp	r3, #0
 8001018:	f000 81ce 	beq.w	80013b8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800101c:	6823      	ldr	r3, [r4, #0]
 800101e:	f013 0f02 	tst.w	r3, #2
 8001022:	d075      	beq.n	8001110 <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001024:	4b91      	ldr	r3, [pc, #580]	; (800126c <HAL_RCC_OscConfig+0x2c0>)
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f013 0f0c 	tst.w	r3, #12
 800102c:	d05f      	beq.n	80010ee <HAL_RCC_OscConfig+0x142>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800102e:	4b8f      	ldr	r3, [pc, #572]	; (800126c <HAL_RCC_OscConfig+0x2c0>)
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f003 030c 	and.w	r3, r3, #12
 8001036:	2b08      	cmp	r3, #8
 8001038:	d054      	beq.n	80010e4 <HAL_RCC_OscConfig+0x138>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800103a:	6923      	ldr	r3, [r4, #16]
 800103c:	2b00      	cmp	r3, #0
 800103e:	f000 8089 	beq.w	8001154 <HAL_RCC_OscConfig+0x1a8>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001042:	4b8b      	ldr	r3, [pc, #556]	; (8001270 <HAL_RCC_OscConfig+0x2c4>)
 8001044:	2201      	movs	r2, #1
 8001046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001048:	f7ff fe16 	bl	8000c78 <HAL_GetTick>
 800104c:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800104e:	4e87      	ldr	r6, [pc, #540]	; (800126c <HAL_RCC_OscConfig+0x2c0>)
 8001050:	6833      	ldr	r3, [r6, #0]
 8001052:	f013 0f02 	tst.w	r3, #2
 8001056:	d174      	bne.n	8001142 <HAL_RCC_OscConfig+0x196>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001058:	f7ff fe0e 	bl	8000c78 <HAL_GetTick>
 800105c:	1b40      	subs	r0, r0, r5
 800105e:	2802      	cmp	r0, #2
 8001060:	d9f6      	bls.n	8001050 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_TIMEOUT;
 8001062:	2003      	movs	r0, #3
 8001064:	e1ad      	b.n	80013c2 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001066:	4a81      	ldr	r2, [pc, #516]	; (800126c <HAL_RCC_OscConfig+0x2c0>)
 8001068:	6813      	ldr	r3, [r2, #0]
 800106a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800106e:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001070:	6863      	ldr	r3, [r4, #4]
 8001072:	b343      	cbz	r3, 80010c6 <HAL_RCC_OscConfig+0x11a>
        tickstart = HAL_GetTick();
 8001074:	f7ff fe00 	bl	8000c78 <HAL_GetTick>
 8001078:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800107a:	4e7c      	ldr	r6, [pc, #496]	; (800126c <HAL_RCC_OscConfig+0x2c0>)
 800107c:	6833      	ldr	r3, [r6, #0]
 800107e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001082:	d1cb      	bne.n	800101c <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001084:	f7ff fdf8 	bl	8000c78 <HAL_GetTick>
 8001088:	1b40      	subs	r0, r0, r5
 800108a:	2864      	cmp	r0, #100	; 0x64
 800108c:	d9f6      	bls.n	800107c <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 800108e:	2003      	movs	r0, #3
 8001090:	e197      	b.n	80013c2 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001092:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001096:	d009      	beq.n	80010ac <HAL_RCC_OscConfig+0x100>
 8001098:	4b74      	ldr	r3, [pc, #464]	; (800126c <HAL_RCC_OscConfig+0x2c0>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	e7e1      	b.n	8001070 <HAL_RCC_OscConfig+0xc4>
 80010ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80010b0:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	e7d4      	b.n	8001070 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 80010c6:	f7ff fdd7 	bl	8000c78 <HAL_GetTick>
 80010ca:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010cc:	4e67      	ldr	r6, [pc, #412]	; (800126c <HAL_RCC_OscConfig+0x2c0>)
 80010ce:	6833      	ldr	r3, [r6, #0]
 80010d0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80010d4:	d0a2      	beq.n	800101c <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010d6:	f7ff fdcf 	bl	8000c78 <HAL_GetTick>
 80010da:	1b40      	subs	r0, r0, r5
 80010dc:	2864      	cmp	r0, #100	; 0x64
 80010de:	d9f6      	bls.n	80010ce <HAL_RCC_OscConfig+0x122>
            return HAL_TIMEOUT;
 80010e0:	2003      	movs	r0, #3
 80010e2:	e16e      	b.n	80013c2 <HAL_RCC_OscConfig+0x416>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80010e4:	4b61      	ldr	r3, [pc, #388]	; (800126c <HAL_RCC_OscConfig+0x2c0>)
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80010ec:	d1a5      	bne.n	800103a <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ee:	4b5f      	ldr	r3, [pc, #380]	; (800126c <HAL_RCC_OscConfig+0x2c0>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f013 0f02 	tst.w	r3, #2
 80010f6:	d003      	beq.n	8001100 <HAL_RCC_OscConfig+0x154>
 80010f8:	6923      	ldr	r3, [r4, #16]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	f040 815e 	bne.w	80013bc <HAL_RCC_OscConfig+0x410>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001100:	4a5a      	ldr	r2, [pc, #360]	; (800126c <HAL_RCC_OscConfig+0x2c0>)
 8001102:	6813      	ldr	r3, [r2, #0]
 8001104:	6961      	ldr	r1, [r4, #20]
 8001106:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800110a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800110e:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001110:	6823      	ldr	r3, [r4, #0]
 8001112:	f013 0f08 	tst.w	r3, #8
 8001116:	d03c      	beq.n	8001192 <HAL_RCC_OscConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001118:	69a3      	ldr	r3, [r4, #24]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d04f      	beq.n	80011be <HAL_RCC_OscConfig+0x212>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800111e:	4b55      	ldr	r3, [pc, #340]	; (8001274 <HAL_RCC_OscConfig+0x2c8>)
 8001120:	2201      	movs	r2, #1
 8001122:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001124:	f7ff fda8 	bl	8000c78 <HAL_GetTick>
 8001128:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800112a:	4e50      	ldr	r6, [pc, #320]	; (800126c <HAL_RCC_OscConfig+0x2c0>)
 800112c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800112e:	f013 0f02 	tst.w	r3, #2
 8001132:	d121      	bne.n	8001178 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001134:	f7ff fda0 	bl	8000c78 <HAL_GetTick>
 8001138:	1b40      	subs	r0, r0, r5
 800113a:	2802      	cmp	r0, #2
 800113c:	d9f6      	bls.n	800112c <HAL_RCC_OscConfig+0x180>
        {
          return HAL_TIMEOUT;
 800113e:	2003      	movs	r0, #3
 8001140:	e13f      	b.n	80013c2 <HAL_RCC_OscConfig+0x416>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001142:	4a4a      	ldr	r2, [pc, #296]	; (800126c <HAL_RCC_OscConfig+0x2c0>)
 8001144:	6813      	ldr	r3, [r2, #0]
 8001146:	6961      	ldr	r1, [r4, #20]
 8001148:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800114c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001150:	6013      	str	r3, [r2, #0]
 8001152:	e7dd      	b.n	8001110 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8001154:	4b46      	ldr	r3, [pc, #280]	; (8001270 <HAL_RCC_OscConfig+0x2c4>)
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800115a:	f7ff fd8d 	bl	8000c78 <HAL_GetTick>
 800115e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001160:	4e42      	ldr	r6, [pc, #264]	; (800126c <HAL_RCC_OscConfig+0x2c0>)
 8001162:	6833      	ldr	r3, [r6, #0]
 8001164:	f013 0f02 	tst.w	r3, #2
 8001168:	d0d2      	beq.n	8001110 <HAL_RCC_OscConfig+0x164>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800116a:	f7ff fd85 	bl	8000c78 <HAL_GetTick>
 800116e:	1b40      	subs	r0, r0, r5
 8001170:	2802      	cmp	r0, #2
 8001172:	d9f6      	bls.n	8001162 <HAL_RCC_OscConfig+0x1b6>
            return HAL_TIMEOUT;
 8001174:	2003      	movs	r0, #3
 8001176:	e124      	b.n	80013c2 <HAL_RCC_OscConfig+0x416>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001178:	4b3f      	ldr	r3, [pc, #252]	; (8001278 <HAL_RCC_OscConfig+0x2cc>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a3f      	ldr	r2, [pc, #252]	; (800127c <HAL_RCC_OscConfig+0x2d0>)
 800117e:	fba2 2303 	umull	r2, r3, r2, r3
 8001182:	0a5b      	lsrs	r3, r3, #9
 8001184:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001186:	bf00      	nop
  }
  while (Delay --);
 8001188:	9b01      	ldr	r3, [sp, #4]
 800118a:	1e5a      	subs	r2, r3, #1
 800118c:	9201      	str	r2, [sp, #4]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d1f9      	bne.n	8001186 <HAL_RCC_OscConfig+0x1da>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001192:	6823      	ldr	r3, [r4, #0]
 8001194:	f013 0f04 	tst.w	r3, #4
 8001198:	f000 809c 	beq.w	80012d4 <HAL_RCC_OscConfig+0x328>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800119c:	4b33      	ldr	r3, [pc, #204]	; (800126c <HAL_RCC_OscConfig+0x2c0>)
 800119e:	69db      	ldr	r3, [r3, #28]
 80011a0:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80011a4:	d11d      	bne.n	80011e2 <HAL_RCC_OscConfig+0x236>
      __HAL_RCC_PWR_CLK_ENABLE();
 80011a6:	4b31      	ldr	r3, [pc, #196]	; (800126c <HAL_RCC_OscConfig+0x2c0>)
 80011a8:	69da      	ldr	r2, [r3, #28]
 80011aa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80011ae:	61da      	str	r2, [r3, #28]
 80011b0:	69db      	ldr	r3, [r3, #28]
 80011b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b6:	9300      	str	r3, [sp, #0]
 80011b8:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 80011ba:	2501      	movs	r5, #1
 80011bc:	e012      	b.n	80011e4 <HAL_RCC_OscConfig+0x238>
      __HAL_RCC_LSI_DISABLE();
 80011be:	4b2d      	ldr	r3, [pc, #180]	; (8001274 <HAL_RCC_OscConfig+0x2c8>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80011c4:	f7ff fd58 	bl	8000c78 <HAL_GetTick>
 80011c8:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011ca:	4e28      	ldr	r6, [pc, #160]	; (800126c <HAL_RCC_OscConfig+0x2c0>)
 80011cc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80011ce:	f013 0f02 	tst.w	r3, #2
 80011d2:	d0de      	beq.n	8001192 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011d4:	f7ff fd50 	bl	8000c78 <HAL_GetTick>
 80011d8:	1b40      	subs	r0, r0, r5
 80011da:	2802      	cmp	r0, #2
 80011dc:	d9f6      	bls.n	80011cc <HAL_RCC_OscConfig+0x220>
          return HAL_TIMEOUT;
 80011de:	2003      	movs	r0, #3
 80011e0:	e0ef      	b.n	80013c2 <HAL_RCC_OscConfig+0x416>
    FlagStatus       pwrclkchanged = RESET;
 80011e2:	2500      	movs	r5, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011e4:	4b26      	ldr	r3, [pc, #152]	; (8001280 <HAL_RCC_OscConfig+0x2d4>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80011ec:	d011      	beq.n	8001212 <HAL_RCC_OscConfig+0x266>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011ee:	68e3      	ldr	r3, [r4, #12]
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d022      	beq.n	800123a <HAL_RCC_OscConfig+0x28e>
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d145      	bne.n	8001284 <HAL_RCC_OscConfig+0x2d8>
 80011f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80011fc:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001200:	6a1a      	ldr	r2, [r3, #32]
 8001202:	f022 0201 	bic.w	r2, r2, #1
 8001206:	621a      	str	r2, [r3, #32]
 8001208:	6a1a      	ldr	r2, [r3, #32]
 800120a:	f022 0204 	bic.w	r2, r2, #4
 800120e:	621a      	str	r2, [r3, #32]
 8001210:	e018      	b.n	8001244 <HAL_RCC_OscConfig+0x298>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001212:	4a1b      	ldr	r2, [pc, #108]	; (8001280 <HAL_RCC_OscConfig+0x2d4>)
 8001214:	6813      	ldr	r3, [r2, #0]
 8001216:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800121a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800121c:	f7ff fd2c 	bl	8000c78 <HAL_GetTick>
 8001220:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001222:	4f17      	ldr	r7, [pc, #92]	; (8001280 <HAL_RCC_OscConfig+0x2d4>)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	f413 7f80 	tst.w	r3, #256	; 0x100
 800122a:	d1e0      	bne.n	80011ee <HAL_RCC_OscConfig+0x242>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800122c:	f7ff fd24 	bl	8000c78 <HAL_GetTick>
 8001230:	1b80      	subs	r0, r0, r6
 8001232:	2864      	cmp	r0, #100	; 0x64
 8001234:	d9f6      	bls.n	8001224 <HAL_RCC_OscConfig+0x278>
          return HAL_TIMEOUT;
 8001236:	2003      	movs	r0, #3
 8001238:	e0c3      	b.n	80013c2 <HAL_RCC_OscConfig+0x416>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800123a:	4a0c      	ldr	r2, [pc, #48]	; (800126c <HAL_RCC_OscConfig+0x2c0>)
 800123c:	6a13      	ldr	r3, [r2, #32]
 800123e:	f043 0301 	orr.w	r3, r3, #1
 8001242:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001244:	68e3      	ldr	r3, [r4, #12]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d032      	beq.n	80012b0 <HAL_RCC_OscConfig+0x304>
      tickstart = HAL_GetTick();
 800124a:	f7ff fd15 	bl	8000c78 <HAL_GetTick>
 800124e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001250:	4f06      	ldr	r7, [pc, #24]	; (800126c <HAL_RCC_OscConfig+0x2c0>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001252:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001256:	6a3b      	ldr	r3, [r7, #32]
 8001258:	f013 0f02 	tst.w	r3, #2
 800125c:	d139      	bne.n	80012d2 <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800125e:	f7ff fd0b 	bl	8000c78 <HAL_GetTick>
 8001262:	1b80      	subs	r0, r0, r6
 8001264:	4540      	cmp	r0, r8
 8001266:	d9f6      	bls.n	8001256 <HAL_RCC_OscConfig+0x2aa>
          return HAL_TIMEOUT;
 8001268:	2003      	movs	r0, #3
 800126a:	e0aa      	b.n	80013c2 <HAL_RCC_OscConfig+0x416>
 800126c:	40021000 	.word	0x40021000
 8001270:	42420000 	.word	0x42420000
 8001274:	42420480 	.word	0x42420480
 8001278:	20000000 	.word	0x20000000
 800127c:	10624dd3 	.word	0x10624dd3
 8001280:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001284:	2b05      	cmp	r3, #5
 8001286:	d009      	beq.n	800129c <HAL_RCC_OscConfig+0x2f0>
 8001288:	4b51      	ldr	r3, [pc, #324]	; (80013d0 <HAL_RCC_OscConfig+0x424>)
 800128a:	6a1a      	ldr	r2, [r3, #32]
 800128c:	f022 0201 	bic.w	r2, r2, #1
 8001290:	621a      	str	r2, [r3, #32]
 8001292:	6a1a      	ldr	r2, [r3, #32]
 8001294:	f022 0204 	bic.w	r2, r2, #4
 8001298:	621a      	str	r2, [r3, #32]
 800129a:	e7d3      	b.n	8001244 <HAL_RCC_OscConfig+0x298>
 800129c:	4b4c      	ldr	r3, [pc, #304]	; (80013d0 <HAL_RCC_OscConfig+0x424>)
 800129e:	6a1a      	ldr	r2, [r3, #32]
 80012a0:	f042 0204 	orr.w	r2, r2, #4
 80012a4:	621a      	str	r2, [r3, #32]
 80012a6:	6a1a      	ldr	r2, [r3, #32]
 80012a8:	f042 0201 	orr.w	r2, r2, #1
 80012ac:	621a      	str	r2, [r3, #32]
 80012ae:	e7c9      	b.n	8001244 <HAL_RCC_OscConfig+0x298>
      tickstart = HAL_GetTick();
 80012b0:	f7ff fce2 	bl	8000c78 <HAL_GetTick>
 80012b4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012b6:	4f46      	ldr	r7, [pc, #280]	; (80013d0 <HAL_RCC_OscConfig+0x424>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012b8:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012bc:	6a3b      	ldr	r3, [r7, #32]
 80012be:	f013 0f02 	tst.w	r3, #2
 80012c2:	d006      	beq.n	80012d2 <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012c4:	f7ff fcd8 	bl	8000c78 <HAL_GetTick>
 80012c8:	1b80      	subs	r0, r0, r6
 80012ca:	4540      	cmp	r0, r8
 80012cc:	d9f6      	bls.n	80012bc <HAL_RCC_OscConfig+0x310>
          return HAL_TIMEOUT;
 80012ce:	2003      	movs	r0, #3
 80012d0:	e077      	b.n	80013c2 <HAL_RCC_OscConfig+0x416>
    if (pwrclkchanged == SET)
 80012d2:	b9e5      	cbnz	r5, 800130e <HAL_RCC_OscConfig+0x362>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012d4:	69e3      	ldr	r3, [r4, #28]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d072      	beq.n	80013c0 <HAL_RCC_OscConfig+0x414>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012da:	4a3d      	ldr	r2, [pc, #244]	; (80013d0 <HAL_RCC_OscConfig+0x424>)
 80012dc:	6852      	ldr	r2, [r2, #4]
 80012de:	f002 020c 	and.w	r2, r2, #12
 80012e2:	2a08      	cmp	r2, #8
 80012e4:	d056      	beq.n	8001394 <HAL_RCC_OscConfig+0x3e8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d017      	beq.n	800131a <HAL_RCC_OscConfig+0x36e>
        __HAL_RCC_PLL_DISABLE();
 80012ea:	4b3a      	ldr	r3, [pc, #232]	; (80013d4 <HAL_RCC_OscConfig+0x428>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80012f0:	f7ff fcc2 	bl	8000c78 <HAL_GetTick>
 80012f4:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012f6:	4d36      	ldr	r5, [pc, #216]	; (80013d0 <HAL_RCC_OscConfig+0x424>)
 80012f8:	682b      	ldr	r3, [r5, #0]
 80012fa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80012fe:	d047      	beq.n	8001390 <HAL_RCC_OscConfig+0x3e4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001300:	f7ff fcba 	bl	8000c78 <HAL_GetTick>
 8001304:	1b00      	subs	r0, r0, r4
 8001306:	2802      	cmp	r0, #2
 8001308:	d9f6      	bls.n	80012f8 <HAL_RCC_OscConfig+0x34c>
            return HAL_TIMEOUT;
 800130a:	2003      	movs	r0, #3
 800130c:	e059      	b.n	80013c2 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_PWR_CLK_DISABLE();
 800130e:	4a30      	ldr	r2, [pc, #192]	; (80013d0 <HAL_RCC_OscConfig+0x424>)
 8001310:	69d3      	ldr	r3, [r2, #28]
 8001312:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001316:	61d3      	str	r3, [r2, #28]
 8001318:	e7dc      	b.n	80012d4 <HAL_RCC_OscConfig+0x328>
        __HAL_RCC_PLL_DISABLE();
 800131a:	4b2e      	ldr	r3, [pc, #184]	; (80013d4 <HAL_RCC_OscConfig+0x428>)
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001320:	f7ff fcaa 	bl	8000c78 <HAL_GetTick>
 8001324:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001326:	4e2a      	ldr	r6, [pc, #168]	; (80013d0 <HAL_RCC_OscConfig+0x424>)
 8001328:	6833      	ldr	r3, [r6, #0]
 800132a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800132e:	d006      	beq.n	800133e <HAL_RCC_OscConfig+0x392>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001330:	f7ff fca2 	bl	8000c78 <HAL_GetTick>
 8001334:	1b40      	subs	r0, r0, r5
 8001336:	2802      	cmp	r0, #2
 8001338:	d9f6      	bls.n	8001328 <HAL_RCC_OscConfig+0x37c>
            return HAL_TIMEOUT;
 800133a:	2003      	movs	r0, #3
 800133c:	e041      	b.n	80013c2 <HAL_RCC_OscConfig+0x416>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800133e:	6a23      	ldr	r3, [r4, #32]
 8001340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001344:	d01a      	beq.n	800137c <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001346:	4922      	ldr	r1, [pc, #136]	; (80013d0 <HAL_RCC_OscConfig+0x424>)
 8001348:	684a      	ldr	r2, [r1, #4]
 800134a:	6a23      	ldr	r3, [r4, #32]
 800134c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800134e:	4303      	orrs	r3, r0
 8001350:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001354:	4313      	orrs	r3, r2
 8001356:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8001358:	4b1e      	ldr	r3, [pc, #120]	; (80013d4 <HAL_RCC_OscConfig+0x428>)
 800135a:	2201      	movs	r2, #1
 800135c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800135e:	f7ff fc8b 	bl	8000c78 <HAL_GetTick>
 8001362:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001364:	4d1a      	ldr	r5, [pc, #104]	; (80013d0 <HAL_RCC_OscConfig+0x424>)
 8001366:	682b      	ldr	r3, [r5, #0]
 8001368:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800136c:	d10e      	bne.n	800138c <HAL_RCC_OscConfig+0x3e0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800136e:	f7ff fc83 	bl	8000c78 <HAL_GetTick>
 8001372:	1b00      	subs	r0, r0, r4
 8001374:	2802      	cmp	r0, #2
 8001376:	d9f6      	bls.n	8001366 <HAL_RCC_OscConfig+0x3ba>
            return HAL_TIMEOUT;
 8001378:	2003      	movs	r0, #3
 800137a:	e022      	b.n	80013c2 <HAL_RCC_OscConfig+0x416>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800137c:	4a14      	ldr	r2, [pc, #80]	; (80013d0 <HAL_RCC_OscConfig+0x424>)
 800137e:	6853      	ldr	r3, [r2, #4]
 8001380:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001384:	68a1      	ldr	r1, [r4, #8]
 8001386:	430b      	orrs	r3, r1
 8001388:	6053      	str	r3, [r2, #4]
 800138a:	e7dc      	b.n	8001346 <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 800138c:	2000      	movs	r0, #0
 800138e:	e018      	b.n	80013c2 <HAL_RCC_OscConfig+0x416>
 8001390:	2000      	movs	r0, #0
 8001392:	e016      	b.n	80013c2 <HAL_RCC_OscConfig+0x416>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001394:	2b01      	cmp	r3, #1
 8001396:	d017      	beq.n	80013c8 <HAL_RCC_OscConfig+0x41c>
        pll_config = RCC->CFGR;
 8001398:	4b0d      	ldr	r3, [pc, #52]	; (80013d0 <HAL_RCC_OscConfig+0x424>)
 800139a:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800139c:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80013a0:	6a22      	ldr	r2, [r4, #32]
 80013a2:	4291      	cmp	r1, r2
 80013a4:	d112      	bne.n	80013cc <HAL_RCC_OscConfig+0x420>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80013a6:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
        return HAL_ERROR;
 80013ac:	1a18      	subs	r0, r3, r0
 80013ae:	bf18      	it	ne
 80013b0:	2001      	movne	r0, #1
 80013b2:	e006      	b.n	80013c2 <HAL_RCC_OscConfig+0x416>
    return HAL_ERROR;
 80013b4:	2001      	movs	r0, #1
}
 80013b6:	4770      	bx	lr
        return HAL_ERROR;
 80013b8:	2001      	movs	r0, #1
 80013ba:	e002      	b.n	80013c2 <HAL_RCC_OscConfig+0x416>
        return HAL_ERROR;
 80013bc:	2001      	movs	r0, #1
 80013be:	e000      	b.n	80013c2 <HAL_RCC_OscConfig+0x416>
  return HAL_OK;
 80013c0:	2000      	movs	r0, #0
}
 80013c2:	b002      	add	sp, #8
 80013c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 80013c8:	2001      	movs	r0, #1
 80013ca:	e7fa      	b.n	80013c2 <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
 80013cc:	2001      	movs	r0, #1
 80013ce:	e7f8      	b.n	80013c2 <HAL_RCC_OscConfig+0x416>
 80013d0:	40021000 	.word	0x40021000
 80013d4:	42420060 	.word	0x42420060

080013d8 <HAL_RCC_GetSysClockFreq>:
{
 80013d8:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80013da:	4b16      	ldr	r3, [pc, #88]	; (8001434 <HAL_RCC_GetSysClockFreq+0x5c>)
 80013dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013de:	f10d 0c18 	add.w	ip, sp, #24
 80013e2:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80013e6:	f240 2301 	movw	r3, #513	; 0x201
 80013ea:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 80013ee:	4b12      	ldr	r3, [pc, #72]	; (8001438 <HAL_RCC_GetSysClockFreq+0x60>)
 80013f0:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80013f2:	f003 020c 	and.w	r2, r3, #12
 80013f6:	2a08      	cmp	r2, #8
 80013f8:	d002      	beq.n	8001400 <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 80013fa:	4810      	ldr	r0, [pc, #64]	; (800143c <HAL_RCC_GetSysClockFreq+0x64>)
}
 80013fc:	b006      	add	sp, #24
 80013fe:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001400:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001404:	4462      	add	r2, ip
 8001406:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800140a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800140e:	d00c      	beq.n	800142a <HAL_RCC_GetSysClockFreq+0x52>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001410:	4b09      	ldr	r3, [pc, #36]	; (8001438 <HAL_RCC_GetSysClockFreq+0x60>)
 8001412:	685b      	ldr	r3, [r3, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001414:	4809      	ldr	r0, [pc, #36]	; (800143c <HAL_RCC_GetSysClockFreq+0x64>)
 8001416:	fb00 f002 	mul.w	r0, r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800141a:	f3c3 4340 	ubfx	r3, r3, #17, #1
 800141e:	4463      	add	r3, ip
 8001420:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001424:	fbb0 f0f3 	udiv	r0, r0, r3
 8001428:	e7e8      	b.n	80013fc <HAL_RCC_GetSysClockFreq+0x24>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800142a:	4805      	ldr	r0, [pc, #20]	; (8001440 <HAL_RCC_GetSysClockFreq+0x68>)
 800142c:	fb00 f002 	mul.w	r0, r0, r2
 8001430:	e7e4      	b.n	80013fc <HAL_RCC_GetSysClockFreq+0x24>
 8001432:	bf00      	nop
 8001434:	08001bf8 	.word	0x08001bf8
 8001438:	40021000 	.word	0x40021000
 800143c:	007a1200 	.word	0x007a1200
 8001440:	003d0900 	.word	0x003d0900

08001444 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001444:	2800      	cmp	r0, #0
 8001446:	f000 80a2 	beq.w	800158e <HAL_RCC_ClockConfig+0x14a>
{
 800144a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800144e:	460d      	mov	r5, r1
 8001450:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001452:	4b53      	ldr	r3, [pc, #332]	; (80015a0 <HAL_RCC_ClockConfig+0x15c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	428b      	cmp	r3, r1
 800145c:	d20b      	bcs.n	8001476 <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800145e:	4a50      	ldr	r2, [pc, #320]	; (80015a0 <HAL_RCC_ClockConfig+0x15c>)
 8001460:	6813      	ldr	r3, [r2, #0]
 8001462:	f023 0307 	bic.w	r3, r3, #7
 8001466:	430b      	orrs	r3, r1
 8001468:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800146a:	6813      	ldr	r3, [r2, #0]
 800146c:	f003 0307 	and.w	r3, r3, #7
 8001470:	428b      	cmp	r3, r1
 8001472:	f040 808e 	bne.w	8001592 <HAL_RCC_ClockConfig+0x14e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001476:	6823      	ldr	r3, [r4, #0]
 8001478:	f013 0f02 	tst.w	r3, #2
 800147c:	d017      	beq.n	80014ae <HAL_RCC_ClockConfig+0x6a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800147e:	f013 0f04 	tst.w	r3, #4
 8001482:	d004      	beq.n	800148e <HAL_RCC_ClockConfig+0x4a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001484:	4a47      	ldr	r2, [pc, #284]	; (80015a4 <HAL_RCC_ClockConfig+0x160>)
 8001486:	6853      	ldr	r3, [r2, #4]
 8001488:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800148c:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800148e:	6823      	ldr	r3, [r4, #0]
 8001490:	f013 0f08 	tst.w	r3, #8
 8001494:	d004      	beq.n	80014a0 <HAL_RCC_ClockConfig+0x5c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001496:	4a43      	ldr	r2, [pc, #268]	; (80015a4 <HAL_RCC_ClockConfig+0x160>)
 8001498:	6853      	ldr	r3, [r2, #4]
 800149a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800149e:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014a0:	4a40      	ldr	r2, [pc, #256]	; (80015a4 <HAL_RCC_ClockConfig+0x160>)
 80014a2:	6853      	ldr	r3, [r2, #4]
 80014a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80014a8:	68a1      	ldr	r1, [r4, #8]
 80014aa:	430b      	orrs	r3, r1
 80014ac:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014ae:	6823      	ldr	r3, [r4, #0]
 80014b0:	f013 0f01 	tst.w	r3, #1
 80014b4:	d031      	beq.n	800151a <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014b6:	6862      	ldr	r2, [r4, #4]
 80014b8:	2a01      	cmp	r2, #1
 80014ba:	d020      	beq.n	80014fe <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014bc:	2a02      	cmp	r2, #2
 80014be:	d025      	beq.n	800150c <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c0:	4b38      	ldr	r3, [pc, #224]	; (80015a4 <HAL_RCC_ClockConfig+0x160>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f013 0f02 	tst.w	r3, #2
 80014c8:	d065      	beq.n	8001596 <HAL_RCC_ClockConfig+0x152>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014ca:	4936      	ldr	r1, [pc, #216]	; (80015a4 <HAL_RCC_ClockConfig+0x160>)
 80014cc:	684b      	ldr	r3, [r1, #4]
 80014ce:	f023 0303 	bic.w	r3, r3, #3
 80014d2:	4313      	orrs	r3, r2
 80014d4:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 80014d6:	f7ff fbcf 	bl	8000c78 <HAL_GetTick>
 80014da:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014dc:	4f31      	ldr	r7, [pc, #196]	; (80015a4 <HAL_RCC_ClockConfig+0x160>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014de:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f003 030c 	and.w	r3, r3, #12
 80014e8:	6862      	ldr	r2, [r4, #4]
 80014ea:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80014ee:	d014      	beq.n	800151a <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014f0:	f7ff fbc2 	bl	8000c78 <HAL_GetTick>
 80014f4:	1b80      	subs	r0, r0, r6
 80014f6:	4540      	cmp	r0, r8
 80014f8:	d9f3      	bls.n	80014e2 <HAL_RCC_ClockConfig+0x9e>
        return HAL_TIMEOUT;
 80014fa:	2003      	movs	r0, #3
 80014fc:	e045      	b.n	800158a <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014fe:	4b29      	ldr	r3, [pc, #164]	; (80015a4 <HAL_RCC_ClockConfig+0x160>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001506:	d1e0      	bne.n	80014ca <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8001508:	2001      	movs	r0, #1
 800150a:	e03e      	b.n	800158a <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800150c:	4b25      	ldr	r3, [pc, #148]	; (80015a4 <HAL_RCC_ClockConfig+0x160>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001514:	d1d9      	bne.n	80014ca <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8001516:	2001      	movs	r0, #1
 8001518:	e037      	b.n	800158a <HAL_RCC_ClockConfig+0x146>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800151a:	4b21      	ldr	r3, [pc, #132]	; (80015a0 <HAL_RCC_ClockConfig+0x15c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0307 	and.w	r3, r3, #7
 8001522:	42ab      	cmp	r3, r5
 8001524:	d90a      	bls.n	800153c <HAL_RCC_ClockConfig+0xf8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001526:	4a1e      	ldr	r2, [pc, #120]	; (80015a0 <HAL_RCC_ClockConfig+0x15c>)
 8001528:	6813      	ldr	r3, [r2, #0]
 800152a:	f023 0307 	bic.w	r3, r3, #7
 800152e:	432b      	orrs	r3, r5
 8001530:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001532:	6813      	ldr	r3, [r2, #0]
 8001534:	f003 0307 	and.w	r3, r3, #7
 8001538:	42ab      	cmp	r3, r5
 800153a:	d12e      	bne.n	800159a <HAL_RCC_ClockConfig+0x156>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800153c:	6823      	ldr	r3, [r4, #0]
 800153e:	f013 0f04 	tst.w	r3, #4
 8001542:	d006      	beq.n	8001552 <HAL_RCC_ClockConfig+0x10e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001544:	4a17      	ldr	r2, [pc, #92]	; (80015a4 <HAL_RCC_ClockConfig+0x160>)
 8001546:	6853      	ldr	r3, [r2, #4]
 8001548:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800154c:	68e1      	ldr	r1, [r4, #12]
 800154e:	430b      	orrs	r3, r1
 8001550:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001552:	6823      	ldr	r3, [r4, #0]
 8001554:	f013 0f08 	tst.w	r3, #8
 8001558:	d007      	beq.n	800156a <HAL_RCC_ClockConfig+0x126>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800155a:	4a12      	ldr	r2, [pc, #72]	; (80015a4 <HAL_RCC_ClockConfig+0x160>)
 800155c:	6853      	ldr	r3, [r2, #4]
 800155e:	6921      	ldr	r1, [r4, #16]
 8001560:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001564:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001568:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800156a:	f7ff ff35 	bl	80013d8 <HAL_RCC_GetSysClockFreq>
 800156e:	4b0d      	ldr	r3, [pc, #52]	; (80015a4 <HAL_RCC_ClockConfig+0x160>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001576:	4a0c      	ldr	r2, [pc, #48]	; (80015a8 <HAL_RCC_ClockConfig+0x164>)
 8001578:	5cd3      	ldrb	r3, [r2, r3]
 800157a:	40d8      	lsrs	r0, r3
 800157c:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <HAL_RCC_ClockConfig+0x168>)
 800157e:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001580:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <HAL_RCC_ClockConfig+0x16c>)
 8001582:	6818      	ldr	r0, [r3, #0]
 8001584:	f7ff fb34 	bl	8000bf0 <HAL_InitTick>
  return HAL_OK;
 8001588:	2000      	movs	r0, #0
}
 800158a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 800158e:	2001      	movs	r0, #1
}
 8001590:	4770      	bx	lr
    return HAL_ERROR;
 8001592:	2001      	movs	r0, #1
 8001594:	e7f9      	b.n	800158a <HAL_RCC_ClockConfig+0x146>
        return HAL_ERROR;
 8001596:	2001      	movs	r0, #1
 8001598:	e7f7      	b.n	800158a <HAL_RCC_ClockConfig+0x146>
    return HAL_ERROR;
 800159a:	2001      	movs	r0, #1
 800159c:	e7f5      	b.n	800158a <HAL_RCC_ClockConfig+0x146>
 800159e:	bf00      	nop
 80015a0:	40022000 	.word	0x40022000
 80015a4:	40021000 	.word	0x40021000
 80015a8:	08001be0 	.word	0x08001be0
 80015ac:	20000000 	.word	0x20000000
 80015b0:	20000008 	.word	0x20000008

080015b4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80015b4:	4b04      	ldr	r3, [pc, #16]	; (80015c8 <HAL_RCC_GetPCLK1Freq+0x14>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80015bc:	4a03      	ldr	r2, [pc, #12]	; (80015cc <HAL_RCC_GetPCLK1Freq+0x18>)
 80015be:	5cd3      	ldrb	r3, [r2, r3]
 80015c0:	4a03      	ldr	r2, [pc, #12]	; (80015d0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80015c2:	6810      	ldr	r0, [r2, #0]
}
 80015c4:	40d8      	lsrs	r0, r3
 80015c6:	4770      	bx	lr
 80015c8:	40021000 	.word	0x40021000
 80015cc:	08001bf0 	.word	0x08001bf0
 80015d0:	20000000 	.word	0x20000000

080015d4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80015d4:	4b04      	ldr	r3, [pc, #16]	; (80015e8 <HAL_RCC_GetPCLK2Freq+0x14>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80015dc:	4a03      	ldr	r2, [pc, #12]	; (80015ec <HAL_RCC_GetPCLK2Freq+0x18>)
 80015de:	5cd3      	ldrb	r3, [r2, r3]
 80015e0:	4a03      	ldr	r2, [pc, #12]	; (80015f0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80015e2:	6810      	ldr	r0, [r2, #0]
}
 80015e4:	40d8      	lsrs	r0, r3
 80015e6:	4770      	bx	lr
 80015e8:	40021000 	.word	0x40021000
 80015ec:	08001bf0 	.word	0x08001bf0
 80015f0:	20000000 	.word	0x20000000

080015f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80015f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015f8:	b082      	sub	sp, #8
 80015fa:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80015fc:	6803      	ldr	r3, [r0, #0]
 80015fe:	f013 0f01 	tst.w	r3, #1
 8001602:	d034      	beq.n	800166e <HAL_RCCEx_PeriphCLKConfig+0x7a>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001604:	4b3e      	ldr	r3, [pc, #248]	; (8001700 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001606:	69db      	ldr	r3, [r3, #28]
 8001608:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800160c:	d147      	bne.n	800169e <HAL_RCCEx_PeriphCLKConfig+0xaa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800160e:	4b3c      	ldr	r3, [pc, #240]	; (8001700 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001610:	69da      	ldr	r2, [r3, #28]
 8001612:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001616:	61da      	str	r2, [r3, #28]
 8001618:	69db      	ldr	r3, [r3, #28]
 800161a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800161e:	9301      	str	r3, [sp, #4]
 8001620:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001622:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001624:	4b37      	ldr	r3, [pc, #220]	; (8001704 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f413 7f80 	tst.w	r3, #256	; 0x100
 800162c:	d039      	beq.n	80016a2 <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800162e:	4b34      	ldr	r3, [pc, #208]	; (8001700 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001630:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001632:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001636:	d011      	beq.n	800165c <HAL_RCCEx_PeriphCLKConfig+0x68>
 8001638:	6862      	ldr	r2, [r4, #4]
 800163a:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800163e:	429a      	cmp	r2, r3
 8001640:	d00c      	beq.n	800165c <HAL_RCCEx_PeriphCLKConfig+0x68>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001642:	4a2f      	ldr	r2, [pc, #188]	; (8001700 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001644:	6a13      	ldr	r3, [r2, #32]
 8001646:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800164a:	492f      	ldr	r1, [pc, #188]	; (8001708 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 800164c:	2601      	movs	r6, #1
 800164e:	600e      	str	r6, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001650:	2600      	movs	r6, #0
 8001652:	600e      	str	r6, [r1, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001654:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001656:	f013 0f01 	tst.w	r3, #1
 800165a:	d136      	bne.n	80016ca <HAL_RCCEx_PeriphCLKConfig+0xd6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800165c:	4a28      	ldr	r2, [pc, #160]	; (8001700 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800165e:	6a13      	ldr	r3, [r2, #32]
 8001660:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001664:	6861      	ldr	r1, [r4, #4]
 8001666:	430b      	orrs	r3, r1
 8001668:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800166a:	2d00      	cmp	r5, #0
 800166c:	d13e      	bne.n	80016ec <HAL_RCCEx_PeriphCLKConfig+0xf8>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800166e:	6823      	ldr	r3, [r4, #0]
 8001670:	f013 0f02 	tst.w	r3, #2
 8001674:	d006      	beq.n	8001684 <HAL_RCCEx_PeriphCLKConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001676:	4a22      	ldr	r2, [pc, #136]	; (8001700 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001678:	6853      	ldr	r3, [r2, #4]
 800167a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800167e:	68a1      	ldr	r1, [r4, #8]
 8001680:	430b      	orrs	r3, r1
 8001682:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001684:	6823      	ldr	r3, [r4, #0]
 8001686:	f013 0f10 	tst.w	r3, #16
 800168a:	d034      	beq.n	80016f6 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800168c:	4a1c      	ldr	r2, [pc, #112]	; (8001700 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800168e:	6853      	ldr	r3, [r2, #4]
 8001690:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001694:	68e1      	ldr	r1, [r4, #12]
 8001696:	430b      	orrs	r3, r1
 8001698:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800169a:	2000      	movs	r0, #0
 800169c:	e02c      	b.n	80016f8 <HAL_RCCEx_PeriphCLKConfig+0x104>
    FlagStatus       pwrclkchanged = RESET;
 800169e:	2500      	movs	r5, #0
 80016a0:	e7c0      	b.n	8001624 <HAL_RCCEx_PeriphCLKConfig+0x30>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016a2:	4a18      	ldr	r2, [pc, #96]	; (8001704 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80016a4:	6813      	ldr	r3, [r2, #0]
 80016a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016aa:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80016ac:	f7ff fae4 	bl	8000c78 <HAL_GetTick>
 80016b0:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b2:	4f14      	ldr	r7, [pc, #80]	; (8001704 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80016ba:	d1b8      	bne.n	800162e <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016bc:	f7ff fadc 	bl	8000c78 <HAL_GetTick>
 80016c0:	1b80      	subs	r0, r0, r6
 80016c2:	2864      	cmp	r0, #100	; 0x64
 80016c4:	d9f6      	bls.n	80016b4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 80016c6:	2003      	movs	r0, #3
 80016c8:	e016      	b.n	80016f8 <HAL_RCCEx_PeriphCLKConfig+0x104>
        tickstart = HAL_GetTick();
 80016ca:	f7ff fad5 	bl	8000c78 <HAL_GetTick>
 80016ce:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016d0:	4f0b      	ldr	r7, [pc, #44]	; (8001700 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016d2:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016d6:	6a3b      	ldr	r3, [r7, #32]
 80016d8:	f013 0f02 	tst.w	r3, #2
 80016dc:	d1be      	bne.n	800165c <HAL_RCCEx_PeriphCLKConfig+0x68>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016de:	f7ff facb 	bl	8000c78 <HAL_GetTick>
 80016e2:	1b80      	subs	r0, r0, r6
 80016e4:	4540      	cmp	r0, r8
 80016e6:	d9f6      	bls.n	80016d6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
            return HAL_TIMEOUT;
 80016e8:	2003      	movs	r0, #3
 80016ea:	e005      	b.n	80016f8 <HAL_RCCEx_PeriphCLKConfig+0x104>
      __HAL_RCC_PWR_CLK_DISABLE();
 80016ec:	69d3      	ldr	r3, [r2, #28]
 80016ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016f2:	61d3      	str	r3, [r2, #28]
 80016f4:	e7bb      	b.n	800166e <HAL_RCCEx_PeriphCLKConfig+0x7a>
  return HAL_OK;
 80016f6:	2000      	movs	r0, #0
}
 80016f8:	b002      	add	sp, #8
 80016fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80016fe:	bf00      	nop
 8001700:	40021000 	.word	0x40021000
 8001704:	40007000 	.word	0x40007000
 8001708:	42420440 	.word	0x42420440

0800170c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800170c:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800170e:	6a03      	ldr	r3, [r0, #32]
 8001710:	f023 0301 	bic.w	r3, r3, #1
 8001714:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001716:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001718:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800171a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800171c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001720:	680d      	ldr	r5, [r1, #0]
 8001722:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001724:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001728:	688d      	ldr	r5, [r1, #8]
 800172a:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800172c:	4d0b      	ldr	r5, [pc, #44]	; (800175c <TIM_OC1_SetConfig+0x50>)
 800172e:	42a8      	cmp	r0, r5
 8001730:	d006      	beq.n	8001740 <TIM_OC1_SetConfig+0x34>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001732:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001734:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001736:	684a      	ldr	r2, [r1, #4]
 8001738:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800173a:	6203      	str	r3, [r0, #32]
}
 800173c:	bc70      	pop	{r4, r5, r6}
 800173e:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8001740:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001744:	68cd      	ldr	r5, [r1, #12]
 8001746:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8001748:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800174c:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8001750:	694d      	ldr	r5, [r1, #20]
 8001752:	698e      	ldr	r6, [r1, #24]
 8001754:	4335      	orrs	r5, r6
 8001756:	432c      	orrs	r4, r5
 8001758:	e7eb      	b.n	8001732 <TIM_OC1_SetConfig+0x26>
 800175a:	bf00      	nop
 800175c:	40012c00 	.word	0x40012c00

08001760 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001760:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001762:	6a03      	ldr	r3, [r0, #32]
 8001764:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001768:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800176a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800176c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800176e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001770:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001774:	680d      	ldr	r5, [r1, #0]
 8001776:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001778:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800177c:	688d      	ldr	r5, [r1, #8]
 800177e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001782:	4d0c      	ldr	r5, [pc, #48]	; (80017b4 <TIM_OC3_SetConfig+0x54>)
 8001784:	42a8      	cmp	r0, r5
 8001786:	d006      	beq.n	8001796 <TIM_OC3_SetConfig+0x36>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001788:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800178a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800178c:	684a      	ldr	r2, [r1, #4]
 800178e:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001790:	6203      	str	r3, [r0, #32]
}
 8001792:	bc70      	pop	{r4, r5, r6}
 8001794:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8001796:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800179a:	68cd      	ldr	r5, [r1, #12]
 800179c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80017a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80017a4:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80017a8:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80017aa:	698e      	ldr	r6, [r1, #24]
 80017ac:	4335      	orrs	r5, r6
 80017ae:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 80017b2:	e7e9      	b.n	8001788 <TIM_OC3_SetConfig+0x28>
 80017b4:	40012c00 	.word	0x40012c00

080017b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80017b8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80017ba:	6a03      	ldr	r3, [r0, #32]
 80017bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80017c0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80017c2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80017c4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80017c6:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80017c8:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80017cc:	680d      	ldr	r5, [r1, #0]
 80017ce:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80017d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80017d6:	688d      	ldr	r5, [r1, #8]
 80017d8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80017dc:	4d07      	ldr	r5, [pc, #28]	; (80017fc <TIM_OC4_SetConfig+0x44>)
 80017de:	42a8      	cmp	r0, r5
 80017e0:	d006      	beq.n	80017f0 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80017e2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80017e4:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80017e6:	684a      	ldr	r2, [r1, #4]
 80017e8:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80017ea:	6203      	str	r3, [r0, #32]
}
 80017ec:	bc30      	pop	{r4, r5}
 80017ee:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 80017f0:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80017f4:	694d      	ldr	r5, [r1, #20]
 80017f6:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80017fa:	e7f2      	b.n	80017e2 <TIM_OC4_SetConfig+0x2a>
 80017fc:	40012c00 	.word	0x40012c00

08001800 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8001800:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001802:	4a25      	ldr	r2, [pc, #148]	; (8001898 <TIM_Base_SetConfig+0x98>)
 8001804:	4290      	cmp	r0, r2
 8001806:	d014      	beq.n	8001832 <TIM_Base_SetConfig+0x32>
 8001808:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800180c:	d02b      	beq.n	8001866 <TIM_Base_SetConfig+0x66>
 800180e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001812:	4290      	cmp	r0, r2
 8001814:	d022      	beq.n	800185c <TIM_Base_SetConfig+0x5c>
 8001816:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800181a:	4290      	cmp	r0, r2
 800181c:	d037      	beq.n	800188e <TIM_Base_SetConfig+0x8e>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800181e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001822:	694a      	ldr	r2, [r1, #20]
 8001824:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001826:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001828:	688b      	ldr	r3, [r1, #8]
 800182a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800182c:	680b      	ldr	r3, [r1, #0]
 800182e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001830:	e02a      	b.n	8001888 <TIM_Base_SetConfig+0x88>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001836:	684a      	ldr	r2, [r1, #4]
 8001838:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 800183a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800183e:	68ca      	ldr	r2, [r1, #12]
 8001840:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001842:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001846:	694a      	ldr	r2, [r1, #20]
 8001848:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800184a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800184c:	688b      	ldr	r3, [r1, #8]
 800184e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001850:	680b      	ldr	r3, [r1, #0]
 8001852:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8001854:	690a      	ldr	r2, [r1, #16]
 8001856:	4b10      	ldr	r3, [pc, #64]	; (8001898 <TIM_Base_SetConfig+0x98>)
 8001858:	631a      	str	r2, [r3, #48]	; 0x30
 800185a:	e015      	b.n	8001888 <TIM_Base_SetConfig+0x88>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800185c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001860:	684a      	ldr	r2, [r1, #4]
 8001862:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001864:	e003      	b.n	800186e <TIM_Base_SetConfig+0x6e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800186a:	684a      	ldr	r2, [r1, #4]
 800186c:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 800186e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001872:	68ca      	ldr	r2, [r1, #12]
 8001874:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001876:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800187a:	694a      	ldr	r2, [r1, #20]
 800187c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800187e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001880:	688b      	ldr	r3, [r1, #8]
 8001882:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001884:	680b      	ldr	r3, [r1, #0]
 8001886:	6283      	str	r3, [r0, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8001888:	2301      	movs	r3, #1
 800188a:	6143      	str	r3, [r0, #20]
}
 800188c:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800188e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001892:	684a      	ldr	r2, [r1, #4]
 8001894:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001896:	e7ea      	b.n	800186e <TIM_Base_SetConfig+0x6e>
 8001898:	40012c00 	.word	0x40012c00

0800189c <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800189c:	b340      	cbz	r0, 80018f0 <HAL_TIM_PWM_Init+0x54>
{
 800189e:	b510      	push	{r4, lr}
 80018a0:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80018a2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80018a6:	b1f3      	cbz	r3, 80018e6 <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80018a8:	2302      	movs	r3, #2
 80018aa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018ae:	4621      	mov	r1, r4
 80018b0:	f851 0b04 	ldr.w	r0, [r1], #4
 80018b4:	f7ff ffa4 	bl	8001800 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018b8:	2301      	movs	r3, #1
 80018ba:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018be:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80018c2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80018c6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80018ca:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018ce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80018d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80018d6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80018da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80018de:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80018e2:	2000      	movs	r0, #0
}
 80018e4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80018e6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80018ea:	f7fe ffad 	bl	8000848 <HAL_TIM_PWM_MspInit>
 80018ee:	e7db      	b.n	80018a8 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 80018f0:	2001      	movs	r0, #1
}
 80018f2:	4770      	bx	lr

080018f4 <TIM_OC2_SetConfig>:
{
 80018f4:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80018f6:	6a03      	ldr	r3, [r0, #32]
 80018f8:	f023 0310 	bic.w	r3, r3, #16
 80018fc:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80018fe:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8001900:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001902:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001904:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001908:	680d      	ldr	r5, [r1, #0]
 800190a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800190e:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001912:	688d      	ldr	r5, [r1, #8]
 8001914:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001918:	4d0c      	ldr	r5, [pc, #48]	; (800194c <TIM_OC2_SetConfig+0x58>)
 800191a:	42a8      	cmp	r0, r5
 800191c:	d006      	beq.n	800192c <TIM_OC2_SetConfig+0x38>
  TIMx->CR2 = tmpcr2;
 800191e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001920:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001922:	684a      	ldr	r2, [r1, #4]
 8001924:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001926:	6203      	str	r3, [r0, #32]
}
 8001928:	bc70      	pop	{r4, r5, r6}
 800192a:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 800192c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001930:	68cd      	ldr	r5, [r1, #12]
 8001932:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8001936:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800193a:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800193e:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001940:	698e      	ldr	r6, [r1, #24]
 8001942:	4335      	orrs	r5, r6
 8001944:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8001948:	e7e9      	b.n	800191e <TIM_OC2_SetConfig+0x2a>
 800194a:	bf00      	nop
 800194c:	40012c00 	.word	0x40012c00

08001950 <HAL_TIM_PWM_ConfigChannel>:
{
 8001950:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001952:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001956:	2b01      	cmp	r3, #1
 8001958:	d060      	beq.n	8001a1c <HAL_TIM_PWM_ConfigChannel+0xcc>
 800195a:	4604      	mov	r4, r0
 800195c:	460d      	mov	r5, r1
 800195e:	2301      	movs	r3, #1
 8001960:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8001964:	2a0c      	cmp	r2, #12
 8001966:	d81a      	bhi.n	800199e <HAL_TIM_PWM_ConfigChannel+0x4e>
 8001968:	e8df f002 	tbb	[pc, r2]
 800196c:	19191907 	.word	0x19191907
 8001970:	1919191d 	.word	0x1919191d
 8001974:	19191931 	.word	0x19191931
 8001978:	44          	.byte	0x44
 8001979:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800197a:	6800      	ldr	r0, [r0, #0]
 800197c:	f7ff fec6 	bl	800170c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001980:	6822      	ldr	r2, [r4, #0]
 8001982:	6993      	ldr	r3, [r2, #24]
 8001984:	f043 0308 	orr.w	r3, r3, #8
 8001988:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800198a:	6822      	ldr	r2, [r4, #0]
 800198c:	6993      	ldr	r3, [r2, #24]
 800198e:	f023 0304 	bic.w	r3, r3, #4
 8001992:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001994:	6822      	ldr	r2, [r4, #0]
 8001996:	6993      	ldr	r3, [r2, #24]
 8001998:	6929      	ldr	r1, [r5, #16]
 800199a:	430b      	orrs	r3, r1
 800199c:	6193      	str	r3, [r2, #24]
  __HAL_UNLOCK(htim);
 800199e:	2000      	movs	r0, #0
 80019a0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80019a4:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80019a6:	6800      	ldr	r0, [r0, #0]
 80019a8:	f7ff ffa4 	bl	80018f4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80019ac:	6822      	ldr	r2, [r4, #0]
 80019ae:	6993      	ldr	r3, [r2, #24]
 80019b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019b4:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80019b6:	6822      	ldr	r2, [r4, #0]
 80019b8:	6993      	ldr	r3, [r2, #24]
 80019ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80019be:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80019c0:	6822      	ldr	r2, [r4, #0]
 80019c2:	6993      	ldr	r3, [r2, #24]
 80019c4:	6929      	ldr	r1, [r5, #16]
 80019c6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80019ca:	6193      	str	r3, [r2, #24]
      break;
 80019cc:	e7e7      	b.n	800199e <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80019ce:	6800      	ldr	r0, [r0, #0]
 80019d0:	f7ff fec6 	bl	8001760 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80019d4:	6822      	ldr	r2, [r4, #0]
 80019d6:	69d3      	ldr	r3, [r2, #28]
 80019d8:	f043 0308 	orr.w	r3, r3, #8
 80019dc:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80019de:	6822      	ldr	r2, [r4, #0]
 80019e0:	69d3      	ldr	r3, [r2, #28]
 80019e2:	f023 0304 	bic.w	r3, r3, #4
 80019e6:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80019e8:	6822      	ldr	r2, [r4, #0]
 80019ea:	69d3      	ldr	r3, [r2, #28]
 80019ec:	6929      	ldr	r1, [r5, #16]
 80019ee:	430b      	orrs	r3, r1
 80019f0:	61d3      	str	r3, [r2, #28]
      break;
 80019f2:	e7d4      	b.n	800199e <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80019f4:	6800      	ldr	r0, [r0, #0]
 80019f6:	f7ff fedf 	bl	80017b8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80019fa:	6822      	ldr	r2, [r4, #0]
 80019fc:	69d3      	ldr	r3, [r2, #28]
 80019fe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a02:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001a04:	6822      	ldr	r2, [r4, #0]
 8001a06:	69d3      	ldr	r3, [r2, #28]
 8001a08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001a0c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001a0e:	6822      	ldr	r2, [r4, #0]
 8001a10:	69d3      	ldr	r3, [r2, #28]
 8001a12:	6929      	ldr	r1, [r5, #16]
 8001a14:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001a18:	61d3      	str	r3, [r2, #28]
      break;
 8001a1a:	e7c0      	b.n	800199e <HAL_TIM_PWM_ConfigChannel+0x4e>
  __HAL_LOCK(htim);
 8001a1c:	2002      	movs	r0, #2
 8001a1e:	e7c1      	b.n	80019a4 <HAL_TIM_PWM_ConfigChannel+0x54>

08001a20 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001a20:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d02b      	beq.n	8001a80 <HAL_TIMEx_MasterConfigSynchronization+0x60>
{
 8001a28:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a30:	2302      	movs	r3, #2
 8001a32:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001a36:	6804      	ldr	r4, [r0, #0]
 8001a38:	6863      	ldr	r3, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001a3a:	68a2      	ldr	r2, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001a3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001a40:	680d      	ldr	r5, [r1, #0]
 8001a42:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001a44:	6063      	str	r3, [r4, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a46:	6803      	ldr	r3, [r0, #0]
 8001a48:	4c0e      	ldr	r4, [pc, #56]	; (8001a84 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8001a4a:	42a3      	cmp	r3, r4
 8001a4c:	d00a      	beq.n	8001a64 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8001a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a52:	d007      	beq.n	8001a64 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8001a54:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8001a58:	42a3      	cmp	r3, r4
 8001a5a:	d003      	beq.n	8001a64 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8001a5c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001a60:	42a3      	cmp	r3, r4
 8001a62:	d104      	bne.n	8001a6e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001a64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001a68:	6849      	ldr	r1, [r1, #4]
 8001a6a:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001a6c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001a74:	2300      	movs	r3, #0
 8001a76:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8001a7a:	4618      	mov	r0, r3
}
 8001a7c:	bc30      	pop	{r4, r5}
 8001a7e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8001a80:	2002      	movs	r0, #2
}
 8001a82:	4770      	bx	lr
 8001a84:	40012c00 	.word	0x40012c00

08001a88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001a88:	b510      	push	{r4, lr}
 8001a8a:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a8c:	6802      	ldr	r2, [r0, #0]
 8001a8e:	6913      	ldr	r3, [r2, #16]
 8001a90:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a94:	68c1      	ldr	r1, [r0, #12]
 8001a96:	430b      	orrs	r3, r1
 8001a98:	6113      	str	r3, [r2, #16]
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
  MODIFY_REG(huart->Instance->CR1,
 8001a9a:	6801      	ldr	r1, [r0, #0]
 8001a9c:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001a9e:	6883      	ldr	r3, [r0, #8]
 8001aa0:	6900      	ldr	r0, [r0, #16]
 8001aa2:	4303      	orrs	r3, r0
 8001aa4:	6960      	ldr	r0, [r4, #20]
 8001aa6:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8001aa8:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8001aac:	f022 020c 	bic.w	r2, r2, #12
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ab4:	6822      	ldr	r2, [r4, #0]
 8001ab6:	6953      	ldr	r3, [r2, #20]
 8001ab8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001abc:	69a1      	ldr	r1, [r4, #24]
 8001abe:	430b      	orrs	r3, r1
 8001ac0:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 8001ac2:	6822      	ldr	r2, [r4, #0]
 8001ac4:	4b10      	ldr	r3, [pc, #64]	; (8001b08 <UART_SetConfig+0x80>)
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d01a      	beq.n	8001b00 <UART_SetConfig+0x78>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001aca:	f7ff fd73 	bl	80015b4 <HAL_RCC_GetPCLK1Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001ace:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001ad2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001ad6:	6863      	ldr	r3, [r4, #4]
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ade:	6824      	ldr	r4, [r4, #0]
 8001ae0:	480a      	ldr	r0, [pc, #40]	; (8001b0c <UART_SetConfig+0x84>)
 8001ae2:	fba0 2103 	umull	r2, r1, r0, r3
 8001ae6:	0949      	lsrs	r1, r1, #5
 8001ae8:	2264      	movs	r2, #100	; 0x64
 8001aea:	fb02 3311 	mls	r3, r2, r1, r3
 8001aee:	011b      	lsls	r3, r3, #4
 8001af0:	3332      	adds	r3, #50	; 0x32
 8001af2:	fba0 2303 	umull	r2, r3, r0, r3
 8001af6:	0109      	lsls	r1, r1, #4
 8001af8:	eb01 1353 	add.w	r3, r1, r3, lsr #5
 8001afc:	60a3      	str	r3, [r4, #8]
#endif /* USART_CR1_OVER8 */
}
 8001afe:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8001b00:	f7ff fd68 	bl	80015d4 <HAL_RCC_GetPCLK2Freq>
 8001b04:	e7e3      	b.n	8001ace <UART_SetConfig+0x46>
 8001b06:	bf00      	nop
 8001b08:	40013800 	.word	0x40013800
 8001b0c:	51eb851f 	.word	0x51eb851f

08001b10 <HAL_UART_Init>:
  if (huart == NULL)
 8001b10:	b358      	cbz	r0, 8001b6a <HAL_UART_Init+0x5a>
{
 8001b12:	b510      	push	{r4, lr}
 8001b14:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8001b16:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001b1a:	b30b      	cbz	r3, 8001b60 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8001b1c:	2324      	movs	r3, #36	; 0x24
 8001b1e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001b22:	6822      	ldr	r2, [r4, #0]
 8001b24:	68d3      	ldr	r3, [r2, #12]
 8001b26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001b2a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001b2c:	4620      	mov	r0, r4
 8001b2e:	f7ff ffab 	bl	8001a88 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b32:	6822      	ldr	r2, [r4, #0]
 8001b34:	6913      	ldr	r3, [r2, #16]
 8001b36:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001b3a:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b3c:	6822      	ldr	r2, [r4, #0]
 8001b3e:	6953      	ldr	r3, [r2, #20]
 8001b40:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001b44:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8001b46:	6822      	ldr	r2, [r4, #0]
 8001b48:	68d3      	ldr	r3, [r2, #12]
 8001b4a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b4e:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b50:	2000      	movs	r0, #0
 8001b52:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001b54:	2320      	movs	r3, #32
 8001b56:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001b5a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8001b5e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001b60:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001b64:	f7fe ffb2 	bl	8000acc <HAL_UART_MspInit>
 8001b68:	e7d8      	b.n	8001b1c <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8001b6a:	2001      	movs	r0, #1
}
 8001b6c:	4770      	bx	lr
	...

08001b70 <__libc_init_array>:
 8001b70:	b570      	push	{r4, r5, r6, lr}
 8001b72:	2600      	movs	r6, #0
 8001b74:	4d0c      	ldr	r5, [pc, #48]	; (8001ba8 <__libc_init_array+0x38>)
 8001b76:	4c0d      	ldr	r4, [pc, #52]	; (8001bac <__libc_init_array+0x3c>)
 8001b78:	1b64      	subs	r4, r4, r5
 8001b7a:	10a4      	asrs	r4, r4, #2
 8001b7c:	42a6      	cmp	r6, r4
 8001b7e:	d109      	bne.n	8001b94 <__libc_init_array+0x24>
 8001b80:	f000 f822 	bl	8001bc8 <_init>
 8001b84:	2600      	movs	r6, #0
 8001b86:	4d0a      	ldr	r5, [pc, #40]	; (8001bb0 <__libc_init_array+0x40>)
 8001b88:	4c0a      	ldr	r4, [pc, #40]	; (8001bb4 <__libc_init_array+0x44>)
 8001b8a:	1b64      	subs	r4, r4, r5
 8001b8c:	10a4      	asrs	r4, r4, #2
 8001b8e:	42a6      	cmp	r6, r4
 8001b90:	d105      	bne.n	8001b9e <__libc_init_array+0x2e>
 8001b92:	bd70      	pop	{r4, r5, r6, pc}
 8001b94:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b98:	4798      	blx	r3
 8001b9a:	3601      	adds	r6, #1
 8001b9c:	e7ee      	b.n	8001b7c <__libc_init_array+0xc>
 8001b9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ba2:	4798      	blx	r3
 8001ba4:	3601      	adds	r6, #1
 8001ba6:	e7f2      	b.n	8001b8e <__libc_init_array+0x1e>
 8001ba8:	08001c0c 	.word	0x08001c0c
 8001bac:	08001c0c 	.word	0x08001c0c
 8001bb0:	08001c0c 	.word	0x08001c0c
 8001bb4:	08001c10 	.word	0x08001c10

08001bb8 <memset>:
 8001bb8:	4603      	mov	r3, r0
 8001bba:	4402      	add	r2, r0
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d100      	bne.n	8001bc2 <memset+0xa>
 8001bc0:	4770      	bx	lr
 8001bc2:	f803 1b01 	strb.w	r1, [r3], #1
 8001bc6:	e7f9      	b.n	8001bbc <memset+0x4>

08001bc8 <_init>:
 8001bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bca:	bf00      	nop
 8001bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bce:	bc08      	pop	{r3}
 8001bd0:	469e      	mov	lr, r3
 8001bd2:	4770      	bx	lr

08001bd4 <_fini>:
 8001bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bd6:	bf00      	nop
 8001bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bda:	bc08      	pop	{r3}
 8001bdc:	469e      	mov	lr, r3
 8001bde:	4770      	bx	lr
