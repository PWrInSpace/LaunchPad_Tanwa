
tanwa.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a98  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08001ba4  08001ba4  00011ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001bcc  08001bcc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001bcc  08001bcc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001bcc  08001bcc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001bcc  08001bcc  00011bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001bd0  08001bd0  00011bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001bd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ac  2000000c  08001be0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b8  08001be0  000204b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ff64  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000024c1  00000000  00000000  0002ff99  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d38  00000000  00000000  00032460  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ff8  00000000  00000000  00033198  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017c0d  00000000  00000000  00034190  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000be02  00000000  00000000  0004bd9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000895d8  00000000  00000000  00057b9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e1177  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022f4  00000000  00000000  000e11f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000bad5  00000000  00000000  000e34e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001b8c 	.word	0x08001b8c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001b8c 	.word	0x08001b8c

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000150:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	2400      	movs	r4, #0
 8000154:	9404      	str	r4, [sp, #16]
 8000156:	9405      	str	r4, [sp, #20]
 8000158:	9406      	str	r4, [sp, #24]
 800015a:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800015c:	4b33      	ldr	r3, [pc, #204]	; (800022c <MX_GPIO_Init+0xe0>)
 800015e:	699a      	ldr	r2, [r3, #24]
 8000160:	f042 0210 	orr.w	r2, r2, #16
 8000164:	619a      	str	r2, [r3, #24]
 8000166:	699a      	ldr	r2, [r3, #24]
 8000168:	f002 0210 	and.w	r2, r2, #16
 800016c:	9200      	str	r2, [sp, #0]
 800016e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000170:	699a      	ldr	r2, [r3, #24]
 8000172:	f042 0220 	orr.w	r2, r2, #32
 8000176:	619a      	str	r2, [r3, #24]
 8000178:	699a      	ldr	r2, [r3, #24]
 800017a:	f002 0220 	and.w	r2, r2, #32
 800017e:	9201      	str	r2, [sp, #4]
 8000180:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000182:	699a      	ldr	r2, [r3, #24]
 8000184:	f042 0204 	orr.w	r2, r2, #4
 8000188:	619a      	str	r2, [r3, #24]
 800018a:	699a      	ldr	r2, [r3, #24]
 800018c:	f002 0204 	and.w	r2, r2, #4
 8000190:	9202      	str	r2, [sp, #8]
 8000192:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000194:	699a      	ldr	r2, [r3, #24]
 8000196:	f042 0208 	orr.w	r2, r2, #8
 800019a:	619a      	str	r2, [r3, #24]
 800019c:	699b      	ldr	r3, [r3, #24]
 800019e:	f003 0308 	and.w	r3, r3, #8
 80001a2:	9303      	str	r3, [sp, #12]
 80001a4:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PQD_D1_Pin|PQD_D2_Pin, GPIO_PIN_RESET);
 80001a6:	4e22      	ldr	r6, [pc, #136]	; (8000230 <MX_GPIO_Init+0xe4>)
 80001a8:	4622      	mov	r2, r4
 80001aa:	21c0      	movs	r1, #192	; 0xc0
 80001ac:	4630      	mov	r0, r6
 80001ae:	f000 fd6d 	bl	8000c8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HX1_SCL_Pin|QD_D2_Pin|QD_D1_Pin|DEPR_CLOSE_Pin
 80001b2:	4d20      	ldr	r5, [pc, #128]	; (8000234 <MX_GPIO_Init+0xe8>)
 80001b4:	4622      	mov	r2, r4
 80001b6:	f24e 21d0 	movw	r1, #58064	; 0xe2d0
 80001ba:	4628      	mov	r0, r5
 80001bc:	f000 fd66 	bl	8000c8c <HAL_GPIO_WritePin>
                          |DEPR_OPEN_Pin|FILL_CLOSE_Pin|FILL_OPEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = BLTH_XBEE_Pin|FILL_O_LIMIT_SW_Pin|FILL_C_LIMIT_SW_Pin;
 80001c0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80001c4:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80001c6:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001c8:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80001ca:	a904      	add	r1, sp, #16
 80001cc:	481a      	ldr	r0, [pc, #104]	; (8000238 <MX_GPIO_Init+0xec>)
 80001ce:	f000 fc67 	bl	8000aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DEPR_O_LIMIT_SW_Pin|DEPR_C_LIMIT_SW_Pin|HX2_SDA_Pin|HX2_SCL_Pin;
 80001d2:	2333      	movs	r3, #51	; 0x33
 80001d4:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80001d6:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001d8:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001da:	a904      	add	r1, sp, #16
 80001dc:	4630      	mov	r0, r6
 80001de:	f000 fc5f 	bl	8000aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = PQD_D1_Pin|PQD_D2_Pin;
 80001e2:	23c0      	movs	r3, #192	; 0xc0
 80001e4:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001e6:	f04f 0801 	mov.w	r8, #1
 80001ea:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001ee:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001f0:	2702      	movs	r7, #2
 80001f2:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001f4:	a904      	add	r1, sp, #16
 80001f6:	4630      	mov	r0, r6
 80001f8:	f000 fc52 	bl	8000aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HX1_SDA_Pin;
 80001fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000200:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000202:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000204:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(HX1_SDA_GPIO_Port, &GPIO_InitStruct);
 8000206:	a904      	add	r1, sp, #16
 8000208:	4628      	mov	r0, r5
 800020a:	f000 fc49 	bl	8000aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = HX1_SCL_Pin|QD_D2_Pin|QD_D1_Pin|DEPR_CLOSE_Pin
 800020e:	f24e 23d0 	movw	r3, #58064	; 0xe2d0
 8000212:	9304      	str	r3, [sp, #16]
                          |DEPR_OPEN_Pin|FILL_CLOSE_Pin|FILL_OPEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000214:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000218:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800021a:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800021c:	a904      	add	r1, sp, #16
 800021e:	4628      	mov	r0, r5
 8000220:	f000 fc3e 	bl	8000aa0 <HAL_GPIO_Init>

}
 8000224:	b008      	add	sp, #32
 8000226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800022a:	bf00      	nop
 800022c:	40021000 	.word	0x40021000
 8000230:	40010800 	.word	0x40010800
 8000234:	40010c00 	.word	0x40010c00
 8000238:	40011000 	.word	0x40011000

0800023c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800023c:	b500      	push	{lr}
 800023e:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000240:	2300      	movs	r3, #0
 8000242:	930c      	str	r3, [sp, #48]	; 0x30
 8000244:	930d      	str	r3, [sp, #52]	; 0x34
 8000246:	930f      	str	r3, [sp, #60]	; 0x3c
 8000248:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800024a:	9305      	str	r3, [sp, #20]
 800024c:	9306      	str	r3, [sp, #24]
 800024e:	9307      	str	r3, [sp, #28]
 8000250:	9308      	str	r3, [sp, #32]
 8000252:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000254:	9301      	str	r3, [sp, #4]
 8000256:	9302      	str	r3, [sp, #8]
 8000258:	9303      	str	r3, [sp, #12]
 800025a:	9304      	str	r3, [sp, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800025c:	2201      	movs	r2, #1
 800025e:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000260:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000264:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000266:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000268:	2202      	movs	r2, #2
 800026a:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800026c:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800026e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000272:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000274:	a80a      	add	r0, sp, #40	; 0x28
 8000276:	f000 fd89 	bl	8000d8c <HAL_RCC_OscConfig>
 800027a:	b9d0      	cbnz	r0, 80002b2 <SystemClock_Config+0x76>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800027c:	230f      	movs	r3, #15
 800027e:	9305      	str	r3, [sp, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000280:	2302      	movs	r3, #2
 8000282:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000284:	2300      	movs	r3, #0
 8000286:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000288:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800028c:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800028e:	9309      	str	r3, [sp, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000290:	2101      	movs	r1, #1
 8000292:	a805      	add	r0, sp, #20
 8000294:	f000 ffca 	bl	800122c <HAL_RCC_ClockConfig>
 8000298:	b968      	cbnz	r0, 80002b6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800029a:	2310      	movs	r3, #16
 800029c:	9301      	str	r3, [sp, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800029e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80002a2:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002a4:	a801      	add	r0, sp, #4
 80002a6:	f001 f899 	bl	80013dc <HAL_RCCEx_PeriphCLKConfig>
 80002aa:	b930      	cbnz	r0, 80002ba <SystemClock_Config+0x7e>
  {
    Error_Handler();
  }
}
 80002ac:	b015      	add	sp, #84	; 0x54
 80002ae:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002b2:	b672      	cpsid	i
 80002b4:	e7fe      	b.n	80002b4 <SystemClock_Config+0x78>
 80002b6:	b672      	cpsid	i
 80002b8:	e7fe      	b.n	80002b8 <SystemClock_Config+0x7c>
 80002ba:	b672      	cpsid	i
 80002bc:	e7fe      	b.n	80002bc <SystemClock_Config+0x80>
	...

080002c0 <main>:
{
 80002c0:	b570      	push	{r4, r5, r6, lr}
  HAL_Init();
 80002c2:	f000 fb5b 	bl	800097c <HAL_Init>
  SystemClock_Config();
 80002c6:	f7ff ffb9 	bl	800023c <SystemClock_Config>
  MX_GPIO_Init();
 80002ca:	f7ff ff3f 	bl	800014c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002ce:	f000 fa3b 	bl	8000748 <MX_USART2_UART_Init>
  MX_USB_PCD_Init();
 80002d2:	f000 fad9 	bl	8000888 <MX_USB_PCD_Init>
  MX_TIM1_Init();
 80002d6:	f000 f857 	bl	8000388 <MX_TIM1_Init>
  MX_TIM2_Init();
 80002da:	f000 f887 	bl	80003ec <MX_TIM2_Init>
  MX_TIM3_Init();
 80002de:	f000 f999 	bl	8000614 <MX_TIM3_Init>
  MX_TIM4_Init();
 80002e2:	f000 f9f1 	bl	80006c8 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 80002e6:	f000 fa49 	bl	800077c <MX_USART3_UART_Init>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80002ea:	2104      	movs	r1, #4
 80002ec:	480c      	ldr	r0, [pc, #48]	; (8000320 <main+0x60>)
 80002ee:	f001 faed 	bl	80018cc <HAL_TIM_PWM_Start>
	 		  HAL_Delay(2);
 80002f2:	2602      	movs	r6, #2
	 		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, i);
 80002f4:	4d0a      	ldr	r5, [pc, #40]	; (8000320 <main+0x60>)
	 	  for(i=0;i<500;i++){
 80002f6:	2400      	movs	r4, #0
	 		  HAL_Delay(2);
 80002f8:	4630      	mov	r0, r6
 80002fa:	f000 fb63 	bl	80009c4 <HAL_Delay>
	 		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, i);
 80002fe:	682b      	ldr	r3, [r5, #0]
 8000300:	639c      	str	r4, [r3, #56]	; 0x38
	 	  for(i=0;i<500;i++){
 8000302:	3401      	adds	r4, #1
 8000304:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
 8000308:	d1f6      	bne.n	80002f8 <main+0x38>
	 		  HAL_Delay(2);
 800030a:	4630      	mov	r0, r6
 800030c:	f000 fb5a 	bl	80009c4 <HAL_Delay>
	 		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, i);
 8000310:	682b      	ldr	r3, [r5, #0]
 8000312:	639c      	str	r4, [r3, #56]	; 0x38
	 	  for(;i>=0;i--){
 8000314:	3c01      	subs	r4, #1
 8000316:	f1b4 3fff 	cmp.w	r4, #4294967295
 800031a:	d1f6      	bne.n	800030a <main+0x4a>
 800031c:	e7eb      	b.n	80002f6 <main+0x36>
 800031e:	bf00      	nop
 8000320:	20000070 	.word	0x20000070

08000324 <Error_Handler>:
 8000324:	b672      	cpsid	i
 8000326:	e7fe      	b.n	8000326 <Error_Handler+0x2>

08000328 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000328:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800032a:	4b0e      	ldr	r3, [pc, #56]	; (8000364 <HAL_MspInit+0x3c>)
 800032c:	699a      	ldr	r2, [r3, #24]
 800032e:	f042 0201 	orr.w	r2, r2, #1
 8000332:	619a      	str	r2, [r3, #24]
 8000334:	699a      	ldr	r2, [r3, #24]
 8000336:	f002 0201 	and.w	r2, r2, #1
 800033a:	9200      	str	r2, [sp, #0]
 800033c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800033e:	69da      	ldr	r2, [r3, #28]
 8000340:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000344:	61da      	str	r2, [r3, #28]
 8000346:	69db      	ldr	r3, [r3, #28]
 8000348:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800034c:	9301      	str	r3, [sp, #4]
 800034e:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000350:	4a05      	ldr	r2, [pc, #20]	; (8000368 <HAL_MspInit+0x40>)
 8000352:	6853      	ldr	r3, [r2, #4]
 8000354:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000358:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800035c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800035e:	b002      	add	sp, #8
 8000360:	4770      	bx	lr
 8000362:	bf00      	nop
 8000364:	40021000 	.word	0x40021000
 8000368:	40010000 	.word	0x40010000

0800036c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800036c:	e7fe      	b.n	800036c <NMI_Handler>

0800036e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800036e:	e7fe      	b.n	800036e <HardFault_Handler>

08000370 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000370:	e7fe      	b.n	8000370 <MemManage_Handler>

08000372 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000372:	e7fe      	b.n	8000372 <BusFault_Handler>

08000374 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000374:	e7fe      	b.n	8000374 <UsageFault_Handler>

08000376 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000376:	4770      	bx	lr

08000378 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000378:	4770      	bx	lr

0800037a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800037a:	4770      	bx	lr

0800037c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800037c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800037e:	f000 fb0f 	bl	80009a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000382:	bd08      	pop	{r3, pc}

08000384 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000384:	4770      	bx	lr
	...

08000388 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000388:	b500      	push	{lr}
 800038a:	b08d      	sub	sp, #52	; 0x34
  TIM_Encoder_InitTypeDef sConfig = {0};
 800038c:	2220      	movs	r2, #32
 800038e:	2100      	movs	r1, #0
 8000390:	a804      	add	r0, sp, #16
 8000392:	f001 fbf3 	bl	8001b7c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000396:	2300      	movs	r3, #0
 8000398:	9301      	str	r3, [sp, #4]
 800039a:	9302      	str	r3, [sp, #8]

  htim1.Instance = TIM1;
 800039c:	4811      	ldr	r0, [pc, #68]	; (80003e4 <MX_TIM1_Init+0x5c>)
 800039e:	4a12      	ldr	r2, [pc, #72]	; (80003e8 <MX_TIM1_Init+0x60>)
 80003a0:	6002      	str	r2, [r0, #0]
  htim1.Init.Prescaler = 0;
 80003a2:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003a4:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 65535;
 80003a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80003aa:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003ac:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 80003ae:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003b0:	6183      	str	r3, [r0, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80003b2:	2301      	movs	r3, #1
 80003b4:	9303      	str	r3, [sp, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80003b6:	9305      	str	r3, [sp, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC1Filter = 0;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80003b8:	9309      	str	r3, [sp, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 0;
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80003ba:	a903      	add	r1, sp, #12
 80003bc:	f001 f987 	bl	80016ce <HAL_TIM_Encoder_Init>
 80003c0:	b950      	cbnz	r0, 80003d8 <MX_TIM1_Init+0x50>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003c2:	2300      	movs	r3, #0
 80003c4:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003c6:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80003c8:	a901      	add	r1, sp, #4
 80003ca:	4806      	ldr	r0, [pc, #24]	; (80003e4 <MX_TIM1_Init+0x5c>)
 80003cc:	f001 fae2 	bl	8001994 <HAL_TIMEx_MasterConfigSynchronization>
 80003d0:	b928      	cbnz	r0, 80003de <MX_TIM1_Init+0x56>
  {
    Error_Handler();
  }

}
 80003d2:	b00d      	add	sp, #52	; 0x34
 80003d4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80003d8:	f7ff ffa4 	bl	8000324 <Error_Handler>
 80003dc:	e7f1      	b.n	80003c2 <MX_TIM1_Init+0x3a>
    Error_Handler();
 80003de:	f7ff ffa1 	bl	8000324 <Error_Handler>
}
 80003e2:	e7f6      	b.n	80003d2 <MX_TIM1_Init+0x4a>
 80003e4:	200000b8 	.word	0x200000b8
 80003e8:	40012c00 	.word	0x40012c00

080003ec <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80003ec:	b500      	push	{lr}
 80003ee:	b08d      	sub	sp, #52	; 0x34
  TIM_Encoder_InitTypeDef sConfig = {0};
 80003f0:	2220      	movs	r2, #32
 80003f2:	2100      	movs	r1, #0
 80003f4:	a804      	add	r0, sp, #16
 80003f6:	f001 fbc1 	bl	8001b7c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003fa:	2300      	movs	r3, #0
 80003fc:	9301      	str	r3, [sp, #4]
 80003fe:	9302      	str	r3, [sp, #8]

  htim2.Instance = TIM2;
 8000400:	4811      	ldr	r0, [pc, #68]	; (8000448 <MX_TIM2_Init+0x5c>)
 8000402:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000406:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 0;
 8000408:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800040a:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 65535;
 800040c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000410:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000412:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000414:	6183      	str	r3, [r0, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000416:	2301      	movs	r3, #1
 8000418:	9303      	str	r3, [sp, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800041a:	9305      	str	r3, [sp, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC1Filter = 0;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800041c:	9309      	str	r3, [sp, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 0;
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800041e:	a903      	add	r1, sp, #12
 8000420:	f001 f955 	bl	80016ce <HAL_TIM_Encoder_Init>
 8000424:	b950      	cbnz	r0, 800043c <MX_TIM2_Init+0x50>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000426:	2300      	movs	r3, #0
 8000428:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800042a:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800042c:	a901      	add	r1, sp, #4
 800042e:	4806      	ldr	r0, [pc, #24]	; (8000448 <MX_TIM2_Init+0x5c>)
 8000430:	f001 fab0 	bl	8001994 <HAL_TIMEx_MasterConfigSynchronization>
 8000434:	b928      	cbnz	r0, 8000442 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
  }

}
 8000436:	b00d      	add	sp, #52	; 0x34
 8000438:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800043c:	f7ff ff72 	bl	8000324 <Error_Handler>
 8000440:	e7f1      	b.n	8000426 <MX_TIM2_Init+0x3a>
    Error_Handler();
 8000442:	f7ff ff6f 	bl	8000324 <Error_Handler>
}
 8000446:	e7f6      	b.n	8000436 <MX_TIM2_Init+0x4a>
 8000448:	20000100 	.word	0x20000100

0800044c <HAL_TIM_Encoder_MspInit>:
  HAL_TIM_MspPostInit(&htim4);

}

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800044c:	b510      	push	{r4, lr}
 800044e:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000450:	2300      	movs	r3, #0
 8000452:	9306      	str	r3, [sp, #24]
 8000454:	9307      	str	r3, [sp, #28]
 8000456:	9308      	str	r3, [sp, #32]
 8000458:	9309      	str	r3, [sp, #36]	; 0x24
  if(tim_encoderHandle->Instance==TIM1)
 800045a:	6803      	ldr	r3, [r0, #0]
 800045c:	4a2e      	ldr	r2, [pc, #184]	; (8000518 <HAL_TIM_Encoder_MspInit+0xcc>)
 800045e:	4293      	cmp	r3, r2
 8000460:	d004      	beq.n	800046c <HAL_TIM_Encoder_MspInit+0x20>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_encoderHandle->Instance==TIM2)
 8000462:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000466:	d01d      	beq.n	80004a4 <HAL_TIM_Encoder_MspInit+0x58>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000468:	b00a      	add	sp, #40	; 0x28
 800046a:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 800046c:	4b2b      	ldr	r3, [pc, #172]	; (800051c <HAL_TIM_Encoder_MspInit+0xd0>)
 800046e:	699a      	ldr	r2, [r3, #24]
 8000470:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000474:	619a      	str	r2, [r3, #24]
 8000476:	699a      	ldr	r2, [r3, #24]
 8000478:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800047c:	9201      	str	r2, [sp, #4]
 800047e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000480:	699a      	ldr	r2, [r3, #24]
 8000482:	f042 0204 	orr.w	r2, r2, #4
 8000486:	619a      	str	r2, [r3, #24]
 8000488:	699b      	ldr	r3, [r3, #24]
 800048a:	f003 0304 	and.w	r3, r3, #4
 800048e:	9302      	str	r3, [sp, #8]
 8000490:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = ENK_DEPR_CH2_Pin|ENK_DEPR_CH1_Pin;
 8000492:	a90a      	add	r1, sp, #40	; 0x28
 8000494:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000498:	f841 3d10 	str.w	r3, [r1, #-16]!
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800049c:	4820      	ldr	r0, [pc, #128]	; (8000520 <HAL_TIM_Encoder_MspInit+0xd4>)
 800049e:	f000 faff 	bl	8000aa0 <HAL_GPIO_Init>
 80004a2:	e7e1      	b.n	8000468 <HAL_TIM_Encoder_MspInit+0x1c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80004a4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80004a8:	69da      	ldr	r2, [r3, #28]
 80004aa:	f042 0201 	orr.w	r2, r2, #1
 80004ae:	61da      	str	r2, [r3, #28]
 80004b0:	69da      	ldr	r2, [r3, #28]
 80004b2:	f002 0201 	and.w	r2, r2, #1
 80004b6:	9203      	str	r2, [sp, #12]
 80004b8:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ba:	699a      	ldr	r2, [r3, #24]
 80004bc:	f042 0204 	orr.w	r2, r2, #4
 80004c0:	619a      	str	r2, [r3, #24]
 80004c2:	699a      	ldr	r2, [r3, #24]
 80004c4:	f002 0204 	and.w	r2, r2, #4
 80004c8:	9204      	str	r2, [sp, #16]
 80004ca:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004cc:	699a      	ldr	r2, [r3, #24]
 80004ce:	f042 0208 	orr.w	r2, r2, #8
 80004d2:	619a      	str	r2, [r3, #24]
 80004d4:	699b      	ldr	r3, [r3, #24]
 80004d6:	f003 0308 	and.w	r3, r3, #8
 80004da:	9305      	str	r3, [sp, #20]
 80004dc:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = ENK_FILL_CH2_Pin;
 80004de:	ac0a      	add	r4, sp, #40	; 0x28
 80004e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80004e4:	f844 3d10 	str.w	r3, [r4, #-16]!
    HAL_GPIO_Init(ENK_FILL_CH2_GPIO_Port, &GPIO_InitStruct);
 80004e8:	4621      	mov	r1, r4
 80004ea:	480d      	ldr	r0, [pc, #52]	; (8000520 <HAL_TIM_Encoder_MspInit+0xd4>)
 80004ec:	f000 fad8 	bl	8000aa0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ENK_FILL_CH1_Pin;
 80004f0:	2308      	movs	r3, #8
 80004f2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004f4:	2300      	movs	r3, #0
 80004f6:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f8:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(ENK_FILL_CH1_GPIO_Port, &GPIO_InitStruct);
 80004fa:	4621      	mov	r1, r4
 80004fc:	4809      	ldr	r0, [pc, #36]	; (8000524 <HAL_TIM_Encoder_MspInit+0xd8>)
 80004fe:	f000 facf 	bl	8000aa0 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8000502:	4a09      	ldr	r2, [pc, #36]	; (8000528 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000504:	6853      	ldr	r3, [r2, #4]
 8000506:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800050a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800050e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000512:	6053      	str	r3, [r2, #4]
}
 8000514:	e7a8      	b.n	8000468 <HAL_TIM_Encoder_MspInit+0x1c>
 8000516:	bf00      	nop
 8000518:	40012c00 	.word	0x40012c00
 800051c:	40021000 	.word	0x40021000
 8000520:	40010800 	.word	0x40010800
 8000524:	40010c00 	.word	0x40010c00
 8000528:	40010000 	.word	0x40010000

0800052c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800052c:	b082      	sub	sp, #8

  if(tim_pwmHandle->Instance==TIM3)
 800052e:	6803      	ldr	r3, [r0, #0]
 8000530:	4a0e      	ldr	r2, [pc, #56]	; (800056c <HAL_TIM_PWM_MspInit+0x40>)
 8000532:	4293      	cmp	r3, r2
 8000534:	d004      	beq.n	8000540 <HAL_TIM_PWM_MspInit+0x14>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(tim_pwmHandle->Instance==TIM4)
 8000536:	4a0e      	ldr	r2, [pc, #56]	; (8000570 <HAL_TIM_PWM_MspInit+0x44>)
 8000538:	4293      	cmp	r3, r2
 800053a:	d00c      	beq.n	8000556 <HAL_TIM_PWM_MspInit+0x2a>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800053c:	b002      	add	sp, #8
 800053e:	4770      	bx	lr
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000540:	4b0c      	ldr	r3, [pc, #48]	; (8000574 <HAL_TIM_PWM_MspInit+0x48>)
 8000542:	69da      	ldr	r2, [r3, #28]
 8000544:	f042 0202 	orr.w	r2, r2, #2
 8000548:	61da      	str	r2, [r3, #28]
 800054a:	69db      	ldr	r3, [r3, #28]
 800054c:	f003 0302 	and.w	r3, r3, #2
 8000550:	9300      	str	r3, [sp, #0]
 8000552:	9b00      	ldr	r3, [sp, #0]
 8000554:	e7f2      	b.n	800053c <HAL_TIM_PWM_MspInit+0x10>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000556:	4b07      	ldr	r3, [pc, #28]	; (8000574 <HAL_TIM_PWM_MspInit+0x48>)
 8000558:	69da      	ldr	r2, [r3, #28]
 800055a:	f042 0204 	orr.w	r2, r2, #4
 800055e:	61da      	str	r2, [r3, #28]
 8000560:	69db      	ldr	r3, [r3, #28]
 8000562:	f003 0304 	and.w	r3, r3, #4
 8000566:	9301      	str	r3, [sp, #4]
 8000568:	9b01      	ldr	r3, [sp, #4]
}
 800056a:	e7e7      	b.n	800053c <HAL_TIM_PWM_MspInit+0x10>
 800056c:	40000400 	.word	0x40000400
 8000570:	40000800 	.word	0x40000800
 8000574:	40021000 	.word	0x40021000

08000578 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000578:	b500      	push	{lr}
 800057a:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057c:	2300      	movs	r3, #0
 800057e:	9302      	str	r3, [sp, #8]
 8000580:	9303      	str	r3, [sp, #12]
 8000582:	9304      	str	r3, [sp, #16]
 8000584:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM3)
 8000586:	6803      	ldr	r3, [r0, #0]
 8000588:	4a1d      	ldr	r2, [pc, #116]	; (8000600 <HAL_TIM_MspPostInit+0x88>)
 800058a:	4293      	cmp	r3, r2
 800058c:	d005      	beq.n	800059a <HAL_TIM_MspPostInit+0x22>

  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM4)
 800058e:	4a1d      	ldr	r2, [pc, #116]	; (8000604 <HAL_TIM_MspPostInit+0x8c>)
 8000590:	4293      	cmp	r3, r2
 8000592:	d01f      	beq.n	80005d4 <HAL_TIM_MspPostInit+0x5c>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000594:	b007      	add	sp, #28
 8000596:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800059a:	4b1b      	ldr	r3, [pc, #108]	; (8000608 <HAL_TIM_MspPostInit+0x90>)
 800059c:	699a      	ldr	r2, [r3, #24]
 800059e:	f042 0208 	orr.w	r2, r2, #8
 80005a2:	619a      	str	r2, [r3, #24]
 80005a4:	699b      	ldr	r3, [r3, #24]
 80005a6:	f003 0308 	and.w	r3, r3, #8
 80005aa:	9300      	str	r3, [sp, #0]
 80005ac:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = QD_EN_Pin|PQD_EN_Pin|DEPR_EN_Pin;
 80005ae:	2323      	movs	r3, #35	; 0x23
 80005b0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005b2:	2302      	movs	r3, #2
 80005b4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005b8:	a902      	add	r1, sp, #8
 80005ba:	4814      	ldr	r0, [pc, #80]	; (800060c <HAL_TIM_MspPostInit+0x94>)
 80005bc:	f000 fa70 	bl	8000aa0 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80005c0:	4a13      	ldr	r2, [pc, #76]	; (8000610 <HAL_TIM_MspPostInit+0x98>)
 80005c2:	6853      	ldr	r3, [r2, #4]
 80005c4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80005c8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80005cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80005d0:	6053      	str	r3, [r2, #4]
 80005d2:	e7df      	b.n	8000594 <HAL_TIM_MspPostInit+0x1c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d4:	4b0c      	ldr	r3, [pc, #48]	; (8000608 <HAL_TIM_MspPostInit+0x90>)
 80005d6:	699a      	ldr	r2, [r3, #24]
 80005d8:	f042 0208 	orr.w	r2, r2, #8
 80005dc:	619a      	str	r2, [r3, #24]
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	f003 0308 	and.w	r3, r3, #8
 80005e4:	9301      	str	r3, [sp, #4]
 80005e6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = FILL_EN_Pin;
 80005e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005ec:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ee:	2302      	movs	r3, #2
 80005f0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(FILL_EN_GPIO_Port, &GPIO_InitStruct);
 80005f4:	a902      	add	r1, sp, #8
 80005f6:	4805      	ldr	r0, [pc, #20]	; (800060c <HAL_TIM_MspPostInit+0x94>)
 80005f8:	f000 fa52 	bl	8000aa0 <HAL_GPIO_Init>
}
 80005fc:	e7ca      	b.n	8000594 <HAL_TIM_MspPostInit+0x1c>
 80005fe:	bf00      	nop
 8000600:	40000400 	.word	0x40000400
 8000604:	40000800 	.word	0x40000800
 8000608:	40021000 	.word	0x40021000
 800060c:	40010c00 	.word	0x40010c00
 8000610:	40010000 	.word	0x40010000

08000614 <MX_TIM3_Init>:
{
 8000614:	b500      	push	{lr}
 8000616:	b08b      	sub	sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000618:	2300      	movs	r3, #0
 800061a:	9308      	str	r3, [sp, #32]
 800061c:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 800061e:	9301      	str	r3, [sp, #4]
 8000620:	9302      	str	r3, [sp, #8]
 8000622:	9303      	str	r3, [sp, #12]
 8000624:	9304      	str	r3, [sp, #16]
 8000626:	9305      	str	r3, [sp, #20]
 8000628:	9306      	str	r3, [sp, #24]
 800062a:	9307      	str	r3, [sp, #28]
  htim3.Instance = TIM3;
 800062c:	4824      	ldr	r0, [pc, #144]	; (80006c0 <MX_TIM3_Init+0xac>)
 800062e:	4a25      	ldr	r2, [pc, #148]	; (80006c4 <MX_TIM3_Init+0xb0>)
 8000630:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 7;
 8000632:	2207      	movs	r2, #7
 8000634:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000636:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 999;
 8000638:	f240 32e7 	movw	r2, #999	; 0x3e7
 800063c:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800063e:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000640:	2380      	movs	r3, #128	; 0x80
 8000642:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000644:	f001 f818 	bl	8001678 <HAL_TIM_PWM_Init>
 8000648:	bb50      	cbnz	r0, 80006a0 <MX_TIM3_Init+0x8c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800064a:	2300      	movs	r3, #0
 800064c:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800064e:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000650:	a908      	add	r1, sp, #32
 8000652:	481b      	ldr	r0, [pc, #108]	; (80006c0 <MX_TIM3_Init+0xac>)
 8000654:	f001 f99e 	bl	8001994 <HAL_TIMEx_MasterConfigSynchronization>
 8000658:	bb28      	cbnz	r0, 80006a6 <MX_TIM3_Init+0x92>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800065a:	2360      	movs	r3, #96	; 0x60
 800065c:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 500;
 800065e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000662:	9302      	str	r3, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000664:	2300      	movs	r3, #0
 8000666:	9303      	str	r3, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000668:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800066a:	2204      	movs	r2, #4
 800066c:	eb0d 0102 	add.w	r1, sp, r2
 8000670:	4813      	ldr	r0, [pc, #76]	; (80006c0 <MX_TIM3_Init+0xac>)
 8000672:	f001 f8b3 	bl	80017dc <HAL_TIM_PWM_ConfigChannel>
 8000676:	b9c8      	cbnz	r0, 80006ac <MX_TIM3_Init+0x98>
  sConfigOC.Pulse = 0;
 8000678:	2300      	movs	r3, #0
 800067a:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800067c:	2208      	movs	r2, #8
 800067e:	a901      	add	r1, sp, #4
 8000680:	480f      	ldr	r0, [pc, #60]	; (80006c0 <MX_TIM3_Init+0xac>)
 8000682:	f001 f8ab 	bl	80017dc <HAL_TIM_PWM_ConfigChannel>
 8000686:	b9a0      	cbnz	r0, 80006b2 <MX_TIM3_Init+0x9e>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000688:	220c      	movs	r2, #12
 800068a:	a901      	add	r1, sp, #4
 800068c:	480c      	ldr	r0, [pc, #48]	; (80006c0 <MX_TIM3_Init+0xac>)
 800068e:	f001 f8a5 	bl	80017dc <HAL_TIM_PWM_ConfigChannel>
 8000692:	b988      	cbnz	r0, 80006b8 <MX_TIM3_Init+0xa4>
  HAL_TIM_MspPostInit(&htim3);
 8000694:	480a      	ldr	r0, [pc, #40]	; (80006c0 <MX_TIM3_Init+0xac>)
 8000696:	f7ff ff6f 	bl	8000578 <HAL_TIM_MspPostInit>
}
 800069a:	b00b      	add	sp, #44	; 0x2c
 800069c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80006a0:	f7ff fe40 	bl	8000324 <Error_Handler>
 80006a4:	e7d1      	b.n	800064a <MX_TIM3_Init+0x36>
    Error_Handler();
 80006a6:	f7ff fe3d 	bl	8000324 <Error_Handler>
 80006aa:	e7d6      	b.n	800065a <MX_TIM3_Init+0x46>
    Error_Handler();
 80006ac:	f7ff fe3a 	bl	8000324 <Error_Handler>
 80006b0:	e7e2      	b.n	8000678 <MX_TIM3_Init+0x64>
    Error_Handler();
 80006b2:	f7ff fe37 	bl	8000324 <Error_Handler>
 80006b6:	e7e7      	b.n	8000688 <MX_TIM3_Init+0x74>
    Error_Handler();
 80006b8:	f7ff fe34 	bl	8000324 <Error_Handler>
 80006bc:	e7ea      	b.n	8000694 <MX_TIM3_Init+0x80>
 80006be:	bf00      	nop
 80006c0:	20000070 	.word	0x20000070
 80006c4:	40000400 	.word	0x40000400

080006c8 <MX_TIM4_Init>:
{
 80006c8:	b500      	push	{lr}
 80006ca:	b08b      	sub	sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006cc:	2300      	movs	r3, #0
 80006ce:	9308      	str	r3, [sp, #32]
 80006d0:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006d2:	9301      	str	r3, [sp, #4]
 80006d4:	9302      	str	r3, [sp, #8]
 80006d6:	9303      	str	r3, [sp, #12]
 80006d8:	9304      	str	r3, [sp, #16]
 80006da:	9305      	str	r3, [sp, #20]
 80006dc:	9306      	str	r3, [sp, #24]
 80006de:	9307      	str	r3, [sp, #28]
  htim4.Instance = TIM4;
 80006e0:	4817      	ldr	r0, [pc, #92]	; (8000740 <MX_TIM4_Init+0x78>)
 80006e2:	4a18      	ldr	r2, [pc, #96]	; (8000744 <MX_TIM4_Init+0x7c>)
 80006e4:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 0;
 80006e6:	6043      	str	r3, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006e8:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 65535;
 80006ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006ee:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006f0:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006f2:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80006f4:	f000 ffc0 	bl	8001678 <HAL_TIM_PWM_Init>
 80006f8:	b9c8      	cbnz	r0, 800072e <MX_TIM4_Init+0x66>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006fa:	2300      	movs	r3, #0
 80006fc:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006fe:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000700:	a908      	add	r1, sp, #32
 8000702:	480f      	ldr	r0, [pc, #60]	; (8000740 <MX_TIM4_Init+0x78>)
 8000704:	f001 f946 	bl	8001994 <HAL_TIMEx_MasterConfigSynchronization>
 8000708:	b9a0      	cbnz	r0, 8000734 <MX_TIM4_Init+0x6c>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800070a:	2360      	movs	r3, #96	; 0x60
 800070c:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 800070e:	2300      	movs	r3, #0
 8000710:	9302      	str	r3, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000712:	9303      	str	r3, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000714:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000716:	2208      	movs	r2, #8
 8000718:	a901      	add	r1, sp, #4
 800071a:	4809      	ldr	r0, [pc, #36]	; (8000740 <MX_TIM4_Init+0x78>)
 800071c:	f001 f85e 	bl	80017dc <HAL_TIM_PWM_ConfigChannel>
 8000720:	b958      	cbnz	r0, 800073a <MX_TIM4_Init+0x72>
  HAL_TIM_MspPostInit(&htim4);
 8000722:	4807      	ldr	r0, [pc, #28]	; (8000740 <MX_TIM4_Init+0x78>)
 8000724:	f7ff ff28 	bl	8000578 <HAL_TIM_MspPostInit>
}
 8000728:	b00b      	add	sp, #44	; 0x2c
 800072a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800072e:	f7ff fdf9 	bl	8000324 <Error_Handler>
 8000732:	e7e2      	b.n	80006fa <MX_TIM4_Init+0x32>
    Error_Handler();
 8000734:	f7ff fdf6 	bl	8000324 <Error_Handler>
 8000738:	e7e7      	b.n	800070a <MX_TIM4_Init+0x42>
    Error_Handler();
 800073a:	f7ff fdf3 	bl	8000324 <Error_Handler>
 800073e:	e7f0      	b.n	8000722 <MX_TIM4_Init+0x5a>
 8000740:	20000028 	.word	0x20000028
 8000744:	40000800 	.word	0x40000800

08000748 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000748:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 800074a:	480a      	ldr	r0, [pc, #40]	; (8000774 <MX_USART2_UART_Init+0x2c>)
 800074c:	4b0a      	ldr	r3, [pc, #40]	; (8000778 <MX_USART2_UART_Init+0x30>)
 800074e:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8000750:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000754:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000756:	2300      	movs	r3, #0
 8000758:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800075a:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800075c:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800075e:	220c      	movs	r2, #12
 8000760:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000762:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000764:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000766:	f001 f98d 	bl	8001a84 <HAL_UART_Init>
 800076a:	b900      	cbnz	r0, 800076e <MX_USART2_UART_Init+0x26>
  {
    Error_Handler();
  }

}
 800076c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800076e:	f7ff fdd9 	bl	8000324 <Error_Handler>
}
 8000772:	e7fb      	b.n	800076c <MX_USART2_UART_Init+0x24>
 8000774:	20000188 	.word	0x20000188
 8000778:	40004400 	.word	0x40004400

0800077c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800077c:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
 800077e:	480a      	ldr	r0, [pc, #40]	; (80007a8 <MX_USART3_UART_Init+0x2c>)
 8000780:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <MX_USART3_UART_Init+0x30>)
 8000782:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 8000784:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000788:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800078a:	2300      	movs	r3, #0
 800078c:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800078e:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000790:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000792:	220c      	movs	r2, #12
 8000794:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000796:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000798:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800079a:	f001 f973 	bl	8001a84 <HAL_UART_Init>
 800079e:	b900      	cbnz	r0, 80007a2 <MX_USART3_UART_Init+0x26>
  {
    Error_Handler();
  }

}
 80007a0:	bd08      	pop	{r3, pc}
    Error_Handler();
 80007a2:	f7ff fdbf 	bl	8000324 <Error_Handler>
}
 80007a6:	e7fb      	b.n	80007a0 <MX_USART3_UART_Init+0x24>
 80007a8:	20000148 	.word	0x20000148
 80007ac:	40004800 	.word	0x40004800

080007b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80007b0:	b510      	push	{r4, lr}
 80007b2:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b4:	2300      	movs	r3, #0
 80007b6:	9304      	str	r3, [sp, #16]
 80007b8:	9305      	str	r3, [sp, #20]
 80007ba:	9306      	str	r3, [sp, #24]
 80007bc:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART2)
 80007be:	6803      	ldr	r3, [r0, #0]
 80007c0:	4a2c      	ldr	r2, [pc, #176]	; (8000874 <HAL_UART_MspInit+0xc4>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d004      	beq.n	80007d0 <HAL_UART_MspInit+0x20>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 80007c6:	4a2c      	ldr	r2, [pc, #176]	; (8000878 <HAL_UART_MspInit+0xc8>)
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d029      	beq.n	8000820 <HAL_UART_MspInit+0x70>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80007cc:	b008      	add	sp, #32
 80007ce:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 80007d0:	4b2a      	ldr	r3, [pc, #168]	; (800087c <HAL_UART_MspInit+0xcc>)
 80007d2:	69da      	ldr	r2, [r3, #28]
 80007d4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80007d8:	61da      	str	r2, [r3, #28]
 80007da:	69da      	ldr	r2, [r3, #28]
 80007dc:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80007e0:	9200      	str	r2, [sp, #0]
 80007e2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e4:	699a      	ldr	r2, [r3, #24]
 80007e6:	f042 0204 	orr.w	r2, r2, #4
 80007ea:	619a      	str	r2, [r3, #24]
 80007ec:	699b      	ldr	r3, [r3, #24]
 80007ee:	f003 0304 	and.w	r3, r3, #4
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007f6:	2304      	movs	r3, #4
 80007f8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fa:	2302      	movs	r3, #2
 80007fc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007fe:	2303      	movs	r3, #3
 8000800:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000802:	4c1f      	ldr	r4, [pc, #124]	; (8000880 <HAL_UART_MspInit+0xd0>)
 8000804:	a904      	add	r1, sp, #16
 8000806:	4620      	mov	r0, r4
 8000808:	f000 f94a 	bl	8000aa0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800080c:	2308      	movs	r3, #8
 800080e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000810:	2300      	movs	r3, #0
 8000812:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000816:	a904      	add	r1, sp, #16
 8000818:	4620      	mov	r0, r4
 800081a:	f000 f941 	bl	8000aa0 <HAL_GPIO_Init>
 800081e:	e7d5      	b.n	80007cc <HAL_UART_MspInit+0x1c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000820:	4b16      	ldr	r3, [pc, #88]	; (800087c <HAL_UART_MspInit+0xcc>)
 8000822:	69da      	ldr	r2, [r3, #28]
 8000824:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000828:	61da      	str	r2, [r3, #28]
 800082a:	69da      	ldr	r2, [r3, #28]
 800082c:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8000830:	9202      	str	r2, [sp, #8]
 8000832:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000834:	699a      	ldr	r2, [r3, #24]
 8000836:	f042 0208 	orr.w	r2, r2, #8
 800083a:	619a      	str	r2, [r3, #24]
 800083c:	699b      	ldr	r3, [r3, #24]
 800083e:	f003 0308 	and.w	r3, r3, #8
 8000842:	9303      	str	r3, [sp, #12]
 8000844:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000846:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800084a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084c:	2302      	movs	r3, #2
 800084e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000850:	2303      	movs	r3, #3
 8000852:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000854:	4c0b      	ldr	r4, [pc, #44]	; (8000884 <HAL_UART_MspInit+0xd4>)
 8000856:	a904      	add	r1, sp, #16
 8000858:	4620      	mov	r0, r4
 800085a:	f000 f921 	bl	8000aa0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800085e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000862:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000864:	2300      	movs	r3, #0
 8000866:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800086a:	a904      	add	r1, sp, #16
 800086c:	4620      	mov	r0, r4
 800086e:	f000 f917 	bl	8000aa0 <HAL_GPIO_Init>
}
 8000872:	e7ab      	b.n	80007cc <HAL_UART_MspInit+0x1c>
 8000874:	40004400 	.word	0x40004400
 8000878:	40004800 	.word	0x40004800
 800087c:	40021000 	.word	0x40021000
 8000880:	40010800 	.word	0x40010800
 8000884:	40010c00 	.word	0x40010c00

08000888 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8000888:	b508      	push	{r3, lr}

  hpcd_USB_FS.Instance = USB;
 800088a:	4809      	ldr	r0, [pc, #36]	; (80008b0 <MX_USB_PCD_Init+0x28>)
 800088c:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <MX_USB_PCD_Init+0x2c>)
 800088e:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000890:	2308      	movs	r3, #8
 8000892:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000894:	2302      	movs	r3, #2
 8000896:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000898:	2300      	movs	r3, #0
 800089a:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800089c:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800089e:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80008a0:	f000 f9fa 	bl	8000c98 <HAL_PCD_Init>
 80008a4:	b900      	cbnz	r0, 80008a8 <MX_USB_PCD_Init+0x20>
  {
    Error_Handler();
  }

}
 80008a6:	bd08      	pop	{r3, pc}
    Error_Handler();
 80008a8:	f7ff fd3c 	bl	8000324 <Error_Handler>
}
 80008ac:	e7fb      	b.n	80008a6 <MX_USB_PCD_Init+0x1e>
 80008ae:	bf00      	nop
 80008b0:	200001c8 	.word	0x200001c8
 80008b4:	40005c00 	.word	0x40005c00

080008b8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{

  if(pcdHandle->Instance==USB)
 80008b8:	6802      	ldr	r2, [r0, #0]
 80008ba:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <HAL_PCD_MspInit+0x28>)
 80008bc:	429a      	cmp	r2, r3
 80008be:	d000      	beq.n	80008c2 <HAL_PCD_MspInit+0xa>
 80008c0:	4770      	bx	lr
{
 80008c2:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80008c4:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80008c8:	69da      	ldr	r2, [r3, #28]
 80008ca:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80008ce:	61da      	str	r2, [r3, #28]
 80008d0:	69db      	ldr	r3, [r3, #28]
 80008d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80008d6:	9301      	str	r3, [sp, #4]
 80008d8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80008da:	b002      	add	sp, #8
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	40005c00 	.word	0x40005c00

080008e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80008e4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80008e6:	e003      	b.n	80008f0 <LoopCopyDataInit>

080008e8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80008e8:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80008ea:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80008ec:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80008ee:	3104      	adds	r1, #4

080008f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80008f0:	480a      	ldr	r0, [pc, #40]	; (800091c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80008f2:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80008f4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80008f6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80008f8:	d3f6      	bcc.n	80008e8 <CopyDataInit>
  ldr r2, =_sbss
 80008fa:	4a0a      	ldr	r2, [pc, #40]	; (8000924 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80008fc:	e002      	b.n	8000904 <LoopFillZerobss>

080008fe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80008fe:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000900:	f842 3b04 	str.w	r3, [r2], #4

08000904 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000904:	4b08      	ldr	r3, [pc, #32]	; (8000928 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000906:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000908:	d3f9      	bcc.n	80008fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800090a:	f7ff fd3b 	bl	8000384 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800090e:	f001 f911 	bl	8001b34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000912:	f7ff fcd5 	bl	80002c0 <main>
  bx lr
 8000916:	4770      	bx	lr
  ldr r3, =_sidata
 8000918:	08001bd4 	.word	0x08001bd4
  ldr r0, =_sdata
 800091c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000920:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000924:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000928:	200004b8 	.word	0x200004b8

0800092c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800092c:	e7fe      	b.n	800092c <ADC1_2_IRQHandler>
	...

08000930 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000930:	b510      	push	{r4, lr}
 8000932:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000934:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <HAL_InitTick+0x40>)
 8000936:	7818      	ldrb	r0, [r3, #0]
 8000938:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800093c:	fbb3 f3f0 	udiv	r3, r3, r0
 8000940:	4a0c      	ldr	r2, [pc, #48]	; (8000974 <HAL_InitTick+0x44>)
 8000942:	6810      	ldr	r0, [r2, #0]
 8000944:	fbb0 f0f3 	udiv	r0, r0, r3
 8000948:	f000 f894 	bl	8000a74 <HAL_SYSTICK_Config>
 800094c:	b968      	cbnz	r0, 800096a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800094e:	2c0f      	cmp	r4, #15
 8000950:	d901      	bls.n	8000956 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000952:	2001      	movs	r0, #1
 8000954:	e00a      	b.n	800096c <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000956:	2200      	movs	r2, #0
 8000958:	4621      	mov	r1, r4
 800095a:	f04f 30ff 	mov.w	r0, #4294967295
 800095e:	f000 f857 	bl	8000a10 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000962:	4b05      	ldr	r3, [pc, #20]	; (8000978 <HAL_InitTick+0x48>)
 8000964:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000966:	2000      	movs	r0, #0
 8000968:	e000      	b.n	800096c <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800096a:	2001      	movs	r0, #1
}
 800096c:	bd10      	pop	{r4, pc}
 800096e:	bf00      	nop
 8000970:	20000004 	.word	0x20000004
 8000974:	20000000 	.word	0x20000000
 8000978:	20000008 	.word	0x20000008

0800097c <HAL_Init>:
{
 800097c:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800097e:	4a07      	ldr	r2, [pc, #28]	; (800099c <HAL_Init+0x20>)
 8000980:	6813      	ldr	r3, [r2, #0]
 8000982:	f043 0310 	orr.w	r3, r3, #16
 8000986:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000988:	2003      	movs	r0, #3
 800098a:	f000 f82f 	bl	80009ec <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800098e:	2000      	movs	r0, #0
 8000990:	f7ff ffce 	bl	8000930 <HAL_InitTick>
  HAL_MspInit();
 8000994:	f7ff fcc8 	bl	8000328 <HAL_MspInit>
}
 8000998:	2000      	movs	r0, #0
 800099a:	bd08      	pop	{r3, pc}
 800099c:	40022000 	.word	0x40022000

080009a0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80009a0:	4a03      	ldr	r2, [pc, #12]	; (80009b0 <HAL_IncTick+0x10>)
 80009a2:	6811      	ldr	r1, [r2, #0]
 80009a4:	4b03      	ldr	r3, [pc, #12]	; (80009b4 <HAL_IncTick+0x14>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	440b      	add	r3, r1
 80009aa:	6013      	str	r3, [r2, #0]
}
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	200004b4 	.word	0x200004b4
 80009b4:	20000004 	.word	0x20000004

080009b8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80009b8:	4b01      	ldr	r3, [pc, #4]	; (80009c0 <HAL_GetTick+0x8>)
 80009ba:	6818      	ldr	r0, [r3, #0]
}
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	200004b4 	.word	0x200004b4

080009c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009c4:	b538      	push	{r3, r4, r5, lr}
 80009c6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80009c8:	f7ff fff6 	bl	80009b8 <HAL_GetTick>
 80009cc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009ce:	f1b4 3fff 	cmp.w	r4, #4294967295
 80009d2:	d002      	beq.n	80009da <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80009d4:	4b04      	ldr	r3, [pc, #16]	; (80009e8 <HAL_Delay+0x24>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009da:	f7ff ffed 	bl	80009b8 <HAL_GetTick>
 80009de:	1b40      	subs	r0, r0, r5
 80009e0:	42a0      	cmp	r0, r4
 80009e2:	d3fa      	bcc.n	80009da <HAL_Delay+0x16>
  {
  }
}
 80009e4:	bd38      	pop	{r3, r4, r5, pc}
 80009e6:	bf00      	nop
 80009e8:	20000004 	.word	0x20000004

080009ec <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009ec:	4a07      	ldr	r2, [pc, #28]	; (8000a0c <HAL_NVIC_SetPriorityGrouping+0x20>)
 80009ee:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009f0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80009f4:	041b      	lsls	r3, r3, #16
 80009f6:	0c1b      	lsrs	r3, r3, #16
 80009f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a00:	0200      	lsls	r0, r0, #8
 8000a02:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000a06:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000a08:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000a0a:	4770      	bx	lr
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a10:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a12:	4b16      	ldr	r3, [pc, #88]	; (8000a6c <HAL_NVIC_SetPriority+0x5c>)
 8000a14:	68db      	ldr	r3, [r3, #12]
 8000a16:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a1a:	f1c3 0407 	rsb	r4, r3, #7
 8000a1e:	2c04      	cmp	r4, #4
 8000a20:	bf28      	it	cs
 8000a22:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a24:	1d1d      	adds	r5, r3, #4
 8000a26:	2d06      	cmp	r5, #6
 8000a28:	bf8c      	ite	hi
 8000a2a:	3b03      	subhi	r3, #3
 8000a2c:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a2e:	f04f 35ff 	mov.w	r5, #4294967295
 8000a32:	fa05 f404 	lsl.w	r4, r5, r4
 8000a36:	ea21 0104 	bic.w	r1, r1, r4
 8000a3a:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a3c:	fa05 f303 	lsl.w	r3, r5, r3
 8000a40:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a44:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000a46:	2800      	cmp	r0, #0
 8000a48:	db09      	blt.n	8000a5e <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a4a:	0109      	lsls	r1, r1, #4
 8000a4c:	b2c9      	uxtb	r1, r1
 8000a4e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000a52:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000a56:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000a5a:	bc30      	pop	{r4, r5}
 8000a5c:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a5e:	f000 000f 	and.w	r0, r0, #15
 8000a62:	0109      	lsls	r1, r1, #4
 8000a64:	b2c9      	uxtb	r1, r1
 8000a66:	4b02      	ldr	r3, [pc, #8]	; (8000a70 <HAL_NVIC_SetPriority+0x60>)
 8000a68:	5419      	strb	r1, [r3, r0]
 8000a6a:	e7f6      	b.n	8000a5a <HAL_NVIC_SetPriority+0x4a>
 8000a6c:	e000ed00 	.word	0xe000ed00
 8000a70:	e000ed14 	.word	0xe000ed14

08000a74 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a74:	3801      	subs	r0, #1
 8000a76:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a7a:	d20a      	bcs.n	8000a92 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <HAL_SYSTICK_Config+0x24>)
 8000a7e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a80:	4a06      	ldr	r2, [pc, #24]	; (8000a9c <HAL_SYSTICK_Config+0x28>)
 8000a82:	21f0      	movs	r1, #240	; 0xf0
 8000a84:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a88:	2000      	movs	r0, #0
 8000a8a:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a8c:	2207      	movs	r2, #7
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000a92:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	e000e010 	.word	0xe000e010
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aa0:	680b      	ldr	r3, [r1, #0]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	f000 80e0 	beq.w	8000c68 <HAL_GPIO_Init+0x1c8>
{
 8000aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000aac:	b083      	sub	sp, #12
  uint32_t config = 0x00u;
 8000aae:	2500      	movs	r5, #0
  uint32_t position = 0x00u;
 8000ab0:	462a      	mov	r2, r5
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
        temp = AFIO->EXTICR[position >> 2u];
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ab2:	f8df c1c4 	ldr.w	ip, [pc, #452]	; 8000c78 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ab6:	4c6d      	ldr	r4, [pc, #436]	; (8000c6c <HAL_GPIO_Init+0x1cc>)
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ab8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000c7c <HAL_GPIO_Init+0x1dc>
      switch (GPIO_Init->Mode)
 8000abc:	f8df e1c0 	ldr.w	lr, [pc, #448]	; 8000c80 <HAL_GPIO_Init+0x1e0>
 8000ac0:	e0a2      	b.n	8000c08 <HAL_GPIO_Init+0x168>
 8000ac2:	f1b9 0f00 	cmp.w	r9, #0
 8000ac6:	d01b      	beq.n	8000b00 <HAL_GPIO_Init+0x60>
 8000ac8:	f1b9 0f01 	cmp.w	r9, #1
 8000acc:	d123      	bne.n	8000b16 <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ace:	68cd      	ldr	r5, [r1, #12]
          break;
 8000ad0:	e021      	b.n	8000b16 <HAL_GPIO_Init+0x76>
      switch (GPIO_Init->Mode)
 8000ad2:	45f1      	cmp	r9, lr
 8000ad4:	d014      	beq.n	8000b00 <HAL_GPIO_Init+0x60>
 8000ad6:	d90b      	bls.n	8000af0 <HAL_GPIO_Init+0x50>
 8000ad8:	4f65      	ldr	r7, [pc, #404]	; (8000c70 <HAL_GPIO_Init+0x1d0>)
 8000ada:	45b9      	cmp	r9, r7
 8000adc:	d010      	beq.n	8000b00 <HAL_GPIO_Init+0x60>
 8000ade:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000ae2:	45b9      	cmp	r9, r7
 8000ae4:	d00c      	beq.n	8000b00 <HAL_GPIO_Init+0x60>
 8000ae6:	f8df a19c 	ldr.w	sl, [pc, #412]	; 8000c84 <HAL_GPIO_Init+0x1e4>
 8000aea:	45d1      	cmp	r9, sl
 8000aec:	d113      	bne.n	8000b16 <HAL_GPIO_Init+0x76>
 8000aee:	e007      	b.n	8000b00 <HAL_GPIO_Init+0x60>
 8000af0:	f8df a194 	ldr.w	sl, [pc, #404]	; 8000c88 <HAL_GPIO_Init+0x1e8>
 8000af4:	45d1      	cmp	r9, sl
 8000af6:	d003      	beq.n	8000b00 <HAL_GPIO_Init+0x60>
 8000af8:	f50a 3a80 	add.w	sl, sl, #65536	; 0x10000
 8000afc:	45d1      	cmp	r9, sl
 8000afe:	d10a      	bne.n	8000b16 <HAL_GPIO_Init+0x76>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b00:	688d      	ldr	r5, [r1, #8]
 8000b02:	2d00      	cmp	r5, #0
 8000b04:	f000 80a2 	beq.w	8000c4c <HAL_GPIO_Init+0x1ac>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b08:	2d01      	cmp	r5, #1
            GPIOx->BSRR = ioposition;
 8000b0a:	bf0c      	ite	eq
 8000b0c:	6106      	streq	r6, [r0, #16]
            GPIOx->BRR = ioposition;
 8000b0e:	6146      	strne	r6, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b10:	2508      	movs	r5, #8
 8000b12:	e000      	b.n	8000b16 <HAL_GPIO_Init+0x76>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b14:	2500      	movs	r5, #0
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b16:	2bff      	cmp	r3, #255	; 0xff
 8000b18:	bf99      	ittee	ls
 8000b1a:	4682      	movls	sl, r0
 8000b1c:	6806      	ldrls	r6, [r0, #0]
 8000b1e:	f100 0a04 	addhi.w	sl, r0, #4
 8000b22:	6846      	ldrhi	r6, [r0, #4]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b24:	2bff      	cmp	r3, #255	; 0xff
 8000b26:	bf91      	iteee	ls
 8000b28:	ea4f 0982 	movls.w	r9, r2, lsl #2
 8000b2c:	f102 4980 	addhi.w	r9, r2, #1073741824	; 0x40000000
 8000b30:	f1a9 0908 	subhi.w	r9, r9, #8
 8000b34:	ea4f 0989 	movhi.w	r9, r9, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b38:	f04f 0b0f 	mov.w	fp, #15
 8000b3c:	fa0b fb09 	lsl.w	fp, fp, r9
 8000b40:	ea26 060b 	bic.w	r6, r6, fp
 8000b44:	fa05 f909 	lsl.w	r9, r5, r9
 8000b48:	ea46 0609 	orr.w	r6, r6, r9
 8000b4c:	f8ca 6000 	str.w	r6, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b50:	684e      	ldr	r6, [r1, #4]
 8000b52:	f016 5f80 	tst.w	r6, #268435456	; 0x10000000
 8000b56:	d052      	beq.n	8000bfe <HAL_GPIO_Init+0x15e>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b58:	4f46      	ldr	r7, [pc, #280]	; (8000c74 <HAL_GPIO_Init+0x1d4>)
 8000b5a:	69be      	ldr	r6, [r7, #24]
 8000b5c:	f046 0601 	orr.w	r6, r6, #1
 8000b60:	61be      	str	r6, [r7, #24]
 8000b62:	69be      	ldr	r6, [r7, #24]
 8000b64:	f006 0601 	and.w	r6, r6, #1
 8000b68:	9601      	str	r6, [sp, #4]
 8000b6a:	9e01      	ldr	r6, [sp, #4]
 8000b6c:	f022 0603 	bic.w	r6, r2, #3
 8000b70:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8000b74:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2u];
 8000b78:	f8d6 a008 	ldr.w	sl, [r6, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b7c:	f002 0903 	and.w	r9, r2, #3
 8000b80:	ea4f 0b89 	mov.w	fp, r9, lsl #2
 8000b84:	f04f 090f 	mov.w	r9, #15
 8000b88:	fa09 f90b 	lsl.w	r9, r9, fp
 8000b8c:	ea2a 0a09 	bic.w	sl, sl, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b90:	4560      	cmp	r0, ip
 8000b92:	d05d      	beq.n	8000c50 <HAL_GPIO_Init+0x1b0>
 8000b94:	4540      	cmp	r0, r8
 8000b96:	d05e      	beq.n	8000c56 <HAL_GPIO_Init+0x1b6>
 8000b98:	f5a7 3780 	sub.w	r7, r7, #65536	; 0x10000
 8000b9c:	42b8      	cmp	r0, r7
 8000b9e:	d05d      	beq.n	8000c5c <HAL_GPIO_Init+0x1bc>
 8000ba0:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000ba4:	42b8      	cmp	r0, r7
 8000ba6:	bf0c      	ite	eq
 8000ba8:	f04f 0903 	moveq.w	r9, #3
 8000bac:	f04f 0904 	movne.w	r9, #4
 8000bb0:	fa09 f90b 	lsl.w	r9, r9, fp
 8000bb4:	ea49 090a 	orr.w	r9, r9, sl
        AFIO->EXTICR[position >> 2u] = temp;
 8000bb8:	f8c6 9008 	str.w	r9, [r6, #8]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bbc:	684e      	ldr	r6, [r1, #4]
 8000bbe:	f416 3f80 	tst.w	r6, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000bc2:	6826      	ldr	r6, [r4, #0]
 8000bc4:	bf14      	ite	ne
 8000bc6:	431e      	orrne	r6, r3
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000bc8:	439e      	biceq	r6, r3
 8000bca:	6026      	str	r6, [r4, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bcc:	684e      	ldr	r6, [r1, #4]
 8000bce:	f416 3f00 	tst.w	r6, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000bd2:	6866      	ldr	r6, [r4, #4]
 8000bd4:	bf14      	ite	ne
 8000bd6:	431e      	orrne	r6, r3
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000bd8:	439e      	biceq	r6, r3
 8000bda:	6066      	str	r6, [r4, #4]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bdc:	684e      	ldr	r6, [r1, #4]
 8000bde:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000be2:	68a6      	ldr	r6, [r4, #8]
 8000be4:	bf14      	ite	ne
 8000be6:	431e      	orrne	r6, r3
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000be8:	439e      	biceq	r6, r3
 8000bea:	60a6      	str	r6, [r4, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bec:	684e      	ldr	r6, [r1, #4]
 8000bee:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000bf2:	68e6      	ldr	r6, [r4, #12]
 8000bf4:	bf14      	ite	ne
 8000bf6:	4333      	orrne	r3, r6
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000bf8:	ea26 0303 	biceq.w	r3, r6, r3
 8000bfc:	60e3      	str	r3, [r4, #12]
        }
      }
    }

	position++;
 8000bfe:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c00:	680b      	ldr	r3, [r1, #0]
 8000c02:	fa33 f602 	lsrs.w	r6, r3, r2
 8000c06:	d02c      	beq.n	8000c62 <HAL_GPIO_Init+0x1c2>
    ioposition = (0x01uL << position);
 8000c08:	2601      	movs	r6, #1
 8000c0a:	4096      	lsls	r6, r2
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c0c:	4033      	ands	r3, r6
    if (iocurrent == ioposition)
 8000c0e:	429e      	cmp	r6, r3
 8000c10:	d1f5      	bne.n	8000bfe <HAL_GPIO_Init+0x15e>
      switch (GPIO_Init->Mode)
 8000c12:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8000c16:	f1b9 0f12 	cmp.w	r9, #18
 8000c1a:	d014      	beq.n	8000c46 <HAL_GPIO_Init+0x1a6>
 8000c1c:	f63f af59 	bhi.w	8000ad2 <HAL_GPIO_Init+0x32>
 8000c20:	f1b9 0f02 	cmp.w	r9, #2
 8000c24:	d00c      	beq.n	8000c40 <HAL_GPIO_Init+0x1a0>
 8000c26:	f67f af4c 	bls.w	8000ac2 <HAL_GPIO_Init+0x22>
 8000c2a:	f1b9 0f03 	cmp.w	r9, #3
 8000c2e:	f43f af71 	beq.w	8000b14 <HAL_GPIO_Init+0x74>
 8000c32:	f1b9 0f11 	cmp.w	r9, #17
 8000c36:	f47f af6e 	bne.w	8000b16 <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c3a:	68cd      	ldr	r5, [r1, #12]
 8000c3c:	3504      	adds	r5, #4
          break;
 8000c3e:	e76a      	b.n	8000b16 <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c40:	68cd      	ldr	r5, [r1, #12]
 8000c42:	3508      	adds	r5, #8
          break;
 8000c44:	e767      	b.n	8000b16 <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c46:	68cd      	ldr	r5, [r1, #12]
 8000c48:	350c      	adds	r5, #12
          break;
 8000c4a:	e764      	b.n	8000b16 <HAL_GPIO_Init+0x76>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c4c:	2504      	movs	r5, #4
 8000c4e:	e762      	b.n	8000b16 <HAL_GPIO_Init+0x76>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c50:	f04f 0900 	mov.w	r9, #0
 8000c54:	e7ac      	b.n	8000bb0 <HAL_GPIO_Init+0x110>
 8000c56:	f04f 0901 	mov.w	r9, #1
 8000c5a:	e7a9      	b.n	8000bb0 <HAL_GPIO_Init+0x110>
 8000c5c:	f04f 0902 	mov.w	r9, #2
 8000c60:	e7a6      	b.n	8000bb0 <HAL_GPIO_Init+0x110>
  }
}
 8000c62:	b003      	add	sp, #12
 8000c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	40010400 	.word	0x40010400
 8000c70:	10310000 	.word	0x10310000
 8000c74:	40021000 	.word	0x40021000
 8000c78:	40010800 	.word	0x40010800
 8000c7c:	40010c00 	.word	0x40010c00
 8000c80:	10210000 	.word	0x10210000
 8000c84:	10220000 	.word	0x10220000
 8000c88:	10110000 	.word	0x10110000

08000c8c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c8c:	b912      	cbnz	r2, 8000c94 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c8e:	0409      	lsls	r1, r1, #16
 8000c90:	6101      	str	r1, [r0, #16]
  }
}
 8000c92:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8000c94:	6101      	str	r1, [r0, #16]
 8000c96:	4770      	bx	lr

08000c98 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c9a:	b087      	sub	sp, #28
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000c9c:	2800      	cmp	r0, #0
 8000c9e:	d072      	beq.n	8000d86 <HAL_PCD_Init+0xee>
 8000ca0:	4604      	mov	r4, r0

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000ca2:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 8000ca6:	b1d3      	cbz	r3, 8000cde <HAL_PCD_Init+0x46>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000ca8:	2303      	movs	r3, #3
 8000caa:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000cae:	6820      	ldr	r0, [r4, #0]
 8000cb0:	f000 ff1e 	bl	8001af0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000cb4:	4625      	mov	r5, r4
 8000cb6:	f855 7b10 	ldr.w	r7, [r5], #16
 8000cba:	466e      	mov	r6, sp
 8000cbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cbe:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000cc0:	682b      	ldr	r3, [r5, #0]
 8000cc2:	6033      	str	r3, [r6, #0]
 8000cc4:	1d23      	adds	r3, r4, #4
 8000cc6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cc8:	4638      	mov	r0, r7
 8000cca:	f000 ff0a 	bl	8001ae2 <USB_CoreInit>
 8000cce:	b158      	cbz	r0, 8000ce8 <HAL_PCD_Init+0x50>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 8000cd6:	2501      	movs	r5, #1
  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8000cd8:	4628      	mov	r0, r5
 8000cda:	b007      	add	sp, #28
 8000cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8000cde:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 8000ce2:	f7ff fde9 	bl	80008b8 <HAL_PCD_MspInit>
 8000ce6:	e7df      	b.n	8000ca8 <HAL_PCD_Init+0x10>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000ce8:	2100      	movs	r1, #0
 8000cea:	6820      	ldr	r0, [r4, #0]
 8000cec:	f000 ff0a 	bl	8001b04 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cf0:	6860      	ldr	r0, [r4, #4]
 8000cf2:	b350      	cbz	r0, 8000d4a <HAL_PCD_Init+0xb2>
 8000cf4:	2300      	movs	r3, #0
    hpcd->IN_ep[i].is_in = 1U;
 8000cf6:	2601      	movs	r6, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000cf8:	461d      	mov	r5, r3
 8000cfa:	0099      	lsls	r1, r3, #2
 8000cfc:	18ca      	adds	r2, r1, r3
 8000cfe:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    hpcd->IN_ep[i].is_in = 1U;
 8000d02:	f882 6029 	strb.w	r6, [r2, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 8000d06:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000d0a:	86d3      	strh	r3, [r2, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000d0c:	f882 502b 	strb.w	r5, [r2, #43]	; 0x2b
    hpcd->IN_ep[i].maxpacket = 0U;
 8000d10:	6395      	str	r5, [r2, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000d12:	63d5      	str	r5, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 8000d14:	6415      	str	r5, [r2, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d16:	3301      	adds	r3, #1
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	4283      	cmp	r3, r0
 8000d1c:	d3ed      	bcc.n	8000cfa <HAL_PCD_Init+0x62>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d1e:	2300      	movs	r3, #0
    hpcd->OUT_ep[i].is_in = 0U;
 8000d20:	461d      	mov	r5, r3
 8000d22:	0099      	lsls	r1, r3, #2
 8000d24:	18ca      	adds	r2, r1, r3
 8000d26:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8000d2a:	f882 5169 	strb.w	r5, [r2, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 8000d2e:	f882 3168 	strb.w	r3, [r2, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000d32:	f882 516b 	strb.w	r5, [r2, #363]	; 0x16b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000d36:	f8c2 5178 	str.w	r5, [r2, #376]	; 0x178
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000d3a:	f8c2 517c 	str.w	r5, [r2, #380]	; 0x17c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000d3e:	f8c2 5180 	str.w	r5, [r2, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d42:	3301      	adds	r3, #1
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	4283      	cmp	r3, r0
 8000d48:	d3eb      	bcc.n	8000d22 <HAL_PCD_Init+0x8a>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000d4a:	4625      	mov	r5, r4
 8000d4c:	f855 7b10 	ldr.w	r7, [r5], #16
 8000d50:	466e      	mov	r6, sp
 8000d52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d54:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000d56:	682b      	ldr	r3, [r5, #0]
 8000d58:	6033      	str	r3, [r6, #0]
 8000d5a:	1d23      	adds	r3, r4, #4
 8000d5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d5e:	4638      	mov	r0, r7
 8000d60:	f000 fed2 	bl	8001b08 <USB_DevInit>
 8000d64:	4605      	mov	r5, r0
 8000d66:	b120      	cbz	r0, 8000d72 <HAL_PCD_Init+0xda>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 8000d6e:	2501      	movs	r5, #1
 8000d70:	e7b2      	b.n	8000cd8 <HAL_PCD_Init+0x40>
  hpcd->USB_Address = 0U;
 8000d72:	2300      	movs	r3, #0
 8000d74:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000d7e:	6820      	ldr	r0, [r4, #0]
 8000d80:	f000 fed5 	bl	8001b2e <USB_DevDisconnect>
  return HAL_OK;
 8000d84:	e7a8      	b.n	8000cd8 <HAL_PCD_Init+0x40>
    return HAL_ERROR;
 8000d86:	2501      	movs	r5, #1
 8000d88:	e7a6      	b.n	8000cd8 <HAL_PCD_Init+0x40>
	...

08000d8c <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d8c:	2800      	cmp	r0, #0
 8000d8e:	f000 8206 	beq.w	800119e <HAL_RCC_OscConfig+0x412>
{
 8000d92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d9a:	6803      	ldr	r3, [r0, #0]
 8000d9c:	f013 0f01 	tst.w	r3, #1
 8000da0:	d02c      	beq.n	8000dfc <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000da2:	4bab      	ldr	r3, [pc, #684]	; (8001050 <HAL_RCC_OscConfig+0x2c4>)
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f003 030c 	and.w	r3, r3, #12
 8000daa:	2b04      	cmp	r3, #4
 8000dac:	d01d      	beq.n	8000dea <HAL_RCC_OscConfig+0x5e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000dae:	4ba8      	ldr	r3, [pc, #672]	; (8001050 <HAL_RCC_OscConfig+0x2c4>)
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	f003 030c 	and.w	r3, r3, #12
 8000db6:	2b08      	cmp	r3, #8
 8000db8:	d012      	beq.n	8000de0 <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dba:	6863      	ldr	r3, [r4, #4]
 8000dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dc0:	d041      	beq.n	8000e46 <HAL_RCC_OscConfig+0xba>
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d155      	bne.n	8000e72 <HAL_RCC_OscConfig+0xe6>
 8000dc6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000dca:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	e037      	b.n	8000e50 <HAL_RCC_OscConfig+0xc4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000de0:	4b9b      	ldr	r3, [pc, #620]	; (8001050 <HAL_RCC_OscConfig+0x2c4>)
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000de8:	d0e7      	beq.n	8000dba <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dea:	4b99      	ldr	r3, [pc, #612]	; (8001050 <HAL_RCC_OscConfig+0x2c4>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000df2:	d003      	beq.n	8000dfc <HAL_RCC_OscConfig+0x70>
 8000df4:	6863      	ldr	r3, [r4, #4]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	f000 81d3 	beq.w	80011a2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dfc:	6823      	ldr	r3, [r4, #0]
 8000dfe:	f013 0f02 	tst.w	r3, #2
 8000e02:	d076      	beq.n	8000ef2 <HAL_RCC_OscConfig+0x166>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e04:	4b92      	ldr	r3, [pc, #584]	; (8001050 <HAL_RCC_OscConfig+0x2c4>)
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f013 0f0c 	tst.w	r3, #12
 8000e0c:	d05f      	beq.n	8000ece <HAL_RCC_OscConfig+0x142>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e0e:	4b90      	ldr	r3, [pc, #576]	; (8001050 <HAL_RCC_OscConfig+0x2c4>)
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f003 030c 	and.w	r3, r3, #12
 8000e16:	2b08      	cmp	r3, #8
 8000e18:	d054      	beq.n	8000ec4 <HAL_RCC_OscConfig+0x138>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e1a:	6923      	ldr	r3, [r4, #16]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	f000 808a 	beq.w	8000f36 <HAL_RCC_OscConfig+0x1aa>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e22:	4b8c      	ldr	r3, [pc, #560]	; (8001054 <HAL_RCC_OscConfig+0x2c8>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e28:	f7ff fdc6 	bl	80009b8 <HAL_GetTick>
 8000e2c:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e2e:	4d88      	ldr	r5, [pc, #544]	; (8001050 <HAL_RCC_OscConfig+0x2c4>)
 8000e30:	682b      	ldr	r3, [r5, #0]
 8000e32:	f013 0f02 	tst.w	r3, #2
 8000e36:	d175      	bne.n	8000f24 <HAL_RCC_OscConfig+0x198>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e38:	f7ff fdbe 	bl	80009b8 <HAL_GetTick>
 8000e3c:	1b80      	subs	r0, r0, r6
 8000e3e:	2802      	cmp	r0, #2
 8000e40:	d9f6      	bls.n	8000e30 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_TIMEOUT;
 8000e42:	2003      	movs	r0, #3
 8000e44:	e1b0      	b.n	80011a8 <HAL_RCC_OscConfig+0x41c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e46:	4a82      	ldr	r2, [pc, #520]	; (8001050 <HAL_RCC_OscConfig+0x2c4>)
 8000e48:	6813      	ldr	r3, [r2, #0]
 8000e4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e4e:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e50:	6863      	ldr	r3, [r4, #4]
 8000e52:	b343      	cbz	r3, 8000ea6 <HAL_RCC_OscConfig+0x11a>
        tickstart = HAL_GetTick();
 8000e54:	f7ff fdb0 	bl	80009b8 <HAL_GetTick>
 8000e58:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e5a:	4d7d      	ldr	r5, [pc, #500]	; (8001050 <HAL_RCC_OscConfig+0x2c4>)
 8000e5c:	682b      	ldr	r3, [r5, #0]
 8000e5e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000e62:	d1cb      	bne.n	8000dfc <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e64:	f7ff fda8 	bl	80009b8 <HAL_GetTick>
 8000e68:	1b80      	subs	r0, r0, r6
 8000e6a:	2864      	cmp	r0, #100	; 0x64
 8000e6c:	d9f6      	bls.n	8000e5c <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 8000e6e:	2003      	movs	r0, #3
 8000e70:	e19a      	b.n	80011a8 <HAL_RCC_OscConfig+0x41c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e72:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e76:	d009      	beq.n	8000e8c <HAL_RCC_OscConfig+0x100>
 8000e78:	4b75      	ldr	r3, [pc, #468]	; (8001050 <HAL_RCC_OscConfig+0x2c4>)
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	e7e1      	b.n	8000e50 <HAL_RCC_OscConfig+0xc4>
 8000e8c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000e90:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	e7d4      	b.n	8000e50 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 8000ea6:	f7ff fd87 	bl	80009b8 <HAL_GetTick>
 8000eaa:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eac:	4d68      	ldr	r5, [pc, #416]	; (8001050 <HAL_RCC_OscConfig+0x2c4>)
 8000eae:	682b      	ldr	r3, [r5, #0]
 8000eb0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000eb4:	d0a2      	beq.n	8000dfc <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000eb6:	f7ff fd7f 	bl	80009b8 <HAL_GetTick>
 8000eba:	1b80      	subs	r0, r0, r6
 8000ebc:	2864      	cmp	r0, #100	; 0x64
 8000ebe:	d9f6      	bls.n	8000eae <HAL_RCC_OscConfig+0x122>
            return HAL_TIMEOUT;
 8000ec0:	2003      	movs	r0, #3
 8000ec2:	e171      	b.n	80011a8 <HAL_RCC_OscConfig+0x41c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000ec4:	4b62      	ldr	r3, [pc, #392]	; (8001050 <HAL_RCC_OscConfig+0x2c4>)
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000ecc:	d1a5      	bne.n	8000e1a <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ece:	4b60      	ldr	r3, [pc, #384]	; (8001050 <HAL_RCC_OscConfig+0x2c4>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f013 0f02 	tst.w	r3, #2
 8000ed6:	d004      	beq.n	8000ee2 <HAL_RCC_OscConfig+0x156>
 8000ed8:	6923      	ldr	r3, [r4, #16]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d001      	beq.n	8000ee2 <HAL_RCC_OscConfig+0x156>
        return HAL_ERROR;
 8000ede:	2001      	movs	r0, #1
 8000ee0:	e162      	b.n	80011a8 <HAL_RCC_OscConfig+0x41c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ee2:	4a5b      	ldr	r2, [pc, #364]	; (8001050 <HAL_RCC_OscConfig+0x2c4>)
 8000ee4:	6813      	ldr	r3, [r2, #0]
 8000ee6:	6961      	ldr	r1, [r4, #20]
 8000ee8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000eec:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000ef0:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ef2:	6823      	ldr	r3, [r4, #0]
 8000ef4:	f013 0f08 	tst.w	r3, #8
 8000ef8:	d03c      	beq.n	8000f74 <HAL_RCC_OscConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000efa:	69a3      	ldr	r3, [r4, #24]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d065      	beq.n	8000fcc <HAL_RCC_OscConfig+0x240>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f00:	4b55      	ldr	r3, [pc, #340]	; (8001058 <HAL_RCC_OscConfig+0x2cc>)
 8000f02:	2201      	movs	r2, #1
 8000f04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f06:	f7ff fd57 	bl	80009b8 <HAL_GetTick>
 8000f0a:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f0c:	4d50      	ldr	r5, [pc, #320]	; (8001050 <HAL_RCC_OscConfig+0x2c4>)
 8000f0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000f10:	f013 0f02 	tst.w	r3, #2
 8000f14:	d121      	bne.n	8000f5a <HAL_RCC_OscConfig+0x1ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f16:	f7ff fd4f 	bl	80009b8 <HAL_GetTick>
 8000f1a:	1b80      	subs	r0, r0, r6
 8000f1c:	2802      	cmp	r0, #2
 8000f1e:	d9f6      	bls.n	8000f0e <HAL_RCC_OscConfig+0x182>
        {
          return HAL_TIMEOUT;
 8000f20:	2003      	movs	r0, #3
 8000f22:	e141      	b.n	80011a8 <HAL_RCC_OscConfig+0x41c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f24:	4a4a      	ldr	r2, [pc, #296]	; (8001050 <HAL_RCC_OscConfig+0x2c4>)
 8000f26:	6813      	ldr	r3, [r2, #0]
 8000f28:	6961      	ldr	r1, [r4, #20]
 8000f2a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000f2e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000f32:	6013      	str	r3, [r2, #0]
 8000f34:	e7dd      	b.n	8000ef2 <HAL_RCC_OscConfig+0x166>
        __HAL_RCC_HSI_DISABLE();
 8000f36:	4b47      	ldr	r3, [pc, #284]	; (8001054 <HAL_RCC_OscConfig+0x2c8>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f3c:	f7ff fd3c 	bl	80009b8 <HAL_GetTick>
 8000f40:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f42:	4d43      	ldr	r5, [pc, #268]	; (8001050 <HAL_RCC_OscConfig+0x2c4>)
 8000f44:	682b      	ldr	r3, [r5, #0]
 8000f46:	f013 0f02 	tst.w	r3, #2
 8000f4a:	d0d2      	beq.n	8000ef2 <HAL_RCC_OscConfig+0x166>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f4c:	f7ff fd34 	bl	80009b8 <HAL_GetTick>
 8000f50:	1b80      	subs	r0, r0, r6
 8000f52:	2802      	cmp	r0, #2
 8000f54:	d9f6      	bls.n	8000f44 <HAL_RCC_OscConfig+0x1b8>
            return HAL_TIMEOUT;
 8000f56:	2003      	movs	r0, #3
 8000f58:	e126      	b.n	80011a8 <HAL_RCC_OscConfig+0x41c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000f5a:	4b40      	ldr	r3, [pc, #256]	; (800105c <HAL_RCC_OscConfig+0x2d0>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a40      	ldr	r2, [pc, #256]	; (8001060 <HAL_RCC_OscConfig+0x2d4>)
 8000f60:	fba2 2303 	umull	r2, r3, r2, r3
 8000f64:	0a5b      	lsrs	r3, r3, #9
 8000f66:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8000f68:	bf00      	nop
  }
  while (Delay --);
 8000f6a:	9b01      	ldr	r3, [sp, #4]
 8000f6c:	1e5a      	subs	r2, r3, #1
 8000f6e:	9201      	str	r2, [sp, #4]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d1f9      	bne.n	8000f68 <HAL_RCC_OscConfig+0x1dc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f74:	6823      	ldr	r3, [r4, #0]
 8000f76:	f013 0f04 	tst.w	r3, #4
 8000f7a:	f000 809e 	beq.w	80010ba <HAL_RCC_OscConfig+0x32e>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f7e:	4b34      	ldr	r3, [pc, #208]	; (8001050 <HAL_RCC_OscConfig+0x2c4>)
 8000f80:	69db      	ldr	r3, [r3, #28]
 8000f82:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000f86:	d133      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x264>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f88:	4b31      	ldr	r3, [pc, #196]	; (8001050 <HAL_RCC_OscConfig+0x2c4>)
 8000f8a:	69da      	ldr	r2, [r3, #28]
 8000f8c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f90:	61da      	str	r2, [r3, #28]
 8000f92:	69db      	ldr	r3, [r3, #28]
 8000f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f98:	9300      	str	r3, [sp, #0]
 8000f9a:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 8000f9c:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f9e:	4b31      	ldr	r3, [pc, #196]	; (8001064 <HAL_RCC_OscConfig+0x2d8>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000fa6:	d025      	beq.n	8000ff4 <HAL_RCC_OscConfig+0x268>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fa8:	68e3      	ldr	r3, [r4, #12]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d036      	beq.n	800101c <HAL_RCC_OscConfig+0x290>
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d15a      	bne.n	8001068 <HAL_RCC_OscConfig+0x2dc>
 8000fb2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000fb6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000fba:	6a1a      	ldr	r2, [r3, #32]
 8000fbc:	f022 0201 	bic.w	r2, r2, #1
 8000fc0:	621a      	str	r2, [r3, #32]
 8000fc2:	6a1a      	ldr	r2, [r3, #32]
 8000fc4:	f022 0204 	bic.w	r2, r2, #4
 8000fc8:	621a      	str	r2, [r3, #32]
 8000fca:	e02c      	b.n	8001026 <HAL_RCC_OscConfig+0x29a>
      __HAL_RCC_LSI_DISABLE();
 8000fcc:	4b22      	ldr	r3, [pc, #136]	; (8001058 <HAL_RCC_OscConfig+0x2cc>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000fd2:	f7ff fcf1 	bl	80009b8 <HAL_GetTick>
 8000fd6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fd8:	4d1d      	ldr	r5, [pc, #116]	; (8001050 <HAL_RCC_OscConfig+0x2c4>)
 8000fda:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000fdc:	f013 0f02 	tst.w	r3, #2
 8000fe0:	d0c8      	beq.n	8000f74 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fe2:	f7ff fce9 	bl	80009b8 <HAL_GetTick>
 8000fe6:	1b80      	subs	r0, r0, r6
 8000fe8:	2802      	cmp	r0, #2
 8000fea:	d9f6      	bls.n	8000fda <HAL_RCC_OscConfig+0x24e>
          return HAL_TIMEOUT;
 8000fec:	2003      	movs	r0, #3
 8000fee:	e0db      	b.n	80011a8 <HAL_RCC_OscConfig+0x41c>
    FlagStatus       pwrclkchanged = RESET;
 8000ff0:	2500      	movs	r5, #0
 8000ff2:	e7d4      	b.n	8000f9e <HAL_RCC_OscConfig+0x212>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ff4:	4a1b      	ldr	r2, [pc, #108]	; (8001064 <HAL_RCC_OscConfig+0x2d8>)
 8000ff6:	6813      	ldr	r3, [r2, #0]
 8000ff8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ffc:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000ffe:	f7ff fcdb 	bl	80009b8 <HAL_GetTick>
 8001002:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001004:	4e17      	ldr	r6, [pc, #92]	; (8001064 <HAL_RCC_OscConfig+0x2d8>)
 8001006:	6833      	ldr	r3, [r6, #0]
 8001008:	f413 7f80 	tst.w	r3, #256	; 0x100
 800100c:	d1cc      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x21c>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800100e:	f7ff fcd3 	bl	80009b8 <HAL_GetTick>
 8001012:	1bc0      	subs	r0, r0, r7
 8001014:	2864      	cmp	r0, #100	; 0x64
 8001016:	d9f6      	bls.n	8001006 <HAL_RCC_OscConfig+0x27a>
          return HAL_TIMEOUT;
 8001018:	2003      	movs	r0, #3
 800101a:	e0c5      	b.n	80011a8 <HAL_RCC_OscConfig+0x41c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800101c:	4a0c      	ldr	r2, [pc, #48]	; (8001050 <HAL_RCC_OscConfig+0x2c4>)
 800101e:	6a13      	ldr	r3, [r2, #32]
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001026:	68e3      	ldr	r3, [r4, #12]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d033      	beq.n	8001094 <HAL_RCC_OscConfig+0x308>
      tickstart = HAL_GetTick();
 800102c:	f7ff fcc4 	bl	80009b8 <HAL_GetTick>
 8001030:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001032:	4e07      	ldr	r6, [pc, #28]	; (8001050 <HAL_RCC_OscConfig+0x2c4>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001034:	f241 3788 	movw	r7, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001038:	6a33      	ldr	r3, [r6, #32]
 800103a:	f013 0f02 	tst.w	r3, #2
 800103e:	d13b      	bne.n	80010b8 <HAL_RCC_OscConfig+0x32c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001040:	f7ff fcba 	bl	80009b8 <HAL_GetTick>
 8001044:	eba0 0008 	sub.w	r0, r0, r8
 8001048:	42b8      	cmp	r0, r7
 800104a:	d9f5      	bls.n	8001038 <HAL_RCC_OscConfig+0x2ac>
          return HAL_TIMEOUT;
 800104c:	2003      	movs	r0, #3
 800104e:	e0ab      	b.n	80011a8 <HAL_RCC_OscConfig+0x41c>
 8001050:	40021000 	.word	0x40021000
 8001054:	42420000 	.word	0x42420000
 8001058:	42420480 	.word	0x42420480
 800105c:	20000000 	.word	0x20000000
 8001060:	10624dd3 	.word	0x10624dd3
 8001064:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001068:	2b05      	cmp	r3, #5
 800106a:	d009      	beq.n	8001080 <HAL_RCC_OscConfig+0x2f4>
 800106c:	4b51      	ldr	r3, [pc, #324]	; (80011b4 <HAL_RCC_OscConfig+0x428>)
 800106e:	6a1a      	ldr	r2, [r3, #32]
 8001070:	f022 0201 	bic.w	r2, r2, #1
 8001074:	621a      	str	r2, [r3, #32]
 8001076:	6a1a      	ldr	r2, [r3, #32]
 8001078:	f022 0204 	bic.w	r2, r2, #4
 800107c:	621a      	str	r2, [r3, #32]
 800107e:	e7d2      	b.n	8001026 <HAL_RCC_OscConfig+0x29a>
 8001080:	4b4c      	ldr	r3, [pc, #304]	; (80011b4 <HAL_RCC_OscConfig+0x428>)
 8001082:	6a1a      	ldr	r2, [r3, #32]
 8001084:	f042 0204 	orr.w	r2, r2, #4
 8001088:	621a      	str	r2, [r3, #32]
 800108a:	6a1a      	ldr	r2, [r3, #32]
 800108c:	f042 0201 	orr.w	r2, r2, #1
 8001090:	621a      	str	r2, [r3, #32]
 8001092:	e7c8      	b.n	8001026 <HAL_RCC_OscConfig+0x29a>
      tickstart = HAL_GetTick();
 8001094:	f7ff fc90 	bl	80009b8 <HAL_GetTick>
 8001098:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800109a:	4e46      	ldr	r6, [pc, #280]	; (80011b4 <HAL_RCC_OscConfig+0x428>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800109c:	f241 3788 	movw	r7, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010a0:	6a33      	ldr	r3, [r6, #32]
 80010a2:	f013 0f02 	tst.w	r3, #2
 80010a6:	d007      	beq.n	80010b8 <HAL_RCC_OscConfig+0x32c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010a8:	f7ff fc86 	bl	80009b8 <HAL_GetTick>
 80010ac:	eba0 0008 	sub.w	r0, r0, r8
 80010b0:	42b8      	cmp	r0, r7
 80010b2:	d9f5      	bls.n	80010a0 <HAL_RCC_OscConfig+0x314>
          return HAL_TIMEOUT;
 80010b4:	2003      	movs	r0, #3
 80010b6:	e077      	b.n	80011a8 <HAL_RCC_OscConfig+0x41c>
    if (pwrclkchanged == SET)
 80010b8:	b9e5      	cbnz	r5, 80010f4 <HAL_RCC_OscConfig+0x368>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010ba:	69e3      	ldr	r3, [r4, #28]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d072      	beq.n	80011a6 <HAL_RCC_OscConfig+0x41a>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010c0:	4a3c      	ldr	r2, [pc, #240]	; (80011b4 <HAL_RCC_OscConfig+0x428>)
 80010c2:	6852      	ldr	r2, [r2, #4]
 80010c4:	f002 020c 	and.w	r2, r2, #12
 80010c8:	2a08      	cmp	r2, #8
 80010ca:	d056      	beq.n	800117a <HAL_RCC_OscConfig+0x3ee>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d017      	beq.n	8001100 <HAL_RCC_OscConfig+0x374>
        __HAL_RCC_PLL_DISABLE();
 80010d0:	4b39      	ldr	r3, [pc, #228]	; (80011b8 <HAL_RCC_OscConfig+0x42c>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80010d6:	f7ff fc6f 	bl	80009b8 <HAL_GetTick>
 80010da:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010dc:	4c35      	ldr	r4, [pc, #212]	; (80011b4 <HAL_RCC_OscConfig+0x428>)
 80010de:	6823      	ldr	r3, [r4, #0]
 80010e0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80010e4:	d047      	beq.n	8001176 <HAL_RCC_OscConfig+0x3ea>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010e6:	f7ff fc67 	bl	80009b8 <HAL_GetTick>
 80010ea:	1b40      	subs	r0, r0, r5
 80010ec:	2802      	cmp	r0, #2
 80010ee:	d9f6      	bls.n	80010de <HAL_RCC_OscConfig+0x352>
            return HAL_TIMEOUT;
 80010f0:	2003      	movs	r0, #3
 80010f2:	e059      	b.n	80011a8 <HAL_RCC_OscConfig+0x41c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80010f4:	4a2f      	ldr	r2, [pc, #188]	; (80011b4 <HAL_RCC_OscConfig+0x428>)
 80010f6:	69d3      	ldr	r3, [r2, #28]
 80010f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010fc:	61d3      	str	r3, [r2, #28]
 80010fe:	e7dc      	b.n	80010ba <HAL_RCC_OscConfig+0x32e>
        __HAL_RCC_PLL_DISABLE();
 8001100:	4b2d      	ldr	r3, [pc, #180]	; (80011b8 <HAL_RCC_OscConfig+0x42c>)
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001106:	f7ff fc57 	bl	80009b8 <HAL_GetTick>
 800110a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800110c:	4d29      	ldr	r5, [pc, #164]	; (80011b4 <HAL_RCC_OscConfig+0x428>)
 800110e:	682b      	ldr	r3, [r5, #0]
 8001110:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001114:	d006      	beq.n	8001124 <HAL_RCC_OscConfig+0x398>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001116:	f7ff fc4f 	bl	80009b8 <HAL_GetTick>
 800111a:	1b80      	subs	r0, r0, r6
 800111c:	2802      	cmp	r0, #2
 800111e:	d9f6      	bls.n	800110e <HAL_RCC_OscConfig+0x382>
            return HAL_TIMEOUT;
 8001120:	2003      	movs	r0, #3
 8001122:	e041      	b.n	80011a8 <HAL_RCC_OscConfig+0x41c>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001124:	6a23      	ldr	r3, [r4, #32]
 8001126:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800112a:	d01a      	beq.n	8001162 <HAL_RCC_OscConfig+0x3d6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800112c:	4921      	ldr	r1, [pc, #132]	; (80011b4 <HAL_RCC_OscConfig+0x428>)
 800112e:	684a      	ldr	r2, [r1, #4]
 8001130:	6a23      	ldr	r3, [r4, #32]
 8001132:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001134:	4303      	orrs	r3, r0
 8001136:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800113a:	4313      	orrs	r3, r2
 800113c:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 800113e:	4b1e      	ldr	r3, [pc, #120]	; (80011b8 <HAL_RCC_OscConfig+0x42c>)
 8001140:	2201      	movs	r2, #1
 8001142:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001144:	f7ff fc38 	bl	80009b8 <HAL_GetTick>
 8001148:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800114a:	4c1a      	ldr	r4, [pc, #104]	; (80011b4 <HAL_RCC_OscConfig+0x428>)
 800114c:	6823      	ldr	r3, [r4, #0]
 800114e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001152:	d10e      	bne.n	8001172 <HAL_RCC_OscConfig+0x3e6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001154:	f7ff fc30 	bl	80009b8 <HAL_GetTick>
 8001158:	1b40      	subs	r0, r0, r5
 800115a:	2802      	cmp	r0, #2
 800115c:	d9f6      	bls.n	800114c <HAL_RCC_OscConfig+0x3c0>
            return HAL_TIMEOUT;
 800115e:	2003      	movs	r0, #3
 8001160:	e022      	b.n	80011a8 <HAL_RCC_OscConfig+0x41c>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001162:	4a14      	ldr	r2, [pc, #80]	; (80011b4 <HAL_RCC_OscConfig+0x428>)
 8001164:	6853      	ldr	r3, [r2, #4]
 8001166:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800116a:	68a1      	ldr	r1, [r4, #8]
 800116c:	430b      	orrs	r3, r1
 800116e:	6053      	str	r3, [r2, #4]
 8001170:	e7dc      	b.n	800112c <HAL_RCC_OscConfig+0x3a0>
  return HAL_OK;
 8001172:	2000      	movs	r0, #0
 8001174:	e018      	b.n	80011a8 <HAL_RCC_OscConfig+0x41c>
 8001176:	2000      	movs	r0, #0
 8001178:	e016      	b.n	80011a8 <HAL_RCC_OscConfig+0x41c>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800117a:	2b01      	cmp	r3, #1
 800117c:	d017      	beq.n	80011ae <HAL_RCC_OscConfig+0x422>
        pll_config = RCC->CFGR;
 800117e:	4b0d      	ldr	r3, [pc, #52]	; (80011b4 <HAL_RCC_OscConfig+0x428>)
 8001180:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001182:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8001186:	6a22      	ldr	r2, [r4, #32]
 8001188:	4291      	cmp	r1, r2
 800118a:	d001      	beq.n	8001190 <HAL_RCC_OscConfig+0x404>
          return HAL_ERROR;
 800118c:	2001      	movs	r0, #1
 800118e:	e00b      	b.n	80011a8 <HAL_RCC_OscConfig+0x41c>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001190:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001194:	6a60      	ldr	r0, [r4, #36]	; 0x24
    return HAL_ERROR;
 8001196:	1a18      	subs	r0, r3, r0
 8001198:	bf18      	it	ne
 800119a:	2001      	movne	r0, #1
 800119c:	e004      	b.n	80011a8 <HAL_RCC_OscConfig+0x41c>
 800119e:	2001      	movs	r0, #1
}
 80011a0:	4770      	bx	lr
        return HAL_ERROR;
 80011a2:	2001      	movs	r0, #1
 80011a4:	e000      	b.n	80011a8 <HAL_RCC_OscConfig+0x41c>
  return HAL_OK;
 80011a6:	2000      	movs	r0, #0
}
 80011a8:	b002      	add	sp, #8
 80011aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 80011ae:	2001      	movs	r0, #1
 80011b0:	e7fa      	b.n	80011a8 <HAL_RCC_OscConfig+0x41c>
 80011b2:	bf00      	nop
 80011b4:	40021000 	.word	0x40021000
 80011b8:	42420060 	.word	0x42420060

080011bc <HAL_RCC_GetSysClockFreq>:
{
 80011bc:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80011be:	4b17      	ldr	r3, [pc, #92]	; (800121c <HAL_RCC_GetSysClockFreq+0x60>)
 80011c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011c2:	f10d 0c18 	add.w	ip, sp, #24
 80011c6:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80011ca:	2301      	movs	r3, #1
 80011cc:	f88d 3004 	strb.w	r3, [sp, #4]
 80011d0:	2302      	movs	r3, #2
 80011d2:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80011d6:	4b12      	ldr	r3, [pc, #72]	; (8001220 <HAL_RCC_GetSysClockFreq+0x64>)
 80011d8:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80011da:	f003 020c 	and.w	r2, r3, #12
 80011de:	2a08      	cmp	r2, #8
 80011e0:	d119      	bne.n	8001216 <HAL_RCC_GetSysClockFreq+0x5a>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80011e2:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80011e6:	4462      	add	r2, ip
 80011e8:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80011ec:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80011f0:	d104      	bne.n	80011fc <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80011f2:	480c      	ldr	r0, [pc, #48]	; (8001224 <HAL_RCC_GetSysClockFreq+0x68>)
 80011f4:	fb00 f002 	mul.w	r0, r0, r2
}
 80011f8:	b006      	add	sp, #24
 80011fa:	4770      	bx	lr
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80011fc:	4b08      	ldr	r3, [pc, #32]	; (8001220 <HAL_RCC_GetSysClockFreq+0x64>)
 80011fe:	685b      	ldr	r3, [r3, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001200:	4809      	ldr	r0, [pc, #36]	; (8001228 <HAL_RCC_GetSysClockFreq+0x6c>)
 8001202:	fb00 f002 	mul.w	r0, r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001206:	f3c3 4340 	ubfx	r3, r3, #17, #1
 800120a:	4463      	add	r3, ip
 800120c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001210:	fbb0 f0f3 	udiv	r0, r0, r3
 8001214:	e7f0      	b.n	80011f8 <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = HSE_VALUE;
 8001216:	4804      	ldr	r0, [pc, #16]	; (8001228 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8001218:	e7ee      	b.n	80011f8 <HAL_RCC_GetSysClockFreq+0x3c>
 800121a:	bf00      	nop
 800121c:	08001ba4 	.word	0x08001ba4
 8001220:	40021000 	.word	0x40021000
 8001224:	003d0900 	.word	0x003d0900
 8001228:	007a1200 	.word	0x007a1200

0800122c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800122c:	2800      	cmp	r0, #0
 800122e:	f000 80a6 	beq.w	800137e <HAL_RCC_ClockConfig+0x152>
{
 8001232:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001236:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001238:	4b53      	ldr	r3, [pc, #332]	; (8001388 <HAL_RCC_ClockConfig+0x15c>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 0307 	and.w	r3, r3, #7
 8001240:	428b      	cmp	r3, r1
 8001242:	d20d      	bcs.n	8001260 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001244:	4a50      	ldr	r2, [pc, #320]	; (8001388 <HAL_RCC_ClockConfig+0x15c>)
 8001246:	6813      	ldr	r3, [r2, #0]
 8001248:	f023 0307 	bic.w	r3, r3, #7
 800124c:	430b      	orrs	r3, r1
 800124e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001250:	6813      	ldr	r3, [r2, #0]
 8001252:	f003 0307 	and.w	r3, r3, #7
 8001256:	428b      	cmp	r3, r1
 8001258:	d002      	beq.n	8001260 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800125a:	2001      	movs	r0, #1
}
 800125c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001260:	6823      	ldr	r3, [r4, #0]
 8001262:	f013 0f02 	tst.w	r3, #2
 8001266:	d017      	beq.n	8001298 <HAL_RCC_ClockConfig+0x6c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001268:	f013 0f04 	tst.w	r3, #4
 800126c:	d004      	beq.n	8001278 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800126e:	4a47      	ldr	r2, [pc, #284]	; (800138c <HAL_RCC_ClockConfig+0x160>)
 8001270:	6853      	ldr	r3, [r2, #4]
 8001272:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001276:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001278:	6823      	ldr	r3, [r4, #0]
 800127a:	f013 0f08 	tst.w	r3, #8
 800127e:	d004      	beq.n	800128a <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001280:	4a42      	ldr	r2, [pc, #264]	; (800138c <HAL_RCC_ClockConfig+0x160>)
 8001282:	6853      	ldr	r3, [r2, #4]
 8001284:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001288:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800128a:	4a40      	ldr	r2, [pc, #256]	; (800138c <HAL_RCC_ClockConfig+0x160>)
 800128c:	6853      	ldr	r3, [r2, #4]
 800128e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001292:	68a0      	ldr	r0, [r4, #8]
 8001294:	4303      	orrs	r3, r0
 8001296:	6053      	str	r3, [r2, #4]
 8001298:	460d      	mov	r5, r1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800129a:	6823      	ldr	r3, [r4, #0]
 800129c:	f013 0f01 	tst.w	r3, #1
 80012a0:	d032      	beq.n	8001308 <HAL_RCC_ClockConfig+0xdc>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012a2:	6862      	ldr	r2, [r4, #4]
 80012a4:	2a01      	cmp	r2, #1
 80012a6:	d021      	beq.n	80012ec <HAL_RCC_ClockConfig+0xc0>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012a8:	2a02      	cmp	r2, #2
 80012aa:	d026      	beq.n	80012fa <HAL_RCC_ClockConfig+0xce>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ac:	4b37      	ldr	r3, [pc, #220]	; (800138c <HAL_RCC_ClockConfig+0x160>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f013 0f02 	tst.w	r3, #2
 80012b4:	d065      	beq.n	8001382 <HAL_RCC_ClockConfig+0x156>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012b6:	4935      	ldr	r1, [pc, #212]	; (800138c <HAL_RCC_ClockConfig+0x160>)
 80012b8:	684b      	ldr	r3, [r1, #4]
 80012ba:	f023 0303 	bic.w	r3, r3, #3
 80012be:	4313      	orrs	r3, r2
 80012c0:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 80012c2:	f7ff fb79 	bl	80009b8 <HAL_GetTick>
 80012c6:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012c8:	4e30      	ldr	r6, [pc, #192]	; (800138c <HAL_RCC_ClockConfig+0x160>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012ca:	f241 3788 	movw	r7, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012ce:	6873      	ldr	r3, [r6, #4]
 80012d0:	f003 030c 	and.w	r3, r3, #12
 80012d4:	6862      	ldr	r2, [r4, #4]
 80012d6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80012da:	d015      	beq.n	8001308 <HAL_RCC_ClockConfig+0xdc>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012dc:	f7ff fb6c 	bl	80009b8 <HAL_GetTick>
 80012e0:	eba0 0008 	sub.w	r0, r0, r8
 80012e4:	42b8      	cmp	r0, r7
 80012e6:	d9f2      	bls.n	80012ce <HAL_RCC_ClockConfig+0xa2>
        return HAL_TIMEOUT;
 80012e8:	2003      	movs	r0, #3
 80012ea:	e7b7      	b.n	800125c <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ec:	4b27      	ldr	r3, [pc, #156]	; (800138c <HAL_RCC_ClockConfig+0x160>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80012f4:	d1df      	bne.n	80012b6 <HAL_RCC_ClockConfig+0x8a>
        return HAL_ERROR;
 80012f6:	2001      	movs	r0, #1
 80012f8:	e7b0      	b.n	800125c <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012fa:	4b24      	ldr	r3, [pc, #144]	; (800138c <HAL_RCC_ClockConfig+0x160>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001302:	d1d8      	bne.n	80012b6 <HAL_RCC_ClockConfig+0x8a>
        return HAL_ERROR;
 8001304:	2001      	movs	r0, #1
 8001306:	e7a9      	b.n	800125c <HAL_RCC_ClockConfig+0x30>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001308:	4b1f      	ldr	r3, [pc, #124]	; (8001388 <HAL_RCC_ClockConfig+0x15c>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 0307 	and.w	r3, r3, #7
 8001310:	42ab      	cmp	r3, r5
 8001312:	d90c      	bls.n	800132e <HAL_RCC_ClockConfig+0x102>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001314:	4a1c      	ldr	r2, [pc, #112]	; (8001388 <HAL_RCC_ClockConfig+0x15c>)
 8001316:	6813      	ldr	r3, [r2, #0]
 8001318:	f023 0307 	bic.w	r3, r3, #7
 800131c:	432b      	orrs	r3, r5
 800131e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001320:	6813      	ldr	r3, [r2, #0]
 8001322:	f003 0307 	and.w	r3, r3, #7
 8001326:	42ab      	cmp	r3, r5
 8001328:	d001      	beq.n	800132e <HAL_RCC_ClockConfig+0x102>
    return HAL_ERROR;
 800132a:	2001      	movs	r0, #1
 800132c:	e796      	b.n	800125c <HAL_RCC_ClockConfig+0x30>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800132e:	6823      	ldr	r3, [r4, #0]
 8001330:	f013 0f04 	tst.w	r3, #4
 8001334:	d006      	beq.n	8001344 <HAL_RCC_ClockConfig+0x118>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001336:	4a15      	ldr	r2, [pc, #84]	; (800138c <HAL_RCC_ClockConfig+0x160>)
 8001338:	6853      	ldr	r3, [r2, #4]
 800133a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800133e:	68e1      	ldr	r1, [r4, #12]
 8001340:	430b      	orrs	r3, r1
 8001342:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001344:	6823      	ldr	r3, [r4, #0]
 8001346:	f013 0f08 	tst.w	r3, #8
 800134a:	d007      	beq.n	800135c <HAL_RCC_ClockConfig+0x130>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800134c:	4a0f      	ldr	r2, [pc, #60]	; (800138c <HAL_RCC_ClockConfig+0x160>)
 800134e:	6853      	ldr	r3, [r2, #4]
 8001350:	6921      	ldr	r1, [r4, #16]
 8001352:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001356:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800135a:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800135c:	f7ff ff2e 	bl	80011bc <HAL_RCC_GetSysClockFreq>
 8001360:	4b0a      	ldr	r3, [pc, #40]	; (800138c <HAL_RCC_ClockConfig+0x160>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001368:	4a09      	ldr	r2, [pc, #36]	; (8001390 <HAL_RCC_ClockConfig+0x164>)
 800136a:	5cd3      	ldrb	r3, [r2, r3]
 800136c:	40d8      	lsrs	r0, r3
 800136e:	4b09      	ldr	r3, [pc, #36]	; (8001394 <HAL_RCC_ClockConfig+0x168>)
 8001370:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001372:	4b09      	ldr	r3, [pc, #36]	; (8001398 <HAL_RCC_ClockConfig+0x16c>)
 8001374:	6818      	ldr	r0, [r3, #0]
 8001376:	f7ff fadb 	bl	8000930 <HAL_InitTick>
  return HAL_OK;
 800137a:	2000      	movs	r0, #0
 800137c:	e76e      	b.n	800125c <HAL_RCC_ClockConfig+0x30>
    return HAL_ERROR;
 800137e:	2001      	movs	r0, #1
}
 8001380:	4770      	bx	lr
        return HAL_ERROR;
 8001382:	2001      	movs	r0, #1
 8001384:	e76a      	b.n	800125c <HAL_RCC_ClockConfig+0x30>
 8001386:	bf00      	nop
 8001388:	40022000 	.word	0x40022000
 800138c:	40021000 	.word	0x40021000
 8001390:	08001bb4 	.word	0x08001bb4
 8001394:	20000000 	.word	0x20000000
 8001398:	20000008 	.word	0x20000008

0800139c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800139c:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <HAL_RCC_GetPCLK1Freq+0x14>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80013a4:	4a03      	ldr	r2, [pc, #12]	; (80013b4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80013a6:	5cd3      	ldrb	r3, [r2, r3]
 80013a8:	4a03      	ldr	r2, [pc, #12]	; (80013b8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80013aa:	6810      	ldr	r0, [r2, #0]
}
 80013ac:	40d8      	lsrs	r0, r3
 80013ae:	4770      	bx	lr
 80013b0:	40021000 	.word	0x40021000
 80013b4:	08001bc4 	.word	0x08001bc4
 80013b8:	20000000 	.word	0x20000000

080013bc <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80013bc:	4b04      	ldr	r3, [pc, #16]	; (80013d0 <HAL_RCC_GetPCLK2Freq+0x14>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80013c4:	4a03      	ldr	r2, [pc, #12]	; (80013d4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80013c6:	5cd3      	ldrb	r3, [r2, r3]
 80013c8:	4a03      	ldr	r2, [pc, #12]	; (80013d8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80013ca:	6810      	ldr	r0, [r2, #0]
}
 80013cc:	40d8      	lsrs	r0, r3
 80013ce:	4770      	bx	lr
 80013d0:	40021000 	.word	0x40021000
 80013d4:	08001bc4 	.word	0x08001bc4
 80013d8:	20000000 	.word	0x20000000

080013dc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80013dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013e0:	b082      	sub	sp, #8
 80013e2:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80013e4:	6803      	ldr	r3, [r0, #0]
 80013e6:	f013 0f01 	tst.w	r3, #1
 80013ea:	d034      	beq.n	8001456 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013ec:	4b40      	ldr	r3, [pc, #256]	; (80014f0 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80013ee:	69db      	ldr	r3, [r3, #28]
 80013f0:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80013f4:	d149      	bne.n	800148a <HAL_RCCEx_PeriphCLKConfig+0xae>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013f6:	4b3e      	ldr	r3, [pc, #248]	; (80014f0 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80013f8:	69da      	ldr	r2, [r3, #28]
 80013fa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80013fe:	61da      	str	r2, [r3, #28]
 8001400:	69db      	ldr	r3, [r3, #28]
 8001402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001406:	9301      	str	r3, [sp, #4]
 8001408:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800140a:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800140c:	4b39      	ldr	r3, [pc, #228]	; (80014f4 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001414:	d03b      	beq.n	800148e <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001416:	4b36      	ldr	r3, [pc, #216]	; (80014f0 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8001418:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800141a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800141e:	d011      	beq.n	8001444 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8001420:	6862      	ldr	r2, [r4, #4]
 8001422:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001426:	429a      	cmp	r2, r3
 8001428:	d00c      	beq.n	8001444 <HAL_RCCEx_PeriphCLKConfig+0x68>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800142a:	4a31      	ldr	r2, [pc, #196]	; (80014f0 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 800142c:	6a13      	ldr	r3, [r2, #32]
 800142e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001432:	4931      	ldr	r1, [pc, #196]	; (80014f8 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8001434:	2601      	movs	r6, #1
 8001436:	600e      	str	r6, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001438:	2600      	movs	r6, #0
 800143a:	600e      	str	r6, [r1, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800143c:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800143e:	f013 0f01 	tst.w	r3, #1
 8001442:	d138      	bne.n	80014b6 <HAL_RCCEx_PeriphCLKConfig+0xda>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001444:	4a2a      	ldr	r2, [pc, #168]	; (80014f0 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8001446:	6a13      	ldr	r3, [r2, #32]
 8001448:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800144c:	6861      	ldr	r1, [r4, #4]
 800144e:	430b      	orrs	r3, r1
 8001450:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001452:	2d00      	cmp	r5, #0
 8001454:	d144      	bne.n	80014e0 <HAL_RCCEx_PeriphCLKConfig+0x104>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001456:	6823      	ldr	r3, [r4, #0]
 8001458:	f013 0f02 	tst.w	r3, #2
 800145c:	d006      	beq.n	800146c <HAL_RCCEx_PeriphCLKConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800145e:	4a24      	ldr	r2, [pc, #144]	; (80014f0 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8001460:	6853      	ldr	r3, [r2, #4]
 8001462:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001466:	68a1      	ldr	r1, [r4, #8]
 8001468:	430b      	orrs	r3, r1
 800146a:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800146c:	6823      	ldr	r3, [r4, #0]
 800146e:	f013 0f10 	tst.w	r3, #16
 8001472:	d03a      	beq.n	80014ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001474:	4a1e      	ldr	r2, [pc, #120]	; (80014f0 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8001476:	6853      	ldr	r3, [r2, #4]
 8001478:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800147c:	68e1      	ldr	r1, [r4, #12]
 800147e:	430b      	orrs	r3, r1
 8001480:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001482:	2000      	movs	r0, #0
}
 8001484:	b002      	add	sp, #8
 8001486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 800148a:	2500      	movs	r5, #0
 800148c:	e7be      	b.n	800140c <HAL_RCCEx_PeriphCLKConfig+0x30>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800148e:	4a19      	ldr	r2, [pc, #100]	; (80014f4 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001490:	6813      	ldr	r3, [r2, #0]
 8001492:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001496:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001498:	f7ff fa8e 	bl	80009b8 <HAL_GetTick>
 800149c:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800149e:	4e15      	ldr	r6, [pc, #84]	; (80014f4 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80014a0:	6833      	ldr	r3, [r6, #0]
 80014a2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80014a6:	d1b6      	bne.n	8001416 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014a8:	f7ff fa86 	bl	80009b8 <HAL_GetTick>
 80014ac:	1bc0      	subs	r0, r0, r7
 80014ae:	2864      	cmp	r0, #100	; 0x64
 80014b0:	d9f6      	bls.n	80014a0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
          return HAL_TIMEOUT;
 80014b2:	2003      	movs	r0, #3
 80014b4:	e7e6      	b.n	8001484 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        tickstart = HAL_GetTick();
 80014b6:	f7ff fa7f 	bl	80009b8 <HAL_GetTick>
 80014ba:	4680      	mov	r8, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014bc:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80014c0:	f506 3604 	add.w	r6, r6, #135168	; 0x21000
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014c4:	f241 3788 	movw	r7, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014c8:	6a33      	ldr	r3, [r6, #32]
 80014ca:	f013 0f02 	tst.w	r3, #2
 80014ce:	d1b9      	bne.n	8001444 <HAL_RCCEx_PeriphCLKConfig+0x68>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014d0:	f7ff fa72 	bl	80009b8 <HAL_GetTick>
 80014d4:	eba0 0008 	sub.w	r0, r0, r8
 80014d8:	42b8      	cmp	r0, r7
 80014da:	d9f5      	bls.n	80014c8 <HAL_RCCEx_PeriphCLKConfig+0xec>
            return HAL_TIMEOUT;
 80014dc:	2003      	movs	r0, #3
 80014de:	e7d1      	b.n	8001484 <HAL_RCCEx_PeriphCLKConfig+0xa8>
      __HAL_RCC_PWR_CLK_DISABLE();
 80014e0:	69d3      	ldr	r3, [r2, #28]
 80014e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014e6:	61d3      	str	r3, [r2, #28]
 80014e8:	e7b5      	b.n	8001456 <HAL_RCCEx_PeriphCLKConfig+0x7a>
  return HAL_OK;
 80014ea:	2000      	movs	r0, #0
 80014ec:	e7ca      	b.n	8001484 <HAL_RCCEx_PeriphCLKConfig+0xa8>
 80014ee:	bf00      	nop
 80014f0:	40021000 	.word	0x40021000
 80014f4:	40007000 	.word	0x40007000
 80014f8:	42420440 	.word	0x42420440

080014fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80014fc:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80014fe:	6a03      	ldr	r3, [r0, #32]
 8001500:	f023 0301 	bic.w	r3, r3, #1
 8001504:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001506:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001508:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800150a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800150c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001510:	680d      	ldr	r5, [r1, #0]
 8001512:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001514:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001518:	688d      	ldr	r5, [r1, #8]
 800151a:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800151c:	4d0b      	ldr	r5, [pc, #44]	; (800154c <TIM_OC1_SetConfig+0x50>)
 800151e:	42a8      	cmp	r0, r5
 8001520:	d006      	beq.n	8001530 <TIM_OC1_SetConfig+0x34>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001522:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001524:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001526:	684a      	ldr	r2, [r1, #4]
 8001528:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800152a:	6203      	str	r3, [r0, #32]
}
 800152c:	bc70      	pop	{r4, r5, r6}
 800152e:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8001530:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001534:	68cd      	ldr	r5, [r1, #12]
 8001536:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8001538:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800153c:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8001540:	694d      	ldr	r5, [r1, #20]
 8001542:	698e      	ldr	r6, [r1, #24]
 8001544:	4335      	orrs	r5, r6
 8001546:	432c      	orrs	r4, r5
 8001548:	e7eb      	b.n	8001522 <TIM_OC1_SetConfig+0x26>
 800154a:	bf00      	nop
 800154c:	40012c00 	.word	0x40012c00

08001550 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001550:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001552:	6a03      	ldr	r3, [r0, #32]
 8001554:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001558:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800155a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800155c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800155e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001560:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001564:	680d      	ldr	r5, [r1, #0]
 8001566:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001568:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800156c:	688d      	ldr	r5, [r1, #8]
 800156e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001572:	4d0c      	ldr	r5, [pc, #48]	; (80015a4 <TIM_OC3_SetConfig+0x54>)
 8001574:	42a8      	cmp	r0, r5
 8001576:	d006      	beq.n	8001586 <TIM_OC3_SetConfig+0x36>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001578:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800157a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800157c:	684a      	ldr	r2, [r1, #4]
 800157e:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001580:	6203      	str	r3, [r0, #32]
}
 8001582:	bc70      	pop	{r4, r5, r6}
 8001584:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8001586:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800158a:	68cd      	ldr	r5, [r1, #12]
 800158c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8001590:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001594:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001598:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800159a:	698e      	ldr	r6, [r1, #24]
 800159c:	4335      	orrs	r5, r6
 800159e:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 80015a2:	e7e9      	b.n	8001578 <TIM_OC3_SetConfig+0x28>
 80015a4:	40012c00 	.word	0x40012c00

080015a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80015a8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80015aa:	6a03      	ldr	r3, [r0, #32]
 80015ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80015b0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80015b2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80015b4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80015b6:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80015b8:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80015bc:	680d      	ldr	r5, [r1, #0]
 80015be:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80015c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80015c6:	688d      	ldr	r5, [r1, #8]
 80015c8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80015cc:	4d07      	ldr	r5, [pc, #28]	; (80015ec <TIM_OC4_SetConfig+0x44>)
 80015ce:	42a8      	cmp	r0, r5
 80015d0:	d006      	beq.n	80015e0 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80015d2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80015d4:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80015d6:	684a      	ldr	r2, [r1, #4]
 80015d8:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80015da:	6203      	str	r3, [r0, #32]
}
 80015dc:	bc30      	pop	{r4, r5}
 80015de:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 80015e0:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80015e4:	694d      	ldr	r5, [r1, #20]
 80015e6:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80015ea:	e7f2      	b.n	80015d2 <TIM_OC4_SetConfig+0x2a>
 80015ec:	40012c00 	.word	0x40012c00

080015f0 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80015f0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80015f2:	4a20      	ldr	r2, [pc, #128]	; (8001674 <TIM_Base_SetConfig+0x84>)
 80015f4:	4290      	cmp	r0, r2
 80015f6:	d014      	beq.n	8001622 <TIM_Base_SetConfig+0x32>
 80015f8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80015fc:	d02a      	beq.n	8001654 <TIM_Base_SetConfig+0x64>
 80015fe:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001602:	4290      	cmp	r0, r2
 8001604:	d02b      	beq.n	800165e <TIM_Base_SetConfig+0x6e>
 8001606:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800160a:	4290      	cmp	r0, r2
 800160c:	d02c      	beq.n	8001668 <TIM_Base_SetConfig+0x78>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800160e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001612:	694a      	ldr	r2, [r1, #20]
 8001614:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001616:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001618:	688b      	ldr	r3, [r1, #8]
 800161a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800161c:	680b      	ldr	r3, [r1, #0]
 800161e:	6283      	str	r3, [r0, #40]	; 0x28
 8001620:	e015      	b.n	800164e <TIM_Base_SetConfig+0x5e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001626:	684a      	ldr	r2, [r1, #4]
 8001628:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 800162a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800162e:	68ca      	ldr	r2, [r1, #12]
 8001630:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001632:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001636:	694a      	ldr	r2, [r1, #20]
 8001638:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800163a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800163c:	688b      	ldr	r3, [r1, #8]
 800163e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001640:	680b      	ldr	r3, [r1, #0]
 8001642:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001644:	4b0b      	ldr	r3, [pc, #44]	; (8001674 <TIM_Base_SetConfig+0x84>)
 8001646:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8001648:	bf04      	itt	eq
 800164a:	690a      	ldreq	r2, [r1, #16]
 800164c:	631a      	streq	r2, [r3, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800164e:	2301      	movs	r3, #1
 8001650:	6143      	str	r3, [r0, #20]
}
 8001652:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001654:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001658:	684a      	ldr	r2, [r1, #4]
 800165a:	4313      	orrs	r3, r2
 800165c:	e7e5      	b.n	800162a <TIM_Base_SetConfig+0x3a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800165e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001662:	684a      	ldr	r2, [r1, #4]
 8001664:	4313      	orrs	r3, r2
 8001666:	e7e0      	b.n	800162a <TIM_Base_SetConfig+0x3a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001668:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800166c:	684a      	ldr	r2, [r1, #4]
 800166e:	4313      	orrs	r3, r2
 8001670:	e7db      	b.n	800162a <TIM_Base_SetConfig+0x3a>
 8001672:	bf00      	nop
 8001674:	40012c00 	.word	0x40012c00

08001678 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8001678:	b338      	cbz	r0, 80016ca <HAL_TIM_PWM_Init+0x52>
{
 800167a:	b510      	push	{r4, lr}
 800167c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800167e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001682:	b1eb      	cbz	r3, 80016c0 <HAL_TIM_PWM_Init+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 8001684:	2302      	movs	r3, #2
 8001686:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800168a:	1d21      	adds	r1, r4, #4
 800168c:	6820      	ldr	r0, [r4, #0]
 800168e:	f7ff ffaf 	bl	80015f0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001692:	2301      	movs	r3, #1
 8001694:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001698:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800169c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80016a0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80016a4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80016ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80016b0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80016b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80016b8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80016bc:	2000      	movs	r0, #0
}
 80016be:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80016c0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80016c4:	f7fe ff32 	bl	800052c <HAL_TIM_PWM_MspInit>
 80016c8:	e7dc      	b.n	8001684 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 80016ca:	2001      	movs	r0, #1
}
 80016cc:	4770      	bx	lr

080016ce <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 80016ce:	2800      	cmp	r0, #0
 80016d0:	d053      	beq.n	800177a <HAL_TIM_Encoder_Init+0xac>
{
 80016d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016d4:	4604      	mov	r4, r0
 80016d6:	460d      	mov	r5, r1
  if (htim->State == HAL_TIM_STATE_RESET)
 80016d8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d047      	beq.n	8001770 <HAL_TIM_Encoder_Init+0xa2>
  htim->State = HAL_TIM_STATE_BUSY;
 80016e0:	2302      	movs	r3, #2
 80016e2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80016e6:	4621      	mov	r1, r4
 80016e8:	f851 2b04 	ldr.w	r2, [r1], #4
 80016ec:	6893      	ldr	r3, [r2, #8]
 80016ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80016f2:	f023 0307 	bic.w	r3, r3, #7
 80016f6:	6093      	str	r3, [r2, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016f8:	6820      	ldr	r0, [r4, #0]
 80016fa:	f7ff ff79 	bl	80015f0 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 80016fe:	6820      	ldr	r0, [r4, #0]
 8001700:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8001702:	6982      	ldr	r2, [r0, #24]
  tmpccer = htim->Instance->CCER;
 8001704:	6a07      	ldr	r7, [r0, #32]
  tmpsmcr |= sConfig->EncoderMode;
 8001706:	682b      	ldr	r3, [r5, #0]
 8001708:	431e      	orrs	r6, r3
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800170a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800170e:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001712:	69ab      	ldr	r3, [r5, #24]
 8001714:	68a9      	ldr	r1, [r5, #8]
 8001716:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 800171a:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800171c:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
 8001720:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001724:	69e9      	ldr	r1, [r5, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001726:	692b      	ldr	r3, [r5, #16]
 8001728:	011b      	lsls	r3, r3, #4
 800172a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800172e:	68e9      	ldr	r1, [r5, #12]
 8001730:	430b      	orrs	r3, r1
 8001732:	6a29      	ldr	r1, [r5, #32]
 8001734:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8001738:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800173a:	f027 0722 	bic.w	r7, r7, #34	; 0x22
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800173e:	6969      	ldr	r1, [r5, #20]
 8001740:	686a      	ldr	r2, [r5, #4]
 8001742:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 8001746:	4317      	orrs	r7, r2
  htim->Instance->SMCR = tmpsmcr;
 8001748:	6086      	str	r6, [r0, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 800174a:	6822      	ldr	r2, [r4, #0]
 800174c:	6193      	str	r3, [r2, #24]
  htim->Instance->CCER = tmpccer;
 800174e:	6823      	ldr	r3, [r4, #0]
 8001750:	621f      	str	r7, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001752:	2301      	movs	r3, #1
 8001754:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001758:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800175c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001760:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001764:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  htim->State = HAL_TIM_STATE_READY;
 8001768:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800176c:	2000      	movs	r0, #0
}
 800176e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 8001770:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8001774:	f7fe fe6a 	bl	800044c <HAL_TIM_Encoder_MspInit>
 8001778:	e7b2      	b.n	80016e0 <HAL_TIM_Encoder_Init+0x12>
    return HAL_ERROR;
 800177a:	2001      	movs	r0, #1
}
 800177c:	4770      	bx	lr
	...

08001780 <TIM_OC2_SetConfig>:
{
 8001780:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001782:	6a03      	ldr	r3, [r0, #32]
 8001784:	f023 0310 	bic.w	r3, r3, #16
 8001788:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800178a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800178c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800178e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001790:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001794:	680d      	ldr	r5, [r1, #0]
 8001796:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800179a:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800179e:	688d      	ldr	r5, [r1, #8]
 80017a0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80017a4:	4d0c      	ldr	r5, [pc, #48]	; (80017d8 <TIM_OC2_SetConfig+0x58>)
 80017a6:	42a8      	cmp	r0, r5
 80017a8:	d006      	beq.n	80017b8 <TIM_OC2_SetConfig+0x38>
  TIMx->CR2 = tmpcr2;
 80017aa:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80017ac:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80017ae:	684a      	ldr	r2, [r1, #4]
 80017b0:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80017b2:	6203      	str	r3, [r0, #32]
}
 80017b4:	bc70      	pop	{r4, r5, r6}
 80017b6:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 80017b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80017bc:	68cd      	ldr	r5, [r1, #12]
 80017be:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80017c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80017c6:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80017ca:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80017cc:	698e      	ldr	r6, [r1, #24]
 80017ce:	4335      	orrs	r5, r6
 80017d0:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 80017d4:	e7e9      	b.n	80017aa <TIM_OC2_SetConfig+0x2a>
 80017d6:	bf00      	nop
 80017d8:	40012c00 	.word	0x40012c00

080017dc <HAL_TIM_PWM_ConfigChannel>:
{
 80017dc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80017de:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d060      	beq.n	80018a8 <HAL_TIM_PWM_ConfigChannel+0xcc>
 80017e6:	460d      	mov	r5, r1
 80017e8:	4604      	mov	r4, r0
 80017ea:	2301      	movs	r3, #1
 80017ec:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 80017f0:	2a0c      	cmp	r2, #12
 80017f2:	d81a      	bhi.n	800182a <HAL_TIM_PWM_ConfigChannel+0x4e>
 80017f4:	e8df f002 	tbb	[pc, r2]
 80017f8:	19191907 	.word	0x19191907
 80017fc:	1919191d 	.word	0x1919191d
 8001800:	19191931 	.word	0x19191931
 8001804:	44          	.byte	0x44
 8001805:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001806:	6800      	ldr	r0, [r0, #0]
 8001808:	f7ff fe78 	bl	80014fc <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800180c:	6822      	ldr	r2, [r4, #0]
 800180e:	6993      	ldr	r3, [r2, #24]
 8001810:	f043 0308 	orr.w	r3, r3, #8
 8001814:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001816:	6822      	ldr	r2, [r4, #0]
 8001818:	6993      	ldr	r3, [r2, #24]
 800181a:	f023 0304 	bic.w	r3, r3, #4
 800181e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001820:	6822      	ldr	r2, [r4, #0]
 8001822:	6993      	ldr	r3, [r2, #24]
 8001824:	6929      	ldr	r1, [r5, #16]
 8001826:	430b      	orrs	r3, r1
 8001828:	6193      	str	r3, [r2, #24]
  __HAL_UNLOCK(htim);
 800182a:	2000      	movs	r0, #0
 800182c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001830:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001832:	6800      	ldr	r0, [r0, #0]
 8001834:	f7ff ffa4 	bl	8001780 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001838:	6822      	ldr	r2, [r4, #0]
 800183a:	6993      	ldr	r3, [r2, #24]
 800183c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001840:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001842:	6822      	ldr	r2, [r4, #0]
 8001844:	6993      	ldr	r3, [r2, #24]
 8001846:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800184a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800184c:	6822      	ldr	r2, [r4, #0]
 800184e:	6993      	ldr	r3, [r2, #24]
 8001850:	6929      	ldr	r1, [r5, #16]
 8001852:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001856:	6193      	str	r3, [r2, #24]
      break;
 8001858:	e7e7      	b.n	800182a <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800185a:	6800      	ldr	r0, [r0, #0]
 800185c:	f7ff fe78 	bl	8001550 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001860:	6822      	ldr	r2, [r4, #0]
 8001862:	69d3      	ldr	r3, [r2, #28]
 8001864:	f043 0308 	orr.w	r3, r3, #8
 8001868:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800186a:	6822      	ldr	r2, [r4, #0]
 800186c:	69d3      	ldr	r3, [r2, #28]
 800186e:	f023 0304 	bic.w	r3, r3, #4
 8001872:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001874:	6822      	ldr	r2, [r4, #0]
 8001876:	69d3      	ldr	r3, [r2, #28]
 8001878:	6929      	ldr	r1, [r5, #16]
 800187a:	430b      	orrs	r3, r1
 800187c:	61d3      	str	r3, [r2, #28]
      break;
 800187e:	e7d4      	b.n	800182a <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001880:	6800      	ldr	r0, [r0, #0]
 8001882:	f7ff fe91 	bl	80015a8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001886:	6822      	ldr	r2, [r4, #0]
 8001888:	69d3      	ldr	r3, [r2, #28]
 800188a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800188e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001890:	6822      	ldr	r2, [r4, #0]
 8001892:	69d3      	ldr	r3, [r2, #28]
 8001894:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001898:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800189a:	6822      	ldr	r2, [r4, #0]
 800189c:	69d3      	ldr	r3, [r2, #28]
 800189e:	6929      	ldr	r1, [r5, #16]
 80018a0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80018a4:	61d3      	str	r3, [r2, #28]
      break;
 80018a6:	e7c0      	b.n	800182a <HAL_TIM_PWM_ConfigChannel+0x4e>
  __HAL_LOCK(htim);
 80018a8:	2002      	movs	r0, #2
 80018aa:	e7c1      	b.n	8001830 <HAL_TIM_PWM_ConfigChannel+0x54>

080018ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80018ac:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80018ae:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80018b2:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80018b4:	2401      	movs	r4, #1
 80018b6:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80018b8:	ea23 0304 	bic.w	r3, r3, r4
 80018bc:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80018be:	6a03      	ldr	r3, [r0, #32]
 80018c0:	408a      	lsls	r2, r1
 80018c2:	431a      	orrs	r2, r3
 80018c4:	6202      	str	r2, [r0, #32]
}
 80018c6:	bc10      	pop	{r4}
 80018c8:	4770      	bx	lr
	...

080018cc <HAL_TIM_PWM_Start>:
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80018cc:	460b      	mov	r3, r1
 80018ce:	bb11      	cbnz	r1, 8001916 <HAL_TIM_PWM_Start+0x4a>
 80018d0:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 80018d4:	b2d2      	uxtb	r2, r2
 80018d6:	2a01      	cmp	r2, #1
 80018d8:	d14e      	bne.n	8001978 <HAL_TIM_PWM_Start+0xac>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80018da:	2202      	movs	r2, #2
 80018dc:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
{
 80018e0:	b510      	push	{r4, lr}
 80018e2:	4619      	mov	r1, r3
 80018e4:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80018e6:	2201      	movs	r2, #1
 80018e8:	6800      	ldr	r0, [r0, #0]
 80018ea:	f7ff ffdf 	bl	80018ac <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80018ee:	6823      	ldr	r3, [r4, #0]
 80018f0:	4a26      	ldr	r2, [pc, #152]	; (800198c <HAL_TIM_PWM_Start+0xc0>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d02e      	beq.n	8001954 <HAL_TIM_PWM_Start+0x88>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80018f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018fa:	d032      	beq.n	8001962 <HAL_TIM_PWM_Start+0x96>
 80018fc:	4a24      	ldr	r2, [pc, #144]	; (8001990 <HAL_TIM_PWM_Start+0xc4>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d02f      	beq.n	8001962 <HAL_TIM_PWM_Start+0x96>
 8001902:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001906:	4293      	cmp	r3, r2
 8001908:	d02b      	beq.n	8001962 <HAL_TIM_PWM_Start+0x96>
    __HAL_TIM_ENABLE(htim);
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	f042 0201 	orr.w	r2, r2, #1
 8001910:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001912:	2000      	movs	r0, #0
 8001914:	e02f      	b.n	8001976 <HAL_TIM_PWM_Start+0xaa>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001916:	2904      	cmp	r1, #4
 8001918:	d00a      	beq.n	8001930 <HAL_TIM_PWM_Start+0x64>
 800191a:	2908      	cmp	r1, #8
 800191c:	d011      	beq.n	8001942 <HAL_TIM_PWM_Start+0x76>
 800191e:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8001922:	b2d2      	uxtb	r2, r2
 8001924:	2a01      	cmp	r2, #1
 8001926:	d12d      	bne.n	8001984 <HAL_TIM_PWM_Start+0xb8>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001928:	2202      	movs	r2, #2
 800192a:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
 800192e:	e7d7      	b.n	80018e0 <HAL_TIM_PWM_Start+0x14>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001930:	f890 203f 	ldrb.w	r2, [r0, #63]	; 0x3f
 8001934:	b2d2      	uxtb	r2, r2
 8001936:	2a01      	cmp	r2, #1
 8001938:	d120      	bne.n	800197c <HAL_TIM_PWM_Start+0xb0>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800193a:	2202      	movs	r2, #2
 800193c:	f880 203f 	strb.w	r2, [r0, #63]	; 0x3f
 8001940:	e7ce      	b.n	80018e0 <HAL_TIM_PWM_Start+0x14>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001942:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8001946:	b2d2      	uxtb	r2, r2
 8001948:	2a01      	cmp	r2, #1
 800194a:	d119      	bne.n	8001980 <HAL_TIM_PWM_Start+0xb4>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800194c:	2202      	movs	r2, #2
 800194e:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
 8001952:	e7c5      	b.n	80018e0 <HAL_TIM_PWM_Start+0x14>
    __HAL_TIM_MOE_ENABLE(htim);
 8001954:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8001956:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800195a:	6453      	str	r3, [r2, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800195c:	6823      	ldr	r3, [r4, #0]
 800195e:	4293      	cmp	r3, r2
 8001960:	d1c9      	bne.n	80018f6 <HAL_TIM_PWM_Start+0x2a>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001962:	689a      	ldr	r2, [r3, #8]
 8001964:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001968:	2a06      	cmp	r2, #6
 800196a:	d00d      	beq.n	8001988 <HAL_TIM_PWM_Start+0xbc>
      __HAL_TIM_ENABLE(htim);
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	f042 0201 	orr.w	r2, r2, #1
 8001972:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001974:	2000      	movs	r0, #0
}
 8001976:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001978:	2001      	movs	r0, #1
 800197a:	4770      	bx	lr
 800197c:	2001      	movs	r0, #1
 800197e:	4770      	bx	lr
 8001980:	2001      	movs	r0, #1
 8001982:	4770      	bx	lr
 8001984:	2001      	movs	r0, #1
}
 8001986:	4770      	bx	lr
  return HAL_OK;
 8001988:	2000      	movs	r0, #0
 800198a:	e7f4      	b.n	8001976 <HAL_TIM_PWM_Start+0xaa>
 800198c:	40012c00 	.word	0x40012c00
 8001990:	40000400 	.word	0x40000400

08001994 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001994:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001998:	2b01      	cmp	r3, #1
 800199a:	d02b      	beq.n	80019f4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
{
 800199c:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 800199e:	2301      	movs	r3, #1
 80019a0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019a4:	2302      	movs	r3, #2
 80019a6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80019aa:	6804      	ldr	r4, [r0, #0]
 80019ac:	6863      	ldr	r3, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80019ae:	68a2      	ldr	r2, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80019b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80019b4:	680d      	ldr	r5, [r1, #0]
 80019b6:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80019b8:	6063      	str	r3, [r4, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019ba:	6803      	ldr	r3, [r0, #0]
 80019bc:	4c0e      	ldr	r4, [pc, #56]	; (80019f8 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 80019be:	42a3      	cmp	r3, r4
 80019c0:	d00a      	beq.n	80019d8 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80019c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019c6:	d007      	beq.n	80019d8 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80019c8:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 80019cc:	42a3      	cmp	r3, r4
 80019ce:	d003      	beq.n	80019d8 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80019d0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80019d4:	42a3      	cmp	r3, r4
 80019d6:	d104      	bne.n	80019e2 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80019d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80019dc:	6849      	ldr	r1, [r1, #4]
 80019de:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80019e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80019e2:	2301      	movs	r3, #1
 80019e4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80019e8:	2300      	movs	r3, #0
 80019ea:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80019ee:	4618      	mov	r0, r3
}
 80019f0:	bc30      	pop	{r4, r5}
 80019f2:	4770      	bx	lr
  __HAL_LOCK(htim);
 80019f4:	2002      	movs	r0, #2
}
 80019f6:	4770      	bx	lr
 80019f8:	40012c00 	.word	0x40012c00

080019fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80019fc:	b510      	push	{r4, lr}
 80019fe:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a00:	6802      	ldr	r2, [r0, #0]
 8001a02:	6913      	ldr	r3, [r2, #16]
 8001a04:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a08:	68c1      	ldr	r1, [r0, #12]
 8001a0a:	430b      	orrs	r3, r1
 8001a0c:	6113      	str	r3, [r2, #16]
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
  MODIFY_REG(huart->Instance->CR1,
 8001a0e:	6801      	ldr	r1, [r0, #0]
 8001a10:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001a12:	6883      	ldr	r3, [r0, #8]
 8001a14:	6900      	ldr	r0, [r0, #16]
 8001a16:	4303      	orrs	r3, r0
 8001a18:	6960      	ldr	r0, [r4, #20]
 8001a1a:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8001a1c:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8001a20:	f022 020c 	bic.w	r2, r2, #12
 8001a24:	4313      	orrs	r3, r2
 8001a26:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001a28:	6822      	ldr	r2, [r4, #0]
 8001a2a:	6953      	ldr	r3, [r2, #20]
 8001a2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a30:	69a1      	ldr	r1, [r4, #24]
 8001a32:	430b      	orrs	r3, r1
 8001a34:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 8001a36:	6822      	ldr	r2, [r4, #0]
 8001a38:	4b10      	ldr	r3, [pc, #64]	; (8001a7c <UART_SetConfig+0x80>)
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d01b      	beq.n	8001a76 <UART_SetConfig+0x7a>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001a3e:	f7ff fcad 	bl	800139c <HAL_RCC_GetPCLK1Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001a42:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001a46:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001a4a:	6863      	ldr	r3, [r4, #4]
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001a52:	6824      	ldr	r4, [r4, #0]
 8001a54:	490a      	ldr	r1, [pc, #40]	; (8001a80 <UART_SetConfig+0x84>)
 8001a56:	fba1 3200 	umull	r3, r2, r1, r0
 8001a5a:	0952      	lsrs	r2, r2, #5
 8001a5c:	2364      	movs	r3, #100	; 0x64
 8001a5e:	fb03 0312 	mls	r3, r3, r2, r0
 8001a62:	011b      	lsls	r3, r3, #4
 8001a64:	3332      	adds	r3, #50	; 0x32
 8001a66:	fba1 1303 	umull	r1, r3, r1, r3
 8001a6a:	f3c3 1347 	ubfx	r3, r3, #5, #8
 8001a6e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8001a72:	60a3      	str	r3, [r4, #8]
#endif /* USART_CR1_OVER8 */
}
 8001a74:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8001a76:	f7ff fca1 	bl	80013bc <HAL_RCC_GetPCLK2Freq>
 8001a7a:	e7e2      	b.n	8001a42 <UART_SetConfig+0x46>
 8001a7c:	40013800 	.word	0x40013800
 8001a80:	51eb851f 	.word	0x51eb851f

08001a84 <HAL_UART_Init>:
  if (huart == NULL)
 8001a84:	b358      	cbz	r0, 8001ade <HAL_UART_Init+0x5a>
{
 8001a86:	b510      	push	{r4, lr}
 8001a88:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8001a8a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001a8e:	b30b      	cbz	r3, 8001ad4 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8001a90:	2324      	movs	r3, #36	; 0x24
 8001a92:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001a96:	6822      	ldr	r2, [r4, #0]
 8001a98:	68d3      	ldr	r3, [r2, #12]
 8001a9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001a9e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001aa0:	4620      	mov	r0, r4
 8001aa2:	f7ff ffab 	bl	80019fc <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001aa6:	6822      	ldr	r2, [r4, #0]
 8001aa8:	6913      	ldr	r3, [r2, #16]
 8001aaa:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001aae:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ab0:	6822      	ldr	r2, [r4, #0]
 8001ab2:	6953      	ldr	r3, [r2, #20]
 8001ab4:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001ab8:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8001aba:	6822      	ldr	r2, [r4, #0]
 8001abc:	68d3      	ldr	r3, [r2, #12]
 8001abe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ac2:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ac4:	2000      	movs	r0, #0
 8001ac6:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001ac8:	2320      	movs	r3, #32
 8001aca:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001ace:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8001ad2:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001ad4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001ad8:	f7fe fe6a 	bl	80007b0 <HAL_UART_MspInit>
 8001adc:	e7d8      	b.n	8001a90 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8001ade:	2001      	movs	r0, #1
}
 8001ae0:	4770      	bx	lr

08001ae2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	a801      	add	r0, sp, #4
 8001ae6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8001aea:	2000      	movs	r0, #0
 8001aec:	b004      	add	sp, #16
 8001aee:	4770      	bx	lr

08001af0 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8001af0:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8001af4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001af8:	045b      	lsls	r3, r3, #17
 8001afa:	0c5b      	lsrs	r3, r3, #17
 8001afc:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8001b00:	2000      	movs	r0, #0
 8001b02:	4770      	bx	lr

08001b04 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001b04:	2000      	movs	r0, #0
 8001b06:	4770      	bx	lr

08001b08 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001b08:	b084      	sub	sp, #16
 8001b0a:	b410      	push	{r4}
 8001b0c:	ac02      	add	r4, sp, #8
 8001b0e:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8001b12:	2301      	movs	r3, #1
 8001b14:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8001b1e:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8001b22:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50

  return HAL_OK;
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	bc10      	pop	{r4}
 8001b2a:	b004      	add	sp, #16
 8001b2c:	4770      	bx	lr

08001b2e <USB_DevDisconnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8001b2e:	2000      	movs	r0, #0
 8001b30:	4770      	bx	lr
	...

08001b34 <__libc_init_array>:
 8001b34:	b570      	push	{r4, r5, r6, lr}
 8001b36:	2500      	movs	r5, #0
 8001b38:	4e0c      	ldr	r6, [pc, #48]	; (8001b6c <__libc_init_array+0x38>)
 8001b3a:	4c0d      	ldr	r4, [pc, #52]	; (8001b70 <__libc_init_array+0x3c>)
 8001b3c:	1ba4      	subs	r4, r4, r6
 8001b3e:	10a4      	asrs	r4, r4, #2
 8001b40:	42a5      	cmp	r5, r4
 8001b42:	d109      	bne.n	8001b58 <__libc_init_array+0x24>
 8001b44:	f000 f822 	bl	8001b8c <_init>
 8001b48:	2500      	movs	r5, #0
 8001b4a:	4e0a      	ldr	r6, [pc, #40]	; (8001b74 <__libc_init_array+0x40>)
 8001b4c:	4c0a      	ldr	r4, [pc, #40]	; (8001b78 <__libc_init_array+0x44>)
 8001b4e:	1ba4      	subs	r4, r4, r6
 8001b50:	10a4      	asrs	r4, r4, #2
 8001b52:	42a5      	cmp	r5, r4
 8001b54:	d105      	bne.n	8001b62 <__libc_init_array+0x2e>
 8001b56:	bd70      	pop	{r4, r5, r6, pc}
 8001b58:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001b5c:	4798      	blx	r3
 8001b5e:	3501      	adds	r5, #1
 8001b60:	e7ee      	b.n	8001b40 <__libc_init_array+0xc>
 8001b62:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001b66:	4798      	blx	r3
 8001b68:	3501      	adds	r5, #1
 8001b6a:	e7f2      	b.n	8001b52 <__libc_init_array+0x1e>
 8001b6c:	08001bcc 	.word	0x08001bcc
 8001b70:	08001bcc 	.word	0x08001bcc
 8001b74:	08001bcc 	.word	0x08001bcc
 8001b78:	08001bd0 	.word	0x08001bd0

08001b7c <memset>:
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	4402      	add	r2, r0
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d100      	bne.n	8001b86 <memset+0xa>
 8001b84:	4770      	bx	lr
 8001b86:	f803 1b01 	strb.w	r1, [r3], #1
 8001b8a:	e7f9      	b.n	8001b80 <memset+0x4>

08001b8c <_init>:
 8001b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b8e:	bf00      	nop
 8001b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b92:	bc08      	pop	{r3}
 8001b94:	469e      	mov	lr, r3
 8001b96:	4770      	bx	lr

08001b98 <_fini>:
 8001b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b9a:	bf00      	nop
 8001b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b9e:	bc08      	pop	{r3}
 8001ba0:	469e      	mov	lr, r3
 8001ba2:	4770      	bx	lr
