
tanwa.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c00  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08001d0c  08001d0c  00011d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d38  08001d38  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08001d38  08001d38  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001d38  08001d38  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d38  08001d38  00011d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001d3c  08001d3c  00011d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08001d40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000043c  20000070  08001db0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ac  08001db0  000204ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001391d  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cb1  00000000  00000000  000339b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000d191  00000000  00000000  00036667  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d88  00000000  00000000  000437f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010d0  00000000  00000000  00044580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002771  00000000  00000000  00045650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014f62  00000000  00000000  00047dc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ca79  00000000  00000000  0005cd23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000e979c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002470  00000000  00000000  000e97f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08001cf4 	.word	0x08001cf4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08001cf4 	.word	0x08001cf4

0800014c <igniter_init>:
	//fill whole struct
	I->GPIO_PORT_IGNITER = _GPIO_PORT_IGNITER;
	I->PIN_IGNITER = _PIN_IGNITER;
	I->GPIO_PORT_TEST_CON = _GPIO_PORT_TEST_CON;
	I->PIN_TEST_CON = _PIN_TEST_CON;
}
 800014c:	4770      	bx	lr

0800014e <igniter_is_connected>:

bool igniter_is_connected(Igniter* Igniter){
 800014e:	b508      	push	{r3, lr}
	if(HAL_GPIO_ReadPin(Igniter->GPIO_PORT_TEST_CON, Igniter->PIN_TEST_CON) == 1)
 8000150:	8981      	ldrh	r1, [r0, #12]
 8000152:	6880      	ldr	r0, [r0, #8]
 8000154:	f000 fe08 	bl	8000d68 <HAL_GPIO_ReadPin>
		return 1;
	else
		return 0;
}
 8000158:	2801      	cmp	r0, #1
 800015a:	bf14      	ite	ne
 800015c:	2000      	movne	r0, #0
 800015e:	2001      	moveq	r0, #1
 8000160:	bd08      	pop	{r3, pc}

08000162 <motor_init>:

//make struct 'Motor', fill it, return pointer to it    (names of args start with '_' sign)
Motor* motor_init(GPIO_TypeDef* _GPIO_PORT_IN1, uint16_t _PIN_IN1, GPIO_TypeDef* _GPIO_PORT_IN2, uint16_t _PIN_IN2,
		TIM_HandleTypeDef* _TIM_NR_EN, uint16_t _TIM_CHANNEL_EN, GPIO_TypeDef* _GPIO_PORT_LS_OPEN, uint16_t _PIN_LS_OPEN,
		GPIO_TypeDef* _GPIO_PORT_LS_CLOSE, uint16_t _PIN_LS_CLOSE)
{
 8000162:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000166:	4680      	mov	r8, r0
 8000168:	460f      	mov	r7, r1
 800016a:	4616      	mov	r6, r2
 800016c:	461d      	mov	r5, r3
	Motor* M = malloc(sizeof(Motor));	 //allocate space for struct
 800016e:	2028      	movs	r0, #40	; 0x28
 8000170:	f001 fd32 	bl	8001bd8 <malloc>
//fill whole struct
	M->GPIO_PORT_IN1 = _GPIO_PORT_IN1;
 8000174:	f8c0 8000 	str.w	r8, [r0]
	M->PIN_IN1 = _PIN_IN1;
 8000178:	8087      	strh	r7, [r0, #4]
	M->GPIO_PORT_IN2 = _GPIO_PORT_IN2;
 800017a:	6086      	str	r6, [r0, #8]
	M->PIN_IN2 = _PIN_IN2;
 800017c:	8185      	strh	r5, [r0, #12]
	M->TIM_NR_EN = _TIM_NR_EN;
 800017e:	9b06      	ldr	r3, [sp, #24]
 8000180:	6103      	str	r3, [r0, #16]
	M->TIM_CHANNEL_EN = _TIM_CHANNEL_EN;
 8000182:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8000186:	8283      	strh	r3, [r0, #20]
	M->GPIO_PORT_LS_OPEN = _GPIO_PORT_LS_OPEN;
 8000188:	9b08      	ldr	r3, [sp, #32]
 800018a:	6183      	str	r3, [r0, #24]
	M->PIN_LS_OPEN = _PIN_LS_OPEN;
 800018c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8000190:	8383      	strh	r3, [r0, #28]
	M->GPIO_PORT_LS_CLOSE = _GPIO_PORT_LS_CLOSE;
 8000192:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000194:	6203      	str	r3, [r0, #32]
	M->PIN_LS_CLOSE = _PIN_LS_CLOSE;
 8000196:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800019a:	8483      	strh	r3, [r0, #36]	; 0x24
	M->State_of_limit_switch_open = 0;
 800019c:	2300      	movs	r3, #0
 800019e:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
	M->State_of_limit_switch_close = 0;
 80001a2:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
	return M;
};
 80001a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080001aa <motor_stop>:

void motor_stop(Motor *Mot){
 80001aa:	b510      	push	{r4, lr}
 80001ac:	4604      	mov	r4, r0
	__HAL_TIM_SET_COMPARE(Mot->TIM_NR_EN, Mot->TIM_CHANNEL_EN, 0);
 80001ae:	8a83      	ldrh	r3, [r0, #20]
 80001b0:	b973      	cbnz	r3, 80001d0 <motor_stop+0x26>
 80001b2:	6903      	ldr	r3, [r0, #16]
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	2200      	movs	r2, #0
 80001b8:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(Mot->GPIO_PORT_IN1, Mot->PIN_IN1, 0);
 80001ba:	2200      	movs	r2, #0
 80001bc:	88a1      	ldrh	r1, [r4, #4]
 80001be:	6820      	ldr	r0, [r4, #0]
 80001c0:	f000 fdd8 	bl	8000d74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Mot->GPIO_PORT_IN2, Mot->PIN_IN2, 0);
 80001c4:	2200      	movs	r2, #0
 80001c6:	89a1      	ldrh	r1, [r4, #12]
 80001c8:	68a0      	ldr	r0, [r4, #8]
 80001ca:	f000 fdd3 	bl	8000d74 <HAL_GPIO_WritePin>
}
 80001ce:	bd10      	pop	{r4, pc}
	__HAL_TIM_SET_COMPARE(Mot->TIM_NR_EN, Mot->TIM_CHANNEL_EN, 0);
 80001d0:	2b04      	cmp	r3, #4
 80001d2:	d008      	beq.n	80001e6 <motor_stop+0x3c>
 80001d4:	2b08      	cmp	r3, #8
 80001d6:	6903      	ldr	r3, [r0, #16]
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	f04f 0200 	mov.w	r2, #0
 80001de:	bf0c      	ite	eq
 80001e0:	63da      	streq	r2, [r3, #60]	; 0x3c
 80001e2:	641a      	strne	r2, [r3, #64]	; 0x40
 80001e4:	e7e9      	b.n	80001ba <motor_stop+0x10>
 80001e6:	6903      	ldr	r3, [r0, #16]
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	2200      	movs	r2, #0
 80001ec:	639a      	str	r2, [r3, #56]	; 0x38
 80001ee:	e7e4      	b.n	80001ba <motor_stop+0x10>

080001f0 <motor_opening>:

void motor_opening(Motor *Mot){
 80001f0:	b570      	push	{r4, r5, r6, lr}
 80001f2:	4604      	mov	r4, r0
	__HAL_TIM_SET_COMPARE(Mot->TIM_NR_EN, Mot->TIM_CHANNEL_EN, 1000);
 80001f4:	8a83      	ldrh	r3, [r0, #20]
 80001f6:	bb0b      	cbnz	r3, 800023c <motor_opening+0x4c>
 80001f8:	6903      	ldr	r3, [r0, #16]
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000200:	635a      	str	r2, [r3, #52]	; 0x34
	do{
		Mot->State_of_limit_switch_open = HAL_GPIO_ReadPin(Mot->GPIO_PORT_LS_OPEN, Mot->PIN_LS_OPEN);
		HAL_GPIO_WritePin(Mot->GPIO_PORT_IN1, Mot->PIN_IN1, 1);
 8000202:	2601      	movs	r6, #1
		HAL_GPIO_WritePin(Mot->GPIO_PORT_IN2, Mot->PIN_IN2, 0);
 8000204:	2500      	movs	r5, #0
		Mot->State_of_limit_switch_open = HAL_GPIO_ReadPin(Mot->GPIO_PORT_LS_OPEN, Mot->PIN_LS_OPEN);
 8000206:	8ba1      	ldrh	r1, [r4, #28]
 8000208:	69a0      	ldr	r0, [r4, #24]
 800020a:	f000 fdad 	bl	8000d68 <HAL_GPIO_ReadPin>
 800020e:	3800      	subs	r0, #0
 8000210:	bf18      	it	ne
 8000212:	2001      	movne	r0, #1
 8000214:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
		HAL_GPIO_WritePin(Mot->GPIO_PORT_IN1, Mot->PIN_IN1, 1);
 8000218:	4632      	mov	r2, r6
 800021a:	88a1      	ldrh	r1, [r4, #4]
 800021c:	6820      	ldr	r0, [r4, #0]
 800021e:	f000 fda9 	bl	8000d74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Mot->GPIO_PORT_IN2, Mot->PIN_IN2, 0);
 8000222:	462a      	mov	r2, r5
 8000224:	89a1      	ldrh	r1, [r4, #12]
 8000226:	68a0      	ldr	r0, [r4, #8]
 8000228:	f000 fda4 	bl	8000d74 <HAL_GPIO_WritePin>
	}while(Mot->State_of_limit_switch_open == 0);
 800022c:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8000230:	2b00      	cmp	r3, #0
 8000232:	d0e8      	beq.n	8000206 <motor_opening+0x16>
	motor_stop(Mot);
 8000234:	4620      	mov	r0, r4
 8000236:	f7ff ffb8 	bl	80001aa <motor_stop>
}
 800023a:	bd70      	pop	{r4, r5, r6, pc}
	__HAL_TIM_SET_COMPARE(Mot->TIM_NR_EN, Mot->TIM_CHANNEL_EN, 1000);
 800023c:	2b04      	cmp	r3, #4
 800023e:	d008      	beq.n	8000252 <motor_opening+0x62>
 8000240:	2b08      	cmp	r3, #8
 8000242:	6903      	ldr	r3, [r0, #16]
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800024a:	bf0c      	ite	eq
 800024c:	63da      	streq	r2, [r3, #60]	; 0x3c
 800024e:	641a      	strne	r2, [r3, #64]	; 0x40
 8000250:	e7d7      	b.n	8000202 <motor_opening+0x12>
 8000252:	6903      	ldr	r3, [r0, #16]
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800025a:	639a      	str	r2, [r3, #56]	; 0x38
 800025c:	e7d1      	b.n	8000202 <motor_opening+0x12>

0800025e <motor_closing>:

void motor_closing(Motor *Mot){
 800025e:	b570      	push	{r4, r5, r6, lr}
 8000260:	4604      	mov	r4, r0
	__HAL_TIM_SET_COMPARE(Mot->TIM_NR_EN, Mot->TIM_CHANNEL_EN, 1000);
 8000262:	8a83      	ldrh	r3, [r0, #20]
 8000264:	bb0b      	cbnz	r3, 80002aa <motor_closing+0x4c>
 8000266:	6903      	ldr	r3, [r0, #16]
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800026e:	635a      	str	r2, [r3, #52]	; 0x34
	do{
		Mot->State_of_limit_switch_close = HAL_GPIO_ReadPin(Mot->GPIO_PORT_LS_CLOSE, Mot->PIN_LS_CLOSE);
		HAL_GPIO_WritePin(Mot->GPIO_PORT_IN1, Mot->PIN_IN1, 0);
 8000270:	2600      	movs	r6, #0
		HAL_GPIO_WritePin(Mot->GPIO_PORT_IN2, Mot->PIN_IN2, 1);
 8000272:	2501      	movs	r5, #1
		Mot->State_of_limit_switch_close = HAL_GPIO_ReadPin(Mot->GPIO_PORT_LS_CLOSE, Mot->PIN_LS_CLOSE);
 8000274:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 8000276:	6a20      	ldr	r0, [r4, #32]
 8000278:	f000 fd76 	bl	8000d68 <HAL_GPIO_ReadPin>
 800027c:	3800      	subs	r0, #0
 800027e:	bf18      	it	ne
 8000280:	2001      	movne	r0, #1
 8000282:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
		HAL_GPIO_WritePin(Mot->GPIO_PORT_IN1, Mot->PIN_IN1, 0);
 8000286:	4632      	mov	r2, r6
 8000288:	88a1      	ldrh	r1, [r4, #4]
 800028a:	6820      	ldr	r0, [r4, #0]
 800028c:	f000 fd72 	bl	8000d74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Mot->GPIO_PORT_IN2, Mot->PIN_IN2, 1);
 8000290:	462a      	mov	r2, r5
 8000292:	89a1      	ldrh	r1, [r4, #12]
 8000294:	68a0      	ldr	r0, [r4, #8]
 8000296:	f000 fd6d 	bl	8000d74 <HAL_GPIO_WritePin>
	}while(Mot->State_of_limit_switch_close == 0);
 800029a:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d0e8      	beq.n	8000274 <motor_closing+0x16>
	motor_stop(Mot);
 80002a2:	4620      	mov	r0, r4
 80002a4:	f7ff ff81 	bl	80001aa <motor_stop>
}
 80002a8:	bd70      	pop	{r4, r5, r6, pc}
	__HAL_TIM_SET_COMPARE(Mot->TIM_NR_EN, Mot->TIM_CHANNEL_EN, 1000);
 80002aa:	2b04      	cmp	r3, #4
 80002ac:	d008      	beq.n	80002c0 <motor_closing+0x62>
 80002ae:	2b08      	cmp	r3, #8
 80002b0:	6903      	ldr	r3, [r0, #16]
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80002b8:	bf0c      	ite	eq
 80002ba:	63da      	streq	r2, [r3, #60]	; 0x3c
 80002bc:	641a      	strne	r2, [r3, #64]	; 0x40
 80002be:	e7d7      	b.n	8000270 <motor_closing+0x12>
 80002c0:	6903      	ldr	r3, [r0, #16]
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80002c8:	639a      	str	r2, [r3, #56]	; 0x38
 80002ca:	e7d1      	b.n	8000270 <motor_closing+0x12>

080002cc <motor_initial>:

void motor_initial(Motor *Mot){
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4604      	mov	r4, r0
	motor_opening(Mot);
 80002d0:	f7ff ff8e 	bl	80001f0 <motor_opening>
	motor_closing(Mot);
 80002d4:	4620      	mov	r0, r4
 80002d6:	f7ff ffc2 	bl	800025e <motor_closing>
	motor_opening(Mot);
 80002da:	4620      	mov	r0, r4
 80002dc:	f7ff ff88 	bl	80001f0 <motor_opening>
	motor_closing(Mot);
 80002e0:	4620      	mov	r0, r4
 80002e2:	f7ff ffbc 	bl	800025e <motor_closing>
	motor_stop(Mot);
 80002e6:	4620      	mov	r0, r4
 80002e8:	f7ff ff5f 	bl	80001aa <motor_stop>
}
 80002ec:	bd10      	pop	{r4, pc}
	...

080002f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80002f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80002f4:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002f6:	2400      	movs	r4, #0
 80002f8:	9404      	str	r4, [sp, #16]
 80002fa:	9405      	str	r4, [sp, #20]
 80002fc:	9406      	str	r4, [sp, #24]
 80002fe:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000300:	4b3c      	ldr	r3, [pc, #240]	; (80003f4 <MX_GPIO_Init+0x104>)
 8000302:	699a      	ldr	r2, [r3, #24]
 8000304:	f042 0210 	orr.w	r2, r2, #16
 8000308:	619a      	str	r2, [r3, #24]
 800030a:	699a      	ldr	r2, [r3, #24]
 800030c:	f002 0210 	and.w	r2, r2, #16
 8000310:	9200      	str	r2, [sp, #0]
 8000312:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000314:	699a      	ldr	r2, [r3, #24]
 8000316:	f042 0220 	orr.w	r2, r2, #32
 800031a:	619a      	str	r2, [r3, #24]
 800031c:	699a      	ldr	r2, [r3, #24]
 800031e:	f002 0220 	and.w	r2, r2, #32
 8000322:	9201      	str	r2, [sp, #4]
 8000324:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000326:	699a      	ldr	r2, [r3, #24]
 8000328:	f042 0204 	orr.w	r2, r2, #4
 800032c:	619a      	str	r2, [r3, #24]
 800032e:	699a      	ldr	r2, [r3, #24]
 8000330:	f002 0204 	and.w	r2, r2, #4
 8000334:	9202      	str	r2, [sp, #8]
 8000336:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000338:	699a      	ldr	r2, [r3, #24]
 800033a:	f042 0208 	orr.w	r2, r2, #8
 800033e:	619a      	str	r2, [r3, #24]
 8000340:	699b      	ldr	r3, [r3, #24]
 8000342:	f003 0308 	and.w	r3, r3, #8
 8000346:	9303      	str	r3, [sp, #12]
 8000348:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUILD_IN_LED_GPIO_Port, BUILD_IN_LED_Pin, GPIO_PIN_RESET);
 800034a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 80003fc <MX_GPIO_Init+0x10c>
 800034e:	4622      	mov	r2, r4
 8000350:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000354:	4648      	mov	r0, r9
 8000356:	f000 fd0d 	bl	8000d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PQD_D1_Pin|PQD_D2_Pin|IGN_FIRE_Pin, GPIO_PIN_RESET);
 800035a:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8000400 <MX_GPIO_Init+0x110>
 800035e:	4622      	mov	r2, r4
 8000360:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
 8000364:	4640      	mov	r0, r8
 8000366:	f000 fd05 	bl	8000d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HX1_SCL_Pin|QD_D2_Pin|QD_D1_Pin|DEPR_CLOSE_Pin
 800036a:	4d23      	ldr	r5, [pc, #140]	; (80003f8 <MX_GPIO_Init+0x108>)
 800036c:	4622      	mov	r2, r4
 800036e:	f24e 21d0 	movw	r1, #58064	; 0xe2d0
 8000372:	4628      	mov	r0, r5
 8000374:	f000 fcfe 	bl	8000d74 <HAL_GPIO_WritePin>
                          |DEPR_OPEN_Pin|FILL_CLOSE_Pin|FILL_OPEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUILD_IN_LED_Pin;
 8000378:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800037c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800037e:	2701      	movs	r7, #1
 8000380:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000382:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000384:	2602      	movs	r6, #2
 8000386:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(BUILD_IN_LED_GPIO_Port, &GPIO_InitStruct);
 8000388:	a904      	add	r1, sp, #16
 800038a:	4648      	mov	r0, r9
 800038c:	f000 fbdc 	bl	8000b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IGN_TEST_CON_Pin;
 8000390:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000394:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000396:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000398:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(IGN_TEST_CON_GPIO_Port, &GPIO_InitStruct);
 800039a:	a904      	add	r1, sp, #16
 800039c:	4648      	mov	r0, r9
 800039e:	f000 fbd3 	bl	8000b48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = HX2_SDA_Pin|HX2_SCL_Pin|DEPR_C_LIMIT_SW_Pin|DEPR_O_LIMIT_SW_Pin
 80003a2:	f248 3330 	movw	r3, #33584	; 0x8330
 80003a6:	9304      	str	r3, [sp, #16]
                          |FILL_C_LIMIT_SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003a8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003aa:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ac:	a904      	add	r1, sp, #16
 80003ae:	4640      	mov	r0, r8
 80003b0:	f000 fbca 	bl	8000b48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = PQD_D1_Pin|PQD_D2_Pin|IGN_FIRE_Pin;
 80003b4:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80003b8:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ba:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003bc:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003be:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003c0:	a904      	add	r1, sp, #16
 80003c2:	4640      	mov	r0, r8
 80003c4:	f000 fbc0 	bl	8000b48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = HX1_SDA_Pin|FILL_O_LIMIT_SW_Pin;
 80003c8:	f241 0308 	movw	r3, #4104	; 0x1008
 80003cc:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003ce:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d0:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003d2:	a904      	add	r1, sp, #16
 80003d4:	4628      	mov	r0, r5
 80003d6:	f000 fbb7 	bl	8000b48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = HX1_SCL_Pin|QD_D2_Pin|QD_D1_Pin|DEPR_CLOSE_Pin
 80003da:	f24e 23d0 	movw	r3, #58064	; 0xe2d0
 80003de:	9304      	str	r3, [sp, #16]
                          |DEPR_OPEN_Pin|FILL_CLOSE_Pin|FILL_OPEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003e0:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e2:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e4:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003e6:	a904      	add	r1, sp, #16
 80003e8:	4628      	mov	r0, r5
 80003ea:	f000 fbad 	bl	8000b48 <HAL_GPIO_Init>

}
 80003ee:	b009      	add	sp, #36	; 0x24
 80003f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80003f4:	40021000 	.word	0x40021000
 80003f8:	40010c00 	.word	0x40010c00
 80003fc:	40011000 	.word	0x40011000
 8000400:	40010800 	.word	0x40010800

08000404 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000404:	b500      	push	{lr}
 8000406:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000408:	2300      	movs	r3, #0
 800040a:	930d      	str	r3, [sp, #52]	; 0x34
 800040c:	930f      	str	r3, [sp, #60]	; 0x3c
 800040e:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000410:	9305      	str	r3, [sp, #20]
 8000412:	9306      	str	r3, [sp, #24]
 8000414:	9307      	str	r3, [sp, #28]
 8000416:	9308      	str	r3, [sp, #32]
 8000418:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800041a:	9301      	str	r3, [sp, #4]
 800041c:	9302      	str	r3, [sp, #8]
 800041e:	9303      	str	r3, [sp, #12]
 8000420:	9304      	str	r3, [sp, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000422:	2101      	movs	r1, #1
 8000424:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000426:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800042a:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800042c:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800042e:	910e      	str	r1, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000430:	2302      	movs	r3, #2
 8000432:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000434:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000436:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800043a:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800043c:	a80a      	add	r0, sp, #40	; 0x28
 800043e:	f000 fd29 	bl	8000e94 <HAL_RCC_OscConfig>
 8000442:	b9d0      	cbnz	r0, 800047a <SystemClock_Config+0x76>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000444:	230f      	movs	r3, #15
 8000446:	9305      	str	r3, [sp, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000448:	2302      	movs	r3, #2
 800044a:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800044c:	2300      	movs	r3, #0
 800044e:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000450:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000454:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000456:	9309      	str	r3, [sp, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000458:	2101      	movs	r1, #1
 800045a:	a805      	add	r0, sp, #20
 800045c:	f000 ff66 	bl	800132c <HAL_RCC_ClockConfig>
 8000460:	b968      	cbnz	r0, 800047e <SystemClock_Config+0x7a>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000462:	2310      	movs	r3, #16
 8000464:	9301      	str	r3, [sp, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000466:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800046a:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800046c:	a801      	add	r0, sp, #4
 800046e:	f001 f835 	bl	80014dc <HAL_RCCEx_PeriphCLKConfig>
 8000472:	b930      	cbnz	r0, 8000482 <SystemClock_Config+0x7e>
  {
    Error_Handler();
  }
}
 8000474:	b015      	add	sp, #84	; 0x54
 8000476:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800047a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800047c:	e7fe      	b.n	800047c <SystemClock_Config+0x78>
 800047e:	b672      	cpsid	i
 8000480:	e7fe      	b.n	8000480 <SystemClock_Config+0x7c>
 8000482:	b672      	cpsid	i
 8000484:	e7fe      	b.n	8000484 <SystemClock_Config+0x80>
	...

08000488 <main>:
{
 8000488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800048c:	b086      	sub	sp, #24
  HAL_Init();
 800048e:	f000 fac9 	bl	8000a24 <HAL_Init>
  SystemClock_Config();
 8000492:	f7ff ffb7 	bl	8000404 <SystemClock_Config>
  MX_GPIO_Init();
 8000496:	f7ff ff2b 	bl	80002f0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800049a:	f000 f9a9 	bl	80007f0 <MX_USART2_UART_Init>
  MX_USB_PCD_Init();
 800049e:	f000 fa47 	bl	8000930 <MX_USB_PCD_Init>
  MX_TIM3_Init();
 80004a2:	f000 f90b 	bl	80006bc <MX_TIM3_Init>
  MX_TIM4_Init();
 80004a6:	f000 f963 	bl	8000770 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 80004aa:	f000 f9bb 	bl	8000824 <MX_USART3_UART_Init>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80004ae:	4c29      	ldr	r4, [pc, #164]	; (8000554 <main+0xcc>)
 80004b0:	2104      	movs	r1, #4
 80004b2:	4620      	mov	r0, r4
 80004b4:	f001 fa38 	bl	8001928 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80004b8:	2108      	movs	r1, #8
 80004ba:	4620      	mov	r0, r4
 80004bc:	f001 fa34 	bl	8001928 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80004c0:	210c      	movs	r1, #12
 80004c2:	4620      	mov	r0, r4
 80004c4:	f001 fa30 	bl	8001928 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80004c8:	2108      	movs	r1, #8
 80004ca:	4823      	ldr	r0, [pc, #140]	; (8000558 <main+0xd0>)
 80004cc:	f001 fa2c 	bl	8001928 <HAL_TIM_PWM_Start>
  HAL_Delay(1000);
 80004d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004d4:	f000 faca 	bl	8000a6c <HAL_Delay>
  memset(buff, 0, sizeof(buff));
 80004d8:	2300      	movs	r3, #0
 80004da:	601b      	str	r3, [r3, #0]
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 80004dc:	4b1f      	ldr	r3, [pc, #124]	; (800055c <main+0xd4>)
 80004de:	681a      	ldr	r2, [r3, #0]
 80004e0:	68d3      	ldr	r3, [r2, #12]
 80004e2:	f043 0320 	orr.w	r3, r3, #32
 80004e6:	60d3      	str	r3, [r2, #12]
  Igniter* Ignit = igniter_init(IGN_FIRE_GPIO_Port, IGN_FIRE_Pin, IGN_TEST_CON_GPIO_Port, IGN_TEST_CON_Pin);
 80004e8:	4e1d      	ldr	r6, [pc, #116]	; (8000560 <main+0xd8>)
 80004ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80004ee:	4a1d      	ldr	r2, [pc, #116]	; (8000564 <main+0xdc>)
 80004f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004f4:	4630      	mov	r0, r6
 80004f6:	f7ff fe29 	bl	800014c <igniter_init>
 80004fa:	4605      	mov	r5, r0
  Motor* Fill = motor_init(FILL_OPEN_GPIO_Port, FILL_OPEN_Pin, FILL_CLOSE_GPIO_Port , FILL_CLOSE_Pin, &htim3 , TIM_CHANNEL_3, FILL_O_LIMIT_SW_GPIO_Port, FILL_O_LIMIT_SW_Pin, FILL_C_LIMIT_SW_GPIO_Port, FILL_C_LIMIT_SW_Pin);
 80004fc:	481a      	ldr	r0, [pc, #104]	; (8000568 <main+0xe0>)
 80004fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000502:	9305      	str	r3, [sp, #20]
 8000504:	9604      	str	r6, [sp, #16]
 8000506:	2308      	movs	r3, #8
 8000508:	9303      	str	r3, [sp, #12]
 800050a:	9002      	str	r0, [sp, #8]
 800050c:	9301      	str	r3, [sp, #4]
 800050e:	9400      	str	r4, [sp, #0]
 8000510:	2380      	movs	r3, #128	; 0x80
 8000512:	4602      	mov	r2, r0
 8000514:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000518:	f7ff fe23 	bl	8000162 <motor_init>
 800051c:	4604      	mov	r4, r0
	  switch(state){
 800051e:	4e13      	ldr	r6, [pc, #76]	; (800056c <main+0xe4>)
			  HAL_GPIO_TogglePin(BUILD_IN_LED_GPIO_Port, BUILD_IN_LED_Pin);
 8000520:	f8df 8040 	ldr.w	r8, [pc, #64]	; 8000564 <main+0xdc>
 8000524:	f44f 5700 	mov.w	r7, #8192	; 0x2000
 8000528:	e003      	b.n	8000532 <main+0xaa>
		  HAL_Delay(1000);
 800052a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800052e:	f000 fa9d 	bl	8000a6c <HAL_Delay>
	  switch(state){
 8000532:	7833      	ldrb	r3, [r6, #0]
 8000534:	2b00      	cmp	r3, #0
 8000536:	d1fd      	bne.n	8000534 <main+0xac>
		  motor_initial(Fill);
 8000538:	4620      	mov	r0, r4
 800053a:	f7ff fec7 	bl	80002cc <motor_initial>
		  if(igniter_is_connected(Ignit)){
 800053e:	4628      	mov	r0, r5
 8000540:	f7ff fe05 	bl	800014e <igniter_is_connected>
 8000544:	2800      	cmp	r0, #0
 8000546:	d0f0      	beq.n	800052a <main+0xa2>
			  HAL_GPIO_TogglePin(BUILD_IN_LED_GPIO_Port, BUILD_IN_LED_Pin);
 8000548:	4639      	mov	r1, r7
 800054a:	4640      	mov	r0, r8
 800054c:	f000 fc18 	bl	8000d80 <HAL_GPIO_TogglePin>
 8000550:	e7eb      	b.n	800052a <main+0xa2>
 8000552:	bf00      	nop
 8000554:	200000e4 	.word	0x200000e4
 8000558:	2000009c 	.word	0x2000009c
 800055c:	2000016c 	.word	0x2000016c
 8000560:	40010800 	.word	0x40010800
 8000564:	40011000 	.word	0x40011000
 8000568:	40010c00 	.word	0x40010c00
 800056c:	2000008c 	.word	0x2000008c

08000570 <Error_Handler>:
 8000570:	b672      	cpsid	i
  while (1)
 8000572:	e7fe      	b.n	8000572 <Error_Handler+0x2>

08000574 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000574:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000576:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <HAL_MspInit+0x3c>)
 8000578:	699a      	ldr	r2, [r3, #24]
 800057a:	f042 0201 	orr.w	r2, r2, #1
 800057e:	619a      	str	r2, [r3, #24]
 8000580:	699a      	ldr	r2, [r3, #24]
 8000582:	f002 0201 	and.w	r2, r2, #1
 8000586:	9200      	str	r2, [sp, #0]
 8000588:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800058a:	69da      	ldr	r2, [r3, #28]
 800058c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000590:	61da      	str	r2, [r3, #28]
 8000592:	69db      	ldr	r3, [r3, #28]
 8000594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000598:	9301      	str	r3, [sp, #4]
 800059a:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800059c:	4a05      	ldr	r2, [pc, #20]	; (80005b4 <HAL_MspInit+0x40>)
 800059e:	6853      	ldr	r3, [r2, #4]
 80005a0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005aa:	b002      	add	sp, #8
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	40021000 	.word	0x40021000
 80005b4:	40010000 	.word	0x40010000

080005b8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005b8:	e7fe      	b.n	80005b8 <NMI_Handler>

080005ba <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005ba:	e7fe      	b.n	80005ba <HardFault_Handler>

080005bc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005bc:	e7fe      	b.n	80005bc <MemManage_Handler>

080005be <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005be:	e7fe      	b.n	80005be <BusFault_Handler>

080005c0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005c0:	e7fe      	b.n	80005c0 <UsageFault_Handler>

080005c2 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005c2:	4770      	bx	lr

080005c4 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005c4:	4770      	bx	lr

080005c6 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005c6:	4770      	bx	lr

080005c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005c8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005ca:	f000 fa3d 	bl	8000a48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005ce:	bd08      	pop	{r3, pc}

080005d0 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005d0:	4770      	bx	lr
	...

080005d4 <HAL_TIM_PWM_MspInit>:
  HAL_TIM_MspPostInit(&htim4);

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80005d4:	b082      	sub	sp, #8

  if(tim_pwmHandle->Instance==TIM3)
 80005d6:	6803      	ldr	r3, [r0, #0]
 80005d8:	4a0e      	ldr	r2, [pc, #56]	; (8000614 <HAL_TIM_PWM_MspInit+0x40>)
 80005da:	4293      	cmp	r3, r2
 80005dc:	d004      	beq.n	80005e8 <HAL_TIM_PWM_MspInit+0x14>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(tim_pwmHandle->Instance==TIM4)
 80005de:	4a0e      	ldr	r2, [pc, #56]	; (8000618 <HAL_TIM_PWM_MspInit+0x44>)
 80005e0:	4293      	cmp	r3, r2
 80005e2:	d00c      	beq.n	80005fe <HAL_TIM_PWM_MspInit+0x2a>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80005e4:	b002      	add	sp, #8
 80005e6:	4770      	bx	lr
    __HAL_RCC_TIM3_CLK_ENABLE();
 80005e8:	4b0c      	ldr	r3, [pc, #48]	; (800061c <HAL_TIM_PWM_MspInit+0x48>)
 80005ea:	69da      	ldr	r2, [r3, #28]
 80005ec:	f042 0202 	orr.w	r2, r2, #2
 80005f0:	61da      	str	r2, [r3, #28]
 80005f2:	69db      	ldr	r3, [r3, #28]
 80005f4:	f003 0302 	and.w	r3, r3, #2
 80005f8:	9300      	str	r3, [sp, #0]
 80005fa:	9b00      	ldr	r3, [sp, #0]
 80005fc:	e7f2      	b.n	80005e4 <HAL_TIM_PWM_MspInit+0x10>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80005fe:	4b07      	ldr	r3, [pc, #28]	; (800061c <HAL_TIM_PWM_MspInit+0x48>)
 8000600:	69da      	ldr	r2, [r3, #28]
 8000602:	f042 0204 	orr.w	r2, r2, #4
 8000606:	61da      	str	r2, [r3, #28]
 8000608:	69db      	ldr	r3, [r3, #28]
 800060a:	f003 0304 	and.w	r3, r3, #4
 800060e:	9301      	str	r3, [sp, #4]
 8000610:	9b01      	ldr	r3, [sp, #4]
}
 8000612:	e7e7      	b.n	80005e4 <HAL_TIM_PWM_MspInit+0x10>
 8000614:	40000400 	.word	0x40000400
 8000618:	40000800 	.word	0x40000800
 800061c:	40021000 	.word	0x40021000

08000620 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000620:	b500      	push	{lr}
 8000622:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000624:	2300      	movs	r3, #0
 8000626:	9302      	str	r3, [sp, #8]
 8000628:	9303      	str	r3, [sp, #12]
 800062a:	9304      	str	r3, [sp, #16]
 800062c:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM3)
 800062e:	6803      	ldr	r3, [r0, #0]
 8000630:	4a1d      	ldr	r2, [pc, #116]	; (80006a8 <HAL_TIM_MspPostInit+0x88>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d005      	beq.n	8000642 <HAL_TIM_MspPostInit+0x22>

  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM4)
 8000636:	4a1d      	ldr	r2, [pc, #116]	; (80006ac <HAL_TIM_MspPostInit+0x8c>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d01f      	beq.n	800067c <HAL_TIM_MspPostInit+0x5c>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800063c:	b007      	add	sp, #28
 800063e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000642:	4b1b      	ldr	r3, [pc, #108]	; (80006b0 <HAL_TIM_MspPostInit+0x90>)
 8000644:	699a      	ldr	r2, [r3, #24]
 8000646:	f042 0208 	orr.w	r2, r2, #8
 800064a:	619a      	str	r2, [r3, #24]
 800064c:	699b      	ldr	r3, [r3, #24]
 800064e:	f003 0308 	and.w	r3, r3, #8
 8000652:	9300      	str	r3, [sp, #0]
 8000654:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = QD_EN_Pin|PQD_EN_Pin|DEPR_EN_Pin;
 8000656:	2323      	movs	r3, #35	; 0x23
 8000658:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800065a:	2302      	movs	r3, #2
 800065c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000660:	a902      	add	r1, sp, #8
 8000662:	4814      	ldr	r0, [pc, #80]	; (80006b4 <HAL_TIM_MspPostInit+0x94>)
 8000664:	f000 fa70 	bl	8000b48 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8000668:	4a13      	ldr	r2, [pc, #76]	; (80006b8 <HAL_TIM_MspPostInit+0x98>)
 800066a:	6853      	ldr	r3, [r2, #4]
 800066c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000670:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000674:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000678:	6053      	str	r3, [r2, #4]
 800067a:	e7df      	b.n	800063c <HAL_TIM_MspPostInit+0x1c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800067c:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <HAL_TIM_MspPostInit+0x90>)
 800067e:	699a      	ldr	r2, [r3, #24]
 8000680:	f042 0208 	orr.w	r2, r2, #8
 8000684:	619a      	str	r2, [r3, #24]
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	f003 0308 	and.w	r3, r3, #8
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = FILL_EN_Pin;
 8000690:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000694:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000696:	2302      	movs	r3, #2
 8000698:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(FILL_EN_GPIO_Port, &GPIO_InitStruct);
 800069c:	a902      	add	r1, sp, #8
 800069e:	4805      	ldr	r0, [pc, #20]	; (80006b4 <HAL_TIM_MspPostInit+0x94>)
 80006a0:	f000 fa52 	bl	8000b48 <HAL_GPIO_Init>
}
 80006a4:	e7ca      	b.n	800063c <HAL_TIM_MspPostInit+0x1c>
 80006a6:	bf00      	nop
 80006a8:	40000400 	.word	0x40000400
 80006ac:	40000800 	.word	0x40000800
 80006b0:	40021000 	.word	0x40021000
 80006b4:	40010c00 	.word	0x40010c00
 80006b8:	40010000 	.word	0x40010000

080006bc <MX_TIM3_Init>:
{
 80006bc:	b500      	push	{lr}
 80006be:	b08b      	sub	sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006c0:	2300      	movs	r3, #0
 80006c2:	9308      	str	r3, [sp, #32]
 80006c4:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006c6:	9301      	str	r3, [sp, #4]
 80006c8:	9302      	str	r3, [sp, #8]
 80006ca:	9303      	str	r3, [sp, #12]
 80006cc:	9304      	str	r3, [sp, #16]
 80006ce:	9305      	str	r3, [sp, #20]
 80006d0:	9306      	str	r3, [sp, #24]
 80006d2:	9307      	str	r3, [sp, #28]
  htim3.Instance = TIM3;
 80006d4:	4824      	ldr	r0, [pc, #144]	; (8000768 <MX_TIM3_Init+0xac>)
 80006d6:	4a25      	ldr	r2, [pc, #148]	; (800076c <MX_TIM3_Init+0xb0>)
 80006d8:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 7;
 80006da:	2207      	movs	r2, #7
 80006dc:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006de:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 999;
 80006e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006e4:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006e6:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006e8:	2380      	movs	r3, #128	; 0x80
 80006ea:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80006ec:	f001 f84a 	bl	8001784 <HAL_TIM_PWM_Init>
 80006f0:	bb50      	cbnz	r0, 8000748 <MX_TIM3_Init+0x8c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006f2:	2300      	movs	r3, #0
 80006f4:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006f6:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006f8:	a908      	add	r1, sp, #32
 80006fa:	481b      	ldr	r0, [pc, #108]	; (8000768 <MX_TIM3_Init+0xac>)
 80006fc:	f001 f978 	bl	80019f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000700:	bb28      	cbnz	r0, 800074e <MX_TIM3_Init+0x92>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000702:	2360      	movs	r3, #96	; 0x60
 8000704:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 500;
 8000706:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800070a:	9302      	str	r3, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800070c:	2300      	movs	r3, #0
 800070e:	9303      	str	r3, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000710:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000712:	2204      	movs	r2, #4
 8000714:	eb0d 0102 	add.w	r1, sp, r2
 8000718:	4813      	ldr	r0, [pc, #76]	; (8000768 <MX_TIM3_Init+0xac>)
 800071a:	f001 f88d 	bl	8001838 <HAL_TIM_PWM_ConfigChannel>
 800071e:	b9c8      	cbnz	r0, 8000754 <MX_TIM3_Init+0x98>
  sConfigOC.Pulse = 0;
 8000720:	2300      	movs	r3, #0
 8000722:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000724:	2208      	movs	r2, #8
 8000726:	a901      	add	r1, sp, #4
 8000728:	480f      	ldr	r0, [pc, #60]	; (8000768 <MX_TIM3_Init+0xac>)
 800072a:	f001 f885 	bl	8001838 <HAL_TIM_PWM_ConfigChannel>
 800072e:	b9a0      	cbnz	r0, 800075a <MX_TIM3_Init+0x9e>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000730:	220c      	movs	r2, #12
 8000732:	a901      	add	r1, sp, #4
 8000734:	480c      	ldr	r0, [pc, #48]	; (8000768 <MX_TIM3_Init+0xac>)
 8000736:	f001 f87f 	bl	8001838 <HAL_TIM_PWM_ConfigChannel>
 800073a:	b988      	cbnz	r0, 8000760 <MX_TIM3_Init+0xa4>
  HAL_TIM_MspPostInit(&htim3);
 800073c:	480a      	ldr	r0, [pc, #40]	; (8000768 <MX_TIM3_Init+0xac>)
 800073e:	f7ff ff6f 	bl	8000620 <HAL_TIM_MspPostInit>
}
 8000742:	b00b      	add	sp, #44	; 0x2c
 8000744:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000748:	f7ff ff12 	bl	8000570 <Error_Handler>
 800074c:	e7d1      	b.n	80006f2 <MX_TIM3_Init+0x36>
    Error_Handler();
 800074e:	f7ff ff0f 	bl	8000570 <Error_Handler>
 8000752:	e7d6      	b.n	8000702 <MX_TIM3_Init+0x46>
    Error_Handler();
 8000754:	f7ff ff0c 	bl	8000570 <Error_Handler>
 8000758:	e7e2      	b.n	8000720 <MX_TIM3_Init+0x64>
    Error_Handler();
 800075a:	f7ff ff09 	bl	8000570 <Error_Handler>
 800075e:	e7e7      	b.n	8000730 <MX_TIM3_Init+0x74>
    Error_Handler();
 8000760:	f7ff ff06 	bl	8000570 <Error_Handler>
 8000764:	e7ea      	b.n	800073c <MX_TIM3_Init+0x80>
 8000766:	bf00      	nop
 8000768:	200000e4 	.word	0x200000e4
 800076c:	40000400 	.word	0x40000400

08000770 <MX_TIM4_Init>:
{
 8000770:	b500      	push	{lr}
 8000772:	b08b      	sub	sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000774:	2300      	movs	r3, #0
 8000776:	9308      	str	r3, [sp, #32]
 8000778:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 800077a:	9301      	str	r3, [sp, #4]
 800077c:	9302      	str	r3, [sp, #8]
 800077e:	9303      	str	r3, [sp, #12]
 8000780:	9304      	str	r3, [sp, #16]
 8000782:	9305      	str	r3, [sp, #20]
 8000784:	9306      	str	r3, [sp, #24]
 8000786:	9307      	str	r3, [sp, #28]
  htim4.Instance = TIM4;
 8000788:	4817      	ldr	r0, [pc, #92]	; (80007e8 <MX_TIM4_Init+0x78>)
 800078a:	4a18      	ldr	r2, [pc, #96]	; (80007ec <MX_TIM4_Init+0x7c>)
 800078c:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 0;
 800078e:	6043      	str	r3, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000790:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 65535;
 8000792:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000796:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000798:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800079a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800079c:	f000 fff2 	bl	8001784 <HAL_TIM_PWM_Init>
 80007a0:	b9c8      	cbnz	r0, 80007d6 <MX_TIM4_Init+0x66>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007a2:	2300      	movs	r3, #0
 80007a4:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007a6:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80007a8:	a908      	add	r1, sp, #32
 80007aa:	480f      	ldr	r0, [pc, #60]	; (80007e8 <MX_TIM4_Init+0x78>)
 80007ac:	f001 f920 	bl	80019f0 <HAL_TIMEx_MasterConfigSynchronization>
 80007b0:	b9a0      	cbnz	r0, 80007dc <MX_TIM4_Init+0x6c>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007b2:	2360      	movs	r3, #96	; 0x60
 80007b4:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	9302      	str	r3, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007ba:	9303      	str	r3, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007bc:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007be:	2208      	movs	r2, #8
 80007c0:	a901      	add	r1, sp, #4
 80007c2:	4809      	ldr	r0, [pc, #36]	; (80007e8 <MX_TIM4_Init+0x78>)
 80007c4:	f001 f838 	bl	8001838 <HAL_TIM_PWM_ConfigChannel>
 80007c8:	b958      	cbnz	r0, 80007e2 <MX_TIM4_Init+0x72>
  HAL_TIM_MspPostInit(&htim4);
 80007ca:	4807      	ldr	r0, [pc, #28]	; (80007e8 <MX_TIM4_Init+0x78>)
 80007cc:	f7ff ff28 	bl	8000620 <HAL_TIM_MspPostInit>
}
 80007d0:	b00b      	add	sp, #44	; 0x2c
 80007d2:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80007d6:	f7ff fecb 	bl	8000570 <Error_Handler>
 80007da:	e7e2      	b.n	80007a2 <MX_TIM4_Init+0x32>
    Error_Handler();
 80007dc:	f7ff fec8 	bl	8000570 <Error_Handler>
 80007e0:	e7e7      	b.n	80007b2 <MX_TIM4_Init+0x42>
    Error_Handler();
 80007e2:	f7ff fec5 	bl	8000570 <Error_Handler>
 80007e6:	e7f0      	b.n	80007ca <MX_TIM4_Init+0x5a>
 80007e8:	2000009c 	.word	0x2000009c
 80007ec:	40000800 	.word	0x40000800

080007f0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80007f0:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 80007f2:	480a      	ldr	r0, [pc, #40]	; (800081c <MX_USART2_UART_Init+0x2c>)
 80007f4:	4b0a      	ldr	r3, [pc, #40]	; (8000820 <MX_USART2_UART_Init+0x30>)
 80007f6:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 80007f8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80007fc:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007fe:	2300      	movs	r3, #0
 8000800:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000802:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000804:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000806:	220c      	movs	r2, #12
 8000808:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800080c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800080e:	f001 f967 	bl	8001ae0 <HAL_UART_Init>
 8000812:	b900      	cbnz	r0, 8000816 <MX_USART2_UART_Init+0x26>
  {
    Error_Handler();
  }

}
 8000814:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000816:	f7ff feab 	bl	8000570 <Error_Handler>
}
 800081a:	e7fb      	b.n	8000814 <MX_USART2_UART_Init+0x24>
 800081c:	2000016c 	.word	0x2000016c
 8000820:	40004400 	.word	0x40004400

08000824 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000824:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
 8000826:	480a      	ldr	r0, [pc, #40]	; (8000850 <MX_USART3_UART_Init+0x2c>)
 8000828:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <MX_USART3_UART_Init+0x30>)
 800082a:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 800082c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000830:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000832:	2300      	movs	r3, #0
 8000834:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000836:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000838:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800083a:	220c      	movs	r2, #12
 800083c:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083e:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000840:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000842:	f001 f94d 	bl	8001ae0 <HAL_UART_Init>
 8000846:	b900      	cbnz	r0, 800084a <MX_USART3_UART_Init+0x26>
  {
    Error_Handler();
  }

}
 8000848:	bd08      	pop	{r3, pc}
    Error_Handler();
 800084a:	f7ff fe91 	bl	8000570 <Error_Handler>
}
 800084e:	e7fb      	b.n	8000848 <MX_USART3_UART_Init+0x24>
 8000850:	2000012c 	.word	0x2000012c
 8000854:	40004800 	.word	0x40004800

08000858 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000858:	b510      	push	{r4, lr}
 800085a:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085c:	2300      	movs	r3, #0
 800085e:	9304      	str	r3, [sp, #16]
 8000860:	9305      	str	r3, [sp, #20]
 8000862:	9306      	str	r3, [sp, #24]
 8000864:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART2)
 8000866:	6803      	ldr	r3, [r0, #0]
 8000868:	4a2c      	ldr	r2, [pc, #176]	; (800091c <HAL_UART_MspInit+0xc4>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d004      	beq.n	8000878 <HAL_UART_MspInit+0x20>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 800086e:	4a2c      	ldr	r2, [pc, #176]	; (8000920 <HAL_UART_MspInit+0xc8>)
 8000870:	4293      	cmp	r3, r2
 8000872:	d029      	beq.n	80008c8 <HAL_UART_MspInit+0x70>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000874:	b008      	add	sp, #32
 8000876:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8000878:	4b2a      	ldr	r3, [pc, #168]	; (8000924 <HAL_UART_MspInit+0xcc>)
 800087a:	69da      	ldr	r2, [r3, #28]
 800087c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000880:	61da      	str	r2, [r3, #28]
 8000882:	69da      	ldr	r2, [r3, #28]
 8000884:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000888:	9200      	str	r2, [sp, #0]
 800088a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800088c:	699a      	ldr	r2, [r3, #24]
 800088e:	f042 0204 	orr.w	r2, r2, #4
 8000892:	619a      	str	r2, [r3, #24]
 8000894:	699b      	ldr	r3, [r3, #24]
 8000896:	f003 0304 	and.w	r3, r3, #4
 800089a:	9301      	str	r3, [sp, #4]
 800089c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800089e:	2304      	movs	r3, #4
 80008a0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a2:	2302      	movs	r3, #2
 80008a4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008a6:	2303      	movs	r3, #3
 80008a8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008aa:	4c1f      	ldr	r4, [pc, #124]	; (8000928 <HAL_UART_MspInit+0xd0>)
 80008ac:	a904      	add	r1, sp, #16
 80008ae:	4620      	mov	r0, r4
 80008b0:	f000 f94a 	bl	8000b48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80008b4:	2308      	movs	r3, #8
 80008b6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b8:	2300      	movs	r3, #0
 80008ba:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008be:	a904      	add	r1, sp, #16
 80008c0:	4620      	mov	r0, r4
 80008c2:	f000 f941 	bl	8000b48 <HAL_GPIO_Init>
 80008c6:	e7d5      	b.n	8000874 <HAL_UART_MspInit+0x1c>
    __HAL_RCC_USART3_CLK_ENABLE();
 80008c8:	4b16      	ldr	r3, [pc, #88]	; (8000924 <HAL_UART_MspInit+0xcc>)
 80008ca:	69da      	ldr	r2, [r3, #28]
 80008cc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80008d0:	61da      	str	r2, [r3, #28]
 80008d2:	69da      	ldr	r2, [r3, #28]
 80008d4:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80008d8:	9202      	str	r2, [sp, #8]
 80008da:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008dc:	699a      	ldr	r2, [r3, #24]
 80008de:	f042 0208 	orr.w	r2, r2, #8
 80008e2:	619a      	str	r2, [r3, #24]
 80008e4:	699b      	ldr	r3, [r3, #24]
 80008e6:	f003 0308 	and.w	r3, r3, #8
 80008ea:	9303      	str	r3, [sp, #12]
 80008ec:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008f2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f4:	2302      	movs	r3, #2
 80008f6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008f8:	2303      	movs	r3, #3
 80008fa:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008fc:	4c0b      	ldr	r4, [pc, #44]	; (800092c <HAL_UART_MspInit+0xd4>)
 80008fe:	a904      	add	r1, sp, #16
 8000900:	4620      	mov	r0, r4
 8000902:	f000 f921 	bl	8000b48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000906:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800090a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090c:	2300      	movs	r3, #0
 800090e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000912:	a904      	add	r1, sp, #16
 8000914:	4620      	mov	r0, r4
 8000916:	f000 f917 	bl	8000b48 <HAL_GPIO_Init>
}
 800091a:	e7ab      	b.n	8000874 <HAL_UART_MspInit+0x1c>
 800091c:	40004400 	.word	0x40004400
 8000920:	40004800 	.word	0x40004800
 8000924:	40021000 	.word	0x40021000
 8000928:	40010800 	.word	0x40010800
 800092c:	40010c00 	.word	0x40010c00

08000930 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8000930:	b508      	push	{r3, lr}

  hpcd_USB_FS.Instance = USB;
 8000932:	4809      	ldr	r0, [pc, #36]	; (8000958 <MX_USB_PCD_Init+0x28>)
 8000934:	4b09      	ldr	r3, [pc, #36]	; (800095c <MX_USB_PCD_Init+0x2c>)
 8000936:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000938:	2308      	movs	r3, #8
 800093a:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800093c:	2302      	movs	r3, #2
 800093e:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000940:	2300      	movs	r3, #0
 8000942:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000944:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000946:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000948:	f000 fa23 	bl	8000d92 <HAL_PCD_Init>
 800094c:	b900      	cbnz	r0, 8000950 <MX_USB_PCD_Init+0x20>
  {
    Error_Handler();
  }

}
 800094e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000950:	f7ff fe0e 	bl	8000570 <Error_Handler>
}
 8000954:	e7fb      	b.n	800094e <MX_USB_PCD_Init+0x1e>
 8000956:	bf00      	nop
 8000958:	200001ac 	.word	0x200001ac
 800095c:	40005c00 	.word	0x40005c00

08000960 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{

  if(pcdHandle->Instance==USB)
 8000960:	6802      	ldr	r2, [r0, #0]
 8000962:	4b09      	ldr	r3, [pc, #36]	; (8000988 <HAL_PCD_MspInit+0x28>)
 8000964:	429a      	cmp	r2, r3
 8000966:	d000      	beq.n	800096a <HAL_PCD_MspInit+0xa>
 8000968:	4770      	bx	lr
{
 800096a:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800096c:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8000970:	69da      	ldr	r2, [r3, #28]
 8000972:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000976:	61da      	str	r2, [r3, #28]
 8000978:	69db      	ldr	r3, [r3, #28]
 800097a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800097e:	9301      	str	r3, [sp, #4]
 8000980:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8000982:	b002      	add	sp, #8
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	40005c00 	.word	0x40005c00

0800098c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800098c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800098e:	e003      	b.n	8000998 <LoopCopyDataInit>

08000990 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000990:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000992:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000994:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000996:	3104      	adds	r1, #4

08000998 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000998:	480a      	ldr	r0, [pc, #40]	; (80009c4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800099a:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800099c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800099e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80009a0:	d3f6      	bcc.n	8000990 <CopyDataInit>
  ldr r2, =_sbss
 80009a2:	4a0a      	ldr	r2, [pc, #40]	; (80009cc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80009a4:	e002      	b.n	80009ac <LoopFillZerobss>

080009a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80009a6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80009a8:	f842 3b04 	str.w	r3, [r2], #4

080009ac <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80009ac:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80009ae:	429a      	cmp	r2, r3
  bcc FillZerobss
 80009b0:	d3f9      	bcc.n	80009a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009b2:	f7ff fe0d 	bl	80005d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009b6:	f001 f8eb 	bl	8001b90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009ba:	f7ff fd65 	bl	8000488 <main>
  bx lr
 80009be:	4770      	bx	lr
  ldr r3, =_sidata
 80009c0:	08001d40 	.word	0x08001d40
  ldr r0, =_sdata
 80009c4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80009c8:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 80009cc:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80009d0:	200004ac 	.word	0x200004ac

080009d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009d4:	e7fe      	b.n	80009d4 <ADC1_2_IRQHandler>
	...

080009d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d8:	b510      	push	{r4, lr}
 80009da:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009dc:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <HAL_InitTick+0x40>)
 80009de:	7818      	ldrb	r0, [r3, #0]
 80009e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009e4:	fbb3 f3f0 	udiv	r3, r3, r0
 80009e8:	4a0c      	ldr	r2, [pc, #48]	; (8000a1c <HAL_InitTick+0x44>)
 80009ea:	6810      	ldr	r0, [r2, #0]
 80009ec:	fbb0 f0f3 	udiv	r0, r0, r3
 80009f0:	f000 f894 	bl	8000b1c <HAL_SYSTICK_Config>
 80009f4:	b968      	cbnz	r0, 8000a12 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009f6:	2c0f      	cmp	r4, #15
 80009f8:	d901      	bls.n	80009fe <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80009fa:	2001      	movs	r0, #1
 80009fc:	e00a      	b.n	8000a14 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009fe:	2200      	movs	r2, #0
 8000a00:	4621      	mov	r1, r4
 8000a02:	f04f 30ff 	mov.w	r0, #4294967295
 8000a06:	f000 f857 	bl	8000ab8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a0a:	4b05      	ldr	r3, [pc, #20]	; (8000a20 <HAL_InitTick+0x48>)
 8000a0c:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000a0e:	2000      	movs	r0, #0
 8000a10:	e000      	b.n	8000a14 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000a12:	2001      	movs	r0, #1
}
 8000a14:	bd10      	pop	{r4, pc}
 8000a16:	bf00      	nop
 8000a18:	20000004 	.word	0x20000004
 8000a1c:	20000000 	.word	0x20000000
 8000a20:	20000008 	.word	0x20000008

08000a24 <HAL_Init>:
{
 8000a24:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a26:	4a07      	ldr	r2, [pc, #28]	; (8000a44 <HAL_Init+0x20>)
 8000a28:	6813      	ldr	r3, [r2, #0]
 8000a2a:	f043 0310 	orr.w	r3, r3, #16
 8000a2e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a30:	2003      	movs	r0, #3
 8000a32:	f000 f82f 	bl	8000a94 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a36:	2000      	movs	r0, #0
 8000a38:	f7ff ffce 	bl	80009d8 <HAL_InitTick>
  HAL_MspInit();
 8000a3c:	f7ff fd9a 	bl	8000574 <HAL_MspInit>
}
 8000a40:	2000      	movs	r0, #0
 8000a42:	bd08      	pop	{r3, pc}
 8000a44:	40022000 	.word	0x40022000

08000a48 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000a48:	4a03      	ldr	r2, [pc, #12]	; (8000a58 <HAL_IncTick+0x10>)
 8000a4a:	6811      	ldr	r1, [r2, #0]
 8000a4c:	4b03      	ldr	r3, [pc, #12]	; (8000a5c <HAL_IncTick+0x14>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	440b      	add	r3, r1
 8000a52:	6013      	str	r3, [r2, #0]
}
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	20000498 	.word	0x20000498
 8000a5c:	20000004 	.word	0x20000004

08000a60 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000a60:	4b01      	ldr	r3, [pc, #4]	; (8000a68 <HAL_GetTick+0x8>)
 8000a62:	6818      	ldr	r0, [r3, #0]
}
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	20000498 	.word	0x20000498

08000a6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a6c:	b538      	push	{r3, r4, r5, lr}
 8000a6e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000a70:	f7ff fff6 	bl	8000a60 <HAL_GetTick>
 8000a74:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a76:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000a7a:	d002      	beq.n	8000a82 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a7c:	4b04      	ldr	r3, [pc, #16]	; (8000a90 <HAL_Delay+0x24>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a82:	f7ff ffed 	bl	8000a60 <HAL_GetTick>
 8000a86:	1b40      	subs	r0, r0, r5
 8000a88:	42a0      	cmp	r0, r4
 8000a8a:	d3fa      	bcc.n	8000a82 <HAL_Delay+0x16>
  {
  }
}
 8000a8c:	bd38      	pop	{r3, r4, r5, pc}
 8000a8e:	bf00      	nop
 8000a90:	20000004 	.word	0x20000004

08000a94 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a94:	4907      	ldr	r1, [pc, #28]	; (8000ab4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000a96:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a98:	0203      	lsls	r3, r0, #8
 8000a9a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a9e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000aa2:	0412      	lsls	r2, r2, #16
 8000aa4:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000aac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000ab0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000ab2:	4770      	bx	lr
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ab8:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aba:	4b16      	ldr	r3, [pc, #88]	; (8000b14 <HAL_NVIC_SetPriority+0x5c>)
 8000abc:	68db      	ldr	r3, [r3, #12]
 8000abe:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ac2:	f1c3 0407 	rsb	r4, r3, #7
 8000ac6:	2c04      	cmp	r4, #4
 8000ac8:	bf28      	it	cs
 8000aca:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000acc:	1d1d      	adds	r5, r3, #4
 8000ace:	2d06      	cmp	r5, #6
 8000ad0:	bf8c      	ite	hi
 8000ad2:	3b03      	subhi	r3, #3
 8000ad4:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad6:	f04f 35ff 	mov.w	r5, #4294967295
 8000ada:	fa05 f404 	lsl.w	r4, r5, r4
 8000ade:	ea21 0104 	bic.w	r1, r1, r4
 8000ae2:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ae4:	fa05 f303 	lsl.w	r3, r5, r3
 8000ae8:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aec:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8000aee:	2800      	cmp	r0, #0
 8000af0:	db09      	blt.n	8000b06 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af2:	0109      	lsls	r1, r1, #4
 8000af4:	b2c9      	uxtb	r1, r1
 8000af6:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000afa:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000afe:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000b02:	bc30      	pop	{r4, r5}
 8000b04:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b06:	f000 000f 	and.w	r0, r0, #15
 8000b0a:	0109      	lsls	r1, r1, #4
 8000b0c:	b2c9      	uxtb	r1, r1
 8000b0e:	4b02      	ldr	r3, [pc, #8]	; (8000b18 <HAL_NVIC_SetPriority+0x60>)
 8000b10:	5419      	strb	r1, [r3, r0]
 8000b12:	e7f6      	b.n	8000b02 <HAL_NVIC_SetPriority+0x4a>
 8000b14:	e000ed00 	.word	0xe000ed00
 8000b18:	e000ed14 	.word	0xe000ed14

08000b1c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b1c:	3801      	subs	r0, #1
 8000b1e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b22:	d20a      	bcs.n	8000b3a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b24:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <HAL_SYSTICK_Config+0x24>)
 8000b26:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b28:	4a06      	ldr	r2, [pc, #24]	; (8000b44 <HAL_SYSTICK_Config+0x28>)
 8000b2a:	21f0      	movs	r1, #240	; 0xf0
 8000b2c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b30:	2000      	movs	r0, #0
 8000b32:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b34:	2207      	movs	r2, #7
 8000b36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b38:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000b3a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	e000e010 	.word	0xe000e010
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b4c:	b083      	sub	sp, #12
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b4e:	680f      	ldr	r7, [r1, #0]
 8000b50:	2f00      	cmp	r7, #0
 8000b52:	f000 80f8 	beq.w	8000d46 <HAL_GPIO_Init+0x1fe>
  uint32_t config = 0x00u;
 8000b56:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8000b58:	4613      	mov	r3, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b5a:	f8df c200 	ldr.w	ip, [pc, #512]	; 8000d5c <HAL_GPIO_Init+0x214>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b5e:	4d7b      	ldr	r5, [pc, #492]	; (8000d4c <HAL_GPIO_Init+0x204>)
      switch (GPIO_Init->Mode)
 8000b60:	4e7b      	ldr	r6, [pc, #492]	; (8000d50 <HAL_GPIO_Init+0x208>)
 8000b62:	f8df e1fc 	ldr.w	lr, [pc, #508]	; 8000d60 <HAL_GPIO_Init+0x218>
 8000b66:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 8000d64 <HAL_GPIO_Init+0x21c>
 8000b6a:	e09a      	b.n	8000ca2 <HAL_GPIO_Init+0x15a>
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	e01e      	b.n	8000bae <HAL_GPIO_Init+0x66>
 8000b70:	42b4      	cmp	r4, r6
 8000b72:	d00c      	beq.n	8000b8e <HAL_GPIO_Init+0x46>
 8000b74:	d904      	bls.n	8000b80 <HAL_GPIO_Init+0x38>
 8000b76:	4574      	cmp	r4, lr
 8000b78:	d009      	beq.n	8000b8e <HAL_GPIO_Init+0x46>
 8000b7a:	4544      	cmp	r4, r8
 8000b7c:	d007      	beq.n	8000b8e <HAL_GPIO_Init+0x46>
 8000b7e:	e016      	b.n	8000bae <HAL_GPIO_Init+0x66>
 8000b80:	4f74      	ldr	r7, [pc, #464]	; (8000d54 <HAL_GPIO_Init+0x20c>)
 8000b82:	42bc      	cmp	r4, r7
 8000b84:	d003      	beq.n	8000b8e <HAL_GPIO_Init+0x46>
 8000b86:	f507 2770 	add.w	r7, r7, #983040	; 0xf0000
 8000b8a:	42bc      	cmp	r4, r7
 8000b8c:	d10b      	bne.n	8000ba6 <HAL_GPIO_Init+0x5e>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b8e:	688a      	ldr	r2, [r1, #8]
 8000b90:	2a00      	cmp	r2, #0
 8000b92:	f000 80ca 	beq.w	8000d2a <HAL_GPIO_Init+0x1e2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b96:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000b98:	bf0c      	ite	eq
 8000b9a:	f8c0 9010 	streq.w	r9, [r0, #16]
            GPIOx->BRR = ioposition;
 8000b9e:	f8c0 9014 	strne.w	r9, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ba2:	2208      	movs	r2, #8
 8000ba4:	e003      	b.n	8000bae <HAL_GPIO_Init+0x66>
      switch (GPIO_Init->Mode)
 8000ba6:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8000baa:	42bc      	cmp	r4, r7
 8000bac:	d0ef      	beq.n	8000b8e <HAL_GPIO_Init+0x46>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000bae:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8000bb2:	f200 80bc 	bhi.w	8000d2e <HAL_GPIO_Init+0x1e6>
 8000bb6:	4607      	mov	r7, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000bb8:	ea4f 0983 	mov.w	r9, r3, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000bbc:	683c      	ldr	r4, [r7, #0]
 8000bbe:	f04f 0b0f 	mov.w	fp, #15
 8000bc2:	fa0b fb09 	lsl.w	fp, fp, r9
 8000bc6:	ea24 040b 	bic.w	r4, r4, fp
 8000bca:	fa02 f909 	lsl.w	r9, r2, r9
 8000bce:	ea44 0409 	orr.w	r4, r4, r9
 8000bd2:	603c      	str	r4, [r7, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bd4:	684c      	ldr	r4, [r1, #4]
 8000bd6:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8000bda:	d05d      	beq.n	8000c98 <HAL_GPIO_Init+0x150>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000bdc:	f8dc 4018 	ldr.w	r4, [ip, #24]
 8000be0:	f044 0401 	orr.w	r4, r4, #1
 8000be4:	f8cc 4018 	str.w	r4, [ip, #24]
 8000be8:	f8dc 4018 	ldr.w	r4, [ip, #24]
 8000bec:	f004 0401 	and.w	r4, r4, #1
 8000bf0:	9401      	str	r4, [sp, #4]
 8000bf2:	9c01      	ldr	r4, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8000bf4:	f023 0403 	bic.w	r4, r3, #3
 8000bf8:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8000bfc:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 8000c00:	f8d4 9008 	ldr.w	r9, [r4, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c04:	f003 0703 	and.w	r7, r3, #3
 8000c08:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 8000c0c:	270f      	movs	r7, #15
 8000c0e:	fa07 f70b 	lsl.w	r7, r7, fp
 8000c12:	ea29 0907 	bic.w	r9, r9, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c16:	4f50      	ldr	r7, [pc, #320]	; (8000d58 <HAL_GPIO_Init+0x210>)
 8000c18:	42b8      	cmp	r0, r7
 8000c1a:	f000 808e 	beq.w	8000d3a <HAL_GPIO_Init+0x1f2>
 8000c1e:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000c22:	42b8      	cmp	r0, r7
 8000c24:	f000 808b 	beq.w	8000d3e <HAL_GPIO_Init+0x1f6>
 8000c28:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000c2c:	42b8      	cmp	r0, r7
 8000c2e:	f000 8088 	beq.w	8000d42 <HAL_GPIO_Init+0x1fa>
 8000c32:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000c36:	42b8      	cmp	r0, r7
 8000c38:	bf0c      	ite	eq
 8000c3a:	2703      	moveq	r7, #3
 8000c3c:	2704      	movne	r7, #4
 8000c3e:	fa07 f70b 	lsl.w	r7, r7, fp
 8000c42:	ea47 0709 	orr.w	r7, r7, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8000c46:	60a7      	str	r7, [r4, #8]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c48:	684c      	ldr	r4, [r1, #4]
 8000c4a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000c4e:	682c      	ldr	r4, [r5, #0]
 8000c50:	bf14      	ite	ne
 8000c52:	ea44 040a 	orrne.w	r4, r4, sl
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c56:	ea24 040a 	biceq.w	r4, r4, sl
 8000c5a:	602c      	str	r4, [r5, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c5c:	684c      	ldr	r4, [r1, #4]
 8000c5e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000c62:	686c      	ldr	r4, [r5, #4]
 8000c64:	bf14      	ite	ne
 8000c66:	ea44 040a 	orrne.w	r4, r4, sl
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c6a:	ea24 040a 	biceq.w	r4, r4, sl
 8000c6e:	606c      	str	r4, [r5, #4]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c70:	684c      	ldr	r4, [r1, #4]
 8000c72:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c76:	68ac      	ldr	r4, [r5, #8]
 8000c78:	bf14      	ite	ne
 8000c7a:	ea44 040a 	orrne.w	r4, r4, sl
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c7e:	ea24 040a 	biceq.w	r4, r4, sl
 8000c82:	60ac      	str	r4, [r5, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c84:	684c      	ldr	r4, [r1, #4]
 8000c86:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c8a:	68ec      	ldr	r4, [r5, #12]
 8000c8c:	bf14      	ite	ne
 8000c8e:	ea44 040a 	orrne.w	r4, r4, sl
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c92:	ea24 040a 	biceq.w	r4, r4, sl
 8000c96:	60ec      	str	r4, [r5, #12]
        }
      }
    }

	position++;
 8000c98:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c9a:	680f      	ldr	r7, [r1, #0]
 8000c9c:	fa37 f403 	lsrs.w	r4, r7, r3
 8000ca0:	d051      	beq.n	8000d46 <HAL_GPIO_Init+0x1fe>
    ioposition = (0x01uL << position);
 8000ca2:	f04f 0901 	mov.w	r9, #1
 8000ca6:	fa09 f903 	lsl.w	r9, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000caa:	ea09 0a07 	and.w	sl, r9, r7
    if (iocurrent == ioposition)
 8000cae:	ea39 0407 	bics.w	r4, r9, r7
 8000cb2:	d1f1      	bne.n	8000c98 <HAL_GPIO_Init+0x150>
      switch (GPIO_Init->Mode)
 8000cb4:	684c      	ldr	r4, [r1, #4]
 8000cb6:	2c12      	cmp	r4, #18
 8000cb8:	f63f af5a 	bhi.w	8000b70 <HAL_GPIO_Init+0x28>
 8000cbc:	2c12      	cmp	r4, #18
 8000cbe:	f63f af76 	bhi.w	8000bae <HAL_GPIO_Init+0x66>
 8000cc2:	a701      	add	r7, pc, #4	; (adr r7, 8000cc8 <HAL_GPIO_Init+0x180>)
 8000cc4:	f857 f024 	ldr.w	pc, [r7, r4, lsl #2]
 8000cc8:	08000b8f 	.word	0x08000b8f
 8000ccc:	08000d15 	.word	0x08000d15
 8000cd0:	08000d1f 	.word	0x08000d1f
 8000cd4:	08000b6d 	.word	0x08000b6d
 8000cd8:	08000baf 	.word	0x08000baf
 8000cdc:	08000baf 	.word	0x08000baf
 8000ce0:	08000baf 	.word	0x08000baf
 8000ce4:	08000baf 	.word	0x08000baf
 8000ce8:	08000baf 	.word	0x08000baf
 8000cec:	08000baf 	.word	0x08000baf
 8000cf0:	08000baf 	.word	0x08000baf
 8000cf4:	08000baf 	.word	0x08000baf
 8000cf8:	08000baf 	.word	0x08000baf
 8000cfc:	08000baf 	.word	0x08000baf
 8000d00:	08000baf 	.word	0x08000baf
 8000d04:	08000baf 	.word	0x08000baf
 8000d08:	08000baf 	.word	0x08000baf
 8000d0c:	08000d19 	.word	0x08000d19
 8000d10:	08000d25 	.word	0x08000d25
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d14:	68ca      	ldr	r2, [r1, #12]
          break;
 8000d16:	e74a      	b.n	8000bae <HAL_GPIO_Init+0x66>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d18:	68ca      	ldr	r2, [r1, #12]
 8000d1a:	3204      	adds	r2, #4
          break;
 8000d1c:	e747      	b.n	8000bae <HAL_GPIO_Init+0x66>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d1e:	68ca      	ldr	r2, [r1, #12]
 8000d20:	3208      	adds	r2, #8
          break;
 8000d22:	e744      	b.n	8000bae <HAL_GPIO_Init+0x66>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d24:	68ca      	ldr	r2, [r1, #12]
 8000d26:	320c      	adds	r2, #12
          break;
 8000d28:	e741      	b.n	8000bae <HAL_GPIO_Init+0x66>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d2a:	2204      	movs	r2, #4
 8000d2c:	e73f      	b.n	8000bae <HAL_GPIO_Init+0x66>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d2e:	1d07      	adds	r7, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d30:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8000d34:	f1a9 0920 	sub.w	r9, r9, #32
 8000d38:	e740      	b.n	8000bbc <HAL_GPIO_Init+0x74>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d3a:	2700      	movs	r7, #0
 8000d3c:	e77f      	b.n	8000c3e <HAL_GPIO_Init+0xf6>
 8000d3e:	2701      	movs	r7, #1
 8000d40:	e77d      	b.n	8000c3e <HAL_GPIO_Init+0xf6>
 8000d42:	2702      	movs	r7, #2
 8000d44:	e77b      	b.n	8000c3e <HAL_GPIO_Init+0xf6>
  }
}
 8000d46:	b003      	add	sp, #12
 8000d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d4c:	40010400 	.word	0x40010400
 8000d50:	10220000 	.word	0x10220000
 8000d54:	10120000 	.word	0x10120000
 8000d58:	40010800 	.word	0x40010800
 8000d5c:	40021000 	.word	0x40021000
 8000d60:	10310000 	.word	0x10310000
 8000d64:	10320000 	.word	0x10320000

08000d68 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000d68:	6883      	ldr	r3, [r0, #8]
 8000d6a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000d6c:	bf14      	ite	ne
 8000d6e:	2001      	movne	r0, #1
 8000d70:	2000      	moveq	r0, #0
 8000d72:	4770      	bx	lr

08000d74 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d74:	b10a      	cbz	r2, 8000d7a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d76:	6101      	str	r1, [r0, #16]
 8000d78:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d7a:	0409      	lsls	r1, r1, #16
 8000d7c:	6101      	str	r1, [r0, #16]
  }
}
 8000d7e:	4770      	bx	lr

08000d80 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000d80:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d82:	ea01 0203 	and.w	r2, r1, r3
 8000d86:	ea21 0103 	bic.w	r1, r1, r3
 8000d8a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000d8e:	6101      	str	r1, [r0, #16]
}
 8000d90:	4770      	bx	lr

08000d92 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000d92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d94:	b087      	sub	sp, #28
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000d96:	2800      	cmp	r0, #0
 8000d98:	d07a      	beq.n	8000e90 <HAL_PCD_Init+0xfe>
 8000d9a:	4605      	mov	r5, r0

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000d9c:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 8000da0:	b1db      	cbz	r3, 8000dda <HAL_PCD_Init+0x48>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000da2:	2303      	movs	r3, #3
 8000da4:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000da8:	6828      	ldr	r0, [r5, #0]
 8000daa:	f000 fecf 	bl	8001b4c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000dae:	462c      	mov	r4, r5
 8000db0:	f854 7b10 	ldr.w	r7, [r4], #16
 8000db4:	466e      	mov	r6, sp
 8000db6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000db8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000dba:	6823      	ldr	r3, [r4, #0]
 8000dbc:	6033      	str	r3, [r6, #0]
 8000dbe:	1d2b      	adds	r3, r5, #4
 8000dc0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000dc2:	4638      	mov	r0, r7
 8000dc4:	f000 febb 	bl	8001b3e <USB_CoreInit>
 8000dc8:	4604      	mov	r4, r0
 8000dca:	b158      	cbz	r0, 8000de4 <HAL_PCD_Init+0x52>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
    return HAL_ERROR;
 8000dd2:	2401      	movs	r4, #1
  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8000dd4:	4620      	mov	r0, r4
 8000dd6:	b007      	add	sp, #28
 8000dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8000dda:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 8000dde:	f7ff fdbf 	bl	8000960 <HAL_PCD_MspInit>
 8000de2:	e7de      	b.n	8000da2 <HAL_PCD_Init+0x10>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000de4:	2100      	movs	r1, #0
 8000de6:	6828      	ldr	r0, [r5, #0]
 8000de8:	f000 feba 	bl	8001b60 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000dec:	6868      	ldr	r0, [r5, #4]
 8000dee:	b388      	cbz	r0, 8000e54 <HAL_PCD_Init+0xc2>
 8000df0:	4623      	mov	r3, r4
    hpcd->IN_ep[i].is_in = 1U;
 8000df2:	2601      	movs	r6, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000df4:	2100      	movs	r1, #0
    hpcd->IN_ep[i].is_in = 1U;
 8000df6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8000dfa:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8000dfe:	f882 6029 	strb.w	r6, [r2, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 8000e02:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000e06:	86d3      	strh	r3, [r2, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000e08:	f882 102b 	strb.w	r1, [r2, #43]	; 0x2b
    hpcd->IN_ep[i].maxpacket = 0U;
 8000e0c:	6391      	str	r1, [r2, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000e0e:	63d1      	str	r1, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 8000e10:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8000e14:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8000e18:	6411      	str	r1, [r2, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	4283      	cmp	r3, r0
 8000e20:	d3e9      	bcc.n	8000df6 <HAL_PCD_Init+0x64>
    hpcd->OUT_ep[i].is_in = 0U;
 8000e22:	2200      	movs	r2, #0
 8000e24:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8000e28:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8000e2c:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 8000e30:	f883 4168 	strb.w	r4, [r3, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000e34:	f883 216b 	strb.w	r2, [r3, #363]	; 0x16b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000e38:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000e3c:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000e40:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8000e44:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8000e48:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e4c:	3401      	adds	r4, #1
 8000e4e:	b2e4      	uxtb	r4, r4
 8000e50:	4284      	cmp	r4, r0
 8000e52:	d3e7      	bcc.n	8000e24 <HAL_PCD_Init+0x92>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e54:	462c      	mov	r4, r5
 8000e56:	f854 7b10 	ldr.w	r7, [r4], #16
 8000e5a:	466e      	mov	r6, sp
 8000e5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e5e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000e60:	6823      	ldr	r3, [r4, #0]
 8000e62:	6033      	str	r3, [r6, #0]
 8000e64:	1d2b      	adds	r3, r5, #4
 8000e66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e68:	4638      	mov	r0, r7
 8000e6a:	f000 fe7b 	bl	8001b64 <USB_DevInit>
 8000e6e:	4604      	mov	r4, r0
 8000e70:	b120      	cbz	r0, 8000e7c <HAL_PCD_Init+0xea>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e72:	2302      	movs	r3, #2
 8000e74:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
    return HAL_ERROR;
 8000e78:	2401      	movs	r4, #1
 8000e7a:	e7ab      	b.n	8000dd4 <HAL_PCD_Init+0x42>
  hpcd->USB_Address = 0U;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000e82:	2301      	movs	r3, #1
 8000e84:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000e88:	6828      	ldr	r0, [r5, #0]
 8000e8a:	f000 fe7e 	bl	8001b8a <USB_DevDisconnect>
  return HAL_OK;
 8000e8e:	e7a1      	b.n	8000dd4 <HAL_PCD_Init+0x42>
    return HAL_ERROR;
 8000e90:	2401      	movs	r4, #1
 8000e92:	e79f      	b.n	8000dd4 <HAL_PCD_Init+0x42>

08000e94 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e94:	2800      	cmp	r0, #0
 8000e96:	f000 8201 	beq.w	800129c <HAL_RCC_OscConfig+0x408>
{
 8000e9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ea2:	6803      	ldr	r3, [r0, #0]
 8000ea4:	f013 0f01 	tst.w	r3, #1
 8000ea8:	d02c      	beq.n	8000f04 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000eaa:	4baa      	ldr	r3, [pc, #680]	; (8001154 <HAL_RCC_OscConfig+0x2c0>)
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f003 030c 	and.w	r3, r3, #12
 8000eb2:	2b04      	cmp	r3, #4
 8000eb4:	d01d      	beq.n	8000ef2 <HAL_RCC_OscConfig+0x5e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000eb6:	4ba7      	ldr	r3, [pc, #668]	; (8001154 <HAL_RCC_OscConfig+0x2c0>)
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f003 030c 	and.w	r3, r3, #12
 8000ebe:	2b08      	cmp	r3, #8
 8000ec0:	d012      	beq.n	8000ee8 <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ec2:	6863      	ldr	r3, [r4, #4]
 8000ec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ec8:	d041      	beq.n	8000f4e <HAL_RCC_OscConfig+0xba>
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d155      	bne.n	8000f7a <HAL_RCC_OscConfig+0xe6>
 8000ece:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000ed2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	e037      	b.n	8000f58 <HAL_RCC_OscConfig+0xc4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ee8:	4b9a      	ldr	r3, [pc, #616]	; (8001154 <HAL_RCC_OscConfig+0x2c0>)
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000ef0:	d0e7      	beq.n	8000ec2 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ef2:	4b98      	ldr	r3, [pc, #608]	; (8001154 <HAL_RCC_OscConfig+0x2c0>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000efa:	d003      	beq.n	8000f04 <HAL_RCC_OscConfig+0x70>
 8000efc:	6863      	ldr	r3, [r4, #4]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	f000 81ce 	beq.w	80012a0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f04:	6823      	ldr	r3, [r4, #0]
 8000f06:	f013 0f02 	tst.w	r3, #2
 8000f0a:	d075      	beq.n	8000ff8 <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f0c:	4b91      	ldr	r3, [pc, #580]	; (8001154 <HAL_RCC_OscConfig+0x2c0>)
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f013 0f0c 	tst.w	r3, #12
 8000f14:	d05f      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x142>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f16:	4b8f      	ldr	r3, [pc, #572]	; (8001154 <HAL_RCC_OscConfig+0x2c0>)
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f003 030c 	and.w	r3, r3, #12
 8000f1e:	2b08      	cmp	r3, #8
 8000f20:	d054      	beq.n	8000fcc <HAL_RCC_OscConfig+0x138>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f22:	6923      	ldr	r3, [r4, #16]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	f000 8089 	beq.w	800103c <HAL_RCC_OscConfig+0x1a8>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f2a:	4b8b      	ldr	r3, [pc, #556]	; (8001158 <HAL_RCC_OscConfig+0x2c4>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f30:	f7ff fd96 	bl	8000a60 <HAL_GetTick>
 8000f34:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f36:	4e87      	ldr	r6, [pc, #540]	; (8001154 <HAL_RCC_OscConfig+0x2c0>)
 8000f38:	6833      	ldr	r3, [r6, #0]
 8000f3a:	f013 0f02 	tst.w	r3, #2
 8000f3e:	d174      	bne.n	800102a <HAL_RCC_OscConfig+0x196>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f40:	f7ff fd8e 	bl	8000a60 <HAL_GetTick>
 8000f44:	1b40      	subs	r0, r0, r5
 8000f46:	2802      	cmp	r0, #2
 8000f48:	d9f6      	bls.n	8000f38 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_TIMEOUT;
 8000f4a:	2003      	movs	r0, #3
 8000f4c:	e1ad      	b.n	80012aa <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f4e:	4a81      	ldr	r2, [pc, #516]	; (8001154 <HAL_RCC_OscConfig+0x2c0>)
 8000f50:	6813      	ldr	r3, [r2, #0]
 8000f52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f56:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f58:	6863      	ldr	r3, [r4, #4]
 8000f5a:	b343      	cbz	r3, 8000fae <HAL_RCC_OscConfig+0x11a>
        tickstart = HAL_GetTick();
 8000f5c:	f7ff fd80 	bl	8000a60 <HAL_GetTick>
 8000f60:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f62:	4e7c      	ldr	r6, [pc, #496]	; (8001154 <HAL_RCC_OscConfig+0x2c0>)
 8000f64:	6833      	ldr	r3, [r6, #0]
 8000f66:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000f6a:	d1cb      	bne.n	8000f04 <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f6c:	f7ff fd78 	bl	8000a60 <HAL_GetTick>
 8000f70:	1b40      	subs	r0, r0, r5
 8000f72:	2864      	cmp	r0, #100	; 0x64
 8000f74:	d9f6      	bls.n	8000f64 <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 8000f76:	2003      	movs	r0, #3
 8000f78:	e197      	b.n	80012aa <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f7a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f7e:	d009      	beq.n	8000f94 <HAL_RCC_OscConfig+0x100>
 8000f80:	4b74      	ldr	r3, [pc, #464]	; (8001154 <HAL_RCC_OscConfig+0x2c0>)
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	e7e1      	b.n	8000f58 <HAL_RCC_OscConfig+0xc4>
 8000f94:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f98:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	e7d4      	b.n	8000f58 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 8000fae:	f7ff fd57 	bl	8000a60 <HAL_GetTick>
 8000fb2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fb4:	4e67      	ldr	r6, [pc, #412]	; (8001154 <HAL_RCC_OscConfig+0x2c0>)
 8000fb6:	6833      	ldr	r3, [r6, #0]
 8000fb8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000fbc:	d0a2      	beq.n	8000f04 <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fbe:	f7ff fd4f 	bl	8000a60 <HAL_GetTick>
 8000fc2:	1b40      	subs	r0, r0, r5
 8000fc4:	2864      	cmp	r0, #100	; 0x64
 8000fc6:	d9f6      	bls.n	8000fb6 <HAL_RCC_OscConfig+0x122>
            return HAL_TIMEOUT;
 8000fc8:	2003      	movs	r0, #3
 8000fca:	e16e      	b.n	80012aa <HAL_RCC_OscConfig+0x416>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000fcc:	4b61      	ldr	r3, [pc, #388]	; (8001154 <HAL_RCC_OscConfig+0x2c0>)
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000fd4:	d1a5      	bne.n	8000f22 <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fd6:	4b5f      	ldr	r3, [pc, #380]	; (8001154 <HAL_RCC_OscConfig+0x2c0>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f013 0f02 	tst.w	r3, #2
 8000fde:	d003      	beq.n	8000fe8 <HAL_RCC_OscConfig+0x154>
 8000fe0:	6923      	ldr	r3, [r4, #16]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	f040 815e 	bne.w	80012a4 <HAL_RCC_OscConfig+0x410>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fe8:	4a5a      	ldr	r2, [pc, #360]	; (8001154 <HAL_RCC_OscConfig+0x2c0>)
 8000fea:	6813      	ldr	r3, [r2, #0]
 8000fec:	6961      	ldr	r1, [r4, #20]
 8000fee:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000ff2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000ff6:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ff8:	6823      	ldr	r3, [r4, #0]
 8000ffa:	f013 0f08 	tst.w	r3, #8
 8000ffe:	d03c      	beq.n	800107a <HAL_RCC_OscConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001000:	69a3      	ldr	r3, [r4, #24]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d04f      	beq.n	80010a6 <HAL_RCC_OscConfig+0x212>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001006:	4b55      	ldr	r3, [pc, #340]	; (800115c <HAL_RCC_OscConfig+0x2c8>)
 8001008:	2201      	movs	r2, #1
 800100a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800100c:	f7ff fd28 	bl	8000a60 <HAL_GetTick>
 8001010:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001012:	4e50      	ldr	r6, [pc, #320]	; (8001154 <HAL_RCC_OscConfig+0x2c0>)
 8001014:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001016:	f013 0f02 	tst.w	r3, #2
 800101a:	d121      	bne.n	8001060 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800101c:	f7ff fd20 	bl	8000a60 <HAL_GetTick>
 8001020:	1b40      	subs	r0, r0, r5
 8001022:	2802      	cmp	r0, #2
 8001024:	d9f6      	bls.n	8001014 <HAL_RCC_OscConfig+0x180>
        {
          return HAL_TIMEOUT;
 8001026:	2003      	movs	r0, #3
 8001028:	e13f      	b.n	80012aa <HAL_RCC_OscConfig+0x416>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800102a:	4a4a      	ldr	r2, [pc, #296]	; (8001154 <HAL_RCC_OscConfig+0x2c0>)
 800102c:	6813      	ldr	r3, [r2, #0]
 800102e:	6961      	ldr	r1, [r4, #20]
 8001030:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001034:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001038:	6013      	str	r3, [r2, #0]
 800103a:	e7dd      	b.n	8000ff8 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 800103c:	4b46      	ldr	r3, [pc, #280]	; (8001158 <HAL_RCC_OscConfig+0x2c4>)
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001042:	f7ff fd0d 	bl	8000a60 <HAL_GetTick>
 8001046:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001048:	4e42      	ldr	r6, [pc, #264]	; (8001154 <HAL_RCC_OscConfig+0x2c0>)
 800104a:	6833      	ldr	r3, [r6, #0]
 800104c:	f013 0f02 	tst.w	r3, #2
 8001050:	d0d2      	beq.n	8000ff8 <HAL_RCC_OscConfig+0x164>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001052:	f7ff fd05 	bl	8000a60 <HAL_GetTick>
 8001056:	1b40      	subs	r0, r0, r5
 8001058:	2802      	cmp	r0, #2
 800105a:	d9f6      	bls.n	800104a <HAL_RCC_OscConfig+0x1b6>
            return HAL_TIMEOUT;
 800105c:	2003      	movs	r0, #3
 800105e:	e124      	b.n	80012aa <HAL_RCC_OscConfig+0x416>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001060:	4b3f      	ldr	r3, [pc, #252]	; (8001160 <HAL_RCC_OscConfig+0x2cc>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a3f      	ldr	r2, [pc, #252]	; (8001164 <HAL_RCC_OscConfig+0x2d0>)
 8001066:	fba2 2303 	umull	r2, r3, r2, r3
 800106a:	0a5b      	lsrs	r3, r3, #9
 800106c:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800106e:	bf00      	nop
  }
  while (Delay --);
 8001070:	9b01      	ldr	r3, [sp, #4]
 8001072:	1e5a      	subs	r2, r3, #1
 8001074:	9201      	str	r2, [sp, #4]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d1f9      	bne.n	800106e <HAL_RCC_OscConfig+0x1da>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800107a:	6823      	ldr	r3, [r4, #0]
 800107c:	f013 0f04 	tst.w	r3, #4
 8001080:	f000 809c 	beq.w	80011bc <HAL_RCC_OscConfig+0x328>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001084:	4b33      	ldr	r3, [pc, #204]	; (8001154 <HAL_RCC_OscConfig+0x2c0>)
 8001086:	69db      	ldr	r3, [r3, #28]
 8001088:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800108c:	d11d      	bne.n	80010ca <HAL_RCC_OscConfig+0x236>
      __HAL_RCC_PWR_CLK_ENABLE();
 800108e:	4b31      	ldr	r3, [pc, #196]	; (8001154 <HAL_RCC_OscConfig+0x2c0>)
 8001090:	69da      	ldr	r2, [r3, #28]
 8001092:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001096:	61da      	str	r2, [r3, #28]
 8001098:	69db      	ldr	r3, [r3, #28]
 800109a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800109e:	9300      	str	r3, [sp, #0]
 80010a0:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 80010a2:	2501      	movs	r5, #1
 80010a4:	e012      	b.n	80010cc <HAL_RCC_OscConfig+0x238>
      __HAL_RCC_LSI_DISABLE();
 80010a6:	4b2d      	ldr	r3, [pc, #180]	; (800115c <HAL_RCC_OscConfig+0x2c8>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80010ac:	f7ff fcd8 	bl	8000a60 <HAL_GetTick>
 80010b0:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010b2:	4e28      	ldr	r6, [pc, #160]	; (8001154 <HAL_RCC_OscConfig+0x2c0>)
 80010b4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80010b6:	f013 0f02 	tst.w	r3, #2
 80010ba:	d0de      	beq.n	800107a <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010bc:	f7ff fcd0 	bl	8000a60 <HAL_GetTick>
 80010c0:	1b40      	subs	r0, r0, r5
 80010c2:	2802      	cmp	r0, #2
 80010c4:	d9f6      	bls.n	80010b4 <HAL_RCC_OscConfig+0x220>
          return HAL_TIMEOUT;
 80010c6:	2003      	movs	r0, #3
 80010c8:	e0ef      	b.n	80012aa <HAL_RCC_OscConfig+0x416>
    FlagStatus       pwrclkchanged = RESET;
 80010ca:	2500      	movs	r5, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010cc:	4b26      	ldr	r3, [pc, #152]	; (8001168 <HAL_RCC_OscConfig+0x2d4>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80010d4:	d011      	beq.n	80010fa <HAL_RCC_OscConfig+0x266>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010d6:	68e3      	ldr	r3, [r4, #12]
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d022      	beq.n	8001122 <HAL_RCC_OscConfig+0x28e>
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d145      	bne.n	800116c <HAL_RCC_OscConfig+0x2d8>
 80010e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80010e4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80010e8:	6a1a      	ldr	r2, [r3, #32]
 80010ea:	f022 0201 	bic.w	r2, r2, #1
 80010ee:	621a      	str	r2, [r3, #32]
 80010f0:	6a1a      	ldr	r2, [r3, #32]
 80010f2:	f022 0204 	bic.w	r2, r2, #4
 80010f6:	621a      	str	r2, [r3, #32]
 80010f8:	e018      	b.n	800112c <HAL_RCC_OscConfig+0x298>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010fa:	4a1b      	ldr	r2, [pc, #108]	; (8001168 <HAL_RCC_OscConfig+0x2d4>)
 80010fc:	6813      	ldr	r3, [r2, #0]
 80010fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001102:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001104:	f7ff fcac 	bl	8000a60 <HAL_GetTick>
 8001108:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800110a:	4f17      	ldr	r7, [pc, #92]	; (8001168 <HAL_RCC_OscConfig+0x2d4>)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001112:	d1e0      	bne.n	80010d6 <HAL_RCC_OscConfig+0x242>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001114:	f7ff fca4 	bl	8000a60 <HAL_GetTick>
 8001118:	1b80      	subs	r0, r0, r6
 800111a:	2864      	cmp	r0, #100	; 0x64
 800111c:	d9f6      	bls.n	800110c <HAL_RCC_OscConfig+0x278>
          return HAL_TIMEOUT;
 800111e:	2003      	movs	r0, #3
 8001120:	e0c3      	b.n	80012aa <HAL_RCC_OscConfig+0x416>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001122:	4a0c      	ldr	r2, [pc, #48]	; (8001154 <HAL_RCC_OscConfig+0x2c0>)
 8001124:	6a13      	ldr	r3, [r2, #32]
 8001126:	f043 0301 	orr.w	r3, r3, #1
 800112a:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800112c:	68e3      	ldr	r3, [r4, #12]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d032      	beq.n	8001198 <HAL_RCC_OscConfig+0x304>
      tickstart = HAL_GetTick();
 8001132:	f7ff fc95 	bl	8000a60 <HAL_GetTick>
 8001136:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001138:	4f06      	ldr	r7, [pc, #24]	; (8001154 <HAL_RCC_OscConfig+0x2c0>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800113a:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800113e:	6a3b      	ldr	r3, [r7, #32]
 8001140:	f013 0f02 	tst.w	r3, #2
 8001144:	d139      	bne.n	80011ba <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001146:	f7ff fc8b 	bl	8000a60 <HAL_GetTick>
 800114a:	1b80      	subs	r0, r0, r6
 800114c:	4540      	cmp	r0, r8
 800114e:	d9f6      	bls.n	800113e <HAL_RCC_OscConfig+0x2aa>
          return HAL_TIMEOUT;
 8001150:	2003      	movs	r0, #3
 8001152:	e0aa      	b.n	80012aa <HAL_RCC_OscConfig+0x416>
 8001154:	40021000 	.word	0x40021000
 8001158:	42420000 	.word	0x42420000
 800115c:	42420480 	.word	0x42420480
 8001160:	20000000 	.word	0x20000000
 8001164:	10624dd3 	.word	0x10624dd3
 8001168:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800116c:	2b05      	cmp	r3, #5
 800116e:	d009      	beq.n	8001184 <HAL_RCC_OscConfig+0x2f0>
 8001170:	4b51      	ldr	r3, [pc, #324]	; (80012b8 <HAL_RCC_OscConfig+0x424>)
 8001172:	6a1a      	ldr	r2, [r3, #32]
 8001174:	f022 0201 	bic.w	r2, r2, #1
 8001178:	621a      	str	r2, [r3, #32]
 800117a:	6a1a      	ldr	r2, [r3, #32]
 800117c:	f022 0204 	bic.w	r2, r2, #4
 8001180:	621a      	str	r2, [r3, #32]
 8001182:	e7d3      	b.n	800112c <HAL_RCC_OscConfig+0x298>
 8001184:	4b4c      	ldr	r3, [pc, #304]	; (80012b8 <HAL_RCC_OscConfig+0x424>)
 8001186:	6a1a      	ldr	r2, [r3, #32]
 8001188:	f042 0204 	orr.w	r2, r2, #4
 800118c:	621a      	str	r2, [r3, #32]
 800118e:	6a1a      	ldr	r2, [r3, #32]
 8001190:	f042 0201 	orr.w	r2, r2, #1
 8001194:	621a      	str	r2, [r3, #32]
 8001196:	e7c9      	b.n	800112c <HAL_RCC_OscConfig+0x298>
      tickstart = HAL_GetTick();
 8001198:	f7ff fc62 	bl	8000a60 <HAL_GetTick>
 800119c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800119e:	4f46      	ldr	r7, [pc, #280]	; (80012b8 <HAL_RCC_OscConfig+0x424>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011a0:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011a4:	6a3b      	ldr	r3, [r7, #32]
 80011a6:	f013 0f02 	tst.w	r3, #2
 80011aa:	d006      	beq.n	80011ba <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011ac:	f7ff fc58 	bl	8000a60 <HAL_GetTick>
 80011b0:	1b80      	subs	r0, r0, r6
 80011b2:	4540      	cmp	r0, r8
 80011b4:	d9f6      	bls.n	80011a4 <HAL_RCC_OscConfig+0x310>
          return HAL_TIMEOUT;
 80011b6:	2003      	movs	r0, #3
 80011b8:	e077      	b.n	80012aa <HAL_RCC_OscConfig+0x416>
    if (pwrclkchanged == SET)
 80011ba:	b9e5      	cbnz	r5, 80011f6 <HAL_RCC_OscConfig+0x362>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011bc:	69e3      	ldr	r3, [r4, #28]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d072      	beq.n	80012a8 <HAL_RCC_OscConfig+0x414>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011c2:	4a3d      	ldr	r2, [pc, #244]	; (80012b8 <HAL_RCC_OscConfig+0x424>)
 80011c4:	6852      	ldr	r2, [r2, #4]
 80011c6:	f002 020c 	and.w	r2, r2, #12
 80011ca:	2a08      	cmp	r2, #8
 80011cc:	d056      	beq.n	800127c <HAL_RCC_OscConfig+0x3e8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d017      	beq.n	8001202 <HAL_RCC_OscConfig+0x36e>
        __HAL_RCC_PLL_DISABLE();
 80011d2:	4b3a      	ldr	r3, [pc, #232]	; (80012bc <HAL_RCC_OscConfig+0x428>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80011d8:	f7ff fc42 	bl	8000a60 <HAL_GetTick>
 80011dc:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011de:	4d36      	ldr	r5, [pc, #216]	; (80012b8 <HAL_RCC_OscConfig+0x424>)
 80011e0:	682b      	ldr	r3, [r5, #0]
 80011e2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80011e6:	d047      	beq.n	8001278 <HAL_RCC_OscConfig+0x3e4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011e8:	f7ff fc3a 	bl	8000a60 <HAL_GetTick>
 80011ec:	1b00      	subs	r0, r0, r4
 80011ee:	2802      	cmp	r0, #2
 80011f0:	d9f6      	bls.n	80011e0 <HAL_RCC_OscConfig+0x34c>
            return HAL_TIMEOUT;
 80011f2:	2003      	movs	r0, #3
 80011f4:	e059      	b.n	80012aa <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_PWR_CLK_DISABLE();
 80011f6:	4a30      	ldr	r2, [pc, #192]	; (80012b8 <HAL_RCC_OscConfig+0x424>)
 80011f8:	69d3      	ldr	r3, [r2, #28]
 80011fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011fe:	61d3      	str	r3, [r2, #28]
 8001200:	e7dc      	b.n	80011bc <HAL_RCC_OscConfig+0x328>
        __HAL_RCC_PLL_DISABLE();
 8001202:	4b2e      	ldr	r3, [pc, #184]	; (80012bc <HAL_RCC_OscConfig+0x428>)
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001208:	f7ff fc2a 	bl	8000a60 <HAL_GetTick>
 800120c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800120e:	4e2a      	ldr	r6, [pc, #168]	; (80012b8 <HAL_RCC_OscConfig+0x424>)
 8001210:	6833      	ldr	r3, [r6, #0]
 8001212:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001216:	d006      	beq.n	8001226 <HAL_RCC_OscConfig+0x392>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001218:	f7ff fc22 	bl	8000a60 <HAL_GetTick>
 800121c:	1b40      	subs	r0, r0, r5
 800121e:	2802      	cmp	r0, #2
 8001220:	d9f6      	bls.n	8001210 <HAL_RCC_OscConfig+0x37c>
            return HAL_TIMEOUT;
 8001222:	2003      	movs	r0, #3
 8001224:	e041      	b.n	80012aa <HAL_RCC_OscConfig+0x416>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001226:	6a23      	ldr	r3, [r4, #32]
 8001228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800122c:	d01a      	beq.n	8001264 <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800122e:	4922      	ldr	r1, [pc, #136]	; (80012b8 <HAL_RCC_OscConfig+0x424>)
 8001230:	684a      	ldr	r2, [r1, #4]
 8001232:	6a23      	ldr	r3, [r4, #32]
 8001234:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001236:	4303      	orrs	r3, r0
 8001238:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800123c:	4313      	orrs	r3, r2
 800123e:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8001240:	4b1e      	ldr	r3, [pc, #120]	; (80012bc <HAL_RCC_OscConfig+0x428>)
 8001242:	2201      	movs	r2, #1
 8001244:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001246:	f7ff fc0b 	bl	8000a60 <HAL_GetTick>
 800124a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800124c:	4d1a      	ldr	r5, [pc, #104]	; (80012b8 <HAL_RCC_OscConfig+0x424>)
 800124e:	682b      	ldr	r3, [r5, #0]
 8001250:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001254:	d10e      	bne.n	8001274 <HAL_RCC_OscConfig+0x3e0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001256:	f7ff fc03 	bl	8000a60 <HAL_GetTick>
 800125a:	1b00      	subs	r0, r0, r4
 800125c:	2802      	cmp	r0, #2
 800125e:	d9f6      	bls.n	800124e <HAL_RCC_OscConfig+0x3ba>
            return HAL_TIMEOUT;
 8001260:	2003      	movs	r0, #3
 8001262:	e022      	b.n	80012aa <HAL_RCC_OscConfig+0x416>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001264:	4a14      	ldr	r2, [pc, #80]	; (80012b8 <HAL_RCC_OscConfig+0x424>)
 8001266:	6853      	ldr	r3, [r2, #4]
 8001268:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800126c:	68a1      	ldr	r1, [r4, #8]
 800126e:	430b      	orrs	r3, r1
 8001270:	6053      	str	r3, [r2, #4]
 8001272:	e7dc      	b.n	800122e <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 8001274:	2000      	movs	r0, #0
 8001276:	e018      	b.n	80012aa <HAL_RCC_OscConfig+0x416>
 8001278:	2000      	movs	r0, #0
 800127a:	e016      	b.n	80012aa <HAL_RCC_OscConfig+0x416>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800127c:	2b01      	cmp	r3, #1
 800127e:	d017      	beq.n	80012b0 <HAL_RCC_OscConfig+0x41c>
        pll_config = RCC->CFGR;
 8001280:	4b0d      	ldr	r3, [pc, #52]	; (80012b8 <HAL_RCC_OscConfig+0x424>)
 8001282:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001284:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8001288:	6a22      	ldr	r2, [r4, #32]
 800128a:	4291      	cmp	r1, r2
 800128c:	d112      	bne.n	80012b4 <HAL_RCC_OscConfig+0x420>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800128e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001292:	6a60      	ldr	r0, [r4, #36]	; 0x24
        return HAL_ERROR;
 8001294:	1a18      	subs	r0, r3, r0
 8001296:	bf18      	it	ne
 8001298:	2001      	movne	r0, #1
 800129a:	e006      	b.n	80012aa <HAL_RCC_OscConfig+0x416>
    return HAL_ERROR;
 800129c:	2001      	movs	r0, #1
}
 800129e:	4770      	bx	lr
        return HAL_ERROR;
 80012a0:	2001      	movs	r0, #1
 80012a2:	e002      	b.n	80012aa <HAL_RCC_OscConfig+0x416>
        return HAL_ERROR;
 80012a4:	2001      	movs	r0, #1
 80012a6:	e000      	b.n	80012aa <HAL_RCC_OscConfig+0x416>
  return HAL_OK;
 80012a8:	2000      	movs	r0, #0
}
 80012aa:	b002      	add	sp, #8
 80012ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 80012b0:	2001      	movs	r0, #1
 80012b2:	e7fa      	b.n	80012aa <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
 80012b4:	2001      	movs	r0, #1
 80012b6:	e7f8      	b.n	80012aa <HAL_RCC_OscConfig+0x416>
 80012b8:	40021000 	.word	0x40021000
 80012bc:	42420060 	.word	0x42420060

080012c0 <HAL_RCC_GetSysClockFreq>:
{
 80012c0:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80012c2:	4b16      	ldr	r3, [pc, #88]	; (800131c <HAL_RCC_GetSysClockFreq+0x5c>)
 80012c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012c6:	f10d 0c18 	add.w	ip, sp, #24
 80012ca:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80012ce:	f240 2301 	movw	r3, #513	; 0x201
 80012d2:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 80012d6:	4b12      	ldr	r3, [pc, #72]	; (8001320 <HAL_RCC_GetSysClockFreq+0x60>)
 80012d8:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80012da:	f003 020c 	and.w	r2, r3, #12
 80012de:	2a08      	cmp	r2, #8
 80012e0:	d002      	beq.n	80012e8 <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 80012e2:	4810      	ldr	r0, [pc, #64]	; (8001324 <HAL_RCC_GetSysClockFreq+0x64>)
}
 80012e4:	b006      	add	sp, #24
 80012e6:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80012e8:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80012ec:	4462      	add	r2, ip
 80012ee:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80012f2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80012f6:	d00c      	beq.n	8001312 <HAL_RCC_GetSysClockFreq+0x52>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80012f8:	4b09      	ldr	r3, [pc, #36]	; (8001320 <HAL_RCC_GetSysClockFreq+0x60>)
 80012fa:	685b      	ldr	r3, [r3, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80012fc:	4809      	ldr	r0, [pc, #36]	; (8001324 <HAL_RCC_GetSysClockFreq+0x64>)
 80012fe:	fb00 f002 	mul.w	r0, r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001302:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8001306:	4463      	add	r3, ip
 8001308:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800130c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001310:	e7e8      	b.n	80012e4 <HAL_RCC_GetSysClockFreq+0x24>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001312:	4805      	ldr	r0, [pc, #20]	; (8001328 <HAL_RCC_GetSysClockFreq+0x68>)
 8001314:	fb00 f002 	mul.w	r0, r0, r2
 8001318:	e7e4      	b.n	80012e4 <HAL_RCC_GetSysClockFreq+0x24>
 800131a:	bf00      	nop
 800131c:	08001d24 	.word	0x08001d24
 8001320:	40021000 	.word	0x40021000
 8001324:	007a1200 	.word	0x007a1200
 8001328:	003d0900 	.word	0x003d0900

0800132c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800132c:	2800      	cmp	r0, #0
 800132e:	f000 80a2 	beq.w	8001476 <HAL_RCC_ClockConfig+0x14a>
{
 8001332:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001336:	460d      	mov	r5, r1
 8001338:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800133a:	4b53      	ldr	r3, [pc, #332]	; (8001488 <HAL_RCC_ClockConfig+0x15c>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0307 	and.w	r3, r3, #7
 8001342:	428b      	cmp	r3, r1
 8001344:	d20b      	bcs.n	800135e <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001346:	4a50      	ldr	r2, [pc, #320]	; (8001488 <HAL_RCC_ClockConfig+0x15c>)
 8001348:	6813      	ldr	r3, [r2, #0]
 800134a:	f023 0307 	bic.w	r3, r3, #7
 800134e:	430b      	orrs	r3, r1
 8001350:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001352:	6813      	ldr	r3, [r2, #0]
 8001354:	f003 0307 	and.w	r3, r3, #7
 8001358:	428b      	cmp	r3, r1
 800135a:	f040 808e 	bne.w	800147a <HAL_RCC_ClockConfig+0x14e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800135e:	6823      	ldr	r3, [r4, #0]
 8001360:	f013 0f02 	tst.w	r3, #2
 8001364:	d017      	beq.n	8001396 <HAL_RCC_ClockConfig+0x6a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001366:	f013 0f04 	tst.w	r3, #4
 800136a:	d004      	beq.n	8001376 <HAL_RCC_ClockConfig+0x4a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800136c:	4a47      	ldr	r2, [pc, #284]	; (800148c <HAL_RCC_ClockConfig+0x160>)
 800136e:	6853      	ldr	r3, [r2, #4]
 8001370:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001374:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001376:	6823      	ldr	r3, [r4, #0]
 8001378:	f013 0f08 	tst.w	r3, #8
 800137c:	d004      	beq.n	8001388 <HAL_RCC_ClockConfig+0x5c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800137e:	4a43      	ldr	r2, [pc, #268]	; (800148c <HAL_RCC_ClockConfig+0x160>)
 8001380:	6853      	ldr	r3, [r2, #4]
 8001382:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001386:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001388:	4a40      	ldr	r2, [pc, #256]	; (800148c <HAL_RCC_ClockConfig+0x160>)
 800138a:	6853      	ldr	r3, [r2, #4]
 800138c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001390:	68a1      	ldr	r1, [r4, #8]
 8001392:	430b      	orrs	r3, r1
 8001394:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001396:	6823      	ldr	r3, [r4, #0]
 8001398:	f013 0f01 	tst.w	r3, #1
 800139c:	d031      	beq.n	8001402 <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800139e:	6862      	ldr	r2, [r4, #4]
 80013a0:	2a01      	cmp	r2, #1
 80013a2:	d020      	beq.n	80013e6 <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013a4:	2a02      	cmp	r2, #2
 80013a6:	d025      	beq.n	80013f4 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013a8:	4b38      	ldr	r3, [pc, #224]	; (800148c <HAL_RCC_ClockConfig+0x160>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f013 0f02 	tst.w	r3, #2
 80013b0:	d065      	beq.n	800147e <HAL_RCC_ClockConfig+0x152>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013b2:	4936      	ldr	r1, [pc, #216]	; (800148c <HAL_RCC_ClockConfig+0x160>)
 80013b4:	684b      	ldr	r3, [r1, #4]
 80013b6:	f023 0303 	bic.w	r3, r3, #3
 80013ba:	4313      	orrs	r3, r2
 80013bc:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 80013be:	f7ff fb4f 	bl	8000a60 <HAL_GetTick>
 80013c2:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013c4:	4f31      	ldr	r7, [pc, #196]	; (800148c <HAL_RCC_ClockConfig+0x160>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013c6:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f003 030c 	and.w	r3, r3, #12
 80013d0:	6862      	ldr	r2, [r4, #4]
 80013d2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80013d6:	d014      	beq.n	8001402 <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013d8:	f7ff fb42 	bl	8000a60 <HAL_GetTick>
 80013dc:	1b80      	subs	r0, r0, r6
 80013de:	4540      	cmp	r0, r8
 80013e0:	d9f3      	bls.n	80013ca <HAL_RCC_ClockConfig+0x9e>
        return HAL_TIMEOUT;
 80013e2:	2003      	movs	r0, #3
 80013e4:	e045      	b.n	8001472 <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013e6:	4b29      	ldr	r3, [pc, #164]	; (800148c <HAL_RCC_ClockConfig+0x160>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80013ee:	d1e0      	bne.n	80013b2 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80013f0:	2001      	movs	r0, #1
 80013f2:	e03e      	b.n	8001472 <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013f4:	4b25      	ldr	r3, [pc, #148]	; (800148c <HAL_RCC_ClockConfig+0x160>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80013fc:	d1d9      	bne.n	80013b2 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80013fe:	2001      	movs	r0, #1
 8001400:	e037      	b.n	8001472 <HAL_RCC_ClockConfig+0x146>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001402:	4b21      	ldr	r3, [pc, #132]	; (8001488 <HAL_RCC_ClockConfig+0x15c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0307 	and.w	r3, r3, #7
 800140a:	42ab      	cmp	r3, r5
 800140c:	d90a      	bls.n	8001424 <HAL_RCC_ClockConfig+0xf8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800140e:	4a1e      	ldr	r2, [pc, #120]	; (8001488 <HAL_RCC_ClockConfig+0x15c>)
 8001410:	6813      	ldr	r3, [r2, #0]
 8001412:	f023 0307 	bic.w	r3, r3, #7
 8001416:	432b      	orrs	r3, r5
 8001418:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800141a:	6813      	ldr	r3, [r2, #0]
 800141c:	f003 0307 	and.w	r3, r3, #7
 8001420:	42ab      	cmp	r3, r5
 8001422:	d12e      	bne.n	8001482 <HAL_RCC_ClockConfig+0x156>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001424:	6823      	ldr	r3, [r4, #0]
 8001426:	f013 0f04 	tst.w	r3, #4
 800142a:	d006      	beq.n	800143a <HAL_RCC_ClockConfig+0x10e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800142c:	4a17      	ldr	r2, [pc, #92]	; (800148c <HAL_RCC_ClockConfig+0x160>)
 800142e:	6853      	ldr	r3, [r2, #4]
 8001430:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001434:	68e1      	ldr	r1, [r4, #12]
 8001436:	430b      	orrs	r3, r1
 8001438:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800143a:	6823      	ldr	r3, [r4, #0]
 800143c:	f013 0f08 	tst.w	r3, #8
 8001440:	d007      	beq.n	8001452 <HAL_RCC_ClockConfig+0x126>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001442:	4a12      	ldr	r2, [pc, #72]	; (800148c <HAL_RCC_ClockConfig+0x160>)
 8001444:	6853      	ldr	r3, [r2, #4]
 8001446:	6921      	ldr	r1, [r4, #16]
 8001448:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800144c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001450:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001452:	f7ff ff35 	bl	80012c0 <HAL_RCC_GetSysClockFreq>
 8001456:	4b0d      	ldr	r3, [pc, #52]	; (800148c <HAL_RCC_ClockConfig+0x160>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800145e:	4a0c      	ldr	r2, [pc, #48]	; (8001490 <HAL_RCC_ClockConfig+0x164>)
 8001460:	5cd3      	ldrb	r3, [r2, r3]
 8001462:	40d8      	lsrs	r0, r3
 8001464:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <HAL_RCC_ClockConfig+0x168>)
 8001466:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001468:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <HAL_RCC_ClockConfig+0x16c>)
 800146a:	6818      	ldr	r0, [r3, #0]
 800146c:	f7ff fab4 	bl	80009d8 <HAL_InitTick>
  return HAL_OK;
 8001470:	2000      	movs	r0, #0
}
 8001472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8001476:	2001      	movs	r0, #1
}
 8001478:	4770      	bx	lr
    return HAL_ERROR;
 800147a:	2001      	movs	r0, #1
 800147c:	e7f9      	b.n	8001472 <HAL_RCC_ClockConfig+0x146>
        return HAL_ERROR;
 800147e:	2001      	movs	r0, #1
 8001480:	e7f7      	b.n	8001472 <HAL_RCC_ClockConfig+0x146>
    return HAL_ERROR;
 8001482:	2001      	movs	r0, #1
 8001484:	e7f5      	b.n	8001472 <HAL_RCC_ClockConfig+0x146>
 8001486:	bf00      	nop
 8001488:	40022000 	.word	0x40022000
 800148c:	40021000 	.word	0x40021000
 8001490:	08001d0c 	.word	0x08001d0c
 8001494:	20000000 	.word	0x20000000
 8001498:	20000008 	.word	0x20000008

0800149c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800149c:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <HAL_RCC_GetPCLK1Freq+0x14>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80014a4:	4a03      	ldr	r2, [pc, #12]	; (80014b4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80014a6:	5cd3      	ldrb	r3, [r2, r3]
 80014a8:	4a03      	ldr	r2, [pc, #12]	; (80014b8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80014aa:	6810      	ldr	r0, [r2, #0]
}
 80014ac:	40d8      	lsrs	r0, r3
 80014ae:	4770      	bx	lr
 80014b0:	40021000 	.word	0x40021000
 80014b4:	08001d1c 	.word	0x08001d1c
 80014b8:	20000000 	.word	0x20000000

080014bc <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80014bc:	4b04      	ldr	r3, [pc, #16]	; (80014d0 <HAL_RCC_GetPCLK2Freq+0x14>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80014c4:	4a03      	ldr	r2, [pc, #12]	; (80014d4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80014c6:	5cd3      	ldrb	r3, [r2, r3]
 80014c8:	4a03      	ldr	r2, [pc, #12]	; (80014d8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80014ca:	6810      	ldr	r0, [r2, #0]
}
 80014cc:	40d8      	lsrs	r0, r3
 80014ce:	4770      	bx	lr
 80014d0:	40021000 	.word	0x40021000
 80014d4:	08001d1c 	.word	0x08001d1c
 80014d8:	20000000 	.word	0x20000000

080014dc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80014dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014e0:	b082      	sub	sp, #8
 80014e2:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80014e4:	6803      	ldr	r3, [r0, #0]
 80014e6:	f013 0f01 	tst.w	r3, #1
 80014ea:	d034      	beq.n	8001556 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014ec:	4b3e      	ldr	r3, [pc, #248]	; (80015e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80014ee:	69db      	ldr	r3, [r3, #28]
 80014f0:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80014f4:	d147      	bne.n	8001586 <HAL_RCCEx_PeriphCLKConfig+0xaa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014f6:	4b3c      	ldr	r3, [pc, #240]	; (80015e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80014f8:	69da      	ldr	r2, [r3, #28]
 80014fa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014fe:	61da      	str	r2, [r3, #28]
 8001500:	69db      	ldr	r3, [r3, #28]
 8001502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001506:	9301      	str	r3, [sp, #4]
 8001508:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800150a:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800150c:	4b37      	ldr	r3, [pc, #220]	; (80015ec <HAL_RCCEx_PeriphCLKConfig+0x110>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001514:	d039      	beq.n	800158a <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001516:	4b34      	ldr	r3, [pc, #208]	; (80015e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001518:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800151a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800151e:	d011      	beq.n	8001544 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8001520:	6862      	ldr	r2, [r4, #4]
 8001522:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001526:	429a      	cmp	r2, r3
 8001528:	d00c      	beq.n	8001544 <HAL_RCCEx_PeriphCLKConfig+0x68>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800152a:	4a2f      	ldr	r2, [pc, #188]	; (80015e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800152c:	6a13      	ldr	r3, [r2, #32]
 800152e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001532:	492f      	ldr	r1, [pc, #188]	; (80015f0 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8001534:	2601      	movs	r6, #1
 8001536:	600e      	str	r6, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001538:	2600      	movs	r6, #0
 800153a:	600e      	str	r6, [r1, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800153c:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800153e:	f013 0f01 	tst.w	r3, #1
 8001542:	d136      	bne.n	80015b2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001544:	4a28      	ldr	r2, [pc, #160]	; (80015e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001546:	6a13      	ldr	r3, [r2, #32]
 8001548:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800154c:	6861      	ldr	r1, [r4, #4]
 800154e:	430b      	orrs	r3, r1
 8001550:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001552:	2d00      	cmp	r5, #0
 8001554:	d13e      	bne.n	80015d4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001556:	6823      	ldr	r3, [r4, #0]
 8001558:	f013 0f02 	tst.w	r3, #2
 800155c:	d006      	beq.n	800156c <HAL_RCCEx_PeriphCLKConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800155e:	4a22      	ldr	r2, [pc, #136]	; (80015e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001560:	6853      	ldr	r3, [r2, #4]
 8001562:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001566:	68a1      	ldr	r1, [r4, #8]
 8001568:	430b      	orrs	r3, r1
 800156a:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800156c:	6823      	ldr	r3, [r4, #0]
 800156e:	f013 0f10 	tst.w	r3, #16
 8001572:	d034      	beq.n	80015de <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001574:	4a1c      	ldr	r2, [pc, #112]	; (80015e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001576:	6853      	ldr	r3, [r2, #4]
 8001578:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800157c:	68e1      	ldr	r1, [r4, #12]
 800157e:	430b      	orrs	r3, r1
 8001580:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001582:	2000      	movs	r0, #0
 8001584:	e02c      	b.n	80015e0 <HAL_RCCEx_PeriphCLKConfig+0x104>
    FlagStatus       pwrclkchanged = RESET;
 8001586:	2500      	movs	r5, #0
 8001588:	e7c0      	b.n	800150c <HAL_RCCEx_PeriphCLKConfig+0x30>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800158a:	4a18      	ldr	r2, [pc, #96]	; (80015ec <HAL_RCCEx_PeriphCLKConfig+0x110>)
 800158c:	6813      	ldr	r3, [r2, #0]
 800158e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001592:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001594:	f7ff fa64 	bl	8000a60 <HAL_GetTick>
 8001598:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800159a:	4f14      	ldr	r7, [pc, #80]	; (80015ec <HAL_RCCEx_PeriphCLKConfig+0x110>)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	f413 7f80 	tst.w	r3, #256	; 0x100
 80015a2:	d1b8      	bne.n	8001516 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015a4:	f7ff fa5c 	bl	8000a60 <HAL_GetTick>
 80015a8:	1b80      	subs	r0, r0, r6
 80015aa:	2864      	cmp	r0, #100	; 0x64
 80015ac:	d9f6      	bls.n	800159c <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 80015ae:	2003      	movs	r0, #3
 80015b0:	e016      	b.n	80015e0 <HAL_RCCEx_PeriphCLKConfig+0x104>
        tickstart = HAL_GetTick();
 80015b2:	f7ff fa55 	bl	8000a60 <HAL_GetTick>
 80015b6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015b8:	4f0b      	ldr	r7, [pc, #44]	; (80015e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015ba:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015be:	6a3b      	ldr	r3, [r7, #32]
 80015c0:	f013 0f02 	tst.w	r3, #2
 80015c4:	d1be      	bne.n	8001544 <HAL_RCCEx_PeriphCLKConfig+0x68>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015c6:	f7ff fa4b 	bl	8000a60 <HAL_GetTick>
 80015ca:	1b80      	subs	r0, r0, r6
 80015cc:	4540      	cmp	r0, r8
 80015ce:	d9f6      	bls.n	80015be <HAL_RCCEx_PeriphCLKConfig+0xe2>
            return HAL_TIMEOUT;
 80015d0:	2003      	movs	r0, #3
 80015d2:	e005      	b.n	80015e0 <HAL_RCCEx_PeriphCLKConfig+0x104>
      __HAL_RCC_PWR_CLK_DISABLE();
 80015d4:	69d3      	ldr	r3, [r2, #28]
 80015d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015da:	61d3      	str	r3, [r2, #28]
 80015dc:	e7bb      	b.n	8001556 <HAL_RCCEx_PeriphCLKConfig+0x7a>
  return HAL_OK;
 80015de:	2000      	movs	r0, #0
}
 80015e0:	b002      	add	sp, #8
 80015e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80015e6:	bf00      	nop
 80015e8:	40021000 	.word	0x40021000
 80015ec:	40007000 	.word	0x40007000
 80015f0:	42420440 	.word	0x42420440

080015f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80015f4:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80015f6:	6a03      	ldr	r3, [r0, #32]
 80015f8:	f023 0301 	bic.w	r3, r3, #1
 80015fc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80015fe:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001600:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001602:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001604:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001608:	680d      	ldr	r5, [r1, #0]
 800160a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800160c:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001610:	688d      	ldr	r5, [r1, #8]
 8001612:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001614:	4d0b      	ldr	r5, [pc, #44]	; (8001644 <TIM_OC1_SetConfig+0x50>)
 8001616:	42a8      	cmp	r0, r5
 8001618:	d006      	beq.n	8001628 <TIM_OC1_SetConfig+0x34>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800161a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800161c:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800161e:	684a      	ldr	r2, [r1, #4]
 8001620:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001622:	6203      	str	r3, [r0, #32]
}
 8001624:	bc70      	pop	{r4, r5, r6}
 8001626:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8001628:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800162c:	68cd      	ldr	r5, [r1, #12]
 800162e:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8001630:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001634:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8001638:	694d      	ldr	r5, [r1, #20]
 800163a:	698e      	ldr	r6, [r1, #24]
 800163c:	4335      	orrs	r5, r6
 800163e:	432c      	orrs	r4, r5
 8001640:	e7eb      	b.n	800161a <TIM_OC1_SetConfig+0x26>
 8001642:	bf00      	nop
 8001644:	40012c00 	.word	0x40012c00

08001648 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001648:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800164a:	6a03      	ldr	r3, [r0, #32]
 800164c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001650:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001652:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001654:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001656:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001658:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800165c:	680d      	ldr	r5, [r1, #0]
 800165e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001660:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001664:	688d      	ldr	r5, [r1, #8]
 8001666:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800166a:	4d0c      	ldr	r5, [pc, #48]	; (800169c <TIM_OC3_SetConfig+0x54>)
 800166c:	42a8      	cmp	r0, r5
 800166e:	d006      	beq.n	800167e <TIM_OC3_SetConfig+0x36>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001670:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001672:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001674:	684a      	ldr	r2, [r1, #4]
 8001676:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001678:	6203      	str	r3, [r0, #32]
}
 800167a:	bc70      	pop	{r4, r5, r6}
 800167c:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 800167e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001682:	68cd      	ldr	r5, [r1, #12]
 8001684:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8001688:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800168c:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001690:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001692:	698e      	ldr	r6, [r1, #24]
 8001694:	4335      	orrs	r5, r6
 8001696:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 800169a:	e7e9      	b.n	8001670 <TIM_OC3_SetConfig+0x28>
 800169c:	40012c00 	.word	0x40012c00

080016a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80016a0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80016a2:	6a03      	ldr	r3, [r0, #32]
 80016a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80016a8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80016aa:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80016ac:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80016ae:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80016b0:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80016b4:	680d      	ldr	r5, [r1, #0]
 80016b6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80016ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80016be:	688d      	ldr	r5, [r1, #8]
 80016c0:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80016c4:	4d07      	ldr	r5, [pc, #28]	; (80016e4 <TIM_OC4_SetConfig+0x44>)
 80016c6:	42a8      	cmp	r0, r5
 80016c8:	d006      	beq.n	80016d8 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80016ca:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80016cc:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80016ce:	684a      	ldr	r2, [r1, #4]
 80016d0:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80016d2:	6203      	str	r3, [r0, #32]
}
 80016d4:	bc30      	pop	{r4, r5}
 80016d6:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 80016d8:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80016dc:	694d      	ldr	r5, [r1, #20]
 80016de:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80016e2:	e7f2      	b.n	80016ca <TIM_OC4_SetConfig+0x2a>
 80016e4:	40012c00 	.word	0x40012c00

080016e8 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80016e8:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80016ea:	4a25      	ldr	r2, [pc, #148]	; (8001780 <TIM_Base_SetConfig+0x98>)
 80016ec:	4290      	cmp	r0, r2
 80016ee:	d014      	beq.n	800171a <TIM_Base_SetConfig+0x32>
 80016f0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80016f4:	d02b      	beq.n	800174e <TIM_Base_SetConfig+0x66>
 80016f6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80016fa:	4290      	cmp	r0, r2
 80016fc:	d022      	beq.n	8001744 <TIM_Base_SetConfig+0x5c>
 80016fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001702:	4290      	cmp	r0, r2
 8001704:	d037      	beq.n	8001776 <TIM_Base_SetConfig+0x8e>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001706:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800170a:	694a      	ldr	r2, [r1, #20]
 800170c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800170e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001710:	688b      	ldr	r3, [r1, #8]
 8001712:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001714:	680b      	ldr	r3, [r1, #0]
 8001716:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001718:	e02a      	b.n	8001770 <TIM_Base_SetConfig+0x88>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800171a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800171e:	684a      	ldr	r2, [r1, #4]
 8001720:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8001722:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001726:	68ca      	ldr	r2, [r1, #12]
 8001728:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800172a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800172e:	694a      	ldr	r2, [r1, #20]
 8001730:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001732:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001734:	688b      	ldr	r3, [r1, #8]
 8001736:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001738:	680b      	ldr	r3, [r1, #0]
 800173a:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800173c:	690a      	ldr	r2, [r1, #16]
 800173e:	4b10      	ldr	r3, [pc, #64]	; (8001780 <TIM_Base_SetConfig+0x98>)
 8001740:	631a      	str	r2, [r3, #48]	; 0x30
 8001742:	e015      	b.n	8001770 <TIM_Base_SetConfig+0x88>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001744:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001748:	684a      	ldr	r2, [r1, #4]
 800174a:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800174c:	e003      	b.n	8001756 <TIM_Base_SetConfig+0x6e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800174e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001752:	684a      	ldr	r2, [r1, #4]
 8001754:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8001756:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800175a:	68ca      	ldr	r2, [r1, #12]
 800175c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800175e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001762:	694a      	ldr	r2, [r1, #20]
 8001764:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001766:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001768:	688b      	ldr	r3, [r1, #8]
 800176a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800176c:	680b      	ldr	r3, [r1, #0]
 800176e:	6283      	str	r3, [r0, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8001770:	2301      	movs	r3, #1
 8001772:	6143      	str	r3, [r0, #20]
}
 8001774:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800177a:	684a      	ldr	r2, [r1, #4]
 800177c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800177e:	e7ea      	b.n	8001756 <TIM_Base_SetConfig+0x6e>
 8001780:	40012c00 	.word	0x40012c00

08001784 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8001784:	b340      	cbz	r0, 80017d8 <HAL_TIM_PWM_Init+0x54>
{
 8001786:	b510      	push	{r4, lr}
 8001788:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800178a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800178e:	b1f3      	cbz	r3, 80017ce <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8001790:	2302      	movs	r3, #2
 8001792:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001796:	4621      	mov	r1, r4
 8001798:	f851 0b04 	ldr.w	r0, [r1], #4
 800179c:	f7ff ffa4 	bl	80016e8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80017a0:	2301      	movs	r3, #1
 80017a2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017a6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80017aa:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80017ae:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80017b2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017b6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80017ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80017be:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80017c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80017c6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80017ca:	2000      	movs	r0, #0
}
 80017cc:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80017ce:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80017d2:	f7fe feff 	bl	80005d4 <HAL_TIM_PWM_MspInit>
 80017d6:	e7db      	b.n	8001790 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 80017d8:	2001      	movs	r0, #1
}
 80017da:	4770      	bx	lr

080017dc <TIM_OC2_SetConfig>:
{
 80017dc:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80017de:	6a03      	ldr	r3, [r0, #32]
 80017e0:	f023 0310 	bic.w	r3, r3, #16
 80017e4:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80017e6:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80017e8:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80017ea:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80017ec:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80017f0:	680d      	ldr	r5, [r1, #0]
 80017f2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 80017f6:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80017fa:	688d      	ldr	r5, [r1, #8]
 80017fc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001800:	4d0c      	ldr	r5, [pc, #48]	; (8001834 <TIM_OC2_SetConfig+0x58>)
 8001802:	42a8      	cmp	r0, r5
 8001804:	d006      	beq.n	8001814 <TIM_OC2_SetConfig+0x38>
  TIMx->CR2 = tmpcr2;
 8001806:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001808:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800180a:	684a      	ldr	r2, [r1, #4]
 800180c:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800180e:	6203      	str	r3, [r0, #32]
}
 8001810:	bc70      	pop	{r4, r5, r6}
 8001812:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8001814:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001818:	68cd      	ldr	r5, [r1, #12]
 800181a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800181e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001822:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001826:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001828:	698e      	ldr	r6, [r1, #24]
 800182a:	4335      	orrs	r5, r6
 800182c:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8001830:	e7e9      	b.n	8001806 <TIM_OC2_SetConfig+0x2a>
 8001832:	bf00      	nop
 8001834:	40012c00 	.word	0x40012c00

08001838 <HAL_TIM_PWM_ConfigChannel>:
{
 8001838:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800183a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800183e:	2b01      	cmp	r3, #1
 8001840:	d060      	beq.n	8001904 <HAL_TIM_PWM_ConfigChannel+0xcc>
 8001842:	4604      	mov	r4, r0
 8001844:	460d      	mov	r5, r1
 8001846:	2301      	movs	r3, #1
 8001848:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 800184c:	2a0c      	cmp	r2, #12
 800184e:	d81a      	bhi.n	8001886 <HAL_TIM_PWM_ConfigChannel+0x4e>
 8001850:	e8df f002 	tbb	[pc, r2]
 8001854:	19191907 	.word	0x19191907
 8001858:	1919191d 	.word	0x1919191d
 800185c:	19191931 	.word	0x19191931
 8001860:	44          	.byte	0x44
 8001861:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001862:	6800      	ldr	r0, [r0, #0]
 8001864:	f7ff fec6 	bl	80015f4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001868:	6822      	ldr	r2, [r4, #0]
 800186a:	6993      	ldr	r3, [r2, #24]
 800186c:	f043 0308 	orr.w	r3, r3, #8
 8001870:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001872:	6822      	ldr	r2, [r4, #0]
 8001874:	6993      	ldr	r3, [r2, #24]
 8001876:	f023 0304 	bic.w	r3, r3, #4
 800187a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800187c:	6822      	ldr	r2, [r4, #0]
 800187e:	6993      	ldr	r3, [r2, #24]
 8001880:	6929      	ldr	r1, [r5, #16]
 8001882:	430b      	orrs	r3, r1
 8001884:	6193      	str	r3, [r2, #24]
  __HAL_UNLOCK(htim);
 8001886:	2000      	movs	r0, #0
 8001888:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800188c:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800188e:	6800      	ldr	r0, [r0, #0]
 8001890:	f7ff ffa4 	bl	80017dc <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001894:	6822      	ldr	r2, [r4, #0]
 8001896:	6993      	ldr	r3, [r2, #24]
 8001898:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800189c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800189e:	6822      	ldr	r2, [r4, #0]
 80018a0:	6993      	ldr	r3, [r2, #24]
 80018a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80018a6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80018a8:	6822      	ldr	r2, [r4, #0]
 80018aa:	6993      	ldr	r3, [r2, #24]
 80018ac:	6929      	ldr	r1, [r5, #16]
 80018ae:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80018b2:	6193      	str	r3, [r2, #24]
      break;
 80018b4:	e7e7      	b.n	8001886 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80018b6:	6800      	ldr	r0, [r0, #0]
 80018b8:	f7ff fec6 	bl	8001648 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80018bc:	6822      	ldr	r2, [r4, #0]
 80018be:	69d3      	ldr	r3, [r2, #28]
 80018c0:	f043 0308 	orr.w	r3, r3, #8
 80018c4:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80018c6:	6822      	ldr	r2, [r4, #0]
 80018c8:	69d3      	ldr	r3, [r2, #28]
 80018ca:	f023 0304 	bic.w	r3, r3, #4
 80018ce:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80018d0:	6822      	ldr	r2, [r4, #0]
 80018d2:	69d3      	ldr	r3, [r2, #28]
 80018d4:	6929      	ldr	r1, [r5, #16]
 80018d6:	430b      	orrs	r3, r1
 80018d8:	61d3      	str	r3, [r2, #28]
      break;
 80018da:	e7d4      	b.n	8001886 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80018dc:	6800      	ldr	r0, [r0, #0]
 80018de:	f7ff fedf 	bl	80016a0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80018e2:	6822      	ldr	r2, [r4, #0]
 80018e4:	69d3      	ldr	r3, [r2, #28]
 80018e6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018ea:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80018ec:	6822      	ldr	r2, [r4, #0]
 80018ee:	69d3      	ldr	r3, [r2, #28]
 80018f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80018f4:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80018f6:	6822      	ldr	r2, [r4, #0]
 80018f8:	69d3      	ldr	r3, [r2, #28]
 80018fa:	6929      	ldr	r1, [r5, #16]
 80018fc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001900:	61d3      	str	r3, [r2, #28]
      break;
 8001902:	e7c0      	b.n	8001886 <HAL_TIM_PWM_ConfigChannel+0x4e>
  __HAL_LOCK(htim);
 8001904:	2002      	movs	r0, #2
 8001906:	e7c1      	b.n	800188c <HAL_TIM_PWM_ConfigChannel+0x54>

08001908 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001908:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800190a:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800190e:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001910:	2401      	movs	r4, #1
 8001912:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8001914:	ea23 0304 	bic.w	r3, r3, r4
 8001918:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800191a:	6a03      	ldr	r3, [r0, #32]
 800191c:	408a      	lsls	r2, r1
 800191e:	431a      	orrs	r2, r3
 8001920:	6202      	str	r2, [r0, #32]
}
 8001922:	bc10      	pop	{r4}
 8001924:	4770      	bx	lr
	...

08001928 <HAL_TIM_PWM_Start>:
{
 8001928:	b510      	push	{r4, lr}
 800192a:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800192c:	460b      	mov	r3, r1
 800192e:	bb01      	cbnz	r1, 8001972 <HAL_TIM_PWM_Start+0x4a>
 8001930:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8001934:	b2d2      	uxtb	r2, r2
 8001936:	2a01      	cmp	r2, #1
 8001938:	d14c      	bne.n	80019d4 <HAL_TIM_PWM_Start+0xac>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800193a:	2202      	movs	r2, #2
 800193c:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001940:	2201      	movs	r2, #1
 8001942:	4619      	mov	r1, r3
 8001944:	6820      	ldr	r0, [r4, #0]
 8001946:	f7ff ffdf 	bl	8001908 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800194a:	6823      	ldr	r3, [r4, #0]
 800194c:	4a26      	ldr	r2, [pc, #152]	; (80019e8 <HAL_TIM_PWM_Start+0xc0>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d02e      	beq.n	80019b0 <HAL_TIM_PWM_Start+0x88>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001952:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001956:	d032      	beq.n	80019be <HAL_TIM_PWM_Start+0x96>
 8001958:	4a24      	ldr	r2, [pc, #144]	; (80019ec <HAL_TIM_PWM_Start+0xc4>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d02f      	beq.n	80019be <HAL_TIM_PWM_Start+0x96>
 800195e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001962:	4293      	cmp	r3, r2
 8001964:	d02b      	beq.n	80019be <HAL_TIM_PWM_Start+0x96>
    __HAL_TIM_ENABLE(htim);
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	f042 0201 	orr.w	r2, r2, #1
 800196c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800196e:	2000      	movs	r0, #0
 8001970:	e02f      	b.n	80019d2 <HAL_TIM_PWM_Start+0xaa>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001972:	2904      	cmp	r1, #4
 8001974:	d00a      	beq.n	800198c <HAL_TIM_PWM_Start+0x64>
 8001976:	2908      	cmp	r1, #8
 8001978:	d011      	beq.n	800199e <HAL_TIM_PWM_Start+0x76>
 800197a:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800197e:	b2d2      	uxtb	r2, r2
 8001980:	2a01      	cmp	r2, #1
 8001982:	d12d      	bne.n	80019e0 <HAL_TIM_PWM_Start+0xb8>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001984:	2202      	movs	r2, #2
 8001986:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
 800198a:	e7d9      	b.n	8001940 <HAL_TIM_PWM_Start+0x18>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800198c:	f890 203f 	ldrb.w	r2, [r0, #63]	; 0x3f
 8001990:	b2d2      	uxtb	r2, r2
 8001992:	2a01      	cmp	r2, #1
 8001994:	d120      	bne.n	80019d8 <HAL_TIM_PWM_Start+0xb0>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001996:	2202      	movs	r2, #2
 8001998:	f880 203f 	strb.w	r2, [r0, #63]	; 0x3f
 800199c:	e7d0      	b.n	8001940 <HAL_TIM_PWM_Start+0x18>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800199e:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 80019a2:	b2d2      	uxtb	r2, r2
 80019a4:	2a01      	cmp	r2, #1
 80019a6:	d119      	bne.n	80019dc <HAL_TIM_PWM_Start+0xb4>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80019a8:	2202      	movs	r2, #2
 80019aa:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
 80019ae:	e7c7      	b.n	8001940 <HAL_TIM_PWM_Start+0x18>
    __HAL_TIM_MOE_ENABLE(htim);
 80019b0:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80019b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019b6:	6453      	str	r3, [r2, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019b8:	6823      	ldr	r3, [r4, #0]
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d1c9      	bne.n	8001952 <HAL_TIM_PWM_Start+0x2a>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019be:	689a      	ldr	r2, [r3, #8]
 80019c0:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019c4:	2a06      	cmp	r2, #6
 80019c6:	d00d      	beq.n	80019e4 <HAL_TIM_PWM_Start+0xbc>
      __HAL_TIM_ENABLE(htim);
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	f042 0201 	orr.w	r2, r2, #1
 80019ce:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80019d0:	2000      	movs	r0, #0
}
 80019d2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80019d4:	2001      	movs	r0, #1
 80019d6:	e7fc      	b.n	80019d2 <HAL_TIM_PWM_Start+0xaa>
 80019d8:	2001      	movs	r0, #1
 80019da:	e7fa      	b.n	80019d2 <HAL_TIM_PWM_Start+0xaa>
 80019dc:	2001      	movs	r0, #1
 80019de:	e7f8      	b.n	80019d2 <HAL_TIM_PWM_Start+0xaa>
 80019e0:	2001      	movs	r0, #1
 80019e2:	e7f6      	b.n	80019d2 <HAL_TIM_PWM_Start+0xaa>
  return HAL_OK;
 80019e4:	2000      	movs	r0, #0
 80019e6:	e7f4      	b.n	80019d2 <HAL_TIM_PWM_Start+0xaa>
 80019e8:	40012c00 	.word	0x40012c00
 80019ec:	40000400 	.word	0x40000400

080019f0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80019f0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d02b      	beq.n	8001a50 <HAL_TIMEx_MasterConfigSynchronization+0x60>
{
 80019f8:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 80019fa:	2301      	movs	r3, #1
 80019fc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a00:	2302      	movs	r3, #2
 8001a02:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001a06:	6804      	ldr	r4, [r0, #0]
 8001a08:	6863      	ldr	r3, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001a0a:	68a2      	ldr	r2, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001a0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001a10:	680d      	ldr	r5, [r1, #0]
 8001a12:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001a14:	6063      	str	r3, [r4, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a16:	6803      	ldr	r3, [r0, #0]
 8001a18:	4c0e      	ldr	r4, [pc, #56]	; (8001a54 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8001a1a:	42a3      	cmp	r3, r4
 8001a1c:	d00a      	beq.n	8001a34 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8001a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a22:	d007      	beq.n	8001a34 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8001a24:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8001a28:	42a3      	cmp	r3, r4
 8001a2a:	d003      	beq.n	8001a34 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8001a2c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001a30:	42a3      	cmp	r3, r4
 8001a32:	d104      	bne.n	8001a3e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001a34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001a38:	6849      	ldr	r1, [r1, #4]
 8001a3a:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001a3c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001a44:	2300      	movs	r3, #0
 8001a46:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8001a4a:	4618      	mov	r0, r3
}
 8001a4c:	bc30      	pop	{r4, r5}
 8001a4e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8001a50:	2002      	movs	r0, #2
}
 8001a52:	4770      	bx	lr
 8001a54:	40012c00 	.word	0x40012c00

08001a58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001a58:	b510      	push	{r4, lr}
 8001a5a:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a5c:	6802      	ldr	r2, [r0, #0]
 8001a5e:	6913      	ldr	r3, [r2, #16]
 8001a60:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a64:	68c1      	ldr	r1, [r0, #12]
 8001a66:	430b      	orrs	r3, r1
 8001a68:	6113      	str	r3, [r2, #16]
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
  MODIFY_REG(huart->Instance->CR1,
 8001a6a:	6801      	ldr	r1, [r0, #0]
 8001a6c:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001a6e:	6883      	ldr	r3, [r0, #8]
 8001a70:	6900      	ldr	r0, [r0, #16]
 8001a72:	4303      	orrs	r3, r0
 8001a74:	6960      	ldr	r0, [r4, #20]
 8001a76:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8001a78:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8001a7c:	f022 020c 	bic.w	r2, r2, #12
 8001a80:	4313      	orrs	r3, r2
 8001a82:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001a84:	6822      	ldr	r2, [r4, #0]
 8001a86:	6953      	ldr	r3, [r2, #20]
 8001a88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a8c:	69a1      	ldr	r1, [r4, #24]
 8001a8e:	430b      	orrs	r3, r1
 8001a90:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 8001a92:	6822      	ldr	r2, [r4, #0]
 8001a94:	4b10      	ldr	r3, [pc, #64]	; (8001ad8 <UART_SetConfig+0x80>)
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d01a      	beq.n	8001ad0 <UART_SetConfig+0x78>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001a9a:	f7ff fcff 	bl	800149c <HAL_RCC_GetPCLK1Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001a9e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001aa2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001aa6:	6863      	ldr	r3, [r4, #4]
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001aae:	6824      	ldr	r4, [r4, #0]
 8001ab0:	480a      	ldr	r0, [pc, #40]	; (8001adc <UART_SetConfig+0x84>)
 8001ab2:	fba0 2103 	umull	r2, r1, r0, r3
 8001ab6:	0949      	lsrs	r1, r1, #5
 8001ab8:	2264      	movs	r2, #100	; 0x64
 8001aba:	fb02 3311 	mls	r3, r2, r1, r3
 8001abe:	011b      	lsls	r3, r3, #4
 8001ac0:	3332      	adds	r3, #50	; 0x32
 8001ac2:	fba0 2303 	umull	r2, r3, r0, r3
 8001ac6:	0109      	lsls	r1, r1, #4
 8001ac8:	eb01 1353 	add.w	r3, r1, r3, lsr #5
 8001acc:	60a3      	str	r3, [r4, #8]
#endif /* USART_CR1_OVER8 */
}
 8001ace:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8001ad0:	f7ff fcf4 	bl	80014bc <HAL_RCC_GetPCLK2Freq>
 8001ad4:	e7e3      	b.n	8001a9e <UART_SetConfig+0x46>
 8001ad6:	bf00      	nop
 8001ad8:	40013800 	.word	0x40013800
 8001adc:	51eb851f 	.word	0x51eb851f

08001ae0 <HAL_UART_Init>:
  if (huart == NULL)
 8001ae0:	b358      	cbz	r0, 8001b3a <HAL_UART_Init+0x5a>
{
 8001ae2:	b510      	push	{r4, lr}
 8001ae4:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8001ae6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001aea:	b30b      	cbz	r3, 8001b30 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8001aec:	2324      	movs	r3, #36	; 0x24
 8001aee:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001af2:	6822      	ldr	r2, [r4, #0]
 8001af4:	68d3      	ldr	r3, [r2, #12]
 8001af6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001afa:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001afc:	4620      	mov	r0, r4
 8001afe:	f7ff ffab 	bl	8001a58 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b02:	6822      	ldr	r2, [r4, #0]
 8001b04:	6913      	ldr	r3, [r2, #16]
 8001b06:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001b0a:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b0c:	6822      	ldr	r2, [r4, #0]
 8001b0e:	6953      	ldr	r3, [r2, #20]
 8001b10:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001b14:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8001b16:	6822      	ldr	r2, [r4, #0]
 8001b18:	68d3      	ldr	r3, [r2, #12]
 8001b1a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b1e:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b20:	2000      	movs	r0, #0
 8001b22:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001b24:	2320      	movs	r3, #32
 8001b26:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001b2a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8001b2e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001b30:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001b34:	f7fe fe90 	bl	8000858 <HAL_UART_MspInit>
 8001b38:	e7d8      	b.n	8001aec <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8001b3a:	2001      	movs	r0, #1
}
 8001b3c:	4770      	bx	lr

08001b3e <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001b3e:	b084      	sub	sp, #16
 8001b40:	a801      	add	r0, sp, #4
 8001b42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8001b46:	2000      	movs	r0, #0
 8001b48:	b004      	add	sp, #16
 8001b4a:	4770      	bx	lr

08001b4c <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8001b4c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8001b50:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001b54:	045b      	lsls	r3, r3, #17
 8001b56:	0c5b      	lsrs	r3, r3, #17
 8001b58:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8001b5c:	2000      	movs	r0, #0
 8001b5e:	4770      	bx	lr

08001b60 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001b60:	2000      	movs	r0, #0
 8001b62:	4770      	bx	lr

08001b64 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001b64:	b084      	sub	sp, #16
 8001b66:	b410      	push	{r4}
 8001b68:	4604      	mov	r4, r0
 8001b6a:	a802      	add	r0, sp, #8
 8001b6c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8001b70:	2301      	movs	r3, #1
 8001b72:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8001b76:	2000      	movs	r0, #0
 8001b78:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8001b7c:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8001b80:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50

  return HAL_OK;
}
 8001b84:	bc10      	pop	{r4}
 8001b86:	b004      	add	sp, #16
 8001b88:	4770      	bx	lr

08001b8a <USB_DevDisconnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8001b8a:	2000      	movs	r0, #0
 8001b8c:	4770      	bx	lr
	...

08001b90 <__libc_init_array>:
 8001b90:	b570      	push	{r4, r5, r6, lr}
 8001b92:	2600      	movs	r6, #0
 8001b94:	4d0c      	ldr	r5, [pc, #48]	; (8001bc8 <__libc_init_array+0x38>)
 8001b96:	4c0d      	ldr	r4, [pc, #52]	; (8001bcc <__libc_init_array+0x3c>)
 8001b98:	1b64      	subs	r4, r4, r5
 8001b9a:	10a4      	asrs	r4, r4, #2
 8001b9c:	42a6      	cmp	r6, r4
 8001b9e:	d109      	bne.n	8001bb4 <__libc_init_array+0x24>
 8001ba0:	f000 f8a8 	bl	8001cf4 <_init>
 8001ba4:	2600      	movs	r6, #0
 8001ba6:	4d0a      	ldr	r5, [pc, #40]	; (8001bd0 <__libc_init_array+0x40>)
 8001ba8:	4c0a      	ldr	r4, [pc, #40]	; (8001bd4 <__libc_init_array+0x44>)
 8001baa:	1b64      	subs	r4, r4, r5
 8001bac:	10a4      	asrs	r4, r4, #2
 8001bae:	42a6      	cmp	r6, r4
 8001bb0:	d105      	bne.n	8001bbe <__libc_init_array+0x2e>
 8001bb2:	bd70      	pop	{r4, r5, r6, pc}
 8001bb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8001bb8:	4798      	blx	r3
 8001bba:	3601      	adds	r6, #1
 8001bbc:	e7ee      	b.n	8001b9c <__libc_init_array+0xc>
 8001bbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8001bc2:	4798      	blx	r3
 8001bc4:	3601      	adds	r6, #1
 8001bc6:	e7f2      	b.n	8001bae <__libc_init_array+0x1e>
 8001bc8:	08001d38 	.word	0x08001d38
 8001bcc:	08001d38 	.word	0x08001d38
 8001bd0:	08001d38 	.word	0x08001d38
 8001bd4:	08001d3c 	.word	0x08001d3c

08001bd8 <malloc>:
 8001bd8:	4b02      	ldr	r3, [pc, #8]	; (8001be4 <malloc+0xc>)
 8001bda:	4601      	mov	r1, r0
 8001bdc:	6818      	ldr	r0, [r3, #0]
 8001bde:	f000 b803 	b.w	8001be8 <_malloc_r>
 8001be2:	bf00      	nop
 8001be4:	2000000c 	.word	0x2000000c

08001be8 <_malloc_r>:
 8001be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bea:	1ccd      	adds	r5, r1, #3
 8001bec:	f025 0503 	bic.w	r5, r5, #3
 8001bf0:	3508      	adds	r5, #8
 8001bf2:	2d0c      	cmp	r5, #12
 8001bf4:	bf38      	it	cc
 8001bf6:	250c      	movcc	r5, #12
 8001bf8:	2d00      	cmp	r5, #0
 8001bfa:	4606      	mov	r6, r0
 8001bfc:	db01      	blt.n	8001c02 <_malloc_r+0x1a>
 8001bfe:	42a9      	cmp	r1, r5
 8001c00:	d903      	bls.n	8001c0a <_malloc_r+0x22>
 8001c02:	230c      	movs	r3, #12
 8001c04:	6033      	str	r3, [r6, #0]
 8001c06:	2000      	movs	r0, #0
 8001c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c0a:	f000 f857 	bl	8001cbc <__malloc_lock>
 8001c0e:	4921      	ldr	r1, [pc, #132]	; (8001c94 <_malloc_r+0xac>)
 8001c10:	680a      	ldr	r2, [r1, #0]
 8001c12:	4614      	mov	r4, r2
 8001c14:	b99c      	cbnz	r4, 8001c3e <_malloc_r+0x56>
 8001c16:	4f20      	ldr	r7, [pc, #128]	; (8001c98 <_malloc_r+0xb0>)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	b923      	cbnz	r3, 8001c26 <_malloc_r+0x3e>
 8001c1c:	4621      	mov	r1, r4
 8001c1e:	4630      	mov	r0, r6
 8001c20:	f000 f83c 	bl	8001c9c <_sbrk_r>
 8001c24:	6038      	str	r0, [r7, #0]
 8001c26:	4629      	mov	r1, r5
 8001c28:	4630      	mov	r0, r6
 8001c2a:	f000 f837 	bl	8001c9c <_sbrk_r>
 8001c2e:	1c43      	adds	r3, r0, #1
 8001c30:	d123      	bne.n	8001c7a <_malloc_r+0x92>
 8001c32:	230c      	movs	r3, #12
 8001c34:	4630      	mov	r0, r6
 8001c36:	6033      	str	r3, [r6, #0]
 8001c38:	f000 f846 	bl	8001cc8 <__malloc_unlock>
 8001c3c:	e7e3      	b.n	8001c06 <_malloc_r+0x1e>
 8001c3e:	6823      	ldr	r3, [r4, #0]
 8001c40:	1b5b      	subs	r3, r3, r5
 8001c42:	d417      	bmi.n	8001c74 <_malloc_r+0x8c>
 8001c44:	2b0b      	cmp	r3, #11
 8001c46:	d903      	bls.n	8001c50 <_malloc_r+0x68>
 8001c48:	6023      	str	r3, [r4, #0]
 8001c4a:	441c      	add	r4, r3
 8001c4c:	6025      	str	r5, [r4, #0]
 8001c4e:	e004      	b.n	8001c5a <_malloc_r+0x72>
 8001c50:	6863      	ldr	r3, [r4, #4]
 8001c52:	42a2      	cmp	r2, r4
 8001c54:	bf0c      	ite	eq
 8001c56:	600b      	streq	r3, [r1, #0]
 8001c58:	6053      	strne	r3, [r2, #4]
 8001c5a:	4630      	mov	r0, r6
 8001c5c:	f000 f834 	bl	8001cc8 <__malloc_unlock>
 8001c60:	f104 000b 	add.w	r0, r4, #11
 8001c64:	1d23      	adds	r3, r4, #4
 8001c66:	f020 0007 	bic.w	r0, r0, #7
 8001c6a:	1ac2      	subs	r2, r0, r3
 8001c6c:	d0cc      	beq.n	8001c08 <_malloc_r+0x20>
 8001c6e:	1a1b      	subs	r3, r3, r0
 8001c70:	50a3      	str	r3, [r4, r2]
 8001c72:	e7c9      	b.n	8001c08 <_malloc_r+0x20>
 8001c74:	4622      	mov	r2, r4
 8001c76:	6864      	ldr	r4, [r4, #4]
 8001c78:	e7cc      	b.n	8001c14 <_malloc_r+0x2c>
 8001c7a:	1cc4      	adds	r4, r0, #3
 8001c7c:	f024 0403 	bic.w	r4, r4, #3
 8001c80:	42a0      	cmp	r0, r4
 8001c82:	d0e3      	beq.n	8001c4c <_malloc_r+0x64>
 8001c84:	1a21      	subs	r1, r4, r0
 8001c86:	4630      	mov	r0, r6
 8001c88:	f000 f808 	bl	8001c9c <_sbrk_r>
 8001c8c:	3001      	adds	r0, #1
 8001c8e:	d1dd      	bne.n	8001c4c <_malloc_r+0x64>
 8001c90:	e7cf      	b.n	8001c32 <_malloc_r+0x4a>
 8001c92:	bf00      	nop
 8001c94:	20000090 	.word	0x20000090
 8001c98:	20000094 	.word	0x20000094

08001c9c <_sbrk_r>:
 8001c9c:	b538      	push	{r3, r4, r5, lr}
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	4d05      	ldr	r5, [pc, #20]	; (8001cb8 <_sbrk_r+0x1c>)
 8001ca2:	4604      	mov	r4, r0
 8001ca4:	4608      	mov	r0, r1
 8001ca6:	602b      	str	r3, [r5, #0]
 8001ca8:	f000 f816 	bl	8001cd8 <_sbrk>
 8001cac:	1c43      	adds	r3, r0, #1
 8001cae:	d102      	bne.n	8001cb6 <_sbrk_r+0x1a>
 8001cb0:	682b      	ldr	r3, [r5, #0]
 8001cb2:	b103      	cbz	r3, 8001cb6 <_sbrk_r+0x1a>
 8001cb4:	6023      	str	r3, [r4, #0]
 8001cb6:	bd38      	pop	{r3, r4, r5, pc}
 8001cb8:	2000049c 	.word	0x2000049c

08001cbc <__malloc_lock>:
 8001cbc:	4801      	ldr	r0, [pc, #4]	; (8001cc4 <__malloc_lock+0x8>)
 8001cbe:	f000 b809 	b.w	8001cd4 <__retarget_lock_acquire_recursive>
 8001cc2:	bf00      	nop
 8001cc4:	200004a4 	.word	0x200004a4

08001cc8 <__malloc_unlock>:
 8001cc8:	4801      	ldr	r0, [pc, #4]	; (8001cd0 <__malloc_unlock+0x8>)
 8001cca:	f000 b804 	b.w	8001cd6 <__retarget_lock_release_recursive>
 8001cce:	bf00      	nop
 8001cd0:	200004a4 	.word	0x200004a4

08001cd4 <__retarget_lock_acquire_recursive>:
 8001cd4:	4770      	bx	lr

08001cd6 <__retarget_lock_release_recursive>:
 8001cd6:	4770      	bx	lr

08001cd8 <_sbrk>:
 8001cd8:	4b04      	ldr	r3, [pc, #16]	; (8001cec <_sbrk+0x14>)
 8001cda:	4602      	mov	r2, r0
 8001cdc:	6819      	ldr	r1, [r3, #0]
 8001cde:	b909      	cbnz	r1, 8001ce4 <_sbrk+0xc>
 8001ce0:	4903      	ldr	r1, [pc, #12]	; (8001cf0 <_sbrk+0x18>)
 8001ce2:	6019      	str	r1, [r3, #0]
 8001ce4:	6818      	ldr	r0, [r3, #0]
 8001ce6:	4402      	add	r2, r0
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	4770      	bx	lr
 8001cec:	20000098 	.word	0x20000098
 8001cf0:	200004b0 	.word	0x200004b0

08001cf4 <_init>:
 8001cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cf6:	bf00      	nop
 8001cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cfa:	bc08      	pop	{r3}
 8001cfc:	469e      	mov	lr, r3
 8001cfe:	4770      	bx	lr

08001d00 <_fini>:
 8001d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d02:	bf00      	nop
 8001d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d06:	bc08      	pop	{r3}
 8001d08:	469e      	mov	lr, r3
 8001d0a:	4770      	bx	lr
